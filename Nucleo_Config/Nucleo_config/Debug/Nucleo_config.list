
Nucleo_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005814  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080058d0  080058d0  000158d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059c0  080059c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080059c0  080059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059c8  080059c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c8  080059c8  000159c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059cc  080059cc  000159cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080059d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  08005a40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08005a40  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ad0  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002495  00000000  00000000  00031b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00034000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00034ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184cd  00000000  00000000  00035ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ce6  00000000  00000000  0004e1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a059b  00000000  00000000  0005fe9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100436  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000396c  00000000  00000000  00100488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080058b8 	.word	0x080058b8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080058b8 	.word	0x080058b8

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	469b      	mov	fp, r3
 800047a:	d433      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047c:	465a      	mov	r2, fp
 800047e:	4653      	mov	r3, sl
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83a      	bhi.n	8000506 <__udivmoddi4+0xc2>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e078      	b.n	8000588 <__udivmoddi4+0x144>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e075      	b.n	800058e <__udivmoddi4+0x14a>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e028      	b.n	800050e <__udivmoddi4+0xca>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	2320      	movs	r3, #32
 80004e8:	1a9b      	subs	r3, r3, r2
 80004ea:	4652      	mov	r2, sl
 80004ec:	40da      	lsrs	r2, r3
 80004ee:	4641      	mov	r1, r8
 80004f0:	0013      	movs	r3, r2
 80004f2:	464a      	mov	r2, r9
 80004f4:	408a      	lsls	r2, r1
 80004f6:	0017      	movs	r7, r2
 80004f8:	4642      	mov	r2, r8
 80004fa:	431f      	orrs	r7, r3
 80004fc:	4653      	mov	r3, sl
 80004fe:	4093      	lsls	r3, r2
 8000500:	001e      	movs	r6, r3
 8000502:	42af      	cmp	r7, r5
 8000504:	d9c4      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	4643      	mov	r3, r8
 8000510:	2b00      	cmp	r3, #0
 8000512:	d0d9      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000514:	07fb      	lsls	r3, r7, #31
 8000516:	0872      	lsrs	r2, r6, #1
 8000518:	431a      	orrs	r2, r3
 800051a:	4646      	mov	r6, r8
 800051c:	087b      	lsrs	r3, r7, #1
 800051e:	e00e      	b.n	800053e <__udivmoddi4+0xfa>
 8000520:	42ab      	cmp	r3, r5
 8000522:	d101      	bne.n	8000528 <__udivmoddi4+0xe4>
 8000524:	42a2      	cmp	r2, r4
 8000526:	d80c      	bhi.n	8000542 <__udivmoddi4+0xfe>
 8000528:	1aa4      	subs	r4, r4, r2
 800052a:	419d      	sbcs	r5, r3
 800052c:	2001      	movs	r0, #1
 800052e:	1924      	adds	r4, r4, r4
 8000530:	416d      	adcs	r5, r5
 8000532:	2100      	movs	r1, #0
 8000534:	3e01      	subs	r6, #1
 8000536:	1824      	adds	r4, r4, r0
 8000538:	414d      	adcs	r5, r1
 800053a:	2e00      	cmp	r6, #0
 800053c:	d006      	beq.n	800054c <__udivmoddi4+0x108>
 800053e:	42ab      	cmp	r3, r5
 8000540:	d9ee      	bls.n	8000520 <__udivmoddi4+0xdc>
 8000542:	3e01      	subs	r6, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2e00      	cmp	r6, #0
 800054a:	d1f8      	bne.n	800053e <__udivmoddi4+0xfa>
 800054c:	9800      	ldr	r0, [sp, #0]
 800054e:	9901      	ldr	r1, [sp, #4]
 8000550:	465b      	mov	r3, fp
 8000552:	1900      	adds	r0, r0, r4
 8000554:	4169      	adcs	r1, r5
 8000556:	2b00      	cmp	r3, #0
 8000558:	db24      	blt.n	80005a4 <__udivmoddi4+0x160>
 800055a:	002b      	movs	r3, r5
 800055c:	465a      	mov	r2, fp
 800055e:	4644      	mov	r4, r8
 8000560:	40d3      	lsrs	r3, r2
 8000562:	002a      	movs	r2, r5
 8000564:	40e2      	lsrs	r2, r4
 8000566:	001c      	movs	r4, r3
 8000568:	465b      	mov	r3, fp
 800056a:	0015      	movs	r5, r2
 800056c:	2b00      	cmp	r3, #0
 800056e:	db2a      	blt.n	80005c6 <__udivmoddi4+0x182>
 8000570:	0026      	movs	r6, r4
 8000572:	409e      	lsls	r6, r3
 8000574:	0033      	movs	r3, r6
 8000576:	0026      	movs	r6, r4
 8000578:	4647      	mov	r7, r8
 800057a:	40be      	lsls	r6, r7
 800057c:	0032      	movs	r2, r6
 800057e:	1a80      	subs	r0, r0, r2
 8000580:	4199      	sbcs	r1, r3
 8000582:	9000      	str	r0, [sp, #0]
 8000584:	9101      	str	r1, [sp, #4]
 8000586:	e79f      	b.n	80004c8 <__udivmoddi4+0x84>
 8000588:	42a3      	cmp	r3, r4
 800058a:	d8bc      	bhi.n	8000506 <__udivmoddi4+0xc2>
 800058c:	e783      	b.n	8000496 <__udivmoddi4+0x52>
 800058e:	4642      	mov	r2, r8
 8000590:	2320      	movs	r3, #32
 8000592:	2100      	movs	r1, #0
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	2200      	movs	r2, #0
 8000598:	9100      	str	r1, [sp, #0]
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	2201      	movs	r2, #1
 800059e:	40da      	lsrs	r2, r3
 80005a0:	9201      	str	r2, [sp, #4]
 80005a2:	e786      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	4646      	mov	r6, r8
 80005ae:	409a      	lsls	r2, r3
 80005b0:	0023      	movs	r3, r4
 80005b2:	40f3      	lsrs	r3, r6
 80005b4:	4644      	mov	r4, r8
 80005b6:	4313      	orrs	r3, r2
 80005b8:	002a      	movs	r2, r5
 80005ba:	40e2      	lsrs	r2, r4
 80005bc:	001c      	movs	r4, r3
 80005be:	465b      	mov	r3, fp
 80005c0:	0015      	movs	r5, r2
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	dad4      	bge.n	8000570 <__udivmoddi4+0x12c>
 80005c6:	4642      	mov	r2, r8
 80005c8:	002f      	movs	r7, r5
 80005ca:	2320      	movs	r3, #32
 80005cc:	0026      	movs	r6, r4
 80005ce:	4097      	lsls	r7, r2
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	40de      	lsrs	r6, r3
 80005d4:	003b      	movs	r3, r7
 80005d6:	4333      	orrs	r3, r6
 80005d8:	e7cd      	b.n	8000576 <__udivmoddi4+0x132>
 80005da:	46c0      	nop			; (mov r8, r8)

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	; (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b090      	sub	sp, #64	; 0x40
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	uint8_t data[50];
	uint16_t size = 0;
 8000638:	213e      	movs	r1, #62	; 0x3e
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2200      	movs	r2, #0
 800063e:	801a      	strh	r2, [r3, #0]
	++cnt;
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800064a:	801a      	strh	r2, [r3, #0]

	//size = sprintf(data, "Liczba wyslanych wiadomosci: %d.\n\r", cnt);
	HAL_UART_Transmit_IT(&huart2, data, size);
 800064c:	187b      	adds	r3, r7, r1
 800064e:	881a      	ldrh	r2, [r3, #0]
 8000650:	230c      	movs	r3, #12
 8000652:	18f9      	adds	r1, r7, r3
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000656:	0018      	movs	r0, r3
 8000658:	f002 fab2 	bl	8002bc0 <HAL_UART_Transmit_IT>
}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b010      	add	sp, #64	; 0x40
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000172 	.word	0x20000172
 8000668:	200000d8 	.word	0x200000d8

0800066c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b08e      	sub	sp, #56	; 0x38
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	uint8_t Data[40]; // Tablica przechowujaca wysylana wiadomosc.
	uint16_t size = 0; // Rozmiar wysylanej wiadomosci
 8000674:	2436      	movs	r4, #54	; 0x36
 8000676:	193b      	adds	r3, r7, r4
 8000678:	2200      	movs	r2, #0
 800067a:	801a      	strh	r2, [r3, #0]

	size = sprintf(Data, "Odebrana wiadomosc: %s\n\r",Received);
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <HAL_UART_RxCpltCallback+0x48>)
 800067e:	490e      	ldr	r1, [pc, #56]	; (80006b8 <HAL_UART_RxCpltCallback+0x4c>)
 8000680:	250c      	movs	r5, #12
 8000682:	197b      	adds	r3, r7, r5
 8000684:	0018      	movs	r0, r3
 8000686:	f004 fcad 	bl	8004fe4 <siprintf>
 800068a:	0002      	movs	r2, r0
 800068c:	193b      	adds	r3, r7, r4
 800068e:	801a      	strh	r2, [r3, #0]

	HAL_UART_Transmit_IT(&huart2, Data, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 8000690:	193b      	adds	r3, r7, r4
 8000692:	881a      	ldrh	r2, [r3, #0]
 8000694:	1979      	adds	r1, r7, r5
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <HAL_UART_RxCpltCallback+0x50>)
 8000698:	0018      	movs	r0, r3
 800069a:	f002 fa91 	bl	8002bc0 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, Received, 10); // Ponowne włączenie nasłuchiwania
 800069e:	4905      	ldr	r1, [pc, #20]	; (80006b4 <HAL_UART_RxCpltCallback+0x48>)
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_UART_RxCpltCallback+0x50>)
 80006a2:	220a      	movs	r2, #10
 80006a4:	0018      	movs	r0, r3
 80006a6:	f002 fb47 	bl	8002d38 <HAL_UART_Receive_IT>
}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b00e      	add	sp, #56	; 0x38
 80006b0:	bdb0      	pop	{r4, r5, r7, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	20000168 	.word	0x20000168
 80006b8:	080058d0 	.word	0x080058d0
 80006bc:	200000d8 	.word	0x200000d8

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c4:	f000 fb18 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c8:	f000 f81c 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006cc:	f000 f91e 	bl	800090c <MX_GPIO_Init>
  //stat listening sanding callback
  MX_USART2_UART_Init();
 80006d0:	f000 f8ce 	bl	8000870 <MX_USART2_UART_Init>
  //start timer
  MX_TIM2_Init();
 80006d4:	f000 f876 	bl	80007c4 <MX_TIM2_Init>
  //start listening receiving callback
  HAL_UART_Receive_IT(&huart2, &Received, 10);
 80006d8:	4907      	ldr	r1, [pc, #28]	; (80006f8 <main+0x38>)
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <main+0x3c>)
 80006dc:	220a      	movs	r2, #10
 80006de:	0018      	movs	r0, r3
 80006e0:	f002 fb2a 	bl	8002d38 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <main+0x40>)
 80006e6:	0018      	movs	r0, r3
 80006e8:	f001 fdee 	bl	80022c8 <HAL_TIM_Base_Start_IT>

  mdbus_slave_configure();
 80006ec:	f000 faac 	bl	8000c48 <mdbus_slave_configure>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mdbus_slave_run();
 80006f0:	f000 fa82 	bl	8000bf8 <mdbus_slave_run>
  {
 80006f4:	e7fc      	b.n	80006f0 <main+0x30>
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	20000168 	.word	0x20000168
 80006fc:	200000d8 	.word	0x200000d8
 8000700:	2000008c 	.word	0x2000008c

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b093      	sub	sp, #76	; 0x4c
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	2410      	movs	r4, #16
 800070c:	193b      	adds	r3, r7, r4
 800070e:	0018      	movs	r0, r3
 8000710:	2338      	movs	r3, #56	; 0x38
 8000712:	001a      	movs	r2, r3
 8000714:	2100      	movs	r1, #0
 8000716:	f004 fc5d 	bl	8004fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071a:	003b      	movs	r3, r7
 800071c:	0018      	movs	r0, r3
 800071e:	2310      	movs	r3, #16
 8000720:	001a      	movs	r2, r3
 8000722:	2100      	movs	r1, #0
 8000724:	f004 fc56 	bl	8004fd4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	0018      	movs	r0, r3
 800072e:	f000 feab 	bl	8001488 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000732:	193b      	adds	r3, r7, r4
 8000734:	2202      	movs	r2, #2
 8000736:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	193b      	adds	r3, r7, r4
 800073a:	2280      	movs	r2, #128	; 0x80
 800073c:	0052      	lsls	r2, r2, #1
 800073e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000740:	0021      	movs	r1, r4
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2240      	movs	r2, #64	; 0x40
 800074c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2202      	movs	r2, #2
 8000752:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2202      	movs	r2, #2
 8000758:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2208      	movs	r2, #8
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	0292      	lsls	r2, r2, #10
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	0492      	lsls	r2, r2, #18
 8000774:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	0592      	lsls	r2, r2, #22
 800077c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	187b      	adds	r3, r7, r1
 8000780:	0018      	movs	r0, r3
 8000782:	f000 fecd 	bl	8001520 <HAL_RCC_OscConfig>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800078a:	f000 f90f 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	003b      	movs	r3, r7
 8000790:	2207      	movs	r2, #7
 8000792:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	003b      	movs	r3, r7
 8000796:	2202      	movs	r2, #2
 8000798:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800079a:	003b      	movs	r3, r7
 800079c:	2280      	movs	r2, #128	; 0x80
 800079e:	0112      	lsls	r2, r2, #4
 80007a0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a2:	003b      	movs	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007a8:	003b      	movs	r3, r7
 80007aa:	2101      	movs	r1, #1
 80007ac:	0018      	movs	r0, r3
 80007ae:	f001 f9d1 	bl	8001b54 <HAL_RCC_ClockConfig>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007b6:	f000 f8f9 	bl	80009ac <Error_Handler>
  }
}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b013      	add	sp, #76	; 0x4c
 80007c0:	bd90      	pop	{r4, r7, pc}
	...

080007c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ca:	2310      	movs	r3, #16
 80007cc:	18fb      	adds	r3, r7, r3
 80007ce:	0018      	movs	r0, r3
 80007d0:	2310      	movs	r3, #16
 80007d2:	001a      	movs	r2, r3
 80007d4:	2100      	movs	r1, #0
 80007d6:	f004 fbfd 	bl	8004fd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	0018      	movs	r0, r3
 80007de:	230c      	movs	r3, #12
 80007e0:	001a      	movs	r2, r3
 80007e2:	2100      	movs	r1, #0
 80007e4:	f004 fbf6 	bl	8004fd4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_TIM2_Init+0xa4>)
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	05d2      	lsls	r2, r2, #23
 80007ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_TIM2_Init+0xa4>)
 80007f2:	22fa      	movs	r2, #250	; 0xfa
 80007f4:	0092      	lsls	r2, r2, #2
 80007f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_TIM2_Init+0xa4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_TIM2_Init+0xa4>)
 8000800:	4a1a      	ldr	r2, [pc, #104]	; (800086c <MX_TIM2_Init+0xa8>)
 8000802:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_TIM2_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_TIM2_Init+0xa4>)
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_TIM2_Init+0xa4>)
 8000812:	0018      	movs	r0, r3
 8000814:	f001 fd00 	bl	8002218 <HAL_TIM_Base_Init>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800081c:	f000 f8c6 	bl	80009ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000820:	2110      	movs	r1, #16
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	0152      	lsls	r2, r2, #5
 8000828:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800082a:	187a      	adds	r2, r7, r1
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_TIM2_Init+0xa4>)
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f001 fed7 	bl	80025e4 <HAL_TIM_ConfigClockSource>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800083a:	f000 f8b7 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084a:	1d3a      	adds	r2, r7, #4
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_TIM2_Init+0xa4>)
 800084e:	0011      	movs	r1, r2
 8000850:	0018      	movs	r0, r3
 8000852:	f002 f8d9 	bl	8002a08 <HAL_TIMEx_MasterConfigSynchronization>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800085a:	f000 f8a7 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b008      	add	sp, #32
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	2000008c 	.word	0x2000008c
 800086c:	00008ca0 	.word	0x00008ca0

08000870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000874:	4b23      	ldr	r3, [pc, #140]	; (8000904 <MX_USART2_UART_Init+0x94>)
 8000876:	4a24      	ldr	r2, [pc, #144]	; (8000908 <MX_USART2_UART_Init+0x98>)
 8000878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800087a:	4b22      	ldr	r3, [pc, #136]	; (8000904 <MX_USART2_UART_Init+0x94>)
 800087c:	22e1      	movs	r2, #225	; 0xe1
 800087e:	0252      	lsls	r2, r2, #9
 8000880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b20      	ldr	r3, [pc, #128]	; (8000904 <MX_USART2_UART_Init+0x94>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <MX_USART2_UART_Init+0x94>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_USART2_UART_Init+0x94>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_USART2_UART_Init+0x94>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_USART2_UART_Init+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_USART2_UART_Init+0x94>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_USART2_UART_Init+0x94>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_USART2_UART_Init+0x94>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_USART2_UART_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_USART2_UART_Init+0x94>)
 80008ba:	0018      	movs	r0, r3
 80008bc:	f002 f92a 	bl	8002b14 <HAL_UART_Init>
 80008c0:	1e03      	subs	r3, r0, #0
 80008c2:	d001      	beq.n	80008c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008c4:	f000 f872 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c8:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART2_UART_Init+0x94>)
 80008ca:	2100      	movs	r1, #0
 80008cc:	0018      	movs	r0, r3
 80008ce:	f004 fa77 	bl	8004dc0 <HAL_UARTEx_SetTxFifoThreshold>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008d6:	f000 f869 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_USART2_UART_Init+0x94>)
 80008dc:	2100      	movs	r1, #0
 80008de:	0018      	movs	r0, r3
 80008e0:	f004 faae 	bl	8004e40 <HAL_UARTEx_SetRxFifoThreshold>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d001      	beq.n	80008ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008e8:	f000 f860 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <MX_USART2_UART_Init+0x94>)
 80008ee:	0018      	movs	r0, r3
 80008f0:	f004 fa2c 	bl	8004d4c <HAL_UARTEx_DisableFifoMode>
 80008f4:	1e03      	subs	r3, r0, #0
 80008f6:	d001      	beq.n	80008fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008f8:	f000 f858 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	200000d8 	.word	0x200000d8
 8000908:	40004400 	.word	0x40004400

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b089      	sub	sp, #36	; 0x24
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	240c      	movs	r4, #12
 8000914:	193b      	adds	r3, r7, r4
 8000916:	0018      	movs	r0, r3
 8000918:	2314      	movs	r3, #20
 800091a:	001a      	movs	r2, r3
 800091c:	2100      	movs	r1, #0
 800091e:	f004 fb59 	bl	8004fd4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <MX_GPIO_Init+0x9c>)
 8000924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000926:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <MX_GPIO_Init+0x9c>)
 8000928:	2104      	movs	r1, #4
 800092a:	430a      	orrs	r2, r1
 800092c:	635a      	str	r2, [r3, #52]	; 0x34
 800092e:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <MX_GPIO_Init+0x9c>)
 8000930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000932:	2204      	movs	r2, #4
 8000934:	4013      	ands	r3, r2
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800093a:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_GPIO_Init+0x9c>)
 800093c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_GPIO_Init+0x9c>)
 8000940:	2120      	movs	r1, #32
 8000942:	430a      	orrs	r2, r1
 8000944:	635a      	str	r2, [r3, #52]	; 0x34
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_GPIO_Init+0x9c>)
 8000948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800094a:	2220      	movs	r2, #32
 800094c:	4013      	ands	r3, r2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_GPIO_Init+0x9c>)
 8000954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_GPIO_Init+0x9c>)
 8000958:	2101      	movs	r1, #1
 800095a:	430a      	orrs	r2, r1
 800095c:	635a      	str	r2, [r3, #52]	; 0x34
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_GPIO_Init+0x9c>)
 8000960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000962:	2201      	movs	r2, #1
 8000964:	4013      	ands	r3, r2
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800096a:	23a0      	movs	r3, #160	; 0xa0
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	2200      	movs	r2, #0
 8000970:	2120      	movs	r1, #32
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fd6a 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000978:	0021      	movs	r1, r4
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2220      	movs	r2, #32
 800097e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2201      	movs	r2, #1
 8000984:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2202      	movs	r2, #2
 8000990:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000992:	187a      	adds	r2, r7, r1
 8000994:	23a0      	movs	r3, #160	; 0xa0
 8000996:	05db      	lsls	r3, r3, #23
 8000998:	0011      	movs	r1, r2
 800099a:	0018      	movs	r0, r3
 800099c:	f000 fbf2 	bl	8001184 <HAL_GPIO_Init>

}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b009      	add	sp, #36	; 0x24
 80009a6:	bd90      	pop	{r4, r7, pc}
 80009a8:	40021000 	.word	0x40021000

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_MspInit+0x4c>)
 80009c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <HAL_MspInit+0x4c>)
 80009c4:	2101      	movs	r1, #1
 80009c6:	430a      	orrs	r2, r1
 80009c8:	641a      	str	r2, [r3, #64]	; 0x40
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	2201      	movs	r2, #1
 80009d0:	4013      	ands	r3, r2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <HAL_MspInit+0x4c>)
 80009d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <HAL_MspInit+0x4c>)
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	0549      	lsls	r1, r1, #21
 80009e0:	430a      	orrs	r2, r1
 80009e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <HAL_MspInit+0x4c>)
 80009e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	055b      	lsls	r3, r3, #21
 80009ec:	4013      	ands	r3, r2
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80009f2:	23c0      	movs	r3, #192	; 0xc0
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fa04 	bl	8000e04 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40021000 	.word	0x40021000

08000a08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d113      	bne.n	8000a44 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_TIM_Base_MspInit+0x44>)
 8000a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <HAL_TIM_Base_MspInit+0x44>)
 8000a22:	2101      	movs	r1, #1
 8000a24:	430a      	orrs	r2, r1
 8000a26:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_TIM_Base_MspInit+0x44>)
 8000a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4013      	ands	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	200f      	movs	r0, #15
 8000a3a:	f000 faa5 	bl	8000f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a3e:	200f      	movs	r0, #15
 8000a40:	f000 fab7 	bl	8000fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b004      	add	sp, #16
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40021000 	.word	0x40021000

08000a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b097      	sub	sp, #92	; 0x5c
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	2344      	movs	r3, #68	; 0x44
 8000a5a:	18fb      	adds	r3, r7, r3
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	2314      	movs	r3, #20
 8000a60:	001a      	movs	r2, r3
 8000a62:	2100      	movs	r1, #0
 8000a64:	f004 fab6 	bl	8004fd4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a68:	2410      	movs	r4, #16
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	2334      	movs	r3, #52	; 0x34
 8000a70:	001a      	movs	r2, r3
 8000a72:	2100      	movs	r1, #0
 8000a74:	f004 faae 	bl	8004fd4 <memset>
  if(huart->Instance==USART2)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a26      	ldr	r2, [pc, #152]	; (8000b18 <HAL_UART_MspInit+0xc8>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d146      	bne.n	8000b10 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2202      	movs	r2, #2
 8000a86:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	0018      	movs	r0, r3
 8000a92:	f001 fa09 	bl	8001ea8 <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	1e03      	subs	r3, r0, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a9a:	f7ff ff87 	bl	80009ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <HAL_UART_MspInit+0xcc>)
 8000aa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <HAL_UART_MspInit+0xcc>)
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	0289      	lsls	r1, r1, #10
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	63da      	str	r2, [r3, #60]	; 0x3c
 8000aac:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <HAL_UART_MspInit+0xcc>)
 8000aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	029b      	lsls	r3, r3, #10
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_UART_MspInit+0xcc>)
 8000abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_UART_MspInit+0xcc>)
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_UART_MspInit+0xcc>)
 8000ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aca:	2201      	movs	r2, #1
 8000acc:	4013      	ands	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000ad2:	2144      	movs	r1, #68	; 0x44
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2202      	movs	r2, #2
 8000ade:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2201      	movs	r2, #1
 8000af0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	187a      	adds	r2, r7, r1
 8000af4:	23a0      	movs	r3, #160	; 0xa0
 8000af6:	05db      	lsls	r3, r3, #23
 8000af8:	0011      	movs	r1, r2
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 fb42 	bl	8001184 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2100      	movs	r1, #0
 8000b04:	201c      	movs	r0, #28
 8000b06:	f000 fa3f 	bl	8000f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b0a:	201c      	movs	r0, #28
 8000b0c:	f000 fa51 	bl	8000fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b017      	add	sp, #92	; 0x5c
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	40004400 	.word	0x40004400
 8000b1c:	40021000 	.word	0x40021000

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b44:	f000 f942 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <TIM2_IRQHandler+0x14>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f001 fc12 	bl	8002380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	2000008c 	.word	0x2000008c

08000b68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <USART2_IRQHandler+0x14>)
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f002 f94c 	bl	8002e0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	200000d8 	.word	0x200000d8

08000b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <_sbrk+0x5c>)
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <_sbrk+0x60>)
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <_sbrk+0x64>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <_sbrk+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	18d3      	adds	r3, r2, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d207      	bcs.n	8000bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb0:	f004 f9e6 	bl	8004f80 <__errno>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	425b      	negs	r3, r3
 8000bbe:	e009      	b.n	8000bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	18d2      	adds	r2, r2, r3
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <_sbrk+0x64>)
 8000bd0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b006      	add	sp, #24
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20009000 	.word	0x20009000
 8000be0:	00000400 	.word	0x00000400
 8000be4:	20000174 	.word	0x20000174
 8000be8:	20000190 	.word	0x20000190

08000bec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <mdbus_slave_run>:
uint32_t timeout;
mdbus_Packet* currentPacket;
mdbus_State mdbus_state = IDLE;

void mdbus_slave_run()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	switch(mdbus_state)
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <mdbus_slave_run+0x48>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b05      	cmp	r3, #5
 8000c02:	d816      	bhi.n	8000c32 <mdbus_slave_run+0x3a>
 8000c04:	009a      	lsls	r2, r3, #2
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <mdbus_slave_run+0x4c>)
 8000c08:	18d3      	adds	r3, r2, r3
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	469f      	mov	pc, r3
	{
	case IDLE:
		idle();
 8000c0e:	f000 f825 	bl	8000c5c <idle>
		break;
 8000c12:	e011      	b.n	8000c38 <mdbus_slave_run+0x40>
	case EMISSION_START:
		emision_start();
 8000c14:	f000 f827 	bl	8000c66 <emision_start>
		break;
 8000c18:	e00e      	b.n	8000c38 <mdbus_slave_run+0x40>
	case EMISSION:
		emision();
 8000c1a:	f000 f829 	bl	8000c70 <emision>
		break;
 8000c1e:	e00b      	b.n	8000c38 <mdbus_slave_run+0x40>
	case EMISSION_END:
		emision_end();
 8000c20:	f000 f82b 	bl	8000c7a <emision_end>
		break;
 8000c24:	e008      	b.n	8000c38 <mdbus_slave_run+0x40>
	case RECEPTION:
		reception();
 8000c26:	f000 f82d 	bl	8000c84 <reception>
		break;
 8000c2a:	e005      	b.n	8000c38 <mdbus_slave_run+0x40>
	case WAIT_END_OF_FRAME:
		wait_end_of_frame();
 8000c2c:	f000 f82f 	bl	8000c8e <wait_end_of_frame>
		break;
 8000c30:	e002      	b.n	8000c38 <mdbus_slave_run+0x40>
	default:
		bad_mdbus_state();
 8000c32:	f000 f831 	bl	8000c98 <bad_mdbus_state>
		break;
 8000c36:	46c0      	nop			; (mov r8, r8)
	}
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	20000178 	.word	0x20000178
 8000c44:	0800594c 	.word	0x0800594c

08000c48 <mdbus_slave_configure>:
	packet->data = data;
	packet->local_start_adress = local_start_adress;
}

void mdbus_slave_configure()
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	mdbus_state = IDLE;
 8000c4c:	4b02      	ldr	r3, [pc, #8]	; (8000c58 <mdbus_slave_configure+0x10>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000178 	.word	0x20000178

08000c5c <idle>:

void idle()
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <emision_start>:

void emision_start()
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <emision>:

void emision()
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <emision_end>:

void emision_end()
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <reception>:

void reception()
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <wait_end_of_frame>:

void wait_end_of_frame()
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <bad_mdbus_state>:

void bad_mdbus_state()
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ca6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ca8:	f7ff ffa0 	bl	8000bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cae:	490d      	ldr	r1, [pc, #52]	; (8000ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <LoopForever+0xe>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc4:	4c0a      	ldr	r4, [pc, #40]	; (8000cf0 <LoopForever+0x16>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cd2:	f004 f95b 	bl	8004f8c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cd6:	f7ff fcf3 	bl	80006c0 <main>

08000cda <LoopForever>:

LoopForever:
  b LoopForever
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
  ldr   r0, =_estack
 8000cdc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ce8:	080059d0 	.word	0x080059d0
  ldr r2, =_sbss
 8000cec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cf0:	20000190 	.word	0x20000190

08000cf4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC1_COMP_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_Init+0x3c>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_Init+0x3c>)
 8000d0a:	2180      	movs	r1, #128	; 0x80
 8000d0c:	0049      	lsls	r1, r1, #1
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 f810 	bl	8000d38 <HAL_InitTick>
 8000d18:	1e03      	subs	r3, r0, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
 8000d22:	e001      	b.n	8000d28 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d24:	f7ff fe48 	bl	80009b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	781b      	ldrb	r3, [r3, #0]
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40022000 	.word	0x40022000

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d40:	230f      	movs	r3, #15
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_InitTick+0x88>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d02b      	beq.n	8000da8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d50:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <HAL_InitTick+0x8c>)
 8000d52:	681c      	ldr	r4, [r3, #0]
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <HAL_InitTick+0x88>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	0019      	movs	r1, r3
 8000d5a:	23fa      	movs	r3, #250	; 0xfa
 8000d5c:	0098      	lsls	r0, r3, #2
 8000d5e:	f7ff f9db 	bl	8000118 <__udivsi3>
 8000d62:	0003      	movs	r3, r0
 8000d64:	0019      	movs	r1, r3
 8000d66:	0020      	movs	r0, r4
 8000d68:	f7ff f9d6 	bl	8000118 <__udivsi3>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 f92f 	bl	8000fd2 <HAL_SYSTICK_Config>
 8000d74:	1e03      	subs	r3, r0, #0
 8000d76:	d112      	bne.n	8000d9e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d80a      	bhi.n	8000d94 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	2301      	movs	r3, #1
 8000d82:	425b      	negs	r3, r3
 8000d84:	2200      	movs	r2, #0
 8000d86:	0018      	movs	r0, r3
 8000d88:	f000 f8fe 	bl	8000f88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_InitTick+0x90>)
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	e00d      	b.n	8000db0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d94:	230f      	movs	r3, #15
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
 8000d9c:	e008      	b.n	8000db0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d9e:	230f      	movs	r3, #15
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e003      	b.n	8000db0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da8:	230f      	movs	r3, #15
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000db0:	230f      	movs	r3, #15
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	781b      	ldrb	r3, [r3, #0]
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b005      	add	sp, #20
 8000dbc:	bd90      	pop	{r4, r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <HAL_IncTick+0x1c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_IncTick+0x20>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	18d2      	adds	r2, r2, r3
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_IncTick+0x20>)
 8000dde:	601a      	str	r2, [r3, #0]
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	20000008 	.word	0x20000008
 8000dec:	2000017c 	.word	0x2000017c

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <HAL_GetTick+0x10>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	0018      	movs	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	2000017c 	.word	0x2000017c

08000e04 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000e12:	4013      	ands	r3, r2
 8000e14:	0019      	movs	r1, r3
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]
}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b002      	add	sp, #8
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	fffff9ff 	.word	0xfffff9ff

08000e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	0002      	movs	r2, r0
 8000e38:	1dfb      	adds	r3, r7, #7
 8000e3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b7f      	cmp	r3, #127	; 0x7f
 8000e42:	d809      	bhi.n	8000e58 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e44:	1dfb      	adds	r3, r7, #7
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	001a      	movs	r2, r3
 8000e4a:	231f      	movs	r3, #31
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_EnableIRQ+0x30>)
 8000e50:	2101      	movs	r1, #1
 8000e52:	4091      	lsls	r1, r2
 8000e54:	000a      	movs	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	e000e100 	.word	0xe000e100

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b7f      	cmp	r3, #127	; 0x7f
 8000e78:	d828      	bhi.n	8000ecc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e7a:	4a2f      	ldr	r2, [pc, #188]	; (8000f38 <__NVIC_SetPriority+0xd4>)
 8000e7c:	1dfb      	adds	r3, r7, #7
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	089b      	lsrs	r3, r3, #2
 8000e84:	33c0      	adds	r3, #192	; 0xc0
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	589b      	ldr	r3, [r3, r2]
 8000e8a:	1dfa      	adds	r2, r7, #7
 8000e8c:	7812      	ldrb	r2, [r2, #0]
 8000e8e:	0011      	movs	r1, r2
 8000e90:	2203      	movs	r2, #3
 8000e92:	400a      	ands	r2, r1
 8000e94:	00d2      	lsls	r2, r2, #3
 8000e96:	21ff      	movs	r1, #255	; 0xff
 8000e98:	4091      	lsls	r1, r2
 8000e9a:	000a      	movs	r2, r1
 8000e9c:	43d2      	mvns	r2, r2
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	019b      	lsls	r3, r3, #6
 8000ea6:	22ff      	movs	r2, #255	; 0xff
 8000ea8:	401a      	ands	r2, r3
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	0018      	movs	r0, r3
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	4003      	ands	r3, r0
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb8:	481f      	ldr	r0, [pc, #124]	; (8000f38 <__NVIC_SetPriority+0xd4>)
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	33c0      	adds	r3, #192	; 0xc0
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000eca:	e031      	b.n	8000f30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ecc:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <__NVIC_SetPriority+0xd8>)
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	0019      	movs	r1, r3
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	400b      	ands	r3, r1
 8000ed8:	3b08      	subs	r3, #8
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	3306      	adds	r3, #6
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	18d3      	adds	r3, r2, r3
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	1dfa      	adds	r2, r7, #7
 8000ee8:	7812      	ldrb	r2, [r2, #0]
 8000eea:	0011      	movs	r1, r2
 8000eec:	2203      	movs	r2, #3
 8000eee:	400a      	ands	r2, r1
 8000ef0:	00d2      	lsls	r2, r2, #3
 8000ef2:	21ff      	movs	r1, #255	; 0xff
 8000ef4:	4091      	lsls	r1, r2
 8000ef6:	000a      	movs	r2, r1
 8000ef8:	43d2      	mvns	r2, r2
 8000efa:	401a      	ands	r2, r3
 8000efc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	019b      	lsls	r3, r3, #6
 8000f02:	22ff      	movs	r2, #255	; 0xff
 8000f04:	401a      	ands	r2, r3
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	4003      	ands	r3, r0
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f14:	4809      	ldr	r0, [pc, #36]	; (8000f3c <__NVIC_SetPriority+0xd8>)
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	001c      	movs	r4, r3
 8000f1c:	230f      	movs	r3, #15
 8000f1e:	4023      	ands	r3, r4
 8000f20:	3b08      	subs	r3, #8
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	430a      	orrs	r2, r1
 8000f26:	3306      	adds	r3, #6
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	18c3      	adds	r3, r0, r3
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	601a      	str	r2, [r3, #0]
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b003      	add	sp, #12
 8000f36:	bd90      	pop	{r4, r7, pc}
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	1e5a      	subs	r2, r3, #1
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	045b      	lsls	r3, r3, #17
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d301      	bcc.n	8000f58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f54:	2301      	movs	r3, #1
 8000f56:	e010      	b.n	8000f7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <SysTick_Config+0x44>)
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	3a01      	subs	r2, #1
 8000f5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f60:	2301      	movs	r3, #1
 8000f62:	425b      	negs	r3, r3
 8000f64:	2103      	movs	r1, #3
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff ff7c 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <SysTick_Config+0x44>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <SysTick_Config+0x44>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b002      	add	sp, #8
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	210f      	movs	r1, #15
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	1c02      	adds	r2, r0, #0
 8000f98:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f7ff ff5d 	bl	8000e64 <__NVIC_SetPriority>
}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b004      	add	sp, #16
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	0002      	movs	r2, r0
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	b25b      	sxtb	r3, r3
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff ff33 	bl	8000e30 <__NVIC_EnableIRQ>
}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b002      	add	sp, #8
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff ffaf 	bl	8000f40 <SysTick_Config>
 8000fe2:	0003      	movs	r3, r0
}
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b002      	add	sp, #8
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e050      	b.n	80010a0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2225      	movs	r2, #37	; 0x25
 8001002:	5c9b      	ldrb	r3, [r3, r2]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d008      	beq.n	800101c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2204      	movs	r2, #4
 800100e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2224      	movs	r2, #36	; 0x24
 8001014:	2100      	movs	r1, #0
 8001016:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e041      	b.n	80010a0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	210e      	movs	r1, #14
 8001028:	438a      	bics	r2, r1
 800102a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	491c      	ldr	r1, [pc, #112]	; (80010a8 <HAL_DMA_Abort+0xbc>)
 8001038:	400a      	ands	r2, r1
 800103a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2101      	movs	r1, #1
 8001048:	438a      	bics	r2, r1
 800104a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_DMA_Abort+0xc0>)
 800104e:	6859      	ldr	r1, [r3, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	221c      	movs	r2, #28
 8001056:	4013      	ands	r3, r2
 8001058:	2201      	movs	r2, #1
 800105a:	409a      	lsls	r2, r3
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <HAL_DMA_Abort+0xc0>)
 800105e:	430a      	orrs	r2, r1
 8001060:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800106a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00c      	beq.n	800108e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800107e:	490a      	ldr	r1, [pc, #40]	; (80010a8 <HAL_DMA_Abort+0xbc>)
 8001080:	400a      	ands	r2, r1
 8001082:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800108c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2225      	movs	r2, #37	; 0x25
 8001092:	2101      	movs	r1, #1
 8001094:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2224      	movs	r2, #36	; 0x24
 800109a:	2100      	movs	r1, #0
 800109c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b002      	add	sp, #8
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	fffffeff 	.word	0xfffffeff
 80010ac:	40020000 	.word	0x40020000

080010b0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010b8:	210f      	movs	r1, #15
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2225      	movs	r2, #37	; 0x25
 80010c4:	5c9b      	ldrb	r3, [r3, r2]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d006      	beq.n	80010da <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2204      	movs	r2, #4
 80010d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	e049      	b.n	800116e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	210e      	movs	r1, #14
 80010e6:	438a      	bics	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2101      	movs	r1, #1
 80010f6:	438a      	bics	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001104:	491d      	ldr	r1, [pc, #116]	; (800117c <HAL_DMA_Abort_IT+0xcc>)
 8001106:	400a      	ands	r2, r1
 8001108:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <HAL_DMA_Abort_IT+0xd0>)
 800110c:	6859      	ldr	r1, [r3, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	221c      	movs	r2, #28
 8001114:	4013      	ands	r3, r2
 8001116:	2201      	movs	r2, #1
 8001118:	409a      	lsls	r2, r3
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_DMA_Abort_IT+0xd0>)
 800111c:	430a      	orrs	r2, r1
 800111e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001128:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00c      	beq.n	800114c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800113c:	490f      	ldr	r1, [pc, #60]	; (800117c <HAL_DMA_Abort_IT+0xcc>)
 800113e:	400a      	ands	r2, r1
 8001140:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800114a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2225      	movs	r2, #37	; 0x25
 8001150:	2101      	movs	r1, #1
 8001152:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2224      	movs	r2, #36	; 0x24
 8001158:	2100      	movs	r1, #0
 800115a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001160:	2b00      	cmp	r3, #0
 8001162:	d004      	beq.n	800116e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	0010      	movs	r0, r2
 800116c:	4798      	blx	r3
    }
  }
  return status;
 800116e:	230f      	movs	r3, #15
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	781b      	ldrb	r3, [r3, #0]
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	b004      	add	sp, #16
 800117a:	bd80      	pop	{r7, pc}
 800117c:	fffffeff 	.word	0xfffffeff
 8001180:	40020000 	.word	0x40020000

08001184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001192:	e147      	b.n	8001424 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2101      	movs	r1, #1
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	4091      	lsls	r1, r2
 800119e:	000a      	movs	r2, r1
 80011a0:	4013      	ands	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d100      	bne.n	80011ac <HAL_GPIO_Init+0x28>
 80011aa:	e138      	b.n	800141e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2203      	movs	r2, #3
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d005      	beq.n	80011c4 <HAL_GPIO_Init+0x40>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2203      	movs	r2, #3
 80011be:	4013      	ands	r3, r2
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d130      	bne.n	8001226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	409a      	lsls	r2, r3
 80011d2:	0013      	movs	r3, r2
 80011d4:	43da      	mvns	r2, r3
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	409a      	lsls	r2, r3
 80011e6:	0013      	movs	r3, r2
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011fa:	2201      	movs	r2, #1
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
 8001200:	0013      	movs	r3, r2
 8001202:	43da      	mvns	r2, r3
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	091b      	lsrs	r3, r3, #4
 8001210:	2201      	movs	r2, #1
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
 8001218:	0013      	movs	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2203      	movs	r2, #3
 800122c:	4013      	ands	r3, r2
 800122e:	2b03      	cmp	r3, #3
 8001230:	d017      	beq.n	8001262 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	409a      	lsls	r2, r3
 8001240:	0013      	movs	r3, r2
 8001242:	43da      	mvns	r2, r3
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	409a      	lsls	r2, r3
 8001254:	0013      	movs	r3, r2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2203      	movs	r2, #3
 8001268:	4013      	ands	r3, r2
 800126a:	2b02      	cmp	r3, #2
 800126c:	d123      	bne.n	80012b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	58d3      	ldr	r3, [r2, r3]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	2207      	movs	r2, #7
 8001280:	4013      	ands	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	220f      	movs	r2, #15
 8001286:	409a      	lsls	r2, r3
 8001288:	0013      	movs	r3, r2
 800128a:	43da      	mvns	r2, r3
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	691a      	ldr	r2, [r3, #16]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	2107      	movs	r1, #7
 800129a:	400b      	ands	r3, r1
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	409a      	lsls	r2, r3
 80012a0:	0013      	movs	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	08da      	lsrs	r2, r3, #3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3208      	adds	r2, #8
 80012b0:	0092      	lsls	r2, r2, #2
 80012b2:	6939      	ldr	r1, [r7, #16]
 80012b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2203      	movs	r2, #3
 80012c2:	409a      	lsls	r2, r3
 80012c4:	0013      	movs	r3, r2
 80012c6:	43da      	mvns	r2, r3
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2203      	movs	r2, #3
 80012d4:	401a      	ands	r2, r3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	409a      	lsls	r2, r3
 80012dc:	0013      	movs	r3, r2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	23c0      	movs	r3, #192	; 0xc0
 80012f0:	029b      	lsls	r3, r3, #10
 80012f2:	4013      	ands	r3, r2
 80012f4:	d100      	bne.n	80012f8 <HAL_GPIO_Init+0x174>
 80012f6:	e092      	b.n	800141e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80012f8:	4a50      	ldr	r2, [pc, #320]	; (800143c <HAL_GPIO_Init+0x2b8>)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	3318      	adds	r3, #24
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	589b      	ldr	r3, [r3, r2]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	2203      	movs	r2, #3
 800130a:	4013      	ands	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	220f      	movs	r2, #15
 8001310:	409a      	lsls	r2, r3
 8001312:	0013      	movs	r3, r2
 8001314:	43da      	mvns	r2, r3
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	23a0      	movs	r3, #160	; 0xa0
 8001320:	05db      	lsls	r3, r3, #23
 8001322:	429a      	cmp	r2, r3
 8001324:	d013      	beq.n	800134e <HAL_GPIO_Init+0x1ca>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a45      	ldr	r2, [pc, #276]	; (8001440 <HAL_GPIO_Init+0x2bc>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00d      	beq.n	800134a <HAL_GPIO_Init+0x1c6>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a44      	ldr	r2, [pc, #272]	; (8001444 <HAL_GPIO_Init+0x2c0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d007      	beq.n	8001346 <HAL_GPIO_Init+0x1c2>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a43      	ldr	r2, [pc, #268]	; (8001448 <HAL_GPIO_Init+0x2c4>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_GPIO_Init+0x1be>
 800133e:	2303      	movs	r3, #3
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x1cc>
 8001342:	2305      	movs	r3, #5
 8001344:	e004      	b.n	8001350 <HAL_GPIO_Init+0x1cc>
 8001346:	2302      	movs	r3, #2
 8001348:	e002      	b.n	8001350 <HAL_GPIO_Init+0x1cc>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x1cc>
 800134e:	2300      	movs	r3, #0
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	2103      	movs	r1, #3
 8001354:	400a      	ands	r2, r1
 8001356:	00d2      	lsls	r2, r2, #3
 8001358:	4093      	lsls	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001360:	4936      	ldr	r1, [pc, #216]	; (800143c <HAL_GPIO_Init+0x2b8>)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3318      	adds	r3, #24
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800136e:	4b33      	ldr	r3, [pc, #204]	; (800143c <HAL_GPIO_Init+0x2b8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43da      	mvns	r2, r3
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	035b      	lsls	r3, r3, #13
 8001386:	4013      	ands	r3, r2
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001392:	4b2a      	ldr	r3, [pc, #168]	; (800143c <HAL_GPIO_Init+0x2b8>)
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001398:	4b28      	ldr	r3, [pc, #160]	; (800143c <HAL_GPIO_Init+0x2b8>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43da      	mvns	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	039b      	lsls	r3, r3, #14
 80013b0:	4013      	ands	r3, r2
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <HAL_GPIO_Init+0x2b8>)
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013c2:	4a1e      	ldr	r2, [pc, #120]	; (800143c <HAL_GPIO_Init+0x2b8>)
 80013c4:	2384      	movs	r3, #132	; 0x84
 80013c6:	58d3      	ldr	r3, [r2, r3]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43da      	mvns	r2, r3
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4013      	ands	r3, r2
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013e8:	4914      	ldr	r1, [pc, #80]	; (800143c <HAL_GPIO_Init+0x2b8>)
 80013ea:	2284      	movs	r2, #132	; 0x84
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80013f0:	4a12      	ldr	r2, [pc, #72]	; (800143c <HAL_GPIO_Init+0x2b8>)
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	58d3      	ldr	r3, [r2, r3]
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43da      	mvns	r2, r3
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	025b      	lsls	r3, r3, #9
 800140a:	4013      	ands	r3, r2
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001416:	4909      	ldr	r1, [pc, #36]	; (800143c <HAL_GPIO_Init+0x2b8>)
 8001418:	2280      	movs	r2, #128	; 0x80
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3301      	adds	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	40da      	lsrs	r2, r3
 800142c:	1e13      	subs	r3, r2, #0
 800142e:	d000      	beq.n	8001432 <HAL_GPIO_Init+0x2ae>
 8001430:	e6b0      	b.n	8001194 <HAL_GPIO_Init+0x10>
  }
}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	46c0      	nop			; (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	b006      	add	sp, #24
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40021800 	.word	0x40021800
 8001440:	50000400 	.word	0x50000400
 8001444:	50000800 	.word	0x50000800
 8001448:	50000c00 	.word	0x50000c00

0800144c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	0008      	movs	r0, r1
 8001456:	0011      	movs	r1, r2
 8001458:	1cbb      	adds	r3, r7, #2
 800145a:	1c02      	adds	r2, r0, #0
 800145c:	801a      	strh	r2, [r3, #0]
 800145e:	1c7b      	adds	r3, r7, #1
 8001460:	1c0a      	adds	r2, r1, #0
 8001462:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001464:	1c7b      	adds	r3, r7, #1
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d004      	beq.n	8001476 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800146c:	1cbb      	adds	r3, r7, #2
 800146e:	881a      	ldrh	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001474:	e003      	b.n	800147e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001476:	1cbb      	adds	r3, r7, #2
 8001478:	881a      	ldrh	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b002      	add	sp, #8
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a19      	ldr	r2, [pc, #100]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001496:	4013      	ands	r3, r2
 8001498:	0019      	movs	r1, r3
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d11f      	bne.n	80014ec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	0013      	movs	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	189b      	adds	r3, r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4912      	ldr	r1, [pc, #72]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80014ba:	0018      	movs	r0, r3
 80014bc:	f7fe fe2c 	bl	8000118 <__udivsi3>
 80014c0:	0003      	movs	r3, r0
 80014c2:	3301      	adds	r3, #1
 80014c4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014c6:	e008      	b.n	80014da <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	e001      	b.n	80014da <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e009      	b.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	401a      	ands	r2, r3
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d0ed      	beq.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b004      	add	sp, #16
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	40007000 	.word	0x40007000
 80014fc:	fffff9ff 	.word	0xfffff9ff
 8001500:	20000000 	.word	0x20000000
 8001504:	000f4240 	.word	0x000f4240

08001508 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <LL_RCC_GetAPB1Prescaler+0x14>)
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	23e0      	movs	r3, #224	; 0xe0
 8001512:	01db      	lsls	r3, r3, #7
 8001514:	4013      	ands	r3, r2
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000

08001520 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e2fe      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2201      	movs	r2, #1
 8001538:	4013      	ands	r3, r2
 800153a:	d100      	bne.n	800153e <HAL_RCC_OscConfig+0x1e>
 800153c:	e07c      	b.n	8001638 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153e:	4bc3      	ldr	r3, [pc, #780]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2238      	movs	r2, #56	; 0x38
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001548:	4bc0      	ldr	r3, [pc, #768]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2203      	movs	r2, #3
 800154e:	4013      	ands	r3, r2
 8001550:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	2b10      	cmp	r3, #16
 8001556:	d102      	bne.n	800155e <HAL_RCC_OscConfig+0x3e>
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d002      	beq.n	8001564 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	2b08      	cmp	r3, #8
 8001562:	d10b      	bne.n	800157c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	4bb9      	ldr	r3, [pc, #740]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	029b      	lsls	r3, r3, #10
 800156c:	4013      	ands	r3, r2
 800156e:	d062      	beq.n	8001636 <HAL_RCC_OscConfig+0x116>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d15e      	bne.n	8001636 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e2d9      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	025b      	lsls	r3, r3, #9
 8001584:	429a      	cmp	r2, r3
 8001586:	d107      	bne.n	8001598 <HAL_RCC_OscConfig+0x78>
 8001588:	4bb0      	ldr	r3, [pc, #704]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4baf      	ldr	r3, [pc, #700]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800158e:	2180      	movs	r1, #128	; 0x80
 8001590:	0249      	lsls	r1, r1, #9
 8001592:	430a      	orrs	r2, r1
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	e020      	b.n	80015da <HAL_RCC_OscConfig+0xba>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	23a0      	movs	r3, #160	; 0xa0
 800159e:	02db      	lsls	r3, r3, #11
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d10e      	bne.n	80015c2 <HAL_RCC_OscConfig+0xa2>
 80015a4:	4ba9      	ldr	r3, [pc, #676]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4ba8      	ldr	r3, [pc, #672]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015aa:	2180      	movs	r1, #128	; 0x80
 80015ac:	02c9      	lsls	r1, r1, #11
 80015ae:	430a      	orrs	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	4ba6      	ldr	r3, [pc, #664]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4ba5      	ldr	r3, [pc, #660]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	0249      	lsls	r1, r1, #9
 80015bc:	430a      	orrs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e00b      	b.n	80015da <HAL_RCC_OscConfig+0xba>
 80015c2:	4ba2      	ldr	r3, [pc, #648]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4ba1      	ldr	r3, [pc, #644]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015c8:	49a1      	ldr	r1, [pc, #644]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 80015ca:	400a      	ands	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	4b9f      	ldr	r3, [pc, #636]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b9e      	ldr	r3, [pc, #632]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015d4:	499f      	ldr	r1, [pc, #636]	; (8001854 <HAL_RCC_OscConfig+0x334>)
 80015d6:	400a      	ands	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d014      	beq.n	800160c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff fc05 	bl	8000df0 <HAL_GetTick>
 80015e6:	0003      	movs	r3, r0
 80015e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fc00 	bl	8000df0 <HAL_GetTick>
 80015f0:	0002      	movs	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e298      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015fe:	4b93      	ldr	r3, [pc, #588]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	029b      	lsls	r3, r3, #10
 8001606:	4013      	ands	r3, r2
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0xcc>
 800160a:	e015      	b.n	8001638 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fbf0 	bl	8000df0 <HAL_GetTick>
 8001610:	0003      	movs	r3, r0
 8001612:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001616:	f7ff fbeb 	bl	8000df0 <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b64      	cmp	r3, #100	; 0x64
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e283      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001628:	4b88      	ldr	r3, [pc, #544]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	029b      	lsls	r3, r3, #10
 8001630:	4013      	ands	r3, r2
 8001632:	d1f0      	bne.n	8001616 <HAL_RCC_OscConfig+0xf6>
 8001634:	e000      	b.n	8001638 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001636:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2202      	movs	r2, #2
 800163e:	4013      	ands	r3, r2
 8001640:	d100      	bne.n	8001644 <HAL_RCC_OscConfig+0x124>
 8001642:	e099      	b.n	8001778 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001644:	4b81      	ldr	r3, [pc, #516]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2238      	movs	r2, #56	; 0x38
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800164e:	4b7f      	ldr	r3, [pc, #508]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2203      	movs	r2, #3
 8001654:	4013      	ands	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	2b10      	cmp	r3, #16
 800165c:	d102      	bne.n	8001664 <HAL_RCC_OscConfig+0x144>
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d002      	beq.n	800166a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d135      	bne.n	80016d6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800166a:	4b78      	ldr	r3, [pc, #480]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4013      	ands	r3, r2
 8001674:	d005      	beq.n	8001682 <HAL_RCC_OscConfig+0x162>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e256      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001682:	4b72      	ldr	r3, [pc, #456]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4a74      	ldr	r2, [pc, #464]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 8001688:	4013      	ands	r3, r2
 800168a:	0019      	movs	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	021a      	lsls	r2, r3, #8
 8001692:	4b6e      	ldr	r3, [pc, #440]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001694:	430a      	orrs	r2, r1
 8001696:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d112      	bne.n	80016c4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800169e:	4b6b      	ldr	r3, [pc, #428]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a6e      	ldr	r2, [pc, #440]	; (800185c <HAL_RCC_OscConfig+0x33c>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	4b67      	ldr	r3, [pc, #412]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016ae:	430a      	orrs	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80016b2:	4b66      	ldr	r3, [pc, #408]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	0adb      	lsrs	r3, r3, #11
 80016b8:	2207      	movs	r2, #7
 80016ba:	4013      	ands	r3, r2
 80016bc:	4a68      	ldr	r2, [pc, #416]	; (8001860 <HAL_RCC_OscConfig+0x340>)
 80016be:	40da      	lsrs	r2, r3
 80016c0:	4b68      	ldr	r3, [pc, #416]	; (8001864 <HAL_RCC_OscConfig+0x344>)
 80016c2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016c4:	4b68      	ldr	r3, [pc, #416]	; (8001868 <HAL_RCC_OscConfig+0x348>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff fb35 	bl	8000d38 <HAL_InitTick>
 80016ce:	1e03      	subs	r3, r0, #0
 80016d0:	d051      	beq.n	8001776 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e22c      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d030      	beq.n	8001740 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016de:	4b5b      	ldr	r3, [pc, #364]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a5e      	ldr	r2, [pc, #376]	; (800185c <HAL_RCC_OscConfig+0x33c>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	0019      	movs	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	4b57      	ldr	r3, [pc, #348]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016ee:	430a      	orrs	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80016f2:	4b56      	ldr	r3, [pc, #344]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b55      	ldr	r3, [pc, #340]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016f8:	2180      	movs	r1, #128	; 0x80
 80016fa:	0049      	lsls	r1, r1, #1
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff fb76 	bl	8000df0 <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170a:	f7ff fb71 	bl	8000df0 <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e209      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800171c:	4b4b      	ldr	r3, [pc, #300]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	4013      	ands	r3, r2
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4b48      	ldr	r3, [pc, #288]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4a4a      	ldr	r2, [pc, #296]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 800172e:	4013      	ands	r3, r2
 8001730:	0019      	movs	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	021a      	lsls	r2, r3, #8
 8001738:	4b44      	ldr	r3, [pc, #272]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e01b      	b.n	8001778 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001740:	4b42      	ldr	r3, [pc, #264]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b41      	ldr	r3, [pc, #260]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001746:	4949      	ldr	r1, [pc, #292]	; (800186c <HAL_RCC_OscConfig+0x34c>)
 8001748:	400a      	ands	r2, r1
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fb50 	bl	8000df0 <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001756:	f7ff fb4b 	bl	8000df0 <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1e3      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001768:	4b38      	ldr	r3, [pc, #224]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4013      	ands	r3, r2
 8001772:	d1f0      	bne.n	8001756 <HAL_RCC_OscConfig+0x236>
 8001774:	e000      	b.n	8001778 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001776:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2208      	movs	r2, #8
 800177e:	4013      	ands	r3, r2
 8001780:	d047      	beq.n	8001812 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001782:	4b32      	ldr	r3, [pc, #200]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2238      	movs	r2, #56	; 0x38
 8001788:	4013      	ands	r3, r2
 800178a:	2b18      	cmp	r3, #24
 800178c:	d10a      	bne.n	80017a4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800178e:	4b2f      	ldr	r3, [pc, #188]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001792:	2202      	movs	r2, #2
 8001794:	4013      	ands	r3, r2
 8001796:	d03c      	beq.n	8001812 <HAL_RCC_OscConfig+0x2f2>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d138      	bne.n	8001812 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e1c5      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d019      	beq.n	80017e0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80017ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017b0:	4b26      	ldr	r3, [pc, #152]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80017b2:	2101      	movs	r1, #1
 80017b4:	430a      	orrs	r2, r1
 80017b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff fb1a 	bl	8000df0 <HAL_GetTick>
 80017bc:	0003      	movs	r3, r0
 80017be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c2:	f7ff fb15 	bl	8000df0 <HAL_GetTick>
 80017c6:	0002      	movs	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e1ad      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80017d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d8:	2202      	movs	r2, #2
 80017da:	4013      	ands	r3, r2
 80017dc:	d0f1      	beq.n	80017c2 <HAL_RCC_OscConfig+0x2a2>
 80017de:	e018      	b.n	8001812 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80017e0:	4b1a      	ldr	r3, [pc, #104]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80017e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	438a      	bics	r2, r1
 80017ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff fb00 	bl	8000df0 <HAL_GetTick>
 80017f0:	0003      	movs	r3, r0
 80017f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f6:	f7ff fafb 	bl	8000df0 <HAL_GetTick>
 80017fa:	0002      	movs	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e193      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800180a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180c:	2202      	movs	r2, #2
 800180e:	4013      	ands	r3, r2
 8001810:	d1f1      	bne.n	80017f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2204      	movs	r2, #4
 8001818:	4013      	ands	r3, r2
 800181a:	d100      	bne.n	800181e <HAL_RCC_OscConfig+0x2fe>
 800181c:	e0c6      	b.n	80019ac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181e:	231f      	movs	r3, #31
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2238      	movs	r2, #56	; 0x38
 800182c:	4013      	ands	r3, r2
 800182e:	2b20      	cmp	r3, #32
 8001830:	d11e      	bne.n	8001870 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001836:	2202      	movs	r2, #2
 8001838:	4013      	ands	r3, r2
 800183a:	d100      	bne.n	800183e <HAL_RCC_OscConfig+0x31e>
 800183c:	e0b6      	b.n	80019ac <HAL_RCC_OscConfig+0x48c>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d000      	beq.n	8001848 <HAL_RCC_OscConfig+0x328>
 8001846:	e0b1      	b.n	80019ac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e171      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>
 800184c:	40021000 	.word	0x40021000
 8001850:	fffeffff 	.word	0xfffeffff
 8001854:	fffbffff 	.word	0xfffbffff
 8001858:	ffff80ff 	.word	0xffff80ff
 800185c:	ffffc7ff 	.word	0xffffc7ff
 8001860:	00f42400 	.word	0x00f42400
 8001864:	20000000 	.word	0x20000000
 8001868:	20000004 	.word	0x20000004
 800186c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001870:	4bb1      	ldr	r3, [pc, #708]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	055b      	lsls	r3, r3, #21
 8001878:	4013      	ands	r3, r2
 800187a:	d101      	bne.n	8001880 <HAL_RCC_OscConfig+0x360>
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <HAL_RCC_OscConfig+0x362>
 8001880:	2300      	movs	r3, #0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d011      	beq.n	80018aa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4bac      	ldr	r3, [pc, #688]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800188a:	4bab      	ldr	r3, [pc, #684]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	0549      	lsls	r1, r1, #21
 8001890:	430a      	orrs	r2, r1
 8001892:	63da      	str	r2, [r3, #60]	; 0x3c
 8001894:	4ba8      	ldr	r3, [pc, #672]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	055b      	lsls	r3, r3, #21
 800189c:	4013      	ands	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80018a2:	231f      	movs	r3, #31
 80018a4:	18fb      	adds	r3, r7, r3
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018aa:	4ba4      	ldr	r3, [pc, #656]	; (8001b3c <HAL_RCC_OscConfig+0x61c>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4013      	ands	r3, r2
 80018b4:	d11a      	bne.n	80018ec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018b6:	4ba1      	ldr	r3, [pc, #644]	; (8001b3c <HAL_RCC_OscConfig+0x61c>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4ba0      	ldr	r3, [pc, #640]	; (8001b3c <HAL_RCC_OscConfig+0x61c>)
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	0049      	lsls	r1, r1, #1
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fa94 	bl	8000df0 <HAL_GetTick>
 80018c8:	0003      	movs	r3, r0
 80018ca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ce:	f7ff fa8f 	bl	8000df0 <HAL_GetTick>
 80018d2:	0002      	movs	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e127      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e0:	4b96      	ldr	r3, [pc, #600]	; (8001b3c <HAL_RCC_OscConfig+0x61c>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4013      	ands	r3, r2
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x3e2>
 80018f4:	4b90      	ldr	r3, [pc, #576]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 80018f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018f8:	4b8f      	ldr	r3, [pc, #572]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	430a      	orrs	r2, r1
 80018fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001900:	e01c      	b.n	800193c <HAL_RCC_OscConfig+0x41c>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b05      	cmp	r3, #5
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0x404>
 800190a:	4b8b      	ldr	r3, [pc, #556]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 800190c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800190e:	4b8a      	ldr	r3, [pc, #552]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001910:	2104      	movs	r1, #4
 8001912:	430a      	orrs	r2, r1
 8001914:	65da      	str	r2, [r3, #92]	; 0x5c
 8001916:	4b88      	ldr	r3, [pc, #544]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001918:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800191a:	4b87      	ldr	r3, [pc, #540]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 800191c:	2101      	movs	r1, #1
 800191e:	430a      	orrs	r2, r1
 8001920:	65da      	str	r2, [r3, #92]	; 0x5c
 8001922:	e00b      	b.n	800193c <HAL_RCC_OscConfig+0x41c>
 8001924:	4b84      	ldr	r3, [pc, #528]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001926:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001928:	4b83      	ldr	r3, [pc, #524]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 800192a:	2101      	movs	r1, #1
 800192c:	438a      	bics	r2, r1
 800192e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001930:	4b81      	ldr	r3, [pc, #516]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001932:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001934:	4b80      	ldr	r3, [pc, #512]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001936:	2104      	movs	r1, #4
 8001938:	438a      	bics	r2, r1
 800193a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d014      	beq.n	800196e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fa54 	bl	8000df0 <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800194c:	e009      	b.n	8001962 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194e:	f7ff fa4f 	bl	8000df0 <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	4a79      	ldr	r2, [pc, #484]	; (8001b40 <HAL_RCC_OscConfig+0x620>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e0e6      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001962:	4b75      	ldr	r3, [pc, #468]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001966:	2202      	movs	r2, #2
 8001968:	4013      	ands	r3, r2
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x42e>
 800196c:	e013      	b.n	8001996 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7ff fa3f 	bl	8000df0 <HAL_GetTick>
 8001972:	0003      	movs	r3, r0
 8001974:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001976:	e009      	b.n	800198c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001978:	f7ff fa3a 	bl	8000df0 <HAL_GetTick>
 800197c:	0002      	movs	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	4a6f      	ldr	r2, [pc, #444]	; (8001b40 <HAL_RCC_OscConfig+0x620>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e0d1      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800198c:	4b6a      	ldr	r3, [pc, #424]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 800198e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001990:	2202      	movs	r2, #2
 8001992:	4013      	ands	r3, r2
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001996:	231f      	movs	r3, #31
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d105      	bne.n	80019ac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80019a0:	4b65      	ldr	r3, [pc, #404]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 80019a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019a4:	4b64      	ldr	r3, [pc, #400]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 80019a6:	4967      	ldr	r1, [pc, #412]	; (8001b44 <HAL_RCC_OscConfig+0x624>)
 80019a8:	400a      	ands	r2, r1
 80019aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d100      	bne.n	80019b6 <HAL_RCC_OscConfig+0x496>
 80019b4:	e0bb      	b.n	8001b2e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b6:	4b60      	ldr	r3, [pc, #384]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2238      	movs	r2, #56	; 0x38
 80019bc:	4013      	ands	r3, r2
 80019be:	2b10      	cmp	r3, #16
 80019c0:	d100      	bne.n	80019c4 <HAL_RCC_OscConfig+0x4a4>
 80019c2:	e07b      	b.n	8001abc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d156      	bne.n	8001a7a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019cc:	4b5a      	ldr	r3, [pc, #360]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 80019d2:	495d      	ldr	r1, [pc, #372]	; (8001b48 <HAL_RCC_OscConfig+0x628>)
 80019d4:	400a      	ands	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff fa0a 	bl	8000df0 <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e2:	f7ff fa05 	bl	8000df0 <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e09d      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f4:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	049b      	lsls	r3, r3, #18
 80019fc:	4013      	ands	r3, r2
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a00:	4b4d      	ldr	r3, [pc, #308]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4a51      	ldr	r2, [pc, #324]	; (8001b4c <HAL_RCC_OscConfig+0x62c>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	0019      	movs	r1, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1a      	ldr	r2, [r3, #32]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	4b42      	ldr	r3, [pc, #264]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001a30:	430a      	orrs	r2, r1
 8001a32:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a34:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b3f      	ldr	r3, [pc, #252]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001a3a:	2180      	movs	r1, #128	; 0x80
 8001a3c:	0449      	lsls	r1, r1, #17
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001a42:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	4b3c      	ldr	r3, [pc, #240]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	0549      	lsls	r1, r1, #21
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f9ce 	bl	8000df0 <HAL_GetTick>
 8001a54:	0003      	movs	r3, r0
 8001a56:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5a:	f7ff f9c9 	bl	8000df0 <HAL_GetTick>
 8001a5e:	0002      	movs	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e061      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6c:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	049b      	lsls	r3, r3, #18
 8001a74:	4013      	ands	r3, r2
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x53a>
 8001a78:	e059      	b.n	8001b2e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7a:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001a80:	4931      	ldr	r1, [pc, #196]	; (8001b48 <HAL_RCC_OscConfig+0x628>)
 8001a82:	400a      	ands	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff f9b3 	bl	8000df0 <HAL_GetTick>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff f9ae 	bl	8000df0 <HAL_GetTick>
 8001a94:	0002      	movs	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e046      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa2:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	049b      	lsls	r3, r3, #18
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001aae:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001ab4:	4926      	ldr	r1, [pc, #152]	; (8001b50 <HAL_RCC_OscConfig+0x630>)
 8001ab6:	400a      	ands	r2, r1
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	e038      	b.n	8001b2e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e033      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d126      	bne.n	8001b2a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	2270      	movs	r2, #112	; 0x70
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d11f      	bne.n	8001b2a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	23fe      	movs	r3, #254	; 0xfe
 8001aee:	01db      	lsls	r3, r3, #7
 8001af0:	401a      	ands	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d116      	bne.n	8001b2a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	23f8      	movs	r3, #248	; 0xf8
 8001b00:	039b      	lsls	r3, r3, #14
 8001b02:	401a      	ands	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d10e      	bne.n	8001b2a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	23e0      	movs	r3, #224	; 0xe0
 8001b10:	051b      	lsls	r3, r3, #20
 8001b12:	401a      	ands	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	0f5b      	lsrs	r3, r3, #29
 8001b20:	075a      	lsls	r2, r3, #29
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d001      	beq.n	8001b2e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	0018      	movs	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b008      	add	sp, #32
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40007000 	.word	0x40007000
 8001b40:	00001388 	.word	0x00001388
 8001b44:	efffffff 	.word	0xefffffff
 8001b48:	feffffff 	.word	0xfeffffff
 8001b4c:	11c1808c 	.word	0x11c1808c
 8001b50:	eefefffc 	.word	0xeefefffc

08001b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0e9      	b.n	8001d3c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b68:	4b76      	ldr	r3, [pc, #472]	; (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	4013      	ands	r3, r2
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d91e      	bls.n	8001bb4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b76:	4b73      	ldr	r3, [pc, #460]	; (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2207      	movs	r2, #7
 8001b7c:	4393      	bics	r3, r2
 8001b7e:	0019      	movs	r1, r3
 8001b80:	4b70      	ldr	r3, [pc, #448]	; (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b88:	f7ff f932 	bl	8000df0 <HAL_GetTick>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b90:	e009      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b92:	f7ff f92d 	bl	8000df0 <HAL_GetTick>
 8001b96:	0002      	movs	r2, r0
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	4a6a      	ldr	r2, [pc, #424]	; (8001d48 <HAL_RCC_ClockConfig+0x1f4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e0ca      	b.n	8001d3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ba6:	4b67      	ldr	r3, [pc, #412]	; (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2207      	movs	r2, #7
 8001bac:	4013      	ands	r3, r2
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d1ee      	bne.n	8001b92 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d015      	beq.n	8001bea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d006      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bc8:	4b60      	ldr	r3, [pc, #384]	; (8001d4c <HAL_RCC_ClockConfig+0x1f8>)
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	4b5f      	ldr	r3, [pc, #380]	; (8001d4c <HAL_RCC_ClockConfig+0x1f8>)
 8001bce:	21e0      	movs	r1, #224	; 0xe0
 8001bd0:	01c9      	lsls	r1, r1, #7
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd6:	4b5d      	ldr	r3, [pc, #372]	; (8001d4c <HAL_RCC_ClockConfig+0x1f8>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	4a5d      	ldr	r2, [pc, #372]	; (8001d50 <HAL_RCC_ClockConfig+0x1fc>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	0019      	movs	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	4b59      	ldr	r3, [pc, #356]	; (8001d4c <HAL_RCC_ClockConfig+0x1f8>)
 8001be6:	430a      	orrs	r2, r1
 8001be8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d057      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d107      	bne.n	8001c0c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_RCC_ClockConfig+0x1f8>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	029b      	lsls	r3, r3, #10
 8001c04:	4013      	ands	r3, r2
 8001c06:	d12b      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e097      	b.n	8001d3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c14:	4b4d      	ldr	r3, [pc, #308]	; (8001d4c <HAL_RCC_ClockConfig+0x1f8>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	049b      	lsls	r3, r3, #18
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d11f      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e08b      	b.n	8001d3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d107      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2c:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <HAL_RCC_ClockConfig+0x1f8>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4013      	ands	r3, r2
 8001c36:	d113      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e07f      	b.n	8001d3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d106      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c44:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <HAL_RCC_ClockConfig+0x1f8>)
 8001c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c48:	2202      	movs	r2, #2
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d108      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e074      	b.n	8001d3c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c52:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <HAL_RCC_ClockConfig+0x1f8>)
 8001c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c56:	2202      	movs	r2, #2
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e06d      	b.n	8001d3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c60:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_RCC_ClockConfig+0x1f8>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2207      	movs	r2, #7
 8001c66:	4393      	bics	r3, r2
 8001c68:	0019      	movs	r1, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <HAL_RCC_ClockConfig+0x1f8>)
 8001c70:	430a      	orrs	r2, r1
 8001c72:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c74:	f7ff f8bc 	bl	8000df0 <HAL_GetTick>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7c:	e009      	b.n	8001c92 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7e:	f7ff f8b7 	bl	8000df0 <HAL_GetTick>
 8001c82:	0002      	movs	r2, r0
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	4a2f      	ldr	r2, [pc, #188]	; (8001d48 <HAL_RCC_ClockConfig+0x1f4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e054      	b.n	8001d3c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <HAL_RCC_ClockConfig+0x1f8>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2238      	movs	r2, #56	; 0x38
 8001c98:	401a      	ands	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d1ec      	bne.n	8001c7e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b27      	ldr	r3, [pc, #156]	; (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2207      	movs	r2, #7
 8001caa:	4013      	ands	r3, r2
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d21e      	bcs.n	8001cf0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2207      	movs	r2, #7
 8001cb8:	4393      	bics	r3, r2
 8001cba:	0019      	movs	r1, r3
 8001cbc:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cc4:	f7ff f894 	bl	8000df0 <HAL_GetTick>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ccc:	e009      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cce:	f7ff f88f 	bl	8000df0 <HAL_GetTick>
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <HAL_RCC_ClockConfig+0x1f4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e02c      	b.n	8001d3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ce2:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2207      	movs	r2, #7
 8001ce8:	4013      	ands	r3, r2
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d1ee      	bne.n	8001cce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d009      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_RCC_ClockConfig+0x1f8>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	4a15      	ldr	r2, [pc, #84]	; (8001d54 <HAL_RCC_ClockConfig+0x200>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	0019      	movs	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <HAL_RCC_ClockConfig+0x1f8>)
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d0e:	f000 f829 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001d12:	0001      	movs	r1, r0
 8001d14:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <HAL_RCC_ClockConfig+0x1f8>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	220f      	movs	r2, #15
 8001d1c:	401a      	ands	r2, r3
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_RCC_ClockConfig+0x204>)
 8001d20:	0092      	lsls	r2, r2, #2
 8001d22:	58d3      	ldr	r3, [r2, r3]
 8001d24:	221f      	movs	r2, #31
 8001d26:	4013      	ands	r3, r2
 8001d28:	000a      	movs	r2, r1
 8001d2a:	40da      	lsrs	r2, r3
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_RCC_ClockConfig+0x208>)
 8001d2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_ClockConfig+0x20c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	0018      	movs	r0, r3
 8001d36:	f7fe ffff 	bl	8000d38 <HAL_InitTick>
 8001d3a:	0003      	movs	r3, r0
}
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b004      	add	sp, #16
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40022000 	.word	0x40022000
 8001d48:	00001388 	.word	0x00001388
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	fffff0ff 	.word	0xfffff0ff
 8001d54:	ffff8fff 	.word	0xffff8fff
 8001d58:	080058ec 	.word	0x080058ec
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000004 	.word	0x20000004

08001d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d6a:	4b3c      	ldr	r3, [pc, #240]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2238      	movs	r2, #56	; 0x38
 8001d70:	4013      	ands	r3, r2
 8001d72:	d10f      	bne.n	8001d94 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001d74:	4b39      	ldr	r3, [pc, #228]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0adb      	lsrs	r3, r3, #11
 8001d7a:	2207      	movs	r2, #7
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2201      	movs	r2, #1
 8001d80:	409a      	lsls	r2, r3
 8001d82:	0013      	movs	r3, r2
 8001d84:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d86:	6839      	ldr	r1, [r7, #0]
 8001d88:	4835      	ldr	r0, [pc, #212]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d8a:	f7fe f9c5 	bl	8000118 <__udivsi3>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	e05d      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d94:	4b31      	ldr	r3, [pc, #196]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2238      	movs	r2, #56	; 0x38
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d102      	bne.n	8001da6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001da0:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x100>)
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	e054      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da6:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2238      	movs	r2, #56	; 0x38
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d138      	bne.n	8001e24 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001db2:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2203      	movs	r2, #3
 8001db8:	4013      	ands	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dbc:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	2207      	movs	r2, #7
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d10d      	bne.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	4824      	ldr	r0, [pc, #144]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x100>)
 8001dd4:	f7fe f9a0 	bl	8000118 <__udivsi3>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	0019      	movs	r1, r3
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	227f      	movs	r2, #127	; 0x7f
 8001de4:	4013      	ands	r3, r2
 8001de6:	434b      	muls	r3, r1
 8001de8:	617b      	str	r3, [r7, #20]
        break;
 8001dea:	e00d      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	481c      	ldr	r0, [pc, #112]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001df0:	f7fe f992 	bl	8000118 <__udivsi3>
 8001df4:	0003      	movs	r3, r0
 8001df6:	0019      	movs	r1, r3
 8001df8:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	227f      	movs	r2, #127	; 0x7f
 8001e00:	4013      	ands	r3, r2
 8001e02:	434b      	muls	r3, r1
 8001e04:	617b      	str	r3, [r7, #20]
        break;
 8001e06:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	0f5b      	lsrs	r3, r3, #29
 8001e0e:	2207      	movs	r2, #7
 8001e10:	4013      	ands	r3, r2
 8001e12:	3301      	adds	r3, #1
 8001e14:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	6978      	ldr	r0, [r7, #20]
 8001e1a:	f7fe f97d 	bl	8000118 <__udivsi3>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	e015      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e24:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2238      	movs	r2, #56	; 0x38
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b20      	cmp	r3, #32
 8001e2e:	d103      	bne.n	8001e38 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2238      	movs	r2, #56	; 0x38
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b18      	cmp	r3, #24
 8001e42:	d103      	bne.n	8001e4c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001e44:	23fa      	movs	r3, #250	; 0xfa
 8001e46:	01db      	lsls	r3, r3, #7
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	e001      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e50:	693b      	ldr	r3, [r7, #16]
}
 8001e52:	0018      	movs	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b006      	add	sp, #24
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	00f42400 	.word	0x00f42400
 8001e64:	007a1200 	.word	0x007a1200

08001e68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e6c:	4b02      	ldr	r3, [pc, #8]	; (8001e78 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	0018      	movs	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	20000000 	.word	0x20000000

08001e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e7c:	b5b0      	push	{r4, r5, r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001e80:	f7ff fff2 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001e84:	0004      	movs	r4, r0
 8001e86:	f7ff fb3f 	bl	8001508 <LL_RCC_GetAPB1Prescaler>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	0b1a      	lsrs	r2, r3, #12
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e90:	0092      	lsls	r2, r2, #2
 8001e92:	58d3      	ldr	r3, [r2, r3]
 8001e94:	221f      	movs	r2, #31
 8001e96:	4013      	ands	r3, r2
 8001e98:	40dc      	lsrs	r4, r3
 8001e9a:	0023      	movs	r3, r4
}
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	0800592c 	.word	0x0800592c

08001ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001eb0:	2313      	movs	r3, #19
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001eb8:	2312      	movs	r3, #18
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	029b      	lsls	r3, r3, #10
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d100      	bne.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ecc:	e0a3      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ece:	2011      	movs	r0, #17
 8001ed0:	183b      	adds	r3, r7, r0
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed6:	4bc3      	ldr	r3, [pc, #780]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ed8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	055b      	lsls	r3, r3, #21
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d110      	bne.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4bc0      	ldr	r3, [pc, #768]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ee4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ee6:	4bbf      	ldr	r3, [pc, #764]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ee8:	2180      	movs	r1, #128	; 0x80
 8001eea:	0549      	lsls	r1, r1, #21
 8001eec:	430a      	orrs	r2, r1
 8001eee:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ef0:	4bbc      	ldr	r3, [pc, #752]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	055b      	lsls	r3, r3, #21
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efe:	183b      	adds	r3, r7, r0
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f04:	4bb8      	ldr	r3, [pc, #736]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4bb7      	ldr	r3, [pc, #732]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001f0a:	2180      	movs	r1, #128	; 0x80
 8001f0c:	0049      	lsls	r1, r1, #1
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f12:	f7fe ff6d 	bl	8000df0 <HAL_GetTick>
 8001f16:	0003      	movs	r3, r0
 8001f18:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1c:	f7fe ff68 	bl	8000df0 <HAL_GetTick>
 8001f20:	0002      	movs	r2, r0
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d904      	bls.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001f2a:	2313      	movs	r3, #19
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	2203      	movs	r2, #3
 8001f30:	701a      	strb	r2, [r3, #0]
        break;
 8001f32:	e005      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f34:	4bac      	ldr	r3, [pc, #688]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d0ed      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001f40:	2313      	movs	r3, #19
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d154      	bne.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f4a:	4ba6      	ldr	r3, [pc, #664]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f4e:	23c0      	movs	r3, #192	; 0xc0
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4013      	ands	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d019      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d014      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f66:	4b9f      	ldr	r3, [pc, #636]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6a:	4aa0      	ldr	r2, [pc, #640]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f70:	4b9c      	ldr	r3, [pc, #624]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f74:	4b9b      	ldr	r3, [pc, #620]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f76:	2180      	movs	r1, #128	; 0x80
 8001f78:	0249      	lsls	r1, r1, #9
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f7e:	4b99      	ldr	r3, [pc, #612]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f82:	4b98      	ldr	r3, [pc, #608]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f84:	499a      	ldr	r1, [pc, #616]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001f86:	400a      	ands	r2, r1
 8001f88:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f8a:	4b96      	ldr	r3, [pc, #600]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2201      	movs	r2, #1
 8001f94:	4013      	ands	r3, r2
 8001f96:	d016      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7fe ff2a 	bl	8000df0 <HAL_GetTick>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa0:	e00c      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa2:	f7fe ff25 	bl	8000df0 <HAL_GetTick>
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	4a91      	ldr	r2, [pc, #580]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d904      	bls.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001fb2:	2313      	movs	r3, #19
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	701a      	strb	r2, [r3, #0]
            break;
 8001fba:	e004      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fbc:	4b89      	ldr	r3, [pc, #548]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d0ed      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001fc6:	2313      	movs	r3, #19
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10a      	bne.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fd0:	4b84      	ldr	r3, [pc, #528]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	4a85      	ldr	r2, [pc, #532]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	0019      	movs	r1, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fde:	4b81      	ldr	r3, [pc, #516]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fe4:	e00c      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fe6:	2312      	movs	r3, #18
 8001fe8:	18fb      	adds	r3, r7, r3
 8001fea:	2213      	movs	r2, #19
 8001fec:	18ba      	adds	r2, r7, r2
 8001fee:	7812      	ldrb	r2, [r2, #0]
 8001ff0:	701a      	strb	r2, [r3, #0]
 8001ff2:	e005      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ff4:	2312      	movs	r3, #18
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	2213      	movs	r2, #19
 8001ffa:	18ba      	adds	r2, r7, r2
 8001ffc:	7812      	ldrb	r2, [r2, #0]
 8001ffe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002000:	2311      	movs	r3, #17
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d105      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200a:	4b76      	ldr	r3, [pc, #472]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800200c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800200e:	4b75      	ldr	r3, [pc, #468]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002010:	4979      	ldr	r1, [pc, #484]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002012:	400a      	ands	r2, r1
 8002014:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2201      	movs	r2, #1
 800201c:	4013      	ands	r3, r2
 800201e:	d009      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002020:	4b70      	ldr	r3, [pc, #448]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002024:	2203      	movs	r2, #3
 8002026:	4393      	bics	r3, r2
 8002028:	0019      	movs	r1, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	4b6d      	ldr	r3, [pc, #436]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002030:	430a      	orrs	r2, r1
 8002032:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2202      	movs	r2, #2
 800203a:	4013      	ands	r3, r2
 800203c:	d009      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800203e:	4b69      	ldr	r3, [pc, #420]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002042:	220c      	movs	r2, #12
 8002044:	4393      	bics	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	4b65      	ldr	r3, [pc, #404]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800204e:	430a      	orrs	r2, r1
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2210      	movs	r2, #16
 8002058:	4013      	ands	r3, r2
 800205a:	d009      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800205c:	4b61      	ldr	r3, [pc, #388]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002060:	4a66      	ldr	r2, [pc, #408]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002062:	4013      	ands	r3, r2
 8002064:	0019      	movs	r1, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	4b5e      	ldr	r3, [pc, #376]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800206c:	430a      	orrs	r2, r1
 800206e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4013      	ands	r3, r2
 800207a:	d009      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800207c:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	4a5f      	ldr	r2, [pc, #380]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002082:	4013      	ands	r3, r2
 8002084:	0019      	movs	r1, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699a      	ldr	r2, [r3, #24]
 800208a:	4b56      	ldr	r3, [pc, #344]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800208c:	430a      	orrs	r2, r1
 800208e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4013      	ands	r3, r2
 800209a:	d009      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800209c:	4b51      	ldr	r3, [pc, #324]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800209e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a0:	4a58      	ldr	r2, [pc, #352]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	0019      	movs	r1, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69da      	ldr	r2, [r3, #28]
 80020aa:	4b4e      	ldr	r3, [pc, #312]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ac:	430a      	orrs	r2, r1
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2220      	movs	r2, #32
 80020b6:	4013      	ands	r3, r2
 80020b8:	d009      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ba:	4b4a      	ldr	r3, [pc, #296]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020be:	4a52      	ldr	r2, [pc, #328]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	0019      	movs	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	4b46      	ldr	r3, [pc, #280]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ca:	430a      	orrs	r2, r1
 80020cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	01db      	lsls	r3, r3, #7
 80020d6:	4013      	ands	r3, r2
 80020d8:	d015      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020da:	4b42      	ldr	r3, [pc, #264]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	0899      	lsrs	r1, r3, #2
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1a      	ldr	r2, [r3, #32]
 80020e6:	4b3f      	ldr	r3, [pc, #252]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020e8:	430a      	orrs	r2, r1
 80020ea:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1a      	ldr	r2, [r3, #32]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	05db      	lsls	r3, r3, #23
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d106      	bne.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020f8:	4b3a      	ldr	r3, [pc, #232]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020fe:	2180      	movs	r1, #128	; 0x80
 8002100:	0249      	lsls	r1, r1, #9
 8002102:	430a      	orrs	r2, r1
 8002104:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	031b      	lsls	r3, r3, #12
 800210e:	4013      	ands	r3, r2
 8002110:	d009      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002112:	4b34      	ldr	r3, [pc, #208]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002116:	2240      	movs	r2, #64	; 0x40
 8002118:	4393      	bics	r3, r2
 800211a:	0019      	movs	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002120:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002122:	430a      	orrs	r2, r1
 8002124:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	039b      	lsls	r3, r3, #14
 800212e:	4013      	ands	r3, r2
 8002130:	d016      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002132:	4b2c      	ldr	r3, [pc, #176]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002136:	4a35      	ldr	r2, [pc, #212]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002138:	4013      	ands	r3, r2
 800213a:	0019      	movs	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002140:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002142:	430a      	orrs	r2, r1
 8002144:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	03db      	lsls	r3, r3, #15
 800214e:	429a      	cmp	r2, r3
 8002150:	d106      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002152:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002158:	2180      	movs	r1, #128	; 0x80
 800215a:	0449      	lsls	r1, r1, #17
 800215c:	430a      	orrs	r2, r1
 800215e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	03db      	lsls	r3, r3, #15
 8002168:	4013      	ands	r3, r2
 800216a:	d016      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800216c:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800216e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002170:	4a27      	ldr	r2, [pc, #156]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002172:	4013      	ands	r3, r2
 8002174:	0019      	movs	r1, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800217a:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800217c:	430a      	orrs	r2, r1
 800217e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	045b      	lsls	r3, r3, #17
 8002188:	429a      	cmp	r2, r3
 800218a:	d106      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800218c:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002192:	2180      	movs	r1, #128	; 0x80
 8002194:	0449      	lsls	r1, r1, #17
 8002196:	430a      	orrs	r2, r1
 8002198:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	4013      	ands	r3, r2
 80021a4:	d016      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80021a6:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021aa:	4a1a      	ldr	r2, [pc, #104]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	0019      	movs	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021b6:	430a      	orrs	r2, r1
 80021b8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	01db      	lsls	r3, r3, #7
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d106      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80021c6:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	0249      	lsls	r1, r1, #9
 80021d0:	430a      	orrs	r2, r1
 80021d2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80021d4:	2312      	movs	r3, #18
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	781b      	ldrb	r3, [r3, #0]
}
 80021da:	0018      	movs	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	b006      	add	sp, #24
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40007000 	.word	0x40007000
 80021ec:	fffffcff 	.word	0xfffffcff
 80021f0:	fffeffff 	.word	0xfffeffff
 80021f4:	00001388 	.word	0x00001388
 80021f8:	efffffff 	.word	0xefffffff
 80021fc:	fffff3ff 	.word	0xfffff3ff
 8002200:	fff3ffff 	.word	0xfff3ffff
 8002204:	ffcfffff 	.word	0xffcfffff
 8002208:	ffffcfff 	.word	0xffffcfff
 800220c:	ffbfffff 	.word	0xffbfffff
 8002210:	feffffff 	.word	0xfeffffff
 8002214:	ffff3fff 	.word	0xffff3fff

08002218 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e04a      	b.n	80022c0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	223d      	movs	r2, #61	; 0x3d
 800222e:	5c9b      	ldrb	r3, [r3, r2]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d107      	bne.n	8002246 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	223c      	movs	r2, #60	; 0x3c
 800223a:	2100      	movs	r1, #0
 800223c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	0018      	movs	r0, r3
 8002242:	f7fe fbe1 	bl	8000a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	223d      	movs	r2, #61	; 0x3d
 800224a:	2102      	movs	r1, #2
 800224c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3304      	adds	r3, #4
 8002256:	0019      	movs	r1, r3
 8002258:	0010      	movs	r0, r2
 800225a:	f000 fab9 	bl	80027d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2248      	movs	r2, #72	; 0x48
 8002262:	2101      	movs	r1, #1
 8002264:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	223e      	movs	r2, #62	; 0x3e
 800226a:	2101      	movs	r1, #1
 800226c:	5499      	strb	r1, [r3, r2]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	223f      	movs	r2, #63	; 0x3f
 8002272:	2101      	movs	r1, #1
 8002274:	5499      	strb	r1, [r3, r2]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2240      	movs	r2, #64	; 0x40
 800227a:	2101      	movs	r1, #1
 800227c:	5499      	strb	r1, [r3, r2]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2241      	movs	r2, #65	; 0x41
 8002282:	2101      	movs	r1, #1
 8002284:	5499      	strb	r1, [r3, r2]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2242      	movs	r2, #66	; 0x42
 800228a:	2101      	movs	r1, #1
 800228c:	5499      	strb	r1, [r3, r2]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2243      	movs	r2, #67	; 0x43
 8002292:	2101      	movs	r1, #1
 8002294:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2244      	movs	r2, #68	; 0x44
 800229a:	2101      	movs	r1, #1
 800229c:	5499      	strb	r1, [r3, r2]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2245      	movs	r2, #69	; 0x45
 80022a2:	2101      	movs	r1, #1
 80022a4:	5499      	strb	r1, [r3, r2]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2246      	movs	r2, #70	; 0x46
 80022aa:	2101      	movs	r1, #1
 80022ac:	5499      	strb	r1, [r3, r2]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2247      	movs	r2, #71	; 0x47
 80022b2:	2101      	movs	r1, #1
 80022b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	223d      	movs	r2, #61	; 0x3d
 80022ba:	2101      	movs	r1, #1
 80022bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	0018      	movs	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b002      	add	sp, #8
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	223d      	movs	r2, #61	; 0x3d
 80022d4:	5c9b      	ldrb	r3, [r3, r2]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d001      	beq.n	80022e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e042      	b.n	8002366 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	223d      	movs	r2, #61	; 0x3d
 80022e4:	2102      	movs	r1, #2
 80022e6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2101      	movs	r1, #1
 80022f4:	430a      	orrs	r2, r1
 80022f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1c      	ldr	r2, [pc, #112]	; (8002370 <HAL_TIM_Base_Start_IT+0xa8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00f      	beq.n	8002322 <HAL_TIM_Base_Start_IT+0x5a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	05db      	lsls	r3, r3, #23
 800230a:	429a      	cmp	r2, r3
 800230c:	d009      	beq.n	8002322 <HAL_TIM_Base_Start_IT+0x5a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a18      	ldr	r2, [pc, #96]	; (8002374 <HAL_TIM_Base_Start_IT+0xac>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d004      	beq.n	8002322 <HAL_TIM_Base_Start_IT+0x5a>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a16      	ldr	r2, [pc, #88]	; (8002378 <HAL_TIM_Base_Start_IT+0xb0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d116      	bne.n	8002350 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <HAL_TIM_Base_Start_IT+0xb4>)
 800232a:	4013      	ands	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b06      	cmp	r3, #6
 8002332:	d016      	beq.n	8002362 <HAL_TIM_Base_Start_IT+0x9a>
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	025b      	lsls	r3, r3, #9
 800233a:	429a      	cmp	r2, r3
 800233c:	d011      	beq.n	8002362 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2101      	movs	r1, #1
 800234a:	430a      	orrs	r2, r1
 800234c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234e:	e008      	b.n	8002362 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2101      	movs	r1, #1
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e000      	b.n	8002364 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002362:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	0018      	movs	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	b004      	add	sp, #16
 800236c:	bd80      	pop	{r7, pc}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	40012c00 	.word	0x40012c00
 8002374:	40000400 	.word	0x40000400
 8002378:	40014000 	.word	0x40014000
 800237c:	00010007 	.word	0x00010007

08002380 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2202      	movs	r2, #2
 8002390:	4013      	ands	r3, r2
 8002392:	2b02      	cmp	r3, #2
 8002394:	d124      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2202      	movs	r2, #2
 800239e:	4013      	ands	r3, r2
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d11d      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2203      	movs	r2, #3
 80023aa:	4252      	negs	r2, r2
 80023ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2203      	movs	r2, #3
 80023bc:	4013      	ands	r3, r2
 80023be:	d004      	beq.n	80023ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	0018      	movs	r0, r3
 80023c4:	f000 f9ec 	bl	80027a0 <HAL_TIM_IC_CaptureCallback>
 80023c8:	e007      	b.n	80023da <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f000 f9df 	bl	8002790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	0018      	movs	r0, r3
 80023d6:	f000 f9eb 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2204      	movs	r2, #4
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d125      	bne.n	800243a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2204      	movs	r2, #4
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d11e      	bne.n	800243a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2205      	movs	r2, #5
 8002402:	4252      	negs	r2, r2
 8002404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2202      	movs	r2, #2
 800240a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	23c0      	movs	r3, #192	; 0xc0
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4013      	ands	r3, r2
 8002418:	d004      	beq.n	8002424 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	0018      	movs	r0, r3
 800241e:	f000 f9bf 	bl	80027a0 <HAL_TIM_IC_CaptureCallback>
 8002422:	e007      	b.n	8002434 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	0018      	movs	r0, r3
 8002428:	f000 f9b2 	bl	8002790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	0018      	movs	r0, r3
 8002430:	f000 f9be 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	2208      	movs	r2, #8
 8002442:	4013      	ands	r3, r2
 8002444:	2b08      	cmp	r3, #8
 8002446:	d124      	bne.n	8002492 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	2208      	movs	r2, #8
 8002450:	4013      	ands	r3, r2
 8002452:	2b08      	cmp	r3, #8
 8002454:	d11d      	bne.n	8002492 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2209      	movs	r2, #9
 800245c:	4252      	negs	r2, r2
 800245e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2204      	movs	r2, #4
 8002464:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	2203      	movs	r2, #3
 800246e:	4013      	ands	r3, r2
 8002470:	d004      	beq.n	800247c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	0018      	movs	r0, r3
 8002476:	f000 f993 	bl	80027a0 <HAL_TIM_IC_CaptureCallback>
 800247a:	e007      	b.n	800248c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	0018      	movs	r0, r3
 8002480:	f000 f986 	bl	8002790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	0018      	movs	r0, r3
 8002488:	f000 f992 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2210      	movs	r2, #16
 800249a:	4013      	ands	r3, r2
 800249c:	2b10      	cmp	r3, #16
 800249e:	d125      	bne.n	80024ec <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2210      	movs	r2, #16
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b10      	cmp	r3, #16
 80024ac:	d11e      	bne.n	80024ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2211      	movs	r2, #17
 80024b4:	4252      	negs	r2, r2
 80024b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2208      	movs	r2, #8
 80024bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69da      	ldr	r2, [r3, #28]
 80024c4:	23c0      	movs	r3, #192	; 0xc0
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4013      	ands	r3, r2
 80024ca:	d004      	beq.n	80024d6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	0018      	movs	r0, r3
 80024d0:	f000 f966 	bl	80027a0 <HAL_TIM_IC_CaptureCallback>
 80024d4:	e007      	b.n	80024e6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	0018      	movs	r0, r3
 80024da:	f000 f959 	bl	8002790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0018      	movs	r0, r3
 80024e2:	f000 f965 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	2201      	movs	r2, #1
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d10f      	bne.n	800251a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	4013      	ands	r3, r2
 8002504:	2b01      	cmp	r3, #1
 8002506:	d108      	bne.n	800251a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2202      	movs	r2, #2
 800250e:	4252      	negs	r2, r2
 8002510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	0018      	movs	r0, r3
 8002516:	f7fe f88b 	bl	8000630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	4013      	ands	r3, r2
 8002524:	2b80      	cmp	r3, #128	; 0x80
 8002526:	d10f      	bne.n	8002548 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2280      	movs	r2, #128	; 0x80
 8002530:	4013      	ands	r3, r2
 8002532:	2b80      	cmp	r3, #128	; 0x80
 8002534:	d108      	bne.n	8002548 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2281      	movs	r2, #129	; 0x81
 800253c:	4252      	negs	r2, r2
 800253e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	0018      	movs	r0, r3
 8002544:	f000 fad6 	bl	8002af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	401a      	ands	r2, r3
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	429a      	cmp	r2, r3
 800255a:	d10e      	bne.n	800257a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2280      	movs	r2, #128	; 0x80
 8002564:	4013      	ands	r3, r2
 8002566:	2b80      	cmp	r3, #128	; 0x80
 8002568:	d107      	bne.n	800257a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1c      	ldr	r2, [pc, #112]	; (80025e0 <HAL_TIM_IRQHandler+0x260>)
 8002570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	0018      	movs	r0, r3
 8002576:	f000 fac5 	bl	8002b04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2240      	movs	r2, #64	; 0x40
 8002582:	4013      	ands	r3, r2
 8002584:	2b40      	cmp	r3, #64	; 0x40
 8002586:	d10f      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2240      	movs	r2, #64	; 0x40
 8002590:	4013      	ands	r3, r2
 8002592:	2b40      	cmp	r3, #64	; 0x40
 8002594:	d108      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2241      	movs	r2, #65	; 0x41
 800259c:	4252      	negs	r2, r2
 800259e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	0018      	movs	r0, r3
 80025a4:	f000 f90c 	bl	80027c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	2220      	movs	r2, #32
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	d10f      	bne.n	80025d6 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2220      	movs	r2, #32
 80025be:	4013      	ands	r3, r2
 80025c0:	2b20      	cmp	r3, #32
 80025c2:	d108      	bne.n	80025d6 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2221      	movs	r2, #33	; 0x21
 80025ca:	4252      	negs	r2, r2
 80025cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	0018      	movs	r0, r3
 80025d2:	f000 fa87 	bl	8002ae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b002      	add	sp, #8
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	fffffeff 	.word	0xfffffeff

080025e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	230f      	movs	r3, #15
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	223c      	movs	r2, #60	; 0x3c
 80025fa:	5c9b      	ldrb	r3, [r3, r2]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_TIM_ConfigClockSource+0x20>
 8002600:	2302      	movs	r3, #2
 8002602:	e0bc      	b.n	800277e <HAL_TIM_ConfigClockSource+0x19a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	223c      	movs	r2, #60	; 0x3c
 8002608:	2101      	movs	r1, #1
 800260a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	223d      	movs	r2, #61	; 0x3d
 8002610:	2102      	movs	r1, #2
 8002612:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4a5a      	ldr	r2, [pc, #360]	; (8002788 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002620:	4013      	ands	r3, r2
 8002622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4a59      	ldr	r2, [pc, #356]	; (800278c <HAL_TIM_ConfigClockSource+0x1a8>)
 8002628:	4013      	ands	r3, r2
 800262a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2280      	movs	r2, #128	; 0x80
 800263a:	0192      	lsls	r2, r2, #6
 800263c:	4293      	cmp	r3, r2
 800263e:	d040      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0xde>
 8002640:	2280      	movs	r2, #128	; 0x80
 8002642:	0192      	lsls	r2, r2, #6
 8002644:	4293      	cmp	r3, r2
 8002646:	d900      	bls.n	800264a <HAL_TIM_ConfigClockSource+0x66>
 8002648:	e088      	b.n	800275c <HAL_TIM_ConfigClockSource+0x178>
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	0152      	lsls	r2, r2, #5
 800264e:	4293      	cmp	r3, r2
 8002650:	d100      	bne.n	8002654 <HAL_TIM_ConfigClockSource+0x70>
 8002652:	e088      	b.n	8002766 <HAL_TIM_ConfigClockSource+0x182>
 8002654:	2280      	movs	r2, #128	; 0x80
 8002656:	0152      	lsls	r2, r2, #5
 8002658:	4293      	cmp	r3, r2
 800265a:	d900      	bls.n	800265e <HAL_TIM_ConfigClockSource+0x7a>
 800265c:	e07e      	b.n	800275c <HAL_TIM_ConfigClockSource+0x178>
 800265e:	2b70      	cmp	r3, #112	; 0x70
 8002660:	d018      	beq.n	8002694 <HAL_TIM_ConfigClockSource+0xb0>
 8002662:	d900      	bls.n	8002666 <HAL_TIM_ConfigClockSource+0x82>
 8002664:	e07a      	b.n	800275c <HAL_TIM_ConfigClockSource+0x178>
 8002666:	2b60      	cmp	r3, #96	; 0x60
 8002668:	d04f      	beq.n	800270a <HAL_TIM_ConfigClockSource+0x126>
 800266a:	d900      	bls.n	800266e <HAL_TIM_ConfigClockSource+0x8a>
 800266c:	e076      	b.n	800275c <HAL_TIM_ConfigClockSource+0x178>
 800266e:	2b50      	cmp	r3, #80	; 0x50
 8002670:	d03b      	beq.n	80026ea <HAL_TIM_ConfigClockSource+0x106>
 8002672:	d900      	bls.n	8002676 <HAL_TIM_ConfigClockSource+0x92>
 8002674:	e072      	b.n	800275c <HAL_TIM_ConfigClockSource+0x178>
 8002676:	2b40      	cmp	r3, #64	; 0x40
 8002678:	d057      	beq.n	800272a <HAL_TIM_ConfigClockSource+0x146>
 800267a:	d900      	bls.n	800267e <HAL_TIM_ConfigClockSource+0x9a>
 800267c:	e06e      	b.n	800275c <HAL_TIM_ConfigClockSource+0x178>
 800267e:	2b30      	cmp	r3, #48	; 0x30
 8002680:	d063      	beq.n	800274a <HAL_TIM_ConfigClockSource+0x166>
 8002682:	d86b      	bhi.n	800275c <HAL_TIM_ConfigClockSource+0x178>
 8002684:	2b20      	cmp	r3, #32
 8002686:	d060      	beq.n	800274a <HAL_TIM_ConfigClockSource+0x166>
 8002688:	d868      	bhi.n	800275c <HAL_TIM_ConfigClockSource+0x178>
 800268a:	2b00      	cmp	r3, #0
 800268c:	d05d      	beq.n	800274a <HAL_TIM_ConfigClockSource+0x166>
 800268e:	2b10      	cmp	r3, #16
 8002690:	d05b      	beq.n	800274a <HAL_TIM_ConfigClockSource+0x166>
 8002692:	e063      	b.n	800275c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6899      	ldr	r1, [r3, #8]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f000 f990 	bl	80029c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2277      	movs	r2, #119	; 0x77
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	609a      	str	r2, [r3, #8]
      break;
 80026c0:	e052      	b.n	8002768 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6899      	ldr	r1, [r3, #8]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f000 f979 	bl	80029c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2180      	movs	r1, #128	; 0x80
 80026e2:	01c9      	lsls	r1, r1, #7
 80026e4:	430a      	orrs	r2, r1
 80026e6:	609a      	str	r2, [r3, #8]
      break;
 80026e8:	e03e      	b.n	8002768 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	6859      	ldr	r1, [r3, #4]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	001a      	movs	r2, r3
 80026f8:	f000 f8ea 	bl	80028d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2150      	movs	r1, #80	; 0x50
 8002702:	0018      	movs	r0, r3
 8002704:	f000 f944 	bl	8002990 <TIM_ITRx_SetConfig>
      break;
 8002708:	e02e      	b.n	8002768 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6859      	ldr	r1, [r3, #4]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	001a      	movs	r2, r3
 8002718:	f000 f908 	bl	800292c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2160      	movs	r1, #96	; 0x60
 8002722:	0018      	movs	r0, r3
 8002724:	f000 f934 	bl	8002990 <TIM_ITRx_SetConfig>
      break;
 8002728:	e01e      	b.n	8002768 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	6859      	ldr	r1, [r3, #4]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	001a      	movs	r2, r3
 8002738:	f000 f8ca 	bl	80028d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2140      	movs	r1, #64	; 0x40
 8002742:	0018      	movs	r0, r3
 8002744:	f000 f924 	bl	8002990 <TIM_ITRx_SetConfig>
      break;
 8002748:	e00e      	b.n	8002768 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	0019      	movs	r1, r3
 8002754:	0010      	movs	r0, r2
 8002756:	f000 f91b 	bl	8002990 <TIM_ITRx_SetConfig>
      break;
 800275a:	e005      	b.n	8002768 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800275c:	230f      	movs	r3, #15
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
      break;
 8002764:	e000      	b.n	8002768 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002766:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	223d      	movs	r2, #61	; 0x3d
 800276c:	2101      	movs	r1, #1
 800276e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	223c      	movs	r2, #60	; 0x3c
 8002774:	2100      	movs	r1, #0
 8002776:	5499      	strb	r1, [r3, r2]

  return status;
 8002778:	230f      	movs	r3, #15
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	781b      	ldrb	r3, [r3, #0]
}
 800277e:	0018      	movs	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	b004      	add	sp, #16
 8002784:	bd80      	pop	{r7, pc}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	ffceff88 	.word	0xffceff88
 800278c:	ffff00ff 	.word	0xffff00ff

08002790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002798:	46c0      	nop			; (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	b002      	add	sp, #8
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b002      	add	sp, #8
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027b8:	46c0      	nop			; (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b002      	add	sp, #8
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b002      	add	sp, #8
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a34      	ldr	r2, [pc, #208]	; (80028b4 <TIM_Base_SetConfig+0xe4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d008      	beq.n	80027fa <TIM_Base_SetConfig+0x2a>
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	05db      	lsls	r3, r3, #23
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d003      	beq.n	80027fa <TIM_Base_SetConfig+0x2a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a30      	ldr	r2, [pc, #192]	; (80028b8 <TIM_Base_SetConfig+0xe8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d108      	bne.n	800280c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2270      	movs	r2, #112	; 0x70
 80027fe:	4393      	bics	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a29      	ldr	r2, [pc, #164]	; (80028b4 <TIM_Base_SetConfig+0xe4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d018      	beq.n	8002846 <TIM_Base_SetConfig+0x76>
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	05db      	lsls	r3, r3, #23
 800281a:	429a      	cmp	r2, r3
 800281c:	d013      	beq.n	8002846 <TIM_Base_SetConfig+0x76>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a25      	ldr	r2, [pc, #148]	; (80028b8 <TIM_Base_SetConfig+0xe8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00f      	beq.n	8002846 <TIM_Base_SetConfig+0x76>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a24      	ldr	r2, [pc, #144]	; (80028bc <TIM_Base_SetConfig+0xec>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00b      	beq.n	8002846 <TIM_Base_SetConfig+0x76>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <TIM_Base_SetConfig+0xf0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d007      	beq.n	8002846 <TIM_Base_SetConfig+0x76>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a22      	ldr	r2, [pc, #136]	; (80028c4 <TIM_Base_SetConfig+0xf4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d003      	beq.n	8002846 <TIM_Base_SetConfig+0x76>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a21      	ldr	r2, [pc, #132]	; (80028c8 <TIM_Base_SetConfig+0xf8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d108      	bne.n	8002858 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4a20      	ldr	r2, [pc, #128]	; (80028cc <TIM_Base_SetConfig+0xfc>)
 800284a:	4013      	ands	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	4393      	bics	r3, r2
 800285e:	001a      	movs	r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a0c      	ldr	r2, [pc, #48]	; (80028b4 <TIM_Base_SetConfig+0xe4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00b      	beq.n	800289e <TIM_Base_SetConfig+0xce>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a0d      	ldr	r2, [pc, #52]	; (80028c0 <TIM_Base_SetConfig+0xf0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d007      	beq.n	800289e <TIM_Base_SetConfig+0xce>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <TIM_Base_SetConfig+0xf4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d003      	beq.n	800289e <TIM_Base_SetConfig+0xce>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <TIM_Base_SetConfig+0xf8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d103      	bne.n	80028a6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	615a      	str	r2, [r3, #20]
}
 80028ac:	46c0      	nop			; (mov r8, r8)
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b004      	add	sp, #16
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40000400 	.word	0x40000400
 80028bc:	40002000 	.word	0x40002000
 80028c0:	40014000 	.word	0x40014000
 80028c4:	40014400 	.word	0x40014400
 80028c8:	40014800 	.word	0x40014800
 80028cc:	fffffcff 	.word	0xfffffcff

080028d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	2201      	movs	r2, #1
 80028e8:	4393      	bics	r3, r2
 80028ea:	001a      	movs	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	22f0      	movs	r2, #240	; 0xf0
 80028fa:	4393      	bics	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	220a      	movs	r2, #10
 800290c:	4393      	bics	r3, r2
 800290e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	621a      	str	r2, [r3, #32]
}
 8002924:	46c0      	nop			; (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b006      	add	sp, #24
 800292a:	bd80      	pop	{r7, pc}

0800292c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	2210      	movs	r2, #16
 800293e:	4393      	bics	r3, r2
 8002940:	001a      	movs	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	4a0d      	ldr	r2, [pc, #52]	; (800298c <TIM_TI2_ConfigInputStage+0x60>)
 8002956:	4013      	ands	r3, r2
 8002958:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	031b      	lsls	r3, r3, #12
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	22a0      	movs	r2, #160	; 0xa0
 8002968:	4393      	bics	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	621a      	str	r2, [r3, #32]
}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	46bd      	mov	sp, r7
 8002986:	b006      	add	sp, #24
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	ffff0fff 	.word	0xffff0fff

08002990 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4a08      	ldr	r2, [pc, #32]	; (80029c4 <TIM_ITRx_SetConfig+0x34>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	2207      	movs	r2, #7
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	609a      	str	r2, [r3, #8]
}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	46bd      	mov	sp, r7
 80029be:	b004      	add	sp, #16
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	ffcfff8f 	.word	0xffcfff8f

080029c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	4a09      	ldr	r2, [pc, #36]	; (8002a04 <TIM_ETR_SetConfig+0x3c>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	021a      	lsls	r2, r3, #8
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	609a      	str	r2, [r3, #8]
}
 80029fc:	46c0      	nop			; (mov r8, r8)
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b006      	add	sp, #24
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	ffff00ff 	.word	0xffff00ff

08002a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	223c      	movs	r2, #60	; 0x3c
 8002a16:	5c9b      	ldrb	r3, [r3, r2]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e055      	b.n	8002acc <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	223c      	movs	r2, #60	; 0x3c
 8002a24:	2101      	movs	r1, #1
 8002a26:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	223d      	movs	r2, #61	; 0x3d
 8002a2c:	2102      	movs	r1, #2
 8002a2e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a23      	ldr	r2, [pc, #140]	; (8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d108      	bne.n	8002a5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4a22      	ldr	r2, [pc, #136]	; (8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2270      	movs	r2, #112	; 0x70
 8002a60:	4393      	bics	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a16      	ldr	r2, [pc, #88]	; (8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00f      	beq.n	8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	05db      	lsls	r3, r3, #23
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d009      	beq.n	8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a12      	ldr	r2, [pc, #72]	; (8002adc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d004      	beq.n	8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a11      	ldr	r2, [pc, #68]	; (8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d10c      	bne.n	8002aba <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2280      	movs	r2, #128	; 0x80
 8002aa4:	4393      	bics	r3, r2
 8002aa6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	223d      	movs	r2, #61	; 0x3d
 8002abe:	2101      	movs	r1, #1
 8002ac0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	223c      	movs	r2, #60	; 0x3c
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	0018      	movs	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b004      	add	sp, #16
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40012c00 	.word	0x40012c00
 8002ad8:	ff0fffff 	.word	0xff0fffff
 8002adc:	40000400 	.word	0x40000400
 8002ae0:	40014000 	.word	0x40014000

08002ae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002aec:	46c0      	nop			; (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b002      	add	sp, #8
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b002      	add	sp, #8
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b002      	add	sp, #8
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e046      	b.n	8002bb4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2284      	movs	r2, #132	; 0x84
 8002b2a:	589b      	ldr	r3, [r3, r2]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d107      	bne.n	8002b40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2280      	movs	r2, #128	; 0x80
 8002b34:	2100      	movs	r1, #0
 8002b36:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f7fd ff88 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2284      	movs	r2, #132	; 0x84
 8002b44:	2124      	movs	r1, #36	; 0x24
 8002b46:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2101      	movs	r1, #1
 8002b54:	438a      	bics	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f000 fc8c 	bl	8003478 <UART_SetConfig>
 8002b60:	0003      	movs	r3, r0
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e024      	b.n	8002bb4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 ff3d 	bl	80039f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	490d      	ldr	r1, [pc, #52]	; (8002bbc <HAL_UART_Init+0xa8>)
 8002b86:	400a      	ands	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	212a      	movs	r1, #42	; 0x2a
 8002b96:	438a      	bics	r2, r1
 8002b98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	0018      	movs	r0, r3
 8002bae:	f000 ffd5 	bl	8003b5c <UART_CheckIdleState>
 8002bb2:	0003      	movs	r3, r0
}
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b002      	add	sp, #8
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	ffffb7ff 	.word	0xffffb7ff

08002bc0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08c      	sub	sp, #48	; 0x30
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	1dbb      	adds	r3, r7, #6
 8002bcc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2284      	movs	r2, #132	; 0x84
 8002bd2:	589b      	ldr	r3, [r3, r2]
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d000      	beq.n	8002bda <HAL_UART_Transmit_IT+0x1a>
 8002bd8:	e0a0      	b.n	8002d1c <HAL_UART_Transmit_IT+0x15c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_UART_Transmit_IT+0x28>
 8002be0:	1dbb      	adds	r3, r7, #6
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e098      	b.n	8002d1e <HAL_UART_Transmit_IT+0x15e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	015b      	lsls	r3, r3, #5
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d109      	bne.n	8002c0c <HAL_UART_Transmit_IT+0x4c>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d105      	bne.n	8002c0c <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2201      	movs	r2, #1
 8002c04:	4013      	ands	r3, r2
 8002c06:	d001      	beq.n	8002c0c <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e088      	b.n	8002d1e <HAL_UART_Transmit_IT+0x15e>
      }
    }

    __HAL_LOCK(huart);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2280      	movs	r2, #128	; 0x80
 8002c10:	5c9b      	ldrb	r3, [r3, r2]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_UART_Transmit_IT+0x5a>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e081      	b.n	8002d1e <HAL_UART_Transmit_IT+0x15e>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	2101      	movs	r1, #1
 8002c20:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1dba      	adds	r2, r7, #6
 8002c2c:	2154      	movs	r1, #84	; 0x54
 8002c2e:	8812      	ldrh	r2, [r2, #0]
 8002c30:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	1dba      	adds	r2, r7, #6
 8002c36:	2156      	movs	r1, #86	; 0x56
 8002c38:	8812      	ldrh	r2, [r2, #0]
 8002c3a:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	228c      	movs	r2, #140	; 0x8c
 8002c46:	2100      	movs	r1, #0
 8002c48:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2284      	movs	r2, #132	; 0x84
 8002c4e:	2121      	movs	r1, #33	; 0x21
 8002c50:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c56:	2380      	movs	r3, #128	; 0x80
 8002c58:	059b      	lsls	r3, r3, #22
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d12e      	bne.n	8002cbc <HAL_UART_Transmit_IT+0xfc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	015b      	lsls	r3, r3, #5
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d107      	bne.n	8002c7a <HAL_UART_Transmit_IT+0xba>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d103      	bne.n	8002c7a <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4a2c      	ldr	r2, [pc, #176]	; (8002d28 <HAL_UART_Transmit_IT+0x168>)
 8002c76:	675a      	str	r2, [r3, #116]	; 0x74
 8002c78:	e002      	b.n	8002c80 <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4a2b      	ldr	r2, [pc, #172]	; (8002d2c <HAL_UART_Transmit_IT+0x16c>)
 8002c7e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2280      	movs	r2, #128	; 0x80
 8002c84:	2100      	movs	r1, #0
 8002c86:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c88:	f3ef 8310 	mrs	r3, PRIMASK
 8002c8c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c8e:	69fb      	ldr	r3, [r7, #28]

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c92:	2301      	movs	r3, #1
 8002c94:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	f383 8810 	msr	PRIMASK, r3
}
 8002c9c:	46c0      	nop			; (mov r8, r8)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2180      	movs	r1, #128	; 0x80
 8002caa:	0409      	lsls	r1, r1, #16
 8002cac:	430a      	orrs	r2, r1
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	f383 8810 	msr	PRIMASK, r3
}
 8002cba:	e02d      	b.n	8002d18 <HAL_UART_Transmit_IT+0x158>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	015b      	lsls	r3, r3, #5
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d107      	bne.n	8002cd8 <HAL_UART_Transmit_IT+0x118>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d103      	bne.n	8002cd8 <HAL_UART_Transmit_IT+0x118>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4a17      	ldr	r2, [pc, #92]	; (8002d30 <HAL_UART_Transmit_IT+0x170>)
 8002cd4:	675a      	str	r2, [r3, #116]	; 0x74
 8002cd6:	e002      	b.n	8002cde <HAL_UART_Transmit_IT+0x11e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4a16      	ldr	r2, [pc, #88]	; (8002d34 <HAL_UART_Transmit_IT+0x174>)
 8002cdc:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2280      	movs	r2, #128	; 0x80
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8002cea:	613b      	str	r3, [r7, #16]
  return(result);
 8002cec:	693b      	ldr	r3, [r7, #16]

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f383 8810 	msr	PRIMASK, r3
}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2180      	movs	r1, #128	; 0x80
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f383 8810 	msr	PRIMASK, r3
}
 8002d16:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	e000      	b.n	8002d1e <HAL_UART_Transmit_IT+0x15e>
  }
  else
  {
    return HAL_BUSY;
 8002d1c:	2302      	movs	r3, #2
  }
}
 8002d1e:	0018      	movs	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b00c      	add	sp, #48	; 0x30
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	08004331 	.word	0x08004331
 8002d2c:	08004245 	.word	0x08004245
 8002d30:	08004187 	.word	0x08004187
 8002d34:	080040d3 	.word	0x080040d3

08002d38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	1dbb      	adds	r3, r7, #6
 8002d44:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2288      	movs	r2, #136	; 0x88
 8002d4a:	589b      	ldr	r3, [r3, r2]
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d155      	bne.n	8002dfc <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_UART_Receive_IT+0x26>
 8002d56:	1dbb      	adds	r3, r7, #6
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e04d      	b.n	8002dfe <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	015b      	lsls	r3, r3, #5
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d109      	bne.n	8002d82 <HAL_UART_Receive_IT+0x4a>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d105      	bne.n	8002d82 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d001      	beq.n	8002d82 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e03d      	b.n	8002dfe <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2280      	movs	r2, #128	; 0x80
 8002d86:	5c9b      	ldrb	r3, [r3, r2]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_UART_Receive_IT+0x58>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e036      	b.n	8002dfe <HAL_UART_Receive_IT+0xc6>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2280      	movs	r2, #128	; 0x80
 8002d94:	2101      	movs	r1, #1
 8002d96:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a19      	ldr	r2, [pc, #100]	; (8002e08 <HAL_UART_Receive_IT+0xd0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d020      	beq.n	8002dea <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	041b      	lsls	r3, r3, #16
 8002db2:	4013      	ands	r3, r2
 8002db4:	d019      	beq.n	8002dea <HAL_UART_Receive_IT+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dba:	613b      	str	r3, [r7, #16]
  return(result);
 8002dbc:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f383 8810 	msr	PRIMASK, r3
}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2180      	movs	r1, #128	; 0x80
 8002dd8:	04c9      	lsls	r1, r1, #19
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f383 8810 	msr	PRIMASK, r3
}
 8002de8:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002dea:	1dbb      	adds	r3, r7, #6
 8002dec:	881a      	ldrh	r2, [r3, #0]
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	0018      	movs	r0, r3
 8002df4:	f000 ffc4 	bl	8003d80 <UART_Start_Receive_IT>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	e000      	b.n	8002dfe <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002dfc:	2302      	movs	r3, #2
  }
}
 8002dfe:	0018      	movs	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b008      	add	sp, #32
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	40008000 	.word	0x40008000

08002e0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e0c:	b5b0      	push	{r4, r5, r7, lr}
 8002e0e:	b0aa      	sub	sp, #168	; 0xa8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	22a4      	movs	r2, #164	; 0xa4
 8002e1c:	18b9      	adds	r1, r7, r2
 8002e1e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	20a0      	movs	r0, #160	; 0xa0
 8002e28:	1839      	adds	r1, r7, r0
 8002e2a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	249c      	movs	r4, #156	; 0x9c
 8002e34:	1939      	adds	r1, r7, r4
 8002e36:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e38:	0011      	movs	r1, r2
 8002e3a:	18bb      	adds	r3, r7, r2
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4aa0      	ldr	r2, [pc, #640]	; (80030c0 <HAL_UART_IRQHandler+0x2b4>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	2298      	movs	r2, #152	; 0x98
 8002e44:	18bd      	adds	r5, r7, r2
 8002e46:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002e48:	18bb      	adds	r3, r7, r2
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d11a      	bne.n	8002e86 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e50:	187b      	adds	r3, r7, r1
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2220      	movs	r2, #32
 8002e56:	4013      	ands	r3, r2
 8002e58:	d015      	beq.n	8002e86 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002e5a:	183b      	adds	r3, r7, r0
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	4013      	ands	r3, r2
 8002e62:	d105      	bne.n	8002e70 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002e64:	193b      	adds	r3, r7, r4
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	055b      	lsls	r3, r3, #21
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d00a      	beq.n	8002e86 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d100      	bne.n	8002e7a <HAL_UART_IRQHandler+0x6e>
 8002e78:	e2cf      	b.n	800341a <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	0010      	movs	r0, r2
 8002e82:	4798      	blx	r3
      }
      return;
 8002e84:	e2c9      	b.n	800341a <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e86:	2398      	movs	r3, #152	; 0x98
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d100      	bne.n	8002e92 <HAL_UART_IRQHandler+0x86>
 8002e90:	e11e      	b.n	80030d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002e92:	239c      	movs	r3, #156	; 0x9c
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a8a      	ldr	r2, [pc, #552]	; (80030c4 <HAL_UART_IRQHandler+0x2b8>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d106      	bne.n	8002eac <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002e9e:	23a0      	movs	r3, #160	; 0xa0
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a88      	ldr	r2, [pc, #544]	; (80030c8 <HAL_UART_IRQHandler+0x2bc>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d100      	bne.n	8002eac <HAL_UART_IRQHandler+0xa0>
 8002eaa:	e111      	b.n	80030d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002eac:	23a4      	movs	r3, #164	; 0xa4
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d012      	beq.n	8002ede <HAL_UART_IRQHandler+0xd2>
 8002eb8:	23a0      	movs	r3, #160	; 0xa0
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d00b      	beq.n	8002ede <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	228c      	movs	r2, #140	; 0x8c
 8002ed2:	589b      	ldr	r3, [r3, r2]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	218c      	movs	r1, #140	; 0x8c
 8002edc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ede:	23a4      	movs	r3, #164	; 0xa4
 8002ee0:	18fb      	adds	r3, r7, r3
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d011      	beq.n	8002f0e <HAL_UART_IRQHandler+0x102>
 8002eea:	239c      	movs	r3, #156	; 0x9c
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d00b      	beq.n	8002f0e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2202      	movs	r2, #2
 8002efc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	228c      	movs	r2, #140	; 0x8c
 8002f02:	589b      	ldr	r3, [r3, r2]
 8002f04:	2204      	movs	r2, #4
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	218c      	movs	r1, #140	; 0x8c
 8002f0c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f0e:	23a4      	movs	r3, #164	; 0xa4
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2204      	movs	r2, #4
 8002f16:	4013      	ands	r3, r2
 8002f18:	d011      	beq.n	8002f3e <HAL_UART_IRQHandler+0x132>
 8002f1a:	239c      	movs	r3, #156	; 0x9c
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2201      	movs	r2, #1
 8002f22:	4013      	ands	r3, r2
 8002f24:	d00b      	beq.n	8002f3e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	228c      	movs	r2, #140	; 0x8c
 8002f32:	589b      	ldr	r3, [r3, r2]
 8002f34:	2202      	movs	r2, #2
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	218c      	movs	r1, #140	; 0x8c
 8002f3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f3e:	23a4      	movs	r3, #164	; 0xa4
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2208      	movs	r2, #8
 8002f46:	4013      	ands	r3, r2
 8002f48:	d017      	beq.n	8002f7a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f4a:	23a0      	movs	r3, #160	; 0xa0
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2220      	movs	r2, #32
 8002f52:	4013      	ands	r3, r2
 8002f54:	d105      	bne.n	8002f62 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002f56:	239c      	movs	r3, #156	; 0x9c
 8002f58:	18fb      	adds	r3, r7, r3
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a59      	ldr	r2, [pc, #356]	; (80030c4 <HAL_UART_IRQHandler+0x2b8>)
 8002f5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f60:	d00b      	beq.n	8002f7a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2208      	movs	r2, #8
 8002f68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	228c      	movs	r2, #140	; 0x8c
 8002f6e:	589b      	ldr	r3, [r3, r2]
 8002f70:	2208      	movs	r2, #8
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	218c      	movs	r1, #140	; 0x8c
 8002f78:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f7a:	23a4      	movs	r3, #164	; 0xa4
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	4013      	ands	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x1a4>
 8002f88:	23a0      	movs	r3, #160	; 0xa0
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	04db      	lsls	r3, r3, #19
 8002f92:	4013      	ands	r3, r2
 8002f94:	d00c      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2280      	movs	r2, #128	; 0x80
 8002f9c:	0112      	lsls	r2, r2, #4
 8002f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	228c      	movs	r2, #140	; 0x8c
 8002fa4:	589b      	ldr	r3, [r3, r2]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	218c      	movs	r1, #140	; 0x8c
 8002fae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	228c      	movs	r2, #140	; 0x8c
 8002fb4:	589b      	ldr	r3, [r3, r2]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d100      	bne.n	8002fbc <HAL_UART_IRQHandler+0x1b0>
 8002fba:	e230      	b.n	800341e <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002fbc:	23a4      	movs	r3, #164	; 0xa4
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d015      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002fc8:	23a0      	movs	r3, #160	; 0xa0
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d106      	bne.n	8002fe2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002fd4:	239c      	movs	r3, #156	; 0x9c
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	2380      	movs	r3, #128	; 0x80
 8002fdc:	055b      	lsls	r3, r3, #21
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d008      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d004      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	0010      	movs	r0, r2
 8002ff2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	228c      	movs	r2, #140	; 0x8c
 8002ff8:	589b      	ldr	r3, [r3, r2]
 8002ffa:	2194      	movs	r1, #148	; 0x94
 8002ffc:	187a      	adds	r2, r7, r1
 8002ffe:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2240      	movs	r2, #64	; 0x40
 8003008:	4013      	ands	r3, r2
 800300a:	2b40      	cmp	r3, #64	; 0x40
 800300c:	d004      	beq.n	8003018 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800300e:	187b      	adds	r3, r7, r1
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2228      	movs	r2, #40	; 0x28
 8003014:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003016:	d047      	beq.n	80030a8 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	0018      	movs	r0, r3
 800301c:	f000 ffdc 	bl	8003fd8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2240      	movs	r2, #64	; 0x40
 8003028:	4013      	ands	r3, r2
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	d137      	bne.n	800309e <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800302e:	f3ef 8310 	mrs	r3, PRIMASK
 8003032:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003034:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003036:	2090      	movs	r0, #144	; 0x90
 8003038:	183a      	adds	r2, r7, r0
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	2301      	movs	r3, #1
 800303e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003042:	f383 8810 	msr	PRIMASK, r3
}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2140      	movs	r1, #64	; 0x40
 8003054:	438a      	bics	r2, r1
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	183b      	adds	r3, r7, r0
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003060:	f383 8810 	msr	PRIMASK, r3
}
 8003064:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800306a:	2b00      	cmp	r3, #0
 800306c:	d012      	beq.n	8003094 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003072:	4a16      	ldr	r2, [pc, #88]	; (80030cc <HAL_UART_IRQHandler+0x2c0>)
 8003074:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800307a:	0018      	movs	r0, r3
 800307c:	f7fe f818 	bl	80010b0 <HAL_DMA_Abort_IT>
 8003080:	1e03      	subs	r3, r0, #0
 8003082:	d01a      	beq.n	80030ba <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800308e:	0018      	movs	r0, r3
 8003090:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003092:	e012      	b.n	80030ba <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	0018      	movs	r0, r3
 8003098:	f000 f9da 	bl	8003450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800309c:	e00d      	b.n	80030ba <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	0018      	movs	r0, r3
 80030a2:	f000 f9d5 	bl	8003450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a6:	e008      	b.n	80030ba <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	0018      	movs	r0, r3
 80030ac:	f000 f9d0 	bl	8003450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	228c      	movs	r2, #140	; 0x8c
 80030b4:	2100      	movs	r1, #0
 80030b6:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80030b8:	e1b1      	b.n	800341e <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ba:	46c0      	nop			; (mov r8, r8)
    return;
 80030bc:	e1af      	b.n	800341e <HAL_UART_IRQHandler+0x612>
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	0000080f 	.word	0x0000080f
 80030c4:	10000001 	.word	0x10000001
 80030c8:	04000120 	.word	0x04000120
 80030cc:	080040a5 	.word	0x080040a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d000      	beq.n	80030da <HAL_UART_IRQHandler+0x2ce>
 80030d8:	e135      	b.n	8003346 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030da:	23a4      	movs	r3, #164	; 0xa4
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2210      	movs	r2, #16
 80030e2:	4013      	ands	r3, r2
 80030e4:	d100      	bne.n	80030e8 <HAL_UART_IRQHandler+0x2dc>
 80030e6:	e12e      	b.n	8003346 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030e8:	23a0      	movs	r3, #160	; 0xa0
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2210      	movs	r2, #16
 80030f0:	4013      	ands	r3, r2
 80030f2:	d100      	bne.n	80030f6 <HAL_UART_IRQHandler+0x2ea>
 80030f4:	e127      	b.n	8003346 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2210      	movs	r2, #16
 80030fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2240      	movs	r2, #64	; 0x40
 8003106:	4013      	ands	r3, r2
 8003108:	2b40      	cmp	r3, #64	; 0x40
 800310a:	d000      	beq.n	800310e <HAL_UART_IRQHandler+0x302>
 800310c:	e09e      	b.n	800324c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	217e      	movs	r1, #126	; 0x7e
 8003118:	187b      	adds	r3, r7, r1
 800311a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800311c:	187b      	adds	r3, r7, r1
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d100      	bne.n	8003126 <HAL_UART_IRQHandler+0x31a>
 8003124:	e17d      	b.n	8003422 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	225c      	movs	r2, #92	; 0x5c
 800312a:	5a9b      	ldrh	r3, [r3, r2]
 800312c:	187a      	adds	r2, r7, r1
 800312e:	8812      	ldrh	r2, [r2, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d300      	bcc.n	8003136 <HAL_UART_IRQHandler+0x32a>
 8003134:	e175      	b.n	8003422 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	187a      	adds	r2, r7, r1
 800313a:	215e      	movs	r1, #94	; 0x5e
 800313c:	8812      	ldrh	r2, [r2, #0]
 800313e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2220      	movs	r2, #32
 800314a:	4013      	ands	r3, r2
 800314c:	d16f      	bne.n	800322e <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800314e:	f3ef 8310 	mrs	r3, PRIMASK
 8003152:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003156:	67bb      	str	r3, [r7, #120]	; 0x78
 8003158:	2301      	movs	r3, #1
 800315a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315e:	f383 8810 	msr	PRIMASK, r3
}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	49b1      	ldr	r1, [pc, #708]	; (8003434 <HAL_UART_IRQHandler+0x628>)
 8003170:	400a      	ands	r2, r1
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003176:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317a:	f383 8810 	msr	PRIMASK, r3
}
 800317e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003180:	f3ef 8310 	mrs	r3, PRIMASK
 8003184:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003188:	677b      	str	r3, [r7, #116]	; 0x74
 800318a:	2301      	movs	r3, #1
 800318c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003190:	f383 8810 	msr	PRIMASK, r3
}
 8003194:	46c0      	nop			; (mov r8, r8)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2101      	movs	r1, #1
 80031a2:	438a      	bics	r2, r1
 80031a4:	609a      	str	r2, [r3, #8]
 80031a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ac:	f383 8810 	msr	PRIMASK, r3
}
 80031b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b2:	f3ef 8310 	mrs	r3, PRIMASK
 80031b6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80031b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ba:	673b      	str	r3, [r7, #112]	; 0x70
 80031bc:	2301      	movs	r3, #1
 80031be:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c2:	f383 8810 	msr	PRIMASK, r3
}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2140      	movs	r1, #64	; 0x40
 80031d4:	438a      	bics	r2, r1
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031da:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031de:	f383 8810 	msr	PRIMASK, r3
}
 80031e2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2288      	movs	r2, #136	; 0x88
 80031e8:	2120      	movs	r1, #32
 80031ea:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031f2:	f3ef 8310 	mrs	r3, PRIMASK
 80031f6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80031f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031fc:	2301      	movs	r3, #1
 80031fe:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003200:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003202:	f383 8810 	msr	PRIMASK, r3
}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2110      	movs	r1, #16
 8003214:	438a      	bics	r2, r1
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800321a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800321c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800321e:	f383 8810 	msr	PRIMASK, r3
}
 8003222:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003228:	0018      	movs	r0, r3
 800322a:	f7fd fedf 	bl	8000fec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	225c      	movs	r2, #92	; 0x5c
 8003232:	5a9a      	ldrh	r2, [r3, r2]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	215e      	movs	r1, #94	; 0x5e
 8003238:	5a5b      	ldrh	r3, [r3, r1]
 800323a:	b29b      	uxth	r3, r3
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	b29a      	uxth	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	0011      	movs	r1, r2
 8003244:	0018      	movs	r0, r3
 8003246:	f000 f90b 	bl	8003460 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800324a:	e0ea      	b.n	8003422 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	225c      	movs	r2, #92	; 0x5c
 8003250:	5a99      	ldrh	r1, [r3, r2]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	225e      	movs	r2, #94	; 0x5e
 8003256:	5a9b      	ldrh	r3, [r3, r2]
 8003258:	b29a      	uxth	r2, r3
 800325a:	208e      	movs	r0, #142	; 0x8e
 800325c:	183b      	adds	r3, r7, r0
 800325e:	1a8a      	subs	r2, r1, r2
 8003260:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	225e      	movs	r2, #94	; 0x5e
 8003266:	5a9b      	ldrh	r3, [r3, r2]
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d100      	bne.n	8003270 <HAL_UART_IRQHandler+0x464>
 800326e:	e0da      	b.n	8003426 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8003270:	183b      	adds	r3, r7, r0
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d100      	bne.n	800327a <HAL_UART_IRQHandler+0x46e>
 8003278:	e0d5      	b.n	8003426 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800327a:	f3ef 8310 	mrs	r3, PRIMASK
 800327e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003280:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003282:	2488      	movs	r4, #136	; 0x88
 8003284:	193a      	adds	r2, r7, r4
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	2301      	movs	r3, #1
 800328a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f383 8810 	msr	PRIMASK, r3
}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4966      	ldr	r1, [pc, #408]	; (8003438 <HAL_UART_IRQHandler+0x62c>)
 80032a0:	400a      	ands	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	193b      	adds	r3, r7, r4
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f383 8810 	msr	PRIMASK, r3
}
 80032b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b2:	f3ef 8310 	mrs	r3, PRIMASK
 80032b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80032b8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032ba:	2484      	movs	r4, #132	; 0x84
 80032bc:	193a      	adds	r2, r7, r4
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	2301      	movs	r3, #1
 80032c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f383 8810 	msr	PRIMASK, r3
}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4959      	ldr	r1, [pc, #356]	; (800343c <HAL_UART_IRQHandler+0x630>)
 80032d8:	400a      	ands	r2, r1
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	193b      	adds	r3, r7, r4
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	f383 8810 	msr	PRIMASK, r3
}
 80032e8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2288      	movs	r2, #136	; 0x88
 80032ee:	2120      	movs	r1, #32
 80032f0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003306:	2480      	movs	r4, #128	; 0x80
 8003308:	193a      	adds	r2, r7, r4
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	2301      	movs	r3, #1
 800330e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003312:	f383 8810 	msr	PRIMASK, r3
}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2110      	movs	r1, #16
 8003324:	438a      	bics	r2, r1
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	193b      	adds	r3, r7, r4
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003330:	f383 8810 	msr	PRIMASK, r3
}
 8003334:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003336:	183b      	adds	r3, r7, r0
 8003338:	881a      	ldrh	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	0011      	movs	r1, r2
 800333e:	0018      	movs	r0, r3
 8003340:	f000 f88e 	bl	8003460 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003344:	e06f      	b.n	8003426 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003346:	23a4      	movs	r3, #164	; 0xa4
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	035b      	lsls	r3, r3, #13
 8003350:	4013      	ands	r3, r2
 8003352:	d010      	beq.n	8003376 <HAL_UART_IRQHandler+0x56a>
 8003354:	239c      	movs	r3, #156	; 0x9c
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	03db      	lsls	r3, r3, #15
 800335e:	4013      	ands	r3, r2
 8003360:	d009      	beq.n	8003376 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2280      	movs	r2, #128	; 0x80
 8003368:	0352      	lsls	r2, r2, #13
 800336a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	0018      	movs	r0, r3
 8003370:	f001 fcd4 	bl	8004d1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003374:	e05a      	b.n	800342c <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003376:	23a4      	movs	r3, #164	; 0xa4
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2280      	movs	r2, #128	; 0x80
 800337e:	4013      	ands	r3, r2
 8003380:	d016      	beq.n	80033b0 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003382:	23a0      	movs	r3, #160	; 0xa0
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2280      	movs	r2, #128	; 0x80
 800338a:	4013      	ands	r3, r2
 800338c:	d106      	bne.n	800339c <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800338e:	239c      	movs	r3, #156	; 0x9c
 8003390:	18fb      	adds	r3, r7, r3
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	041b      	lsls	r3, r3, #16
 8003398:	4013      	ands	r3, r2
 800339a:	d009      	beq.n	80033b0 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d042      	beq.n	800342a <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	0010      	movs	r0, r2
 80033ac:	4798      	blx	r3
    }
    return;
 80033ae:	e03c      	b.n	800342a <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033b0:	23a4      	movs	r3, #164	; 0xa4
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2240      	movs	r2, #64	; 0x40
 80033b8:	4013      	ands	r3, r2
 80033ba:	d00a      	beq.n	80033d2 <HAL_UART_IRQHandler+0x5c6>
 80033bc:	23a0      	movs	r3, #160	; 0xa0
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2240      	movs	r2, #64	; 0x40
 80033c4:	4013      	ands	r3, r2
 80033c6:	d004      	beq.n	80033d2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	0018      	movs	r0, r3
 80033cc:	f001 f82a 	bl	8004424 <UART_EndTransmit_IT>
    return;
 80033d0:	e02c      	b.n	800342c <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80033d2:	23a4      	movs	r3, #164	; 0xa4
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	041b      	lsls	r3, r3, #16
 80033dc:	4013      	ands	r3, r2
 80033de:	d00b      	beq.n	80033f8 <HAL_UART_IRQHandler+0x5ec>
 80033e0:	23a0      	movs	r3, #160	; 0xa0
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	2380      	movs	r3, #128	; 0x80
 80033e8:	05db      	lsls	r3, r3, #23
 80033ea:	4013      	ands	r3, r2
 80033ec:	d004      	beq.n	80033f8 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f001 fca3 	bl	8004d3c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033f6:	e019      	b.n	800342c <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80033f8:	23a4      	movs	r3, #164	; 0xa4
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	045b      	lsls	r3, r3, #17
 8003402:	4013      	ands	r3, r2
 8003404:	d012      	beq.n	800342c <HAL_UART_IRQHandler+0x620>
 8003406:	23a0      	movs	r3, #160	; 0xa0
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	da0d      	bge.n	800342c <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	0018      	movs	r0, r3
 8003414:	f001 fc8a 	bl	8004d2c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003418:	e008      	b.n	800342c <HAL_UART_IRQHandler+0x620>
      return;
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	e006      	b.n	800342c <HAL_UART_IRQHandler+0x620>
    return;
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	e004      	b.n	800342c <HAL_UART_IRQHandler+0x620>
      return;
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	e002      	b.n	800342c <HAL_UART_IRQHandler+0x620>
      return;
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	e000      	b.n	800342c <HAL_UART_IRQHandler+0x620>
    return;
 800342a:	46c0      	nop			; (mov r8, r8)
  }
}
 800342c:	46bd      	mov	sp, r7
 800342e:	b02a      	add	sp, #168	; 0xa8
 8003430:	bdb0      	pop	{r4, r5, r7, pc}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	fffffeff 	.word	0xfffffeff
 8003438:	fffffedf 	.word	0xfffffedf
 800343c:	effffffe 	.word	0xeffffffe

08003440 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	b002      	add	sp, #8
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003458:	46c0      	nop			; (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	b002      	add	sp, #8
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	000a      	movs	r2, r1
 800346a:	1cbb      	adds	r3, r7, #2
 800346c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	46bd      	mov	sp, r7
 8003472:	b002      	add	sp, #8
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003478:	b5b0      	push	{r4, r5, r7, lr}
 800347a:	b090      	sub	sp, #64	; 0x40
 800347c:	af00      	add	r7, sp, #0
 800347e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003480:	231a      	movs	r3, #26
 8003482:	2220      	movs	r2, #32
 8003484:	189b      	adds	r3, r3, r2
 8003486:	19db      	adds	r3, r3, r7
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	431a      	orrs	r2, r3
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	431a      	orrs	r2, r3
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4aaf      	ldr	r2, [pc, #700]	; (8003768 <UART_SetConfig+0x2f0>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	0019      	movs	r1, r3
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b6:	430b      	orrs	r3, r1
 80034b8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4aaa      	ldr	r2, [pc, #680]	; (800376c <UART_SetConfig+0x2f4>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	0018      	movs	r0, r3
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	68d9      	ldr	r1, [r3, #12]
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	0003      	movs	r3, r0
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4aa4      	ldr	r2, [pc, #656]	; (8003770 <UART_SetConfig+0x2f8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d004      	beq.n	80034ee <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034ea:	4313      	orrs	r3, r2
 80034ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4a9f      	ldr	r2, [pc, #636]	; (8003774 <UART_SetConfig+0x2fc>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	0019      	movs	r1, r3
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003500:	430b      	orrs	r3, r1
 8003502:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	220f      	movs	r2, #15
 800350c:	4393      	bics	r3, r2
 800350e:	0018      	movs	r0, r3
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	0003      	movs	r3, r0
 800351a:	430b      	orrs	r3, r1
 800351c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a95      	ldr	r2, [pc, #596]	; (8003778 <UART_SetConfig+0x300>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d131      	bne.n	800358c <UART_SetConfig+0x114>
 8003528:	4b94      	ldr	r3, [pc, #592]	; (800377c <UART_SetConfig+0x304>)
 800352a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352c:	2203      	movs	r2, #3
 800352e:	4013      	ands	r3, r2
 8003530:	2b03      	cmp	r3, #3
 8003532:	d01d      	beq.n	8003570 <UART_SetConfig+0xf8>
 8003534:	d823      	bhi.n	800357e <UART_SetConfig+0x106>
 8003536:	2b02      	cmp	r3, #2
 8003538:	d00c      	beq.n	8003554 <UART_SetConfig+0xdc>
 800353a:	d820      	bhi.n	800357e <UART_SetConfig+0x106>
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <UART_SetConfig+0xce>
 8003540:	2b01      	cmp	r3, #1
 8003542:	d00e      	beq.n	8003562 <UART_SetConfig+0xea>
 8003544:	e01b      	b.n	800357e <UART_SetConfig+0x106>
 8003546:	231b      	movs	r3, #27
 8003548:	2220      	movs	r2, #32
 800354a:	189b      	adds	r3, r3, r2
 800354c:	19db      	adds	r3, r3, r7
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	e0b4      	b.n	80036be <UART_SetConfig+0x246>
 8003554:	231b      	movs	r3, #27
 8003556:	2220      	movs	r2, #32
 8003558:	189b      	adds	r3, r3, r2
 800355a:	19db      	adds	r3, r3, r7
 800355c:	2202      	movs	r2, #2
 800355e:	701a      	strb	r2, [r3, #0]
 8003560:	e0ad      	b.n	80036be <UART_SetConfig+0x246>
 8003562:	231b      	movs	r3, #27
 8003564:	2220      	movs	r2, #32
 8003566:	189b      	adds	r3, r3, r2
 8003568:	19db      	adds	r3, r3, r7
 800356a:	2204      	movs	r2, #4
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	e0a6      	b.n	80036be <UART_SetConfig+0x246>
 8003570:	231b      	movs	r3, #27
 8003572:	2220      	movs	r2, #32
 8003574:	189b      	adds	r3, r3, r2
 8003576:	19db      	adds	r3, r3, r7
 8003578:	2208      	movs	r2, #8
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	e09f      	b.n	80036be <UART_SetConfig+0x246>
 800357e:	231b      	movs	r3, #27
 8003580:	2220      	movs	r2, #32
 8003582:	189b      	adds	r3, r3, r2
 8003584:	19db      	adds	r3, r3, r7
 8003586:	2210      	movs	r2, #16
 8003588:	701a      	strb	r2, [r3, #0]
 800358a:	e098      	b.n	80036be <UART_SetConfig+0x246>
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a7b      	ldr	r2, [pc, #492]	; (8003780 <UART_SetConfig+0x308>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d131      	bne.n	80035fa <UART_SetConfig+0x182>
 8003596:	4b79      	ldr	r3, [pc, #484]	; (800377c <UART_SetConfig+0x304>)
 8003598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359a:	220c      	movs	r2, #12
 800359c:	4013      	ands	r3, r2
 800359e:	2b0c      	cmp	r3, #12
 80035a0:	d01d      	beq.n	80035de <UART_SetConfig+0x166>
 80035a2:	d823      	bhi.n	80035ec <UART_SetConfig+0x174>
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d00c      	beq.n	80035c2 <UART_SetConfig+0x14a>
 80035a8:	d820      	bhi.n	80035ec <UART_SetConfig+0x174>
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <UART_SetConfig+0x13c>
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d00e      	beq.n	80035d0 <UART_SetConfig+0x158>
 80035b2:	e01b      	b.n	80035ec <UART_SetConfig+0x174>
 80035b4:	231b      	movs	r3, #27
 80035b6:	2220      	movs	r2, #32
 80035b8:	189b      	adds	r3, r3, r2
 80035ba:	19db      	adds	r3, r3, r7
 80035bc:	2200      	movs	r2, #0
 80035be:	701a      	strb	r2, [r3, #0]
 80035c0:	e07d      	b.n	80036be <UART_SetConfig+0x246>
 80035c2:	231b      	movs	r3, #27
 80035c4:	2220      	movs	r2, #32
 80035c6:	189b      	adds	r3, r3, r2
 80035c8:	19db      	adds	r3, r3, r7
 80035ca:	2202      	movs	r2, #2
 80035cc:	701a      	strb	r2, [r3, #0]
 80035ce:	e076      	b.n	80036be <UART_SetConfig+0x246>
 80035d0:	231b      	movs	r3, #27
 80035d2:	2220      	movs	r2, #32
 80035d4:	189b      	adds	r3, r3, r2
 80035d6:	19db      	adds	r3, r3, r7
 80035d8:	2204      	movs	r2, #4
 80035da:	701a      	strb	r2, [r3, #0]
 80035dc:	e06f      	b.n	80036be <UART_SetConfig+0x246>
 80035de:	231b      	movs	r3, #27
 80035e0:	2220      	movs	r2, #32
 80035e2:	189b      	adds	r3, r3, r2
 80035e4:	19db      	adds	r3, r3, r7
 80035e6:	2208      	movs	r2, #8
 80035e8:	701a      	strb	r2, [r3, #0]
 80035ea:	e068      	b.n	80036be <UART_SetConfig+0x246>
 80035ec:	231b      	movs	r3, #27
 80035ee:	2220      	movs	r2, #32
 80035f0:	189b      	adds	r3, r3, r2
 80035f2:	19db      	adds	r3, r3, r7
 80035f4:	2210      	movs	r2, #16
 80035f6:	701a      	strb	r2, [r3, #0]
 80035f8:	e061      	b.n	80036be <UART_SetConfig+0x246>
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a61      	ldr	r2, [pc, #388]	; (8003784 <UART_SetConfig+0x30c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d106      	bne.n	8003612 <UART_SetConfig+0x19a>
 8003604:	231b      	movs	r3, #27
 8003606:	2220      	movs	r2, #32
 8003608:	189b      	adds	r3, r3, r2
 800360a:	19db      	adds	r3, r3, r7
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
 8003610:	e055      	b.n	80036be <UART_SetConfig+0x246>
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a5c      	ldr	r2, [pc, #368]	; (8003788 <UART_SetConfig+0x310>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d106      	bne.n	800362a <UART_SetConfig+0x1b2>
 800361c:	231b      	movs	r3, #27
 800361e:	2220      	movs	r2, #32
 8003620:	189b      	adds	r3, r3, r2
 8003622:	19db      	adds	r3, r3, r7
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	e049      	b.n	80036be <UART_SetConfig+0x246>
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a50      	ldr	r2, [pc, #320]	; (8003770 <UART_SetConfig+0x2f8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d13e      	bne.n	80036b2 <UART_SetConfig+0x23a>
 8003634:	4b51      	ldr	r3, [pc, #324]	; (800377c <UART_SetConfig+0x304>)
 8003636:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003638:	23c0      	movs	r3, #192	; 0xc0
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	4013      	ands	r3, r2
 800363e:	22c0      	movs	r2, #192	; 0xc0
 8003640:	0112      	lsls	r2, r2, #4
 8003642:	4293      	cmp	r3, r2
 8003644:	d027      	beq.n	8003696 <UART_SetConfig+0x21e>
 8003646:	22c0      	movs	r2, #192	; 0xc0
 8003648:	0112      	lsls	r2, r2, #4
 800364a:	4293      	cmp	r3, r2
 800364c:	d82a      	bhi.n	80036a4 <UART_SetConfig+0x22c>
 800364e:	2280      	movs	r2, #128	; 0x80
 8003650:	0112      	lsls	r2, r2, #4
 8003652:	4293      	cmp	r3, r2
 8003654:	d011      	beq.n	800367a <UART_SetConfig+0x202>
 8003656:	2280      	movs	r2, #128	; 0x80
 8003658:	0112      	lsls	r2, r2, #4
 800365a:	4293      	cmp	r3, r2
 800365c:	d822      	bhi.n	80036a4 <UART_SetConfig+0x22c>
 800365e:	2b00      	cmp	r3, #0
 8003660:	d004      	beq.n	800366c <UART_SetConfig+0x1f4>
 8003662:	2280      	movs	r2, #128	; 0x80
 8003664:	00d2      	lsls	r2, r2, #3
 8003666:	4293      	cmp	r3, r2
 8003668:	d00e      	beq.n	8003688 <UART_SetConfig+0x210>
 800366a:	e01b      	b.n	80036a4 <UART_SetConfig+0x22c>
 800366c:	231b      	movs	r3, #27
 800366e:	2220      	movs	r2, #32
 8003670:	189b      	adds	r3, r3, r2
 8003672:	19db      	adds	r3, r3, r7
 8003674:	2200      	movs	r2, #0
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	e021      	b.n	80036be <UART_SetConfig+0x246>
 800367a:	231b      	movs	r3, #27
 800367c:	2220      	movs	r2, #32
 800367e:	189b      	adds	r3, r3, r2
 8003680:	19db      	adds	r3, r3, r7
 8003682:	2202      	movs	r2, #2
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	e01a      	b.n	80036be <UART_SetConfig+0x246>
 8003688:	231b      	movs	r3, #27
 800368a:	2220      	movs	r2, #32
 800368c:	189b      	adds	r3, r3, r2
 800368e:	19db      	adds	r3, r3, r7
 8003690:	2204      	movs	r2, #4
 8003692:	701a      	strb	r2, [r3, #0]
 8003694:	e013      	b.n	80036be <UART_SetConfig+0x246>
 8003696:	231b      	movs	r3, #27
 8003698:	2220      	movs	r2, #32
 800369a:	189b      	adds	r3, r3, r2
 800369c:	19db      	adds	r3, r3, r7
 800369e:	2208      	movs	r2, #8
 80036a0:	701a      	strb	r2, [r3, #0]
 80036a2:	e00c      	b.n	80036be <UART_SetConfig+0x246>
 80036a4:	231b      	movs	r3, #27
 80036a6:	2220      	movs	r2, #32
 80036a8:	189b      	adds	r3, r3, r2
 80036aa:	19db      	adds	r3, r3, r7
 80036ac:	2210      	movs	r2, #16
 80036ae:	701a      	strb	r2, [r3, #0]
 80036b0:	e005      	b.n	80036be <UART_SetConfig+0x246>
 80036b2:	231b      	movs	r3, #27
 80036b4:	2220      	movs	r2, #32
 80036b6:	189b      	adds	r3, r3, r2
 80036b8:	19db      	adds	r3, r3, r7
 80036ba:	2210      	movs	r2, #16
 80036bc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a2b      	ldr	r2, [pc, #172]	; (8003770 <UART_SetConfig+0x2f8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d000      	beq.n	80036ca <UART_SetConfig+0x252>
 80036c8:	e0a9      	b.n	800381e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036ca:	231b      	movs	r3, #27
 80036cc:	2220      	movs	r2, #32
 80036ce:	189b      	adds	r3, r3, r2
 80036d0:	19db      	adds	r3, r3, r7
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d015      	beq.n	8003704 <UART_SetConfig+0x28c>
 80036d8:	dc18      	bgt.n	800370c <UART_SetConfig+0x294>
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d00d      	beq.n	80036fa <UART_SetConfig+0x282>
 80036de:	dc15      	bgt.n	800370c <UART_SetConfig+0x294>
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <UART_SetConfig+0x272>
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d005      	beq.n	80036f4 <UART_SetConfig+0x27c>
 80036e8:	e010      	b.n	800370c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036ea:	f7fe fbc7 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 80036ee:	0003      	movs	r3, r0
 80036f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036f2:	e014      	b.n	800371e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f4:	4b25      	ldr	r3, [pc, #148]	; (800378c <UART_SetConfig+0x314>)
 80036f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036f8:	e011      	b.n	800371e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036fa:	f7fe fb33 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 80036fe:	0003      	movs	r3, r0
 8003700:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003702:	e00c      	b.n	800371e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003704:	2380      	movs	r3, #128	; 0x80
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800370a:	e008      	b.n	800371e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003710:	231a      	movs	r3, #26
 8003712:	2220      	movs	r2, #32
 8003714:	189b      	adds	r3, r3, r2
 8003716:	19db      	adds	r3, r3, r7
 8003718:	2201      	movs	r2, #1
 800371a:	701a      	strb	r2, [r3, #0]
        break;
 800371c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800371e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003720:	2b00      	cmp	r3, #0
 8003722:	d100      	bne.n	8003726 <UART_SetConfig+0x2ae>
 8003724:	e14b      	b.n	80039be <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800372a:	4b19      	ldr	r3, [pc, #100]	; (8003790 <UART_SetConfig+0x318>)
 800372c:	0052      	lsls	r2, r2, #1
 800372e:	5ad3      	ldrh	r3, [r2, r3]
 8003730:	0019      	movs	r1, r3
 8003732:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003734:	f7fc fcf0 	bl	8000118 <__udivsi3>
 8003738:	0003      	movs	r3, r0
 800373a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	0013      	movs	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	189b      	adds	r3, r3, r2
 8003746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003748:	429a      	cmp	r2, r3
 800374a:	d305      	bcc.n	8003758 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003754:	429a      	cmp	r2, r3
 8003756:	d91d      	bls.n	8003794 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003758:	231a      	movs	r3, #26
 800375a:	2220      	movs	r2, #32
 800375c:	189b      	adds	r3, r3, r2
 800375e:	19db      	adds	r3, r3, r7
 8003760:	2201      	movs	r2, #1
 8003762:	701a      	strb	r2, [r3, #0]
 8003764:	e12b      	b.n	80039be <UART_SetConfig+0x546>
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	cfff69f3 	.word	0xcfff69f3
 800376c:	ffffcfff 	.word	0xffffcfff
 8003770:	40008000 	.word	0x40008000
 8003774:	11fff4ff 	.word	0x11fff4ff
 8003778:	40013800 	.word	0x40013800
 800377c:	40021000 	.word	0x40021000
 8003780:	40004400 	.word	0x40004400
 8003784:	40004800 	.word	0x40004800
 8003788:	40004c00 	.word	0x40004c00
 800378c:	00f42400 	.word	0x00f42400
 8003790:	08005964 	.word	0x08005964
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003796:	61bb      	str	r3, [r7, #24]
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037a0:	4b92      	ldr	r3, [pc, #584]	; (80039ec <UART_SetConfig+0x574>)
 80037a2:	0052      	lsls	r2, r2, #1
 80037a4:	5ad3      	ldrh	r3, [r2, r3]
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	69b8      	ldr	r0, [r7, #24]
 80037b2:	69f9      	ldr	r1, [r7, #28]
 80037b4:	f7fc fe26 	bl	8000404 <__aeabi_uldivmod>
 80037b8:	0002      	movs	r2, r0
 80037ba:	000b      	movs	r3, r1
 80037bc:	0e11      	lsrs	r1, r2, #24
 80037be:	021d      	lsls	r5, r3, #8
 80037c0:	430d      	orrs	r5, r1
 80037c2:	0214      	lsls	r4, r2, #8
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68b8      	ldr	r0, [r7, #8]
 80037d2:	68f9      	ldr	r1, [r7, #12]
 80037d4:	1900      	adds	r0, r0, r4
 80037d6:	4169      	adcs	r1, r5
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	603b      	str	r3, [r7, #0]
 80037de:	2300      	movs	r3, #0
 80037e0:	607b      	str	r3, [r7, #4]
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f7fc fe0d 	bl	8000404 <__aeabi_uldivmod>
 80037ea:	0002      	movs	r2, r0
 80037ec:	000b      	movs	r3, r1
 80037ee:	0013      	movs	r3, r2
 80037f0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037f4:	23c0      	movs	r3, #192	; 0xc0
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d309      	bcc.n	8003810 <UART_SetConfig+0x398>
 80037fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037fe:	2380      	movs	r3, #128	; 0x80
 8003800:	035b      	lsls	r3, r3, #13
 8003802:	429a      	cmp	r2, r3
 8003804:	d204      	bcs.n	8003810 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800380c:	60da      	str	r2, [r3, #12]
 800380e:	e0d6      	b.n	80039be <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003810:	231a      	movs	r3, #26
 8003812:	2220      	movs	r2, #32
 8003814:	189b      	adds	r3, r3, r2
 8003816:	19db      	adds	r3, r3, r7
 8003818:	2201      	movs	r2, #1
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	e0cf      	b.n	80039be <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	2380      	movs	r3, #128	; 0x80
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	429a      	cmp	r2, r3
 8003828:	d000      	beq.n	800382c <UART_SetConfig+0x3b4>
 800382a:	e070      	b.n	800390e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800382c:	231b      	movs	r3, #27
 800382e:	2220      	movs	r2, #32
 8003830:	189b      	adds	r3, r3, r2
 8003832:	19db      	adds	r3, r3, r7
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b08      	cmp	r3, #8
 8003838:	d015      	beq.n	8003866 <UART_SetConfig+0x3ee>
 800383a:	dc18      	bgt.n	800386e <UART_SetConfig+0x3f6>
 800383c:	2b04      	cmp	r3, #4
 800383e:	d00d      	beq.n	800385c <UART_SetConfig+0x3e4>
 8003840:	dc15      	bgt.n	800386e <UART_SetConfig+0x3f6>
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <UART_SetConfig+0x3d4>
 8003846:	2b02      	cmp	r3, #2
 8003848:	d005      	beq.n	8003856 <UART_SetConfig+0x3de>
 800384a:	e010      	b.n	800386e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800384c:	f7fe fb16 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 8003850:	0003      	movs	r3, r0
 8003852:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003854:	e014      	b.n	8003880 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003856:	4b66      	ldr	r3, [pc, #408]	; (80039f0 <UART_SetConfig+0x578>)
 8003858:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800385a:	e011      	b.n	8003880 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800385c:	f7fe fa82 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8003860:	0003      	movs	r3, r0
 8003862:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003864:	e00c      	b.n	8003880 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800386c:	e008      	b.n	8003880 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003872:	231a      	movs	r3, #26
 8003874:	2220      	movs	r2, #32
 8003876:	189b      	adds	r3, r3, r2
 8003878:	19db      	adds	r3, r3, r7
 800387a:	2201      	movs	r2, #1
 800387c:	701a      	strb	r2, [r3, #0]
        break;
 800387e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003882:	2b00      	cmp	r3, #0
 8003884:	d100      	bne.n	8003888 <UART_SetConfig+0x410>
 8003886:	e09a      	b.n	80039be <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800388c:	4b57      	ldr	r3, [pc, #348]	; (80039ec <UART_SetConfig+0x574>)
 800388e:	0052      	lsls	r2, r2, #1
 8003890:	5ad3      	ldrh	r3, [r2, r3]
 8003892:	0019      	movs	r1, r3
 8003894:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003896:	f7fc fc3f 	bl	8000118 <__udivsi3>
 800389a:	0003      	movs	r3, r0
 800389c:	005a      	lsls	r2, r3, #1
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	085b      	lsrs	r3, r3, #1
 80038a4:	18d2      	adds	r2, r2, r3
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	0019      	movs	r1, r3
 80038ac:	0010      	movs	r0, r2
 80038ae:	f7fc fc33 	bl	8000118 <__udivsi3>
 80038b2:	0003      	movs	r3, r0
 80038b4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	2b0f      	cmp	r3, #15
 80038ba:	d921      	bls.n	8003900 <UART_SetConfig+0x488>
 80038bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	025b      	lsls	r3, r3, #9
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d21c      	bcs.n	8003900 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	200e      	movs	r0, #14
 80038cc:	2420      	movs	r4, #32
 80038ce:	1903      	adds	r3, r0, r4
 80038d0:	19db      	adds	r3, r3, r7
 80038d2:	210f      	movs	r1, #15
 80038d4:	438a      	bics	r2, r1
 80038d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038da:	085b      	lsrs	r3, r3, #1
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2207      	movs	r2, #7
 80038e0:	4013      	ands	r3, r2
 80038e2:	b299      	uxth	r1, r3
 80038e4:	1903      	adds	r3, r0, r4
 80038e6:	19db      	adds	r3, r3, r7
 80038e8:	1902      	adds	r2, r0, r4
 80038ea:	19d2      	adds	r2, r2, r7
 80038ec:	8812      	ldrh	r2, [r2, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	1902      	adds	r2, r0, r4
 80038f8:	19d2      	adds	r2, r2, r7
 80038fa:	8812      	ldrh	r2, [r2, #0]
 80038fc:	60da      	str	r2, [r3, #12]
 80038fe:	e05e      	b.n	80039be <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003900:	231a      	movs	r3, #26
 8003902:	2220      	movs	r2, #32
 8003904:	189b      	adds	r3, r3, r2
 8003906:	19db      	adds	r3, r3, r7
 8003908:	2201      	movs	r2, #1
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	e057      	b.n	80039be <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800390e:	231b      	movs	r3, #27
 8003910:	2220      	movs	r2, #32
 8003912:	189b      	adds	r3, r3, r2
 8003914:	19db      	adds	r3, r3, r7
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b08      	cmp	r3, #8
 800391a:	d015      	beq.n	8003948 <UART_SetConfig+0x4d0>
 800391c:	dc18      	bgt.n	8003950 <UART_SetConfig+0x4d8>
 800391e:	2b04      	cmp	r3, #4
 8003920:	d00d      	beq.n	800393e <UART_SetConfig+0x4c6>
 8003922:	dc15      	bgt.n	8003950 <UART_SetConfig+0x4d8>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <UART_SetConfig+0x4b6>
 8003928:	2b02      	cmp	r3, #2
 800392a:	d005      	beq.n	8003938 <UART_SetConfig+0x4c0>
 800392c:	e010      	b.n	8003950 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800392e:	f7fe faa5 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 8003932:	0003      	movs	r3, r0
 8003934:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003936:	e014      	b.n	8003962 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003938:	4b2d      	ldr	r3, [pc, #180]	; (80039f0 <UART_SetConfig+0x578>)
 800393a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800393c:	e011      	b.n	8003962 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800393e:	f7fe fa11 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8003942:	0003      	movs	r3, r0
 8003944:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003946:	e00c      	b.n	8003962 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003948:	2380      	movs	r3, #128	; 0x80
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800394e:	e008      	b.n	8003962 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003954:	231a      	movs	r3, #26
 8003956:	2220      	movs	r2, #32
 8003958:	189b      	adds	r3, r3, r2
 800395a:	19db      	adds	r3, r3, r7
 800395c:	2201      	movs	r2, #1
 800395e:	701a      	strb	r2, [r3, #0]
        break;
 8003960:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003964:	2b00      	cmp	r3, #0
 8003966:	d02a      	beq.n	80039be <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800396c:	4b1f      	ldr	r3, [pc, #124]	; (80039ec <UART_SetConfig+0x574>)
 800396e:	0052      	lsls	r2, r2, #1
 8003970:	5ad3      	ldrh	r3, [r2, r3]
 8003972:	0019      	movs	r1, r3
 8003974:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003976:	f7fc fbcf 	bl	8000118 <__udivsi3>
 800397a:	0003      	movs	r3, r0
 800397c:	001a      	movs	r2, r3
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	18d2      	adds	r2, r2, r3
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	0019      	movs	r1, r3
 800398c:	0010      	movs	r0, r2
 800398e:	f7fc fbc3 	bl	8000118 <__udivsi3>
 8003992:	0003      	movs	r3, r0
 8003994:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	2b0f      	cmp	r3, #15
 800399a:	d90a      	bls.n	80039b2 <UART_SetConfig+0x53a>
 800399c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800399e:	2380      	movs	r3, #128	; 0x80
 80039a0:	025b      	lsls	r3, r3, #9
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d205      	bcs.n	80039b2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	60da      	str	r2, [r3, #12]
 80039b0:	e005      	b.n	80039be <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80039b2:	231a      	movs	r3, #26
 80039b4:	2220      	movs	r2, #32
 80039b6:	189b      	adds	r3, r3, r2
 80039b8:	19db      	adds	r3, r3, r7
 80039ba:	2201      	movs	r2, #1
 80039bc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	226a      	movs	r2, #106	; 0x6a
 80039c2:	2101      	movs	r1, #1
 80039c4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	2268      	movs	r2, #104	; 0x68
 80039ca:	2101      	movs	r1, #1
 80039cc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	2200      	movs	r2, #0
 80039d2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	2200      	movs	r2, #0
 80039d8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80039da:	231a      	movs	r3, #26
 80039dc:	2220      	movs	r2, #32
 80039de:	189b      	adds	r3, r3, r2
 80039e0:	19db      	adds	r3, r3, r7
 80039e2:	781b      	ldrb	r3, [r3, #0]
}
 80039e4:	0018      	movs	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b010      	add	sp, #64	; 0x40
 80039ea:	bdb0      	pop	{r4, r5, r7, pc}
 80039ec:	08005964 	.word	0x08005964
 80039f0:	00f42400 	.word	0x00f42400

080039f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	2201      	movs	r2, #1
 8003a02:	4013      	ands	r3, r2
 8003a04:	d00b      	beq.n	8003a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	4a4a      	ldr	r2, [pc, #296]	; (8003b38 <UART_AdvFeatureConfig+0x144>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	0019      	movs	r1, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	2202      	movs	r2, #2
 8003a24:	4013      	ands	r3, r2
 8003a26:	d00b      	beq.n	8003a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	4a43      	ldr	r2, [pc, #268]	; (8003b3c <UART_AdvFeatureConfig+0x148>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	0019      	movs	r1, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	2204      	movs	r2, #4
 8003a46:	4013      	ands	r3, r2
 8003a48:	d00b      	beq.n	8003a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4a3b      	ldr	r2, [pc, #236]	; (8003b40 <UART_AdvFeatureConfig+0x14c>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	0019      	movs	r1, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	2208      	movs	r2, #8
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d00b      	beq.n	8003a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4a34      	ldr	r2, [pc, #208]	; (8003b44 <UART_AdvFeatureConfig+0x150>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	0019      	movs	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	2210      	movs	r2, #16
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d00b      	beq.n	8003aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4a2c      	ldr	r2, [pc, #176]	; (8003b48 <UART_AdvFeatureConfig+0x154>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	0019      	movs	r1, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	2220      	movs	r2, #32
 8003aac:	4013      	ands	r3, r2
 8003aae:	d00b      	beq.n	8003ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	4a25      	ldr	r2, [pc, #148]	; (8003b4c <UART_AdvFeatureConfig+0x158>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	0019      	movs	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	2240      	movs	r2, #64	; 0x40
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d01d      	beq.n	8003b0e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	4a1d      	ldr	r2, [pc, #116]	; (8003b50 <UART_AdvFeatureConfig+0x15c>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	0019      	movs	r1, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aee:	2380      	movs	r3, #128	; 0x80
 8003af0:	035b      	lsls	r3, r3, #13
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d10b      	bne.n	8003b0e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <UART_AdvFeatureConfig+0x160>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	0019      	movs	r1, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	2280      	movs	r2, #128	; 0x80
 8003b14:	4013      	ands	r3, r2
 8003b16:	d00b      	beq.n	8003b30 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4a0e      	ldr	r2, [pc, #56]	; (8003b58 <UART_AdvFeatureConfig+0x164>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	0019      	movs	r1, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	605a      	str	r2, [r3, #4]
  }
}
 8003b30:	46c0      	nop			; (mov r8, r8)
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b002      	add	sp, #8
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	fffdffff 	.word	0xfffdffff
 8003b3c:	fffeffff 	.word	0xfffeffff
 8003b40:	fffbffff 	.word	0xfffbffff
 8003b44:	ffff7fff 	.word	0xffff7fff
 8003b48:	ffffefff 	.word	0xffffefff
 8003b4c:	ffffdfff 	.word	0xffffdfff
 8003b50:	ffefffff 	.word	0xffefffff
 8003b54:	ff9fffff 	.word	0xff9fffff
 8003b58:	fff7ffff 	.word	0xfff7ffff

08003b5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	228c      	movs	r2, #140	; 0x8c
 8003b68:	2100      	movs	r1, #0
 8003b6a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b6c:	f7fd f940 	bl	8000df0 <HAL_GetTick>
 8003b70:	0003      	movs	r3, r0
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d10c      	bne.n	8003b9c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2280      	movs	r2, #128	; 0x80
 8003b86:	0391      	lsls	r1, r2, #14
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4a18      	ldr	r2, [pc, #96]	; (8003bec <UART_CheckIdleState+0x90>)
 8003b8c:	9200      	str	r2, [sp, #0]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f000 f82e 	bl	8003bf0 <UART_WaitOnFlagUntilTimeout>
 8003b94:	1e03      	subs	r3, r0, #0
 8003b96:	d001      	beq.n	8003b9c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e023      	b.n	8003be4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2204      	movs	r2, #4
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d10c      	bne.n	8003bc4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2280      	movs	r2, #128	; 0x80
 8003bae:	03d1      	lsls	r1, r2, #15
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	4a0e      	ldr	r2, [pc, #56]	; (8003bec <UART_CheckIdleState+0x90>)
 8003bb4:	9200      	str	r2, [sp, #0]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f000 f81a 	bl	8003bf0 <UART_WaitOnFlagUntilTimeout>
 8003bbc:	1e03      	subs	r3, r0, #0
 8003bbe:	d001      	beq.n	8003bc4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e00f      	b.n	8003be4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2284      	movs	r2, #132	; 0x84
 8003bc8:	2120      	movs	r1, #32
 8003bca:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2288      	movs	r2, #136	; 0x88
 8003bd0:	2120      	movs	r1, #32
 8003bd2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2280      	movs	r2, #128	; 0x80
 8003bde:	2100      	movs	r1, #0
 8003be0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	0018      	movs	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b004      	add	sp, #16
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	01ffffff 	.word	0x01ffffff

08003bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b094      	sub	sp, #80	; 0x50
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	1dfb      	adds	r3, r7, #7
 8003bfe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c00:	e0a7      	b.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c04:	3301      	adds	r3, #1
 8003c06:	d100      	bne.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003c08:	e0a3      	b.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0a:	f7fd f8f1 	bl	8000df0 <HAL_GetTick>
 8003c0e:	0002      	movs	r2, r0
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d302      	bcc.n	8003c20 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d13f      	bne.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c20:	f3ef 8310 	mrs	r3, PRIMASK
 8003c24:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c28:	647b      	str	r3, [r7, #68]	; 0x44
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c30:	f383 8810 	msr	PRIMASK, r3
}
 8003c34:	46c0      	nop			; (mov r8, r8)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	494e      	ldr	r1, [pc, #312]	; (8003d7c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003c42:	400a      	ands	r2, r1
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c48:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	f383 8810 	msr	PRIMASK, r3
}
 8003c50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c52:	f3ef 8310 	mrs	r3, PRIMASK
 8003c56:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c62:	f383 8810 	msr	PRIMASK, r3
}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2101      	movs	r1, #1
 8003c74:	438a      	bics	r2, r1
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7e:	f383 8810 	msr	PRIMASK, r3
}
 8003c82:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2284      	movs	r2, #132	; 0x84
 8003c88:	2120      	movs	r1, #32
 8003c8a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2288      	movs	r2, #136	; 0x88
 8003c90:	2120      	movs	r1, #32
 8003c92:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2280      	movs	r2, #128	; 0x80
 8003c98:	2100      	movs	r1, #0
 8003c9a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e069      	b.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d052      	beq.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69da      	ldr	r2, [r3, #28]
 8003cb2:	2380      	movs	r3, #128	; 0x80
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	2380      	movs	r3, #128	; 0x80
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d148      	bne.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2280      	movs	r2, #128	; 0x80
 8003cc6:	0112      	lsls	r2, r2, #4
 8003cc8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cca:	f3ef 8310 	mrs	r3, PRIMASK
 8003cce:	613b      	str	r3, [r7, #16]
  return(result);
 8003cd0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f383 8810 	msr	PRIMASK, r3
}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4924      	ldr	r1, [pc, #144]	; (8003d7c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003cec:	400a      	ands	r2, r1
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	f383 8810 	msr	PRIMASK, r3
}
 8003cfa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8003d00:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d02:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d06:	2301      	movs	r3, #1
 8003d08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	f383 8810 	msr	PRIMASK, r3
}
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	438a      	bics	r2, r1
 8003d20:	609a      	str	r2, [r3, #8]
 8003d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	f383 8810 	msr	PRIMASK, r3
}
 8003d2c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2284      	movs	r2, #132	; 0x84
 8003d32:	2120      	movs	r1, #32
 8003d34:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2288      	movs	r2, #136	; 0x88
 8003d3a:	2120      	movs	r1, #32
 8003d3c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	228c      	movs	r2, #140	; 0x8c
 8003d42:	2120      	movs	r1, #32
 8003d44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2280      	movs	r2, #128	; 0x80
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e010      	b.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	425a      	negs	r2, r3
 8003d62:	4153      	adcs	r3, r2
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	001a      	movs	r2, r3
 8003d68:	1dfb      	adds	r3, r7, #7
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d100      	bne.n	8003d72 <UART_WaitOnFlagUntilTimeout+0x182>
 8003d70:	e747      	b.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	0018      	movs	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b014      	add	sp, #80	; 0x50
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	fffffe5f 	.word	0xfffffe5f

08003d80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b098      	sub	sp, #96	; 0x60
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	1dbb      	adds	r3, r7, #6
 8003d8c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1dba      	adds	r2, r7, #6
 8003d98:	215c      	movs	r1, #92	; 0x5c
 8003d9a:	8812      	ldrh	r2, [r2, #0]
 8003d9c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1dba      	adds	r2, r7, #6
 8003da2:	215e      	movs	r1, #94	; 0x5e
 8003da4:	8812      	ldrh	r2, [r2, #0]
 8003da6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	015b      	lsls	r3, r3, #5
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d10d      	bne.n	8003dd6 <UART_Start_Receive_IT+0x56>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d104      	bne.n	8003dcc <UART_Start_Receive_IT+0x4c>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2260      	movs	r2, #96	; 0x60
 8003dc6:	497f      	ldr	r1, [pc, #508]	; (8003fc4 <UART_Start_Receive_IT+0x244>)
 8003dc8:	5299      	strh	r1, [r3, r2]
 8003dca:	e02e      	b.n	8003e2a <UART_Start_Receive_IT+0xaa>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2260      	movs	r2, #96	; 0x60
 8003dd0:	21ff      	movs	r1, #255	; 0xff
 8003dd2:	5299      	strh	r1, [r3, r2]
 8003dd4:	e029      	b.n	8003e2a <UART_Start_Receive_IT+0xaa>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10d      	bne.n	8003dfa <UART_Start_Receive_IT+0x7a>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d104      	bne.n	8003df0 <UART_Start_Receive_IT+0x70>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2260      	movs	r2, #96	; 0x60
 8003dea:	21ff      	movs	r1, #255	; 0xff
 8003dec:	5299      	strh	r1, [r3, r2]
 8003dee:	e01c      	b.n	8003e2a <UART_Start_Receive_IT+0xaa>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2260      	movs	r2, #96	; 0x60
 8003df4:	217f      	movs	r1, #127	; 0x7f
 8003df6:	5299      	strh	r1, [r3, r2]
 8003df8:	e017      	b.n	8003e2a <UART_Start_Receive_IT+0xaa>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	2380      	movs	r3, #128	; 0x80
 8003e00:	055b      	lsls	r3, r3, #21
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d10d      	bne.n	8003e22 <UART_Start_Receive_IT+0xa2>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d104      	bne.n	8003e18 <UART_Start_Receive_IT+0x98>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2260      	movs	r2, #96	; 0x60
 8003e12:	217f      	movs	r1, #127	; 0x7f
 8003e14:	5299      	strh	r1, [r3, r2]
 8003e16:	e008      	b.n	8003e2a <UART_Start_Receive_IT+0xaa>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2260      	movs	r2, #96	; 0x60
 8003e1c:	213f      	movs	r1, #63	; 0x3f
 8003e1e:	5299      	strh	r1, [r3, r2]
 8003e20:	e003      	b.n	8003e2a <UART_Start_Receive_IT+0xaa>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2260      	movs	r2, #96	; 0x60
 8003e26:	2100      	movs	r1, #0
 8003e28:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	228c      	movs	r2, #140	; 0x8c
 8003e2e:	2100      	movs	r1, #0
 8003e30:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2288      	movs	r2, #136	; 0x88
 8003e36:	2122      	movs	r1, #34	; 0x22
 8003e38:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e3e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e44:	2301      	movs	r3, #1
 8003e46:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e4a:	f383 8810 	msr	PRIMASK, r3
}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	609a      	str	r2, [r3, #8]
 8003e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e62:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e66:	f383 8810 	msr	PRIMASK, r3
}
 8003e6a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	059b      	lsls	r3, r3, #22
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d154      	bne.n	8003f22 <UART_Start_Receive_IT+0x1a2>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2268      	movs	r2, #104	; 0x68
 8003e7c:	5a9b      	ldrh	r3, [r3, r2]
 8003e7e:	1dba      	adds	r2, r7, #6
 8003e80:	8812      	ldrh	r2, [r2, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d34d      	bcc.n	8003f22 <UART_Start_Receive_IT+0x1a2>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	2380      	movs	r3, #128	; 0x80
 8003e8c:	015b      	lsls	r3, r3, #5
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d107      	bne.n	8003ea2 <UART_Start_Receive_IT+0x122>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d103      	bne.n	8003ea2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4a4a      	ldr	r2, [pc, #296]	; (8003fc8 <UART_Start_Receive_IT+0x248>)
 8003e9e:	671a      	str	r2, [r3, #112]	; 0x70
 8003ea0:	e002      	b.n	8003ea8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4a49      	ldr	r2, [pc, #292]	; (8003fcc <UART_Start_Receive_IT+0x24c>)
 8003ea6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2280      	movs	r2, #128	; 0x80
 8003eac:	2100      	movs	r1, #0
 8003eae:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d019      	beq.n	8003eec <UART_Start_Receive_IT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ebc:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ec0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec8:	f383 8810 	msr	PRIMASK, r3
}
 8003ecc:	46c0      	nop			; (mov r8, r8)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2180      	movs	r1, #128	; 0x80
 8003eda:	0049      	lsls	r1, r1, #1
 8003edc:	430a      	orrs	r2, r1
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee6:	f383 8810 	msr	PRIMASK, r3
}
 8003eea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eec:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003ef4:	657b      	str	r3, [r7, #84]	; 0x54
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	f383 8810 	msr	PRIMASK, r3
}
 8003f00:	46c0      	nop			; (mov r8, r8)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2180      	movs	r1, #128	; 0x80
 8003f0e:	0549      	lsls	r1, r1, #21
 8003f10:	430a      	orrs	r2, r1
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f16:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	f383 8810 	msr	PRIMASK, r3
}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	e04b      	b.n	8003fba <UART_Start_Receive_IT+0x23a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	015b      	lsls	r3, r3, #5
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d107      	bne.n	8003f3e <UART_Start_Receive_IT+0x1be>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d103      	bne.n	8003f3e <UART_Start_Receive_IT+0x1be>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4a25      	ldr	r2, [pc, #148]	; (8003fd0 <UART_Start_Receive_IT+0x250>)
 8003f3a:	671a      	str	r2, [r3, #112]	; 0x70
 8003f3c:	e002      	b.n	8003f44 <UART_Start_Receive_IT+0x1c4>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4a24      	ldr	r2, [pc, #144]	; (8003fd4 <UART_Start_Receive_IT+0x254>)
 8003f42:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2280      	movs	r2, #128	; 0x80
 8003f48:	2100      	movs	r1, #0
 8003f4a:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d019      	beq.n	8003f88 <UART_Start_Receive_IT+0x208>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f54:	f3ef 8310 	mrs	r3, PRIMASK
 8003f58:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f5a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f5e:	2301      	movs	r3, #1
 8003f60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f383 8810 	msr	PRIMASK, r3
}
 8003f68:	46c0      	nop			; (mov r8, r8)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2190      	movs	r1, #144	; 0x90
 8003f76:	0049      	lsls	r1, r1, #1
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	f383 8810 	msr	PRIMASK, r3
}
 8003f86:	e018      	b.n	8003fba <UART_Start_Receive_IT+0x23a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f88:	f3ef 8310 	mrs	r3, PRIMASK
 8003f8c:	613b      	str	r3, [r7, #16]
  return(result);
 8003f8e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003f90:	653b      	str	r3, [r7, #80]	; 0x50
 8003f92:	2301      	movs	r3, #1
 8003f94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f383 8810 	msr	PRIMASK, r3
}
 8003f9c:	46c0      	nop			; (mov r8, r8)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2120      	movs	r1, #32
 8003faa:	430a      	orrs	r2, r1
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	f383 8810 	msr	PRIMASK, r3
}
 8003fb8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	b018      	add	sp, #96	; 0x60
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	000001ff 	.word	0x000001ff
 8003fc8:	08004a39 	.word	0x08004a39
 8003fcc:	08004755 	.word	0x08004755
 8003fd0:	080045e9 	.word	0x080045e9
 8003fd4:	0800447d 	.word	0x0800447d

08003fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08e      	sub	sp, #56	; 0x38
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8003fe4:	617b      	str	r3, [r7, #20]
  return(result);
 8003fe6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8003fea:	2301      	movs	r3, #1
 8003fec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f383 8810 	msr	PRIMASK, r3
}
 8003ff4:	46c0      	nop			; (mov r8, r8)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4926      	ldr	r1, [pc, #152]	; (800409c <UART_EndRxTransfer+0xc4>)
 8004002:	400a      	ands	r2, r1
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004008:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f383 8810 	msr	PRIMASK, r3
}
 8004010:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004012:	f3ef 8310 	mrs	r3, PRIMASK
 8004016:	623b      	str	r3, [r7, #32]
  return(result);
 8004018:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800401a:	633b      	str	r3, [r7, #48]	; 0x30
 800401c:	2301      	movs	r3, #1
 800401e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	f383 8810 	msr	PRIMASK, r3
}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	491b      	ldr	r1, [pc, #108]	; (80040a0 <UART_EndRxTransfer+0xc8>)
 8004034:	400a      	ands	r2, r1
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403e:	f383 8810 	msr	PRIMASK, r3
}
 8004042:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004048:	2b01      	cmp	r3, #1
 800404a:	d118      	bne.n	800407e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800404c:	f3ef 8310 	mrs	r3, PRIMASK
 8004050:	60bb      	str	r3, [r7, #8]
  return(result);
 8004052:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004056:	2301      	movs	r3, #1
 8004058:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f383 8810 	msr	PRIMASK, r3
}
 8004060:	46c0      	nop			; (mov r8, r8)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2110      	movs	r1, #16
 800406e:	438a      	bics	r2, r1
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004074:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f383 8810 	msr	PRIMASK, r3
}
 800407c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2288      	movs	r2, #136	; 0x88
 8004082:	2120      	movs	r1, #32
 8004084:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	46bd      	mov	sp, r7
 8004096:	b00e      	add	sp, #56	; 0x38
 8004098:	bd80      	pop	{r7, pc}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	fffffedf 	.word	0xfffffedf
 80040a0:	effffffe 	.word	0xeffffffe

080040a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	225e      	movs	r2, #94	; 0x5e
 80040b6:	2100      	movs	r1, #0
 80040b8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2256      	movs	r2, #86	; 0x56
 80040be:	2100      	movs	r1, #0
 80040c0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	0018      	movs	r0, r3
 80040c6:	f7ff f9c3 	bl	8003450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b004      	add	sp, #16
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b08a      	sub	sp, #40	; 0x28
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2284      	movs	r2, #132	; 0x84
 80040de:	589b      	ldr	r3, [r3, r2]
 80040e0:	2b21      	cmp	r3, #33	; 0x21
 80040e2:	d14c      	bne.n	800417e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2256      	movs	r2, #86	; 0x56
 80040e8:	5a9b      	ldrh	r3, [r3, r2]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d132      	bne.n	8004156 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f0:	f3ef 8310 	mrs	r3, PRIMASK
 80040f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80040f6:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
 80040fa:	2301      	movs	r3, #1
 80040fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f383 8810 	msr	PRIMASK, r3
}
 8004104:	46c0      	nop			; (mov r8, r8)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2180      	movs	r1, #128	; 0x80
 8004112:	438a      	bics	r2, r1
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f383 8810 	msr	PRIMASK, r3
}
 8004120:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004122:	f3ef 8310 	mrs	r3, PRIMASK
 8004126:	617b      	str	r3, [r7, #20]
  return(result);
 8004128:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800412a:	623b      	str	r3, [r7, #32]
 800412c:	2301      	movs	r3, #1
 800412e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	f383 8810 	msr	PRIMASK, r3
}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2140      	movs	r1, #64	; 0x40
 8004144:	430a      	orrs	r2, r1
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	f383 8810 	msr	PRIMASK, r3
}
 8004152:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004154:	e013      	b.n	800417e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415a:	781a      	ldrb	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2256      	movs	r2, #86	; 0x56
 8004170:	5a9b      	ldrh	r3, [r3, r2]
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b299      	uxth	r1, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2256      	movs	r2, #86	; 0x56
 800417c:	5299      	strh	r1, [r3, r2]
}
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	46bd      	mov	sp, r7
 8004182:	b00a      	add	sp, #40	; 0x28
 8004184:	bd80      	pop	{r7, pc}

08004186 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b08c      	sub	sp, #48	; 0x30
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2284      	movs	r2, #132	; 0x84
 8004192:	589b      	ldr	r3, [r3, r2]
 8004194:	2b21      	cmp	r3, #33	; 0x21
 8004196:	d151      	bne.n	800423c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2256      	movs	r2, #86	; 0x56
 800419c:	5a9b      	ldrh	r3, [r3, r2]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d132      	bne.n	800420a <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a4:	f3ef 8310 	mrs	r3, PRIMASK
 80041a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80041aa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80041ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ae:	2301      	movs	r3, #1
 80041b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f383 8810 	msr	PRIMASK, r3
}
 80041b8:	46c0      	nop			; (mov r8, r8)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2180      	movs	r1, #128	; 0x80
 80041c6:	438a      	bics	r2, r1
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f383 8810 	msr	PRIMASK, r3
}
 80041d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041d6:	f3ef 8310 	mrs	r3, PRIMASK
 80041da:	61bb      	str	r3, [r7, #24]
  return(result);
 80041dc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
 80041e0:	2301      	movs	r3, #1
 80041e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f383 8810 	msr	PRIMASK, r3
}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2140      	movs	r1, #64	; 0x40
 80041f8:	430a      	orrs	r2, r1
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	f383 8810 	msr	PRIMASK, r3
}
 8004206:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004208:	e018      	b.n	800423c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	001a      	movs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	05d2      	lsls	r2, r2, #23
 800421c:	0dd2      	lsrs	r2, r2, #23
 800421e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004224:	1c9a      	adds	r2, r3, #2
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2256      	movs	r2, #86	; 0x56
 800422e:	5a9b      	ldrh	r3, [r3, r2]
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b299      	uxth	r1, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2256      	movs	r2, #86	; 0x56
 800423a:	5299      	strh	r1, [r3, r2]
}
 800423c:	46c0      	nop			; (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	b00c      	add	sp, #48	; 0x30
 8004242:	bd80      	pop	{r7, pc}

08004244 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08c      	sub	sp, #48	; 0x30
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2284      	movs	r2, #132	; 0x84
 8004250:	589b      	ldr	r3, [r3, r2]
 8004252:	2b21      	cmp	r3, #33	; 0x21
 8004254:	d165      	bne.n	8004322 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004256:	232e      	movs	r3, #46	; 0x2e
 8004258:	18fb      	adds	r3, r7, r3
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	216a      	movs	r1, #106	; 0x6a
 800425e:	5a52      	ldrh	r2, [r2, r1]
 8004260:	801a      	strh	r2, [r3, #0]
 8004262:	e059      	b.n	8004318 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2256      	movs	r2, #86	; 0x56
 8004268:	5a9b      	ldrh	r3, [r3, r2]
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d133      	bne.n	80042d8 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004270:	f3ef 8310 	mrs	r3, PRIMASK
 8004274:	60fb      	str	r3, [r7, #12]
  return(result);
 8004276:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
 800427a:	2301      	movs	r3, #1
 800427c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f383 8810 	msr	PRIMASK, r3
}
 8004284:	46c0      	nop			; (mov r8, r8)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4926      	ldr	r1, [pc, #152]	; (800432c <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8004292:	400a      	ands	r2, r1
 8004294:	609a      	str	r2, [r3, #8]
 8004296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004298:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f383 8810 	msr	PRIMASK, r3
}
 80042a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042a2:	f3ef 8310 	mrs	r3, PRIMASK
 80042a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80042a8:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
 80042ac:	2301      	movs	r3, #1
 80042ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f383 8810 	msr	PRIMASK, r3
}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2140      	movs	r1, #64	; 0x40
 80042c4:	430a      	orrs	r2, r1
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	f383 8810 	msr	PRIMASK, r3
}
 80042d2:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 80042d4:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80042d6:	e024      	b.n	8004322 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	2280      	movs	r2, #128	; 0x80
 80042e0:	4013      	ands	r3, r2
 80042e2:	d013      	beq.n	800430c <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e8:	781a      	ldrb	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2256      	movs	r2, #86	; 0x56
 80042fe:	5a9b      	ldrh	r3, [r3, r2]
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b299      	uxth	r1, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2256      	movs	r2, #86	; 0x56
 800430a:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800430c:	212e      	movs	r1, #46	; 0x2e
 800430e:	187b      	adds	r3, r7, r1
 8004310:	881a      	ldrh	r2, [r3, #0]
 8004312:	187b      	adds	r3, r7, r1
 8004314:	3a01      	subs	r2, #1
 8004316:	801a      	strh	r2, [r3, #0]
 8004318:	232e      	movs	r3, #46	; 0x2e
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1a0      	bne.n	8004264 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	46bd      	mov	sp, r7
 8004326:	b00c      	add	sp, #48	; 0x30
 8004328:	bd80      	pop	{r7, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	ff7fffff 	.word	0xff7fffff

08004330 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08c      	sub	sp, #48	; 0x30
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2284      	movs	r2, #132	; 0x84
 800433c:	589b      	ldr	r3, [r3, r2]
 800433e:	2b21      	cmp	r3, #33	; 0x21
 8004340:	d16a      	bne.n	8004418 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004342:	232e      	movs	r3, #46	; 0x2e
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	216a      	movs	r1, #106	; 0x6a
 800434a:	5a52      	ldrh	r2, [r2, r1]
 800434c:	801a      	strh	r2, [r3, #0]
 800434e:	e05e      	b.n	800440e <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2256      	movs	r2, #86	; 0x56
 8004354:	5a9b      	ldrh	r3, [r3, r2]
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d133      	bne.n	80043c4 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800435c:	f3ef 8310 	mrs	r3, PRIMASK
 8004360:	60bb      	str	r3, [r7, #8]
  return(result);
 8004362:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
 8004366:	2301      	movs	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f383 8810 	msr	PRIMASK, r3
}
 8004370:	46c0      	nop			; (mov r8, r8)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4928      	ldr	r1, [pc, #160]	; (8004420 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800437e:	400a      	ands	r2, r1
 8004380:	609a      	str	r2, [r3, #8]
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f383 8810 	msr	PRIMASK, r3
}
 800438c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800438e:	f3ef 8310 	mrs	r3, PRIMASK
 8004392:	617b      	str	r3, [r7, #20]
  return(result);
 8004394:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004396:	623b      	str	r3, [r7, #32]
 8004398:	2301      	movs	r3, #1
 800439a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	f383 8810 	msr	PRIMASK, r3
}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2140      	movs	r1, #64	; 0x40
 80043b0:	430a      	orrs	r2, r1
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f383 8810 	msr	PRIMASK, r3
}
 80043be:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 80043c0:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80043c2:	e029      	b.n	8004418 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	2280      	movs	r2, #128	; 0x80
 80043cc:	4013      	ands	r3, r2
 80043ce:	d018      	beq.n	8004402 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d4:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	001a      	movs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	05d2      	lsls	r2, r2, #23
 80043e2:	0dd2      	lsrs	r2, r2, #23
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ea:	1c9a      	adds	r2, r3, #2
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2256      	movs	r2, #86	; 0x56
 80043f4:	5a9b      	ldrh	r3, [r3, r2]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b299      	uxth	r1, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2256      	movs	r2, #86	; 0x56
 8004400:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004402:	212e      	movs	r1, #46	; 0x2e
 8004404:	187b      	adds	r3, r7, r1
 8004406:	881a      	ldrh	r2, [r3, #0]
 8004408:	187b      	adds	r3, r7, r1
 800440a:	3a01      	subs	r2, #1
 800440c:	801a      	strh	r2, [r3, #0]
 800440e:	232e      	movs	r3, #46	; 0x2e
 8004410:	18fb      	adds	r3, r7, r3
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d19b      	bne.n	8004350 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8004418:	46c0      	nop			; (mov r8, r8)
 800441a:	46bd      	mov	sp, r7
 800441c:	b00c      	add	sp, #48	; 0x30
 800441e:	bd80      	pop	{r7, pc}
 8004420:	ff7fffff 	.word	0xff7fffff

08004424 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800442c:	f3ef 8310 	mrs	r3, PRIMASK
 8004430:	60bb      	str	r3, [r7, #8]
  return(result);
 8004432:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	2301      	movs	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f383 8810 	msr	PRIMASK, r3
}
 8004440:	46c0      	nop			; (mov r8, r8)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2140      	movs	r1, #64	; 0x40
 800444e:	438a      	bics	r2, r1
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f383 8810 	msr	PRIMASK, r3
}
 800445c:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2284      	movs	r2, #132	; 0x84
 8004462:	2120      	movs	r1, #32
 8004464:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	0018      	movs	r0, r3
 8004470:	f7fe ffe6 	bl	8003440 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004474:	46c0      	nop			; (mov r8, r8)
 8004476:	46bd      	mov	sp, r7
 8004478:	b006      	add	sp, #24
 800447a:	bd80      	pop	{r7, pc}

0800447c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b090      	sub	sp, #64	; 0x40
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004484:	203e      	movs	r0, #62	; 0x3e
 8004486:	183b      	adds	r3, r7, r0
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	2160      	movs	r1, #96	; 0x60
 800448c:	5a52      	ldrh	r2, [r2, r1]
 800448e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2288      	movs	r2, #136	; 0x88
 8004494:	589b      	ldr	r3, [r3, r2]
 8004496:	2b22      	cmp	r3, #34	; 0x22
 8004498:	d000      	beq.n	800449c <UART_RxISR_8BIT+0x20>
 800449a:	e097      	b.n	80045cc <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044a2:	213c      	movs	r1, #60	; 0x3c
 80044a4:	187b      	adds	r3, r7, r1
 80044a6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80044a8:	187b      	adds	r3, r7, r1
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	183b      	adds	r3, r7, r0
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b2d9      	uxtb	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b8:	400a      	ands	r2, r1
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	225e      	movs	r2, #94	; 0x5e
 80044cc:	5a9b      	ldrh	r3, [r3, r2]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b299      	uxth	r1, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	225e      	movs	r2, #94	; 0x5e
 80044d8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	225e      	movs	r2, #94	; 0x5e
 80044de:	5a9b      	ldrh	r3, [r3, r2]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d000      	beq.n	80044e8 <UART_RxISR_8BIT+0x6c>
 80044e6:	e079      	b.n	80045dc <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e8:	f3ef 8310 	mrs	r3, PRIMASK
 80044ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80044ee:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80044f2:	2301      	movs	r3, #1
 80044f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	f383 8810 	msr	PRIMASK, r3
}
 80044fc:	46c0      	nop			; (mov r8, r8)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4936      	ldr	r1, [pc, #216]	; (80045e4 <UART_RxISR_8BIT+0x168>)
 800450a:	400a      	ands	r2, r1
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004510:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	f383 8810 	msr	PRIMASK, r3
}
 8004518:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800451a:	f3ef 8310 	mrs	r3, PRIMASK
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004522:	637b      	str	r3, [r7, #52]	; 0x34
 8004524:	2301      	movs	r3, #1
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	f383 8810 	msr	PRIMASK, r3
}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2101      	movs	r1, #1
 800453c:	438a      	bics	r2, r1
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004542:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004546:	f383 8810 	msr	PRIMASK, r3
}
 800454a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2288      	movs	r2, #136	; 0x88
 8004550:	2120      	movs	r1, #32
 8004552:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800455e:	2b01      	cmp	r3, #1
 8004560:	d12f      	bne.n	80045c2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004568:	f3ef 8310 	mrs	r3, PRIMASK
 800456c:	60fb      	str	r3, [r7, #12]
  return(result);
 800456e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004570:	633b      	str	r3, [r7, #48]	; 0x30
 8004572:	2301      	movs	r3, #1
 8004574:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f383 8810 	msr	PRIMASK, r3
}
 800457c:	46c0      	nop			; (mov r8, r8)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2110      	movs	r1, #16
 800458a:	438a      	bics	r2, r1
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f383 8810 	msr	PRIMASK, r3
}
 8004598:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	2210      	movs	r2, #16
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b10      	cmp	r3, #16
 80045a6:	d103      	bne.n	80045b0 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2210      	movs	r2, #16
 80045ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	225c      	movs	r2, #92	; 0x5c
 80045b4:	5a9a      	ldrh	r2, [r3, r2]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	0011      	movs	r1, r2
 80045ba:	0018      	movs	r0, r3
 80045bc:	f7fe ff50 	bl	8003460 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045c0:	e00c      	b.n	80045dc <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	0018      	movs	r0, r3
 80045c6:	f7fc f851 	bl	800066c <HAL_UART_RxCpltCallback>
}
 80045ca:	e007      	b.n	80045dc <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2108      	movs	r1, #8
 80045d8:	430a      	orrs	r2, r1
 80045da:	619a      	str	r2, [r3, #24]
}
 80045dc:	46c0      	nop			; (mov r8, r8)
 80045de:	46bd      	mov	sp, r7
 80045e0:	b010      	add	sp, #64	; 0x40
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	fffffedf 	.word	0xfffffedf

080045e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b090      	sub	sp, #64	; 0x40
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80045f0:	203e      	movs	r0, #62	; 0x3e
 80045f2:	183b      	adds	r3, r7, r0
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	2160      	movs	r1, #96	; 0x60
 80045f8:	5a52      	ldrh	r2, [r2, r1]
 80045fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2288      	movs	r2, #136	; 0x88
 8004600:	589b      	ldr	r3, [r3, r2]
 8004602:	2b22      	cmp	r3, #34	; 0x22
 8004604:	d000      	beq.n	8004608 <UART_RxISR_16BIT+0x20>
 8004606:	e097      	b.n	8004738 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800460e:	213c      	movs	r1, #60	; 0x3c
 8004610:	187b      	adds	r3, r7, r1
 8004612:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004618:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800461a:	187b      	adds	r3, r7, r1
 800461c:	183a      	adds	r2, r7, r0
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	8812      	ldrh	r2, [r2, #0]
 8004622:	4013      	ands	r3, r2
 8004624:	b29a      	uxth	r2, r3
 8004626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004628:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462e:	1c9a      	adds	r2, r3, #2
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	225e      	movs	r2, #94	; 0x5e
 8004638:	5a9b      	ldrh	r3, [r3, r2]
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b299      	uxth	r1, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	225e      	movs	r2, #94	; 0x5e
 8004644:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	225e      	movs	r2, #94	; 0x5e
 800464a:	5a9b      	ldrh	r3, [r3, r2]
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d000      	beq.n	8004654 <UART_RxISR_16BIT+0x6c>
 8004652:	e079      	b.n	8004748 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004654:	f3ef 8310 	mrs	r3, PRIMASK
 8004658:	617b      	str	r3, [r7, #20]
  return(result);
 800465a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800465c:	637b      	str	r3, [r7, #52]	; 0x34
 800465e:	2301      	movs	r3, #1
 8004660:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	f383 8810 	msr	PRIMASK, r3
}
 8004668:	46c0      	nop			; (mov r8, r8)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4936      	ldr	r1, [pc, #216]	; (8004750 <UART_RxISR_16BIT+0x168>)
 8004676:	400a      	ands	r2, r1
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	f383 8810 	msr	PRIMASK, r3
}
 8004684:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004686:	f3ef 8310 	mrs	r3, PRIMASK
 800468a:	623b      	str	r3, [r7, #32]
  return(result);
 800468c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468e:	633b      	str	r3, [r7, #48]	; 0x30
 8004690:	2301      	movs	r3, #1
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	f383 8810 	msr	PRIMASK, r3
}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2101      	movs	r1, #1
 80046a8:	438a      	bics	r2, r1
 80046aa:	609a      	str	r2, [r3, #8]
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	f383 8810 	msr	PRIMASK, r3
}
 80046b6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2288      	movs	r2, #136	; 0x88
 80046bc:	2120      	movs	r1, #32
 80046be:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d12f      	bne.n	800472e <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d4:	f3ef 8310 	mrs	r3, PRIMASK
 80046d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80046da:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046de:	2301      	movs	r3, #1
 80046e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f383 8810 	msr	PRIMASK, r3
}
 80046e8:	46c0      	nop			; (mov r8, r8)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2110      	movs	r1, #16
 80046f6:	438a      	bics	r2, r1
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f383 8810 	msr	PRIMASK, r3
}
 8004704:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	2210      	movs	r2, #16
 800470e:	4013      	ands	r3, r2
 8004710:	2b10      	cmp	r3, #16
 8004712:	d103      	bne.n	800471c <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2210      	movs	r2, #16
 800471a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	225c      	movs	r2, #92	; 0x5c
 8004720:	5a9a      	ldrh	r2, [r3, r2]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	0011      	movs	r1, r2
 8004726:	0018      	movs	r0, r3
 8004728:	f7fe fe9a 	bl	8003460 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800472c:	e00c      	b.n	8004748 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	0018      	movs	r0, r3
 8004732:	f7fb ff9b 	bl	800066c <HAL_UART_RxCpltCallback>
}
 8004736:	e007      	b.n	8004748 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2108      	movs	r1, #8
 8004744:	430a      	orrs	r2, r1
 8004746:	619a      	str	r2, [r3, #24]
}
 8004748:	46c0      	nop			; (mov r8, r8)
 800474a:	46bd      	mov	sp, r7
 800474c:	b010      	add	sp, #64	; 0x40
 800474e:	bd80      	pop	{r7, pc}
 8004750:	fffffedf 	.word	0xfffffedf

08004754 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b09c      	sub	sp, #112	; 0x70
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800475c:	236a      	movs	r3, #106	; 0x6a
 800475e:	18fb      	adds	r3, r7, r3
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	2160      	movs	r1, #96	; 0x60
 8004764:	5a52      	ldrh	r2, [r2, r1]
 8004766:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2288      	movs	r2, #136	; 0x88
 8004784:	589b      	ldr	r3, [r3, r2]
 8004786:	2b22      	cmp	r3, #34	; 0x22
 8004788:	d000      	beq.n	800478c <UART_RxISR_8BIT_FIFOEN+0x38>
 800478a:	e141      	b.n	8004a10 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800478c:	235e      	movs	r3, #94	; 0x5e
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	2168      	movs	r1, #104	; 0x68
 8004794:	5a52      	ldrh	r2, [r2, r1]
 8004796:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004798:	e0e8      	b.n	800496c <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047a0:	215c      	movs	r1, #92	; 0x5c
 80047a2:	187b      	adds	r3, r7, r1
 80047a4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80047a6:	187b      	adds	r3, r7, r1
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	236a      	movs	r3, #106	; 0x6a
 80047ae:	18fb      	adds	r3, r7, r3
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	b2d9      	uxtb	r1, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b8:	400a      	ands	r2, r1
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	225e      	movs	r2, #94	; 0x5e
 80047cc:	5a9b      	ldrh	r3, [r3, r2]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b299      	uxth	r1, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	225e      	movs	r2, #94	; 0x5e
 80047d8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80047e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e4:	2207      	movs	r2, #7
 80047e6:	4013      	ands	r3, r2
 80047e8:	d049      	beq.n	800487e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ec:	2201      	movs	r2, #1
 80047ee:	4013      	ands	r3, r2
 80047f0:	d010      	beq.n	8004814 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80047f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80047f4:	2380      	movs	r3, #128	; 0x80
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	4013      	ands	r3, r2
 80047fa:	d00b      	beq.n	8004814 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2201      	movs	r2, #1
 8004802:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	228c      	movs	r2, #140	; 0x8c
 8004808:	589b      	ldr	r3, [r3, r2]
 800480a:	2201      	movs	r2, #1
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	218c      	movs	r1, #140	; 0x8c
 8004812:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004816:	2202      	movs	r2, #2
 8004818:	4013      	ands	r3, r2
 800481a:	d00f      	beq.n	800483c <UART_RxISR_8BIT_FIFOEN+0xe8>
 800481c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800481e:	2201      	movs	r2, #1
 8004820:	4013      	ands	r3, r2
 8004822:	d00b      	beq.n	800483c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2202      	movs	r2, #2
 800482a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	228c      	movs	r2, #140	; 0x8c
 8004830:	589b      	ldr	r3, [r3, r2]
 8004832:	2204      	movs	r2, #4
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	218c      	movs	r1, #140	; 0x8c
 800483a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800483c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800483e:	2204      	movs	r2, #4
 8004840:	4013      	ands	r3, r2
 8004842:	d00f      	beq.n	8004864 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004844:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004846:	2201      	movs	r2, #1
 8004848:	4013      	ands	r3, r2
 800484a:	d00b      	beq.n	8004864 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2204      	movs	r2, #4
 8004852:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	228c      	movs	r2, #140	; 0x8c
 8004858:	589b      	ldr	r3, [r3, r2]
 800485a:	2202      	movs	r2, #2
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	218c      	movs	r1, #140	; 0x8c
 8004862:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	228c      	movs	r2, #140	; 0x8c
 8004868:	589b      	ldr	r3, [r3, r2]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d007      	beq.n	800487e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	0018      	movs	r0, r3
 8004872:	f7fe fded 	bl	8003450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	228c      	movs	r2, #140	; 0x8c
 800487a:	2100      	movs	r1, #0
 800487c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	225e      	movs	r2, #94	; 0x5e
 8004882:	5a9b      	ldrh	r3, [r3, r2]
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d170      	bne.n	800496c <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800488a:	f3ef 8310 	mrs	r3, PRIMASK
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004892:	65bb      	str	r3, [r7, #88]	; 0x58
 8004894:	2301      	movs	r3, #1
 8004896:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489a:	f383 8810 	msr	PRIMASK, r3
}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	495f      	ldr	r1, [pc, #380]	; (8004a28 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 80048ac:	400a      	ands	r2, r1
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048b2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b6:	f383 8810 	msr	PRIMASK, r3
}
 80048ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048bc:	f3ef 8310 	mrs	r3, PRIMASK
 80048c0:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80048c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048c4:	657b      	str	r3, [r7, #84]	; 0x54
 80048c6:	2301      	movs	r3, #1
 80048c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048cc:	f383 8810 	msr	PRIMASK, r3
}
 80048d0:	46c0      	nop			; (mov r8, r8)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4953      	ldr	r1, [pc, #332]	; (8004a2c <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 80048de:	400a      	ands	r2, r1
 80048e0:	609a      	str	r2, [r3, #8]
 80048e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e8:	f383 8810 	msr	PRIMASK, r3
}
 80048ec:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2288      	movs	r2, #136	; 0x88
 80048f2:	2120      	movs	r1, #32
 80048f4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004900:	2b01      	cmp	r3, #1
 8004902:	d12f      	bne.n	8004964 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800490a:	f3ef 8310 	mrs	r3, PRIMASK
 800490e:	623b      	str	r3, [r7, #32]
  return(result);
 8004910:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004912:	653b      	str	r3, [r7, #80]	; 0x50
 8004914:	2301      	movs	r3, #1
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	f383 8810 	msr	PRIMASK, r3
}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2110      	movs	r1, #16
 800492c:	438a      	bics	r2, r1
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	f383 8810 	msr	PRIMASK, r3
}
 800493a:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	2210      	movs	r2, #16
 8004944:	4013      	ands	r3, r2
 8004946:	2b10      	cmp	r3, #16
 8004948:	d103      	bne.n	8004952 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2210      	movs	r2, #16
 8004950:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	225c      	movs	r2, #92	; 0x5c
 8004956:	5a9a      	ldrh	r2, [r3, r2]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	0011      	movs	r1, r2
 800495c:	0018      	movs	r0, r3
 800495e:	f7fe fd7f 	bl	8003460 <HAL_UARTEx_RxEventCallback>
 8004962:	e003      	b.n	800496c <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	0018      	movs	r0, r3
 8004968:	f7fb fe80 	bl	800066c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800496c:	235e      	movs	r3, #94	; 0x5e
 800496e:	18fb      	adds	r3, r7, r3
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d004      	beq.n	8004980 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8004976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004978:	2220      	movs	r2, #32
 800497a:	4013      	ands	r3, r2
 800497c:	d000      	beq.n	8004980 <UART_RxISR_8BIT_FIFOEN+0x22c>
 800497e:	e70c      	b.n	800479a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004980:	204e      	movs	r0, #78	; 0x4e
 8004982:	183b      	adds	r3, r7, r0
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	215e      	movs	r1, #94	; 0x5e
 8004988:	5a52      	ldrh	r2, [r2, r1]
 800498a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800498c:	0001      	movs	r1, r0
 800498e:	187b      	adds	r3, r7, r1
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d044      	beq.n	8004a20 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2268      	movs	r2, #104	; 0x68
 800499a:	5a9b      	ldrh	r3, [r3, r2]
 800499c:	187a      	adds	r2, r7, r1
 800499e:	8812      	ldrh	r2, [r2, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d23d      	bcs.n	8004a20 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049a4:	f3ef 8310 	mrs	r3, PRIMASK
 80049a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80049aa:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80049ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80049ae:	2301      	movs	r3, #1
 80049b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f383 8810 	msr	PRIMASK, r3
}
 80049b8:	46c0      	nop			; (mov r8, r8)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	491a      	ldr	r1, [pc, #104]	; (8004a30 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80049c6:	400a      	ands	r2, r1
 80049c8:	609a      	str	r2, [r3, #8]
 80049ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f383 8810 	msr	PRIMASK, r3
}
 80049d4:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a16      	ldr	r2, [pc, #88]	; (8004a34 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80049da:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049dc:	f3ef 8310 	mrs	r3, PRIMASK
 80049e0:	617b      	str	r3, [r7, #20]
  return(result);
 80049e2:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80049e4:	647b      	str	r3, [r7, #68]	; 0x44
 80049e6:	2301      	movs	r3, #1
 80049e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	f383 8810 	msr	PRIMASK, r3
}
 80049f0:	46c0      	nop			; (mov r8, r8)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2120      	movs	r1, #32
 80049fe:	430a      	orrs	r2, r1
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	f383 8810 	msr	PRIMASK, r3
}
 8004a0c:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a0e:	e007      	b.n	8004a20 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2108      	movs	r1, #8
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	619a      	str	r2, [r3, #24]
}
 8004a20:	46c0      	nop			; (mov r8, r8)
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b01c      	add	sp, #112	; 0x70
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	fffffeff 	.word	0xfffffeff
 8004a2c:	effffffe 	.word	0xeffffffe
 8004a30:	efffffff 	.word	0xefffffff
 8004a34:	0800447d 	.word	0x0800447d

08004a38 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b09e      	sub	sp, #120	; 0x78
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004a40:	2372      	movs	r3, #114	; 0x72
 8004a42:	18fb      	adds	r3, r7, r3
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	2160      	movs	r1, #96	; 0x60
 8004a48:	5a52      	ldrh	r2, [r2, r1]
 8004a4a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2288      	movs	r2, #136	; 0x88
 8004a68:	589b      	ldr	r3, [r3, r2]
 8004a6a:	2b22      	cmp	r3, #34	; 0x22
 8004a6c:	d000      	beq.n	8004a70 <UART_RxISR_16BIT_FIFOEN+0x38>
 8004a6e:	e141      	b.n	8004cf4 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004a70:	2366      	movs	r3, #102	; 0x66
 8004a72:	18fb      	adds	r3, r7, r3
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	2168      	movs	r1, #104	; 0x68
 8004a78:	5a52      	ldrh	r2, [r2, r1]
 8004a7a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004a7c:	e0e8      	b.n	8004c50 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a84:	2164      	movs	r1, #100	; 0x64
 8004a86:	187b      	adds	r3, r7, r1
 8004a88:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8e:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8004a90:	187b      	adds	r3, r7, r1
 8004a92:	2272      	movs	r2, #114	; 0x72
 8004a94:	18ba      	adds	r2, r7, r2
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	8812      	ldrh	r2, [r2, #0]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aa0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa6:	1c9a      	adds	r2, r3, #2
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	225e      	movs	r2, #94	; 0x5e
 8004ab0:	5a9b      	ldrh	r3, [r3, r2]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b299      	uxth	r1, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	225e      	movs	r2, #94	; 0x5e
 8004abc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac8:	2207      	movs	r2, #7
 8004aca:	4013      	ands	r3, r2
 8004acc:	d049      	beq.n	8004b62 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d010      	beq.n	8004af8 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8004ad6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ad8:	2380      	movs	r3, #128	; 0x80
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	4013      	ands	r3, r2
 8004ade:	d00b      	beq.n	8004af8 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	228c      	movs	r2, #140	; 0x8c
 8004aec:	589b      	ldr	r3, [r3, r2]
 8004aee:	2201      	movs	r2, #1
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	218c      	movs	r1, #140	; 0x8c
 8004af6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004af8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004afa:	2202      	movs	r2, #2
 8004afc:	4013      	ands	r3, r2
 8004afe:	d00f      	beq.n	8004b20 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8004b00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b02:	2201      	movs	r2, #1
 8004b04:	4013      	ands	r3, r2
 8004b06:	d00b      	beq.n	8004b20 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	228c      	movs	r2, #140	; 0x8c
 8004b14:	589b      	ldr	r3, [r3, r2]
 8004b16:	2204      	movs	r2, #4
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	218c      	movs	r1, #140	; 0x8c
 8004b1e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b22:	2204      	movs	r2, #4
 8004b24:	4013      	ands	r3, r2
 8004b26:	d00f      	beq.n	8004b48 <UART_RxISR_16BIT_FIFOEN+0x110>
 8004b28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d00b      	beq.n	8004b48 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2204      	movs	r2, #4
 8004b36:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	228c      	movs	r2, #140	; 0x8c
 8004b3c:	589b      	ldr	r3, [r3, r2]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	218c      	movs	r1, #140	; 0x8c
 8004b46:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	228c      	movs	r2, #140	; 0x8c
 8004b4c:	589b      	ldr	r3, [r3, r2]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d007      	beq.n	8004b62 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	0018      	movs	r0, r3
 8004b56:	f7fe fc7b 	bl	8003450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	228c      	movs	r2, #140	; 0x8c
 8004b5e:	2100      	movs	r1, #0
 8004b60:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	225e      	movs	r2, #94	; 0x5e
 8004b66:	5a9b      	ldrh	r3, [r3, r2]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d170      	bne.n	8004c50 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b72:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b78:	2301      	movs	r3, #1
 8004b7a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7e:	f383 8810 	msr	PRIMASK, r3
}
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	495f      	ldr	r1, [pc, #380]	; (8004d0c <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8004b90:	400a      	ands	r2, r1
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b96:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9a:	f383 8810 	msr	PRIMASK, r3
}
 8004b9e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ba8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004baa:	2301      	movs	r3, #1
 8004bac:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb0:	f383 8810 	msr	PRIMASK, r3
}
 8004bb4:	46c0      	nop			; (mov r8, r8)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4953      	ldr	r1, [pc, #332]	; (8004d10 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8004bc2:	400a      	ands	r2, r1
 8004bc4:	609a      	str	r2, [r3, #8]
 8004bc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bc8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bcc:	f383 8810 	msr	PRIMASK, r3
}
 8004bd0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2288      	movs	r2, #136	; 0x88
 8004bd6:	2120      	movs	r1, #32
 8004bd8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d12f      	bne.n	8004c48 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bee:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf6:	657b      	str	r3, [r7, #84]	; 0x54
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfe:	f383 8810 	msr	PRIMASK, r3
}
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2110      	movs	r1, #16
 8004c10:	438a      	bics	r2, r1
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1a:	f383 8810 	msr	PRIMASK, r3
}
 8004c1e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	2210      	movs	r2, #16
 8004c28:	4013      	ands	r3, r2
 8004c2a:	2b10      	cmp	r3, #16
 8004c2c:	d103      	bne.n	8004c36 <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2210      	movs	r2, #16
 8004c34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	225c      	movs	r2, #92	; 0x5c
 8004c3a:	5a9a      	ldrh	r2, [r3, r2]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	0011      	movs	r1, r2
 8004c40:	0018      	movs	r0, r3
 8004c42:	f7fe fc0d 	bl	8003460 <HAL_UARTEx_RxEventCallback>
 8004c46:	e003      	b.n	8004c50 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f7fb fd0e 	bl	800066c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004c50:	2366      	movs	r3, #102	; 0x66
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d004      	beq.n	8004c64 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d000      	beq.n	8004c64 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004c62:	e70c      	b.n	8004a7e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004c64:	2052      	movs	r0, #82	; 0x52
 8004c66:	183b      	adds	r3, r7, r0
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	215e      	movs	r1, #94	; 0x5e
 8004c6c:	5a52      	ldrh	r2, [r2, r1]
 8004c6e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004c70:	0001      	movs	r1, r0
 8004c72:	187b      	adds	r3, r7, r1
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d044      	beq.n	8004d04 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2268      	movs	r2, #104	; 0x68
 8004c7e:	5a9b      	ldrh	r3, [r3, r2]
 8004c80:	187a      	adds	r2, r7, r1
 8004c82:	8812      	ldrh	r2, [r2, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d23d      	bcs.n	8004d04 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c88:	f3ef 8310 	mrs	r3, PRIMASK
 8004c8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004c90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c92:	2301      	movs	r3, #1
 8004c94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f383 8810 	msr	PRIMASK, r3
}
 8004c9c:	46c0      	nop			; (mov r8, r8)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	491a      	ldr	r1, [pc, #104]	; (8004d14 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8004caa:	400a      	ands	r2, r1
 8004cac:	609a      	str	r2, [r3, #8]
 8004cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f383 8810 	msr	PRIMASK, r3
}
 8004cb8:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a16      	ldr	r2, [pc, #88]	; (8004d18 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8004cbe:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004cc6:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004cc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cca:	2301      	movs	r3, #1
 8004ccc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	f383 8810 	msr	PRIMASK, r3
}
 8004cd4:	46c0      	nop			; (mov r8, r8)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2120      	movs	r1, #32
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	f383 8810 	msr	PRIMASK, r3
}
 8004cf0:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004cf2:	e007      	b.n	8004d04 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2108      	movs	r1, #8
 8004d00:	430a      	orrs	r2, r1
 8004d02:	619a      	str	r2, [r3, #24]
}
 8004d04:	46c0      	nop			; (mov r8, r8)
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b01e      	add	sp, #120	; 0x78
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	fffffeff 	.word	0xfffffeff
 8004d10:	effffffe 	.word	0xeffffffe
 8004d14:	efffffff 	.word	0xefffffff
 8004d18:	080045e9 	.word	0x080045e9

08004d1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d24:	46c0      	nop			; (mov r8, r8)
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b002      	add	sp, #8
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004d34:	46c0      	nop			; (mov r8, r8)
 8004d36:	46bd      	mov	sp, r7
 8004d38:	b002      	add	sp, #8
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004d44:	46c0      	nop			; (mov r8, r8)
 8004d46:	46bd      	mov	sp, r7
 8004d48:	b002      	add	sp, #8
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2280      	movs	r2, #128	; 0x80
 8004d58:	5c9b      	ldrb	r3, [r3, r2]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <HAL_UARTEx_DisableFifoMode+0x16>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e027      	b.n	8004db2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2280      	movs	r2, #128	; 0x80
 8004d66:	2101      	movs	r1, #1
 8004d68:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2284      	movs	r2, #132	; 0x84
 8004d6e:	2124      	movs	r1, #36	; 0x24
 8004d70:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2101      	movs	r1, #1
 8004d86:	438a      	bics	r2, r1
 8004d88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4a0b      	ldr	r2, [pc, #44]	; (8004dbc <HAL_UARTEx_DisableFifoMode+0x70>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2284      	movs	r2, #132	; 0x84
 8004da4:	2120      	movs	r1, #32
 8004da6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2280      	movs	r2, #128	; 0x80
 8004dac:	2100      	movs	r1, #0
 8004dae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	0018      	movs	r0, r3
 8004db4:	46bd      	mov	sp, r7
 8004db6:	b004      	add	sp, #16
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	dfffffff 	.word	0xdfffffff

08004dc0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2280      	movs	r2, #128	; 0x80
 8004dce:	5c9b      	ldrb	r3, [r3, r2]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d101      	bne.n	8004dd8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e02e      	b.n	8004e36 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2280      	movs	r2, #128	; 0x80
 8004ddc:	2101      	movs	r1, #1
 8004dde:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2284      	movs	r2, #132	; 0x84
 8004de4:	2124      	movs	r1, #36	; 0x24
 8004de6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	438a      	bics	r2, r1
 8004dfe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	08d9      	lsrs	r1, r3, #3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	0018      	movs	r0, r3
 8004e18:	f000 f854 	bl	8004ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2284      	movs	r2, #132	; 0x84
 8004e28:	2120      	movs	r1, #32
 8004e2a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2280      	movs	r2, #128	; 0x80
 8004e30:	2100      	movs	r1, #0
 8004e32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	0018      	movs	r0, r3
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	b004      	add	sp, #16
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2280      	movs	r2, #128	; 0x80
 8004e4e:	5c9b      	ldrb	r3, [r3, r2]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e02f      	b.n	8004eb8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2280      	movs	r2, #128	; 0x80
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2284      	movs	r2, #132	; 0x84
 8004e64:	2124      	movs	r1, #36	; 0x24
 8004e66:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	438a      	bics	r2, r1
 8004e7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	4a0e      	ldr	r2, [pc, #56]	; (8004ec0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f000 f813 	bl	8004ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2284      	movs	r2, #132	; 0x84
 8004eaa:	2120      	movs	r1, #32
 8004eac:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2280      	movs	r2, #128	; 0x80
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	0018      	movs	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b004      	add	sp, #16
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	f1ffffff 	.word	0xf1ffffff

08004ec4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d108      	bne.n	8004ee6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	226a      	movs	r2, #106	; 0x6a
 8004ed8:	2101      	movs	r1, #1
 8004eda:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2268      	movs	r2, #104	; 0x68
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ee4:	e043      	b.n	8004f6e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ee6:	260f      	movs	r6, #15
 8004ee8:	19bb      	adds	r3, r7, r6
 8004eea:	2208      	movs	r2, #8
 8004eec:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004eee:	200e      	movs	r0, #14
 8004ef0:	183b      	adds	r3, r7, r0
 8004ef2:	2208      	movs	r2, #8
 8004ef4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	0e5b      	lsrs	r3, r3, #25
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	240d      	movs	r4, #13
 8004f02:	193b      	adds	r3, r7, r4
 8004f04:	2107      	movs	r1, #7
 8004f06:	400a      	ands	r2, r1
 8004f08:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	0f5b      	lsrs	r3, r3, #29
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	250c      	movs	r5, #12
 8004f16:	197b      	adds	r3, r7, r5
 8004f18:	2107      	movs	r1, #7
 8004f1a:	400a      	ands	r2, r1
 8004f1c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f1e:	183b      	adds	r3, r7, r0
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	197a      	adds	r2, r7, r5
 8004f24:	7812      	ldrb	r2, [r2, #0]
 8004f26:	4914      	ldr	r1, [pc, #80]	; (8004f78 <UARTEx_SetNbDataToProcess+0xb4>)
 8004f28:	5c8a      	ldrb	r2, [r1, r2]
 8004f2a:	435a      	muls	r2, r3
 8004f2c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f2e:	197b      	adds	r3, r7, r5
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	4a12      	ldr	r2, [pc, #72]	; (8004f7c <UARTEx_SetNbDataToProcess+0xb8>)
 8004f34:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f36:	0019      	movs	r1, r3
 8004f38:	f7fb f978 	bl	800022c <__divsi3>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	b299      	uxth	r1, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	226a      	movs	r2, #106	; 0x6a
 8004f44:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f46:	19bb      	adds	r3, r7, r6
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	193a      	adds	r2, r7, r4
 8004f4c:	7812      	ldrb	r2, [r2, #0]
 8004f4e:	490a      	ldr	r1, [pc, #40]	; (8004f78 <UARTEx_SetNbDataToProcess+0xb4>)
 8004f50:	5c8a      	ldrb	r2, [r1, r2]
 8004f52:	435a      	muls	r2, r3
 8004f54:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f56:	193b      	adds	r3, r7, r4
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	4a08      	ldr	r2, [pc, #32]	; (8004f7c <UARTEx_SetNbDataToProcess+0xb8>)
 8004f5c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f5e:	0019      	movs	r1, r3
 8004f60:	f7fb f964 	bl	800022c <__divsi3>
 8004f64:	0003      	movs	r3, r0
 8004f66:	b299      	uxth	r1, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2268      	movs	r2, #104	; 0x68
 8004f6c:	5299      	strh	r1, [r3, r2]
}
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	46bd      	mov	sp, r7
 8004f72:	b005      	add	sp, #20
 8004f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	0800597c 	.word	0x0800597c
 8004f7c:	08005984 	.word	0x08005984

08004f80 <__errno>:
 8004f80:	4b01      	ldr	r3, [pc, #4]	; (8004f88 <__errno+0x8>)
 8004f82:	6818      	ldr	r0, [r3, #0]
 8004f84:	4770      	bx	lr
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	2000000c 	.word	0x2000000c

08004f8c <__libc_init_array>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	2600      	movs	r6, #0
 8004f90:	4d0c      	ldr	r5, [pc, #48]	; (8004fc4 <__libc_init_array+0x38>)
 8004f92:	4c0d      	ldr	r4, [pc, #52]	; (8004fc8 <__libc_init_array+0x3c>)
 8004f94:	1b64      	subs	r4, r4, r5
 8004f96:	10a4      	asrs	r4, r4, #2
 8004f98:	42a6      	cmp	r6, r4
 8004f9a:	d109      	bne.n	8004fb0 <__libc_init_array+0x24>
 8004f9c:	2600      	movs	r6, #0
 8004f9e:	f000 fc8b 	bl	80058b8 <_init>
 8004fa2:	4d0a      	ldr	r5, [pc, #40]	; (8004fcc <__libc_init_array+0x40>)
 8004fa4:	4c0a      	ldr	r4, [pc, #40]	; (8004fd0 <__libc_init_array+0x44>)
 8004fa6:	1b64      	subs	r4, r4, r5
 8004fa8:	10a4      	asrs	r4, r4, #2
 8004faa:	42a6      	cmp	r6, r4
 8004fac:	d105      	bne.n	8004fba <__libc_init_array+0x2e>
 8004fae:	bd70      	pop	{r4, r5, r6, pc}
 8004fb0:	00b3      	lsls	r3, r6, #2
 8004fb2:	58eb      	ldr	r3, [r5, r3]
 8004fb4:	4798      	blx	r3
 8004fb6:	3601      	adds	r6, #1
 8004fb8:	e7ee      	b.n	8004f98 <__libc_init_array+0xc>
 8004fba:	00b3      	lsls	r3, r6, #2
 8004fbc:	58eb      	ldr	r3, [r5, r3]
 8004fbe:	4798      	blx	r3
 8004fc0:	3601      	adds	r6, #1
 8004fc2:	e7f2      	b.n	8004faa <__libc_init_array+0x1e>
 8004fc4:	080059c8 	.word	0x080059c8
 8004fc8:	080059c8 	.word	0x080059c8
 8004fcc:	080059c8 	.word	0x080059c8
 8004fd0:	080059cc 	.word	0x080059cc

08004fd4 <memset>:
 8004fd4:	0003      	movs	r3, r0
 8004fd6:	1882      	adds	r2, r0, r2
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d100      	bne.n	8004fde <memset+0xa>
 8004fdc:	4770      	bx	lr
 8004fde:	7019      	strb	r1, [r3, #0]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	e7f9      	b.n	8004fd8 <memset+0x4>

08004fe4 <siprintf>:
 8004fe4:	b40e      	push	{r1, r2, r3}
 8004fe6:	b500      	push	{lr}
 8004fe8:	490b      	ldr	r1, [pc, #44]	; (8005018 <siprintf+0x34>)
 8004fea:	b09c      	sub	sp, #112	; 0x70
 8004fec:	ab1d      	add	r3, sp, #116	; 0x74
 8004fee:	9002      	str	r0, [sp, #8]
 8004ff0:	9006      	str	r0, [sp, #24]
 8004ff2:	9107      	str	r1, [sp, #28]
 8004ff4:	9104      	str	r1, [sp, #16]
 8004ff6:	4809      	ldr	r0, [pc, #36]	; (800501c <siprintf+0x38>)
 8004ff8:	4909      	ldr	r1, [pc, #36]	; (8005020 <siprintf+0x3c>)
 8004ffa:	cb04      	ldmia	r3!, {r2}
 8004ffc:	9105      	str	r1, [sp, #20]
 8004ffe:	6800      	ldr	r0, [r0, #0]
 8005000:	a902      	add	r1, sp, #8
 8005002:	9301      	str	r3, [sp, #4]
 8005004:	f000 f870 	bl	80050e8 <_svfiprintf_r>
 8005008:	2300      	movs	r3, #0
 800500a:	9a02      	ldr	r2, [sp, #8]
 800500c:	7013      	strb	r3, [r2, #0]
 800500e:	b01c      	add	sp, #112	; 0x70
 8005010:	bc08      	pop	{r3}
 8005012:	b003      	add	sp, #12
 8005014:	4718      	bx	r3
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	7fffffff 	.word	0x7fffffff
 800501c:	2000000c 	.word	0x2000000c
 8005020:	ffff0208 	.word	0xffff0208

08005024 <__ssputs_r>:
 8005024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005026:	688e      	ldr	r6, [r1, #8]
 8005028:	b085      	sub	sp, #20
 800502a:	0007      	movs	r7, r0
 800502c:	000c      	movs	r4, r1
 800502e:	9203      	str	r2, [sp, #12]
 8005030:	9301      	str	r3, [sp, #4]
 8005032:	429e      	cmp	r6, r3
 8005034:	d83c      	bhi.n	80050b0 <__ssputs_r+0x8c>
 8005036:	2390      	movs	r3, #144	; 0x90
 8005038:	898a      	ldrh	r2, [r1, #12]
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	421a      	tst	r2, r3
 800503e:	d034      	beq.n	80050aa <__ssputs_r+0x86>
 8005040:	6909      	ldr	r1, [r1, #16]
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	6960      	ldr	r0, [r4, #20]
 8005046:	1a5b      	subs	r3, r3, r1
 8005048:	9302      	str	r3, [sp, #8]
 800504a:	2303      	movs	r3, #3
 800504c:	4343      	muls	r3, r0
 800504e:	0fdd      	lsrs	r5, r3, #31
 8005050:	18ed      	adds	r5, r5, r3
 8005052:	9b01      	ldr	r3, [sp, #4]
 8005054:	9802      	ldr	r0, [sp, #8]
 8005056:	3301      	adds	r3, #1
 8005058:	181b      	adds	r3, r3, r0
 800505a:	106d      	asrs	r5, r5, #1
 800505c:	42ab      	cmp	r3, r5
 800505e:	d900      	bls.n	8005062 <__ssputs_r+0x3e>
 8005060:	001d      	movs	r5, r3
 8005062:	0553      	lsls	r3, r2, #21
 8005064:	d532      	bpl.n	80050cc <__ssputs_r+0xa8>
 8005066:	0029      	movs	r1, r5
 8005068:	0038      	movs	r0, r7
 800506a:	f000 fb53 	bl	8005714 <_malloc_r>
 800506e:	1e06      	subs	r6, r0, #0
 8005070:	d109      	bne.n	8005086 <__ssputs_r+0x62>
 8005072:	230c      	movs	r3, #12
 8005074:	603b      	str	r3, [r7, #0]
 8005076:	2340      	movs	r3, #64	; 0x40
 8005078:	2001      	movs	r0, #1
 800507a:	89a2      	ldrh	r2, [r4, #12]
 800507c:	4240      	negs	r0, r0
 800507e:	4313      	orrs	r3, r2
 8005080:	81a3      	strh	r3, [r4, #12]
 8005082:	b005      	add	sp, #20
 8005084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005086:	9a02      	ldr	r2, [sp, #8]
 8005088:	6921      	ldr	r1, [r4, #16]
 800508a:	f000 faba 	bl	8005602 <memcpy>
 800508e:	89a3      	ldrh	r3, [r4, #12]
 8005090:	4a14      	ldr	r2, [pc, #80]	; (80050e4 <__ssputs_r+0xc0>)
 8005092:	401a      	ands	r2, r3
 8005094:	2380      	movs	r3, #128	; 0x80
 8005096:	4313      	orrs	r3, r2
 8005098:	81a3      	strh	r3, [r4, #12]
 800509a:	9b02      	ldr	r3, [sp, #8]
 800509c:	6126      	str	r6, [r4, #16]
 800509e:	18f6      	adds	r6, r6, r3
 80050a0:	6026      	str	r6, [r4, #0]
 80050a2:	6165      	str	r5, [r4, #20]
 80050a4:	9e01      	ldr	r6, [sp, #4]
 80050a6:	1aed      	subs	r5, r5, r3
 80050a8:	60a5      	str	r5, [r4, #8]
 80050aa:	9b01      	ldr	r3, [sp, #4]
 80050ac:	429e      	cmp	r6, r3
 80050ae:	d900      	bls.n	80050b2 <__ssputs_r+0x8e>
 80050b0:	9e01      	ldr	r6, [sp, #4]
 80050b2:	0032      	movs	r2, r6
 80050b4:	9903      	ldr	r1, [sp, #12]
 80050b6:	6820      	ldr	r0, [r4, #0]
 80050b8:	f000 faac 	bl	8005614 <memmove>
 80050bc:	68a3      	ldr	r3, [r4, #8]
 80050be:	2000      	movs	r0, #0
 80050c0:	1b9b      	subs	r3, r3, r6
 80050c2:	60a3      	str	r3, [r4, #8]
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	199e      	adds	r6, r3, r6
 80050c8:	6026      	str	r6, [r4, #0]
 80050ca:	e7da      	b.n	8005082 <__ssputs_r+0x5e>
 80050cc:	002a      	movs	r2, r5
 80050ce:	0038      	movs	r0, r7
 80050d0:	f000 fb96 	bl	8005800 <_realloc_r>
 80050d4:	1e06      	subs	r6, r0, #0
 80050d6:	d1e0      	bne.n	800509a <__ssputs_r+0x76>
 80050d8:	0038      	movs	r0, r7
 80050da:	6921      	ldr	r1, [r4, #16]
 80050dc:	f000 faae 	bl	800563c <_free_r>
 80050e0:	e7c7      	b.n	8005072 <__ssputs_r+0x4e>
 80050e2:	46c0      	nop			; (mov r8, r8)
 80050e4:	fffffb7f 	.word	0xfffffb7f

080050e8 <_svfiprintf_r>:
 80050e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ea:	b0a1      	sub	sp, #132	; 0x84
 80050ec:	9003      	str	r0, [sp, #12]
 80050ee:	001d      	movs	r5, r3
 80050f0:	898b      	ldrh	r3, [r1, #12]
 80050f2:	000f      	movs	r7, r1
 80050f4:	0016      	movs	r6, r2
 80050f6:	061b      	lsls	r3, r3, #24
 80050f8:	d511      	bpl.n	800511e <_svfiprintf_r+0x36>
 80050fa:	690b      	ldr	r3, [r1, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10e      	bne.n	800511e <_svfiprintf_r+0x36>
 8005100:	2140      	movs	r1, #64	; 0x40
 8005102:	f000 fb07 	bl	8005714 <_malloc_r>
 8005106:	6038      	str	r0, [r7, #0]
 8005108:	6138      	str	r0, [r7, #16]
 800510a:	2800      	cmp	r0, #0
 800510c:	d105      	bne.n	800511a <_svfiprintf_r+0x32>
 800510e:	230c      	movs	r3, #12
 8005110:	9a03      	ldr	r2, [sp, #12]
 8005112:	3801      	subs	r0, #1
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	b021      	add	sp, #132	; 0x84
 8005118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800511a:	2340      	movs	r3, #64	; 0x40
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	2300      	movs	r3, #0
 8005120:	ac08      	add	r4, sp, #32
 8005122:	6163      	str	r3, [r4, #20]
 8005124:	3320      	adds	r3, #32
 8005126:	7663      	strb	r3, [r4, #25]
 8005128:	3310      	adds	r3, #16
 800512a:	76a3      	strb	r3, [r4, #26]
 800512c:	9507      	str	r5, [sp, #28]
 800512e:	0035      	movs	r5, r6
 8005130:	782b      	ldrb	r3, [r5, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <_svfiprintf_r+0x52>
 8005136:	2b25      	cmp	r3, #37	; 0x25
 8005138:	d147      	bne.n	80051ca <_svfiprintf_r+0xe2>
 800513a:	1bab      	subs	r3, r5, r6
 800513c:	9305      	str	r3, [sp, #20]
 800513e:	42b5      	cmp	r5, r6
 8005140:	d00c      	beq.n	800515c <_svfiprintf_r+0x74>
 8005142:	0032      	movs	r2, r6
 8005144:	0039      	movs	r1, r7
 8005146:	9803      	ldr	r0, [sp, #12]
 8005148:	f7ff ff6c 	bl	8005024 <__ssputs_r>
 800514c:	1c43      	adds	r3, r0, #1
 800514e:	d100      	bne.n	8005152 <_svfiprintf_r+0x6a>
 8005150:	e0ae      	b.n	80052b0 <_svfiprintf_r+0x1c8>
 8005152:	6962      	ldr	r2, [r4, #20]
 8005154:	9b05      	ldr	r3, [sp, #20]
 8005156:	4694      	mov	ip, r2
 8005158:	4463      	add	r3, ip
 800515a:	6163      	str	r3, [r4, #20]
 800515c:	782b      	ldrb	r3, [r5, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d100      	bne.n	8005164 <_svfiprintf_r+0x7c>
 8005162:	e0a5      	b.n	80052b0 <_svfiprintf_r+0x1c8>
 8005164:	2201      	movs	r2, #1
 8005166:	2300      	movs	r3, #0
 8005168:	4252      	negs	r2, r2
 800516a:	6062      	str	r2, [r4, #4]
 800516c:	a904      	add	r1, sp, #16
 800516e:	3254      	adds	r2, #84	; 0x54
 8005170:	1852      	adds	r2, r2, r1
 8005172:	1c6e      	adds	r6, r5, #1
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	60e3      	str	r3, [r4, #12]
 8005178:	60a3      	str	r3, [r4, #8]
 800517a:	7013      	strb	r3, [r2, #0]
 800517c:	65a3      	str	r3, [r4, #88]	; 0x58
 800517e:	2205      	movs	r2, #5
 8005180:	7831      	ldrb	r1, [r6, #0]
 8005182:	4854      	ldr	r0, [pc, #336]	; (80052d4 <_svfiprintf_r+0x1ec>)
 8005184:	f000 fa32 	bl	80055ec <memchr>
 8005188:	1c75      	adds	r5, r6, #1
 800518a:	2800      	cmp	r0, #0
 800518c:	d11f      	bne.n	80051ce <_svfiprintf_r+0xe6>
 800518e:	6822      	ldr	r2, [r4, #0]
 8005190:	06d3      	lsls	r3, r2, #27
 8005192:	d504      	bpl.n	800519e <_svfiprintf_r+0xb6>
 8005194:	2353      	movs	r3, #83	; 0x53
 8005196:	a904      	add	r1, sp, #16
 8005198:	185b      	adds	r3, r3, r1
 800519a:	2120      	movs	r1, #32
 800519c:	7019      	strb	r1, [r3, #0]
 800519e:	0713      	lsls	r3, r2, #28
 80051a0:	d504      	bpl.n	80051ac <_svfiprintf_r+0xc4>
 80051a2:	2353      	movs	r3, #83	; 0x53
 80051a4:	a904      	add	r1, sp, #16
 80051a6:	185b      	adds	r3, r3, r1
 80051a8:	212b      	movs	r1, #43	; 0x2b
 80051aa:	7019      	strb	r1, [r3, #0]
 80051ac:	7833      	ldrb	r3, [r6, #0]
 80051ae:	2b2a      	cmp	r3, #42	; 0x2a
 80051b0:	d016      	beq.n	80051e0 <_svfiprintf_r+0xf8>
 80051b2:	0035      	movs	r5, r6
 80051b4:	2100      	movs	r1, #0
 80051b6:	200a      	movs	r0, #10
 80051b8:	68e3      	ldr	r3, [r4, #12]
 80051ba:	782a      	ldrb	r2, [r5, #0]
 80051bc:	1c6e      	adds	r6, r5, #1
 80051be:	3a30      	subs	r2, #48	; 0x30
 80051c0:	2a09      	cmp	r2, #9
 80051c2:	d94e      	bls.n	8005262 <_svfiprintf_r+0x17a>
 80051c4:	2900      	cmp	r1, #0
 80051c6:	d111      	bne.n	80051ec <_svfiprintf_r+0x104>
 80051c8:	e017      	b.n	80051fa <_svfiprintf_r+0x112>
 80051ca:	3501      	adds	r5, #1
 80051cc:	e7b0      	b.n	8005130 <_svfiprintf_r+0x48>
 80051ce:	4b41      	ldr	r3, [pc, #260]	; (80052d4 <_svfiprintf_r+0x1ec>)
 80051d0:	6822      	ldr	r2, [r4, #0]
 80051d2:	1ac0      	subs	r0, r0, r3
 80051d4:	2301      	movs	r3, #1
 80051d6:	4083      	lsls	r3, r0
 80051d8:	4313      	orrs	r3, r2
 80051da:	002e      	movs	r6, r5
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	e7ce      	b.n	800517e <_svfiprintf_r+0x96>
 80051e0:	9b07      	ldr	r3, [sp, #28]
 80051e2:	1d19      	adds	r1, r3, #4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	9107      	str	r1, [sp, #28]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	db01      	blt.n	80051f0 <_svfiprintf_r+0x108>
 80051ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80051ee:	e004      	b.n	80051fa <_svfiprintf_r+0x112>
 80051f0:	425b      	negs	r3, r3
 80051f2:	60e3      	str	r3, [r4, #12]
 80051f4:	2302      	movs	r3, #2
 80051f6:	4313      	orrs	r3, r2
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	782b      	ldrb	r3, [r5, #0]
 80051fc:	2b2e      	cmp	r3, #46	; 0x2e
 80051fe:	d10a      	bne.n	8005216 <_svfiprintf_r+0x12e>
 8005200:	786b      	ldrb	r3, [r5, #1]
 8005202:	2b2a      	cmp	r3, #42	; 0x2a
 8005204:	d135      	bne.n	8005272 <_svfiprintf_r+0x18a>
 8005206:	9b07      	ldr	r3, [sp, #28]
 8005208:	3502      	adds	r5, #2
 800520a:	1d1a      	adds	r2, r3, #4
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	9207      	str	r2, [sp, #28]
 8005210:	2b00      	cmp	r3, #0
 8005212:	db2b      	blt.n	800526c <_svfiprintf_r+0x184>
 8005214:	9309      	str	r3, [sp, #36]	; 0x24
 8005216:	4e30      	ldr	r6, [pc, #192]	; (80052d8 <_svfiprintf_r+0x1f0>)
 8005218:	2203      	movs	r2, #3
 800521a:	0030      	movs	r0, r6
 800521c:	7829      	ldrb	r1, [r5, #0]
 800521e:	f000 f9e5 	bl	80055ec <memchr>
 8005222:	2800      	cmp	r0, #0
 8005224:	d006      	beq.n	8005234 <_svfiprintf_r+0x14c>
 8005226:	2340      	movs	r3, #64	; 0x40
 8005228:	1b80      	subs	r0, r0, r6
 800522a:	4083      	lsls	r3, r0
 800522c:	6822      	ldr	r2, [r4, #0]
 800522e:	3501      	adds	r5, #1
 8005230:	4313      	orrs	r3, r2
 8005232:	6023      	str	r3, [r4, #0]
 8005234:	7829      	ldrb	r1, [r5, #0]
 8005236:	2206      	movs	r2, #6
 8005238:	4828      	ldr	r0, [pc, #160]	; (80052dc <_svfiprintf_r+0x1f4>)
 800523a:	1c6e      	adds	r6, r5, #1
 800523c:	7621      	strb	r1, [r4, #24]
 800523e:	f000 f9d5 	bl	80055ec <memchr>
 8005242:	2800      	cmp	r0, #0
 8005244:	d03c      	beq.n	80052c0 <_svfiprintf_r+0x1d8>
 8005246:	4b26      	ldr	r3, [pc, #152]	; (80052e0 <_svfiprintf_r+0x1f8>)
 8005248:	2b00      	cmp	r3, #0
 800524a:	d125      	bne.n	8005298 <_svfiprintf_r+0x1b0>
 800524c:	2207      	movs	r2, #7
 800524e:	9b07      	ldr	r3, [sp, #28]
 8005250:	3307      	adds	r3, #7
 8005252:	4393      	bics	r3, r2
 8005254:	3308      	adds	r3, #8
 8005256:	9307      	str	r3, [sp, #28]
 8005258:	6963      	ldr	r3, [r4, #20]
 800525a:	9a04      	ldr	r2, [sp, #16]
 800525c:	189b      	adds	r3, r3, r2
 800525e:	6163      	str	r3, [r4, #20]
 8005260:	e765      	b.n	800512e <_svfiprintf_r+0x46>
 8005262:	4343      	muls	r3, r0
 8005264:	0035      	movs	r5, r6
 8005266:	2101      	movs	r1, #1
 8005268:	189b      	adds	r3, r3, r2
 800526a:	e7a6      	b.n	80051ba <_svfiprintf_r+0xd2>
 800526c:	2301      	movs	r3, #1
 800526e:	425b      	negs	r3, r3
 8005270:	e7d0      	b.n	8005214 <_svfiprintf_r+0x12c>
 8005272:	2300      	movs	r3, #0
 8005274:	200a      	movs	r0, #10
 8005276:	001a      	movs	r2, r3
 8005278:	3501      	adds	r5, #1
 800527a:	6063      	str	r3, [r4, #4]
 800527c:	7829      	ldrb	r1, [r5, #0]
 800527e:	1c6e      	adds	r6, r5, #1
 8005280:	3930      	subs	r1, #48	; 0x30
 8005282:	2909      	cmp	r1, #9
 8005284:	d903      	bls.n	800528e <_svfiprintf_r+0x1a6>
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0c5      	beq.n	8005216 <_svfiprintf_r+0x12e>
 800528a:	9209      	str	r2, [sp, #36]	; 0x24
 800528c:	e7c3      	b.n	8005216 <_svfiprintf_r+0x12e>
 800528e:	4342      	muls	r2, r0
 8005290:	0035      	movs	r5, r6
 8005292:	2301      	movs	r3, #1
 8005294:	1852      	adds	r2, r2, r1
 8005296:	e7f1      	b.n	800527c <_svfiprintf_r+0x194>
 8005298:	ab07      	add	r3, sp, #28
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	003a      	movs	r2, r7
 800529e:	0021      	movs	r1, r4
 80052a0:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <_svfiprintf_r+0x1fc>)
 80052a2:	9803      	ldr	r0, [sp, #12]
 80052a4:	e000      	b.n	80052a8 <_svfiprintf_r+0x1c0>
 80052a6:	bf00      	nop
 80052a8:	9004      	str	r0, [sp, #16]
 80052aa:	9b04      	ldr	r3, [sp, #16]
 80052ac:	3301      	adds	r3, #1
 80052ae:	d1d3      	bne.n	8005258 <_svfiprintf_r+0x170>
 80052b0:	89bb      	ldrh	r3, [r7, #12]
 80052b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80052b4:	065b      	lsls	r3, r3, #25
 80052b6:	d400      	bmi.n	80052ba <_svfiprintf_r+0x1d2>
 80052b8:	e72d      	b.n	8005116 <_svfiprintf_r+0x2e>
 80052ba:	2001      	movs	r0, #1
 80052bc:	4240      	negs	r0, r0
 80052be:	e72a      	b.n	8005116 <_svfiprintf_r+0x2e>
 80052c0:	ab07      	add	r3, sp, #28
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	003a      	movs	r2, r7
 80052c6:	0021      	movs	r1, r4
 80052c8:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <_svfiprintf_r+0x1fc>)
 80052ca:	9803      	ldr	r0, [sp, #12]
 80052cc:	f000 f87c 	bl	80053c8 <_printf_i>
 80052d0:	e7ea      	b.n	80052a8 <_svfiprintf_r+0x1c0>
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	0800598c 	.word	0x0800598c
 80052d8:	08005992 	.word	0x08005992
 80052dc:	08005996 	.word	0x08005996
 80052e0:	00000000 	.word	0x00000000
 80052e4:	08005025 	.word	0x08005025

080052e8 <_printf_common>:
 80052e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052ea:	0015      	movs	r5, r2
 80052ec:	9301      	str	r3, [sp, #4]
 80052ee:	688a      	ldr	r2, [r1, #8]
 80052f0:	690b      	ldr	r3, [r1, #16]
 80052f2:	000c      	movs	r4, r1
 80052f4:	9000      	str	r0, [sp, #0]
 80052f6:	4293      	cmp	r3, r2
 80052f8:	da00      	bge.n	80052fc <_printf_common+0x14>
 80052fa:	0013      	movs	r3, r2
 80052fc:	0022      	movs	r2, r4
 80052fe:	602b      	str	r3, [r5, #0]
 8005300:	3243      	adds	r2, #67	; 0x43
 8005302:	7812      	ldrb	r2, [r2, #0]
 8005304:	2a00      	cmp	r2, #0
 8005306:	d001      	beq.n	800530c <_printf_common+0x24>
 8005308:	3301      	adds	r3, #1
 800530a:	602b      	str	r3, [r5, #0]
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	069b      	lsls	r3, r3, #26
 8005310:	d502      	bpl.n	8005318 <_printf_common+0x30>
 8005312:	682b      	ldr	r3, [r5, #0]
 8005314:	3302      	adds	r3, #2
 8005316:	602b      	str	r3, [r5, #0]
 8005318:	6822      	ldr	r2, [r4, #0]
 800531a:	2306      	movs	r3, #6
 800531c:	0017      	movs	r7, r2
 800531e:	401f      	ands	r7, r3
 8005320:	421a      	tst	r2, r3
 8005322:	d027      	beq.n	8005374 <_printf_common+0x8c>
 8005324:	0023      	movs	r3, r4
 8005326:	3343      	adds	r3, #67	; 0x43
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	1e5a      	subs	r2, r3, #1
 800532c:	4193      	sbcs	r3, r2
 800532e:	6822      	ldr	r2, [r4, #0]
 8005330:	0692      	lsls	r2, r2, #26
 8005332:	d430      	bmi.n	8005396 <_printf_common+0xae>
 8005334:	0022      	movs	r2, r4
 8005336:	9901      	ldr	r1, [sp, #4]
 8005338:	9800      	ldr	r0, [sp, #0]
 800533a:	9e08      	ldr	r6, [sp, #32]
 800533c:	3243      	adds	r2, #67	; 0x43
 800533e:	47b0      	blx	r6
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d025      	beq.n	8005390 <_printf_common+0xa8>
 8005344:	2306      	movs	r3, #6
 8005346:	6820      	ldr	r0, [r4, #0]
 8005348:	682a      	ldr	r2, [r5, #0]
 800534a:	68e1      	ldr	r1, [r4, #12]
 800534c:	2500      	movs	r5, #0
 800534e:	4003      	ands	r3, r0
 8005350:	2b04      	cmp	r3, #4
 8005352:	d103      	bne.n	800535c <_printf_common+0x74>
 8005354:	1a8d      	subs	r5, r1, r2
 8005356:	43eb      	mvns	r3, r5
 8005358:	17db      	asrs	r3, r3, #31
 800535a:	401d      	ands	r5, r3
 800535c:	68a3      	ldr	r3, [r4, #8]
 800535e:	6922      	ldr	r2, [r4, #16]
 8005360:	4293      	cmp	r3, r2
 8005362:	dd01      	ble.n	8005368 <_printf_common+0x80>
 8005364:	1a9b      	subs	r3, r3, r2
 8005366:	18ed      	adds	r5, r5, r3
 8005368:	2700      	movs	r7, #0
 800536a:	42bd      	cmp	r5, r7
 800536c:	d120      	bne.n	80053b0 <_printf_common+0xc8>
 800536e:	2000      	movs	r0, #0
 8005370:	e010      	b.n	8005394 <_printf_common+0xac>
 8005372:	3701      	adds	r7, #1
 8005374:	68e3      	ldr	r3, [r4, #12]
 8005376:	682a      	ldr	r2, [r5, #0]
 8005378:	1a9b      	subs	r3, r3, r2
 800537a:	42bb      	cmp	r3, r7
 800537c:	ddd2      	ble.n	8005324 <_printf_common+0x3c>
 800537e:	0022      	movs	r2, r4
 8005380:	2301      	movs	r3, #1
 8005382:	9901      	ldr	r1, [sp, #4]
 8005384:	9800      	ldr	r0, [sp, #0]
 8005386:	9e08      	ldr	r6, [sp, #32]
 8005388:	3219      	adds	r2, #25
 800538a:	47b0      	blx	r6
 800538c:	1c43      	adds	r3, r0, #1
 800538e:	d1f0      	bne.n	8005372 <_printf_common+0x8a>
 8005390:	2001      	movs	r0, #1
 8005392:	4240      	negs	r0, r0
 8005394:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005396:	2030      	movs	r0, #48	; 0x30
 8005398:	18e1      	adds	r1, r4, r3
 800539a:	3143      	adds	r1, #67	; 0x43
 800539c:	7008      	strb	r0, [r1, #0]
 800539e:	0021      	movs	r1, r4
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	3145      	adds	r1, #69	; 0x45
 80053a4:	7809      	ldrb	r1, [r1, #0]
 80053a6:	18a2      	adds	r2, r4, r2
 80053a8:	3243      	adds	r2, #67	; 0x43
 80053aa:	3302      	adds	r3, #2
 80053ac:	7011      	strb	r1, [r2, #0]
 80053ae:	e7c1      	b.n	8005334 <_printf_common+0x4c>
 80053b0:	0022      	movs	r2, r4
 80053b2:	2301      	movs	r3, #1
 80053b4:	9901      	ldr	r1, [sp, #4]
 80053b6:	9800      	ldr	r0, [sp, #0]
 80053b8:	9e08      	ldr	r6, [sp, #32]
 80053ba:	321a      	adds	r2, #26
 80053bc:	47b0      	blx	r6
 80053be:	1c43      	adds	r3, r0, #1
 80053c0:	d0e6      	beq.n	8005390 <_printf_common+0xa8>
 80053c2:	3701      	adds	r7, #1
 80053c4:	e7d1      	b.n	800536a <_printf_common+0x82>
	...

080053c8 <_printf_i>:
 80053c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ca:	b08b      	sub	sp, #44	; 0x2c
 80053cc:	9206      	str	r2, [sp, #24]
 80053ce:	000a      	movs	r2, r1
 80053d0:	3243      	adds	r2, #67	; 0x43
 80053d2:	9307      	str	r3, [sp, #28]
 80053d4:	9005      	str	r0, [sp, #20]
 80053d6:	9204      	str	r2, [sp, #16]
 80053d8:	7e0a      	ldrb	r2, [r1, #24]
 80053da:	000c      	movs	r4, r1
 80053dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053de:	2a78      	cmp	r2, #120	; 0x78
 80053e0:	d807      	bhi.n	80053f2 <_printf_i+0x2a>
 80053e2:	2a62      	cmp	r2, #98	; 0x62
 80053e4:	d809      	bhi.n	80053fa <_printf_i+0x32>
 80053e6:	2a00      	cmp	r2, #0
 80053e8:	d100      	bne.n	80053ec <_printf_i+0x24>
 80053ea:	e0c1      	b.n	8005570 <_printf_i+0x1a8>
 80053ec:	2a58      	cmp	r2, #88	; 0x58
 80053ee:	d100      	bne.n	80053f2 <_printf_i+0x2a>
 80053f0:	e08c      	b.n	800550c <_printf_i+0x144>
 80053f2:	0026      	movs	r6, r4
 80053f4:	3642      	adds	r6, #66	; 0x42
 80053f6:	7032      	strb	r2, [r6, #0]
 80053f8:	e022      	b.n	8005440 <_printf_i+0x78>
 80053fa:	0010      	movs	r0, r2
 80053fc:	3863      	subs	r0, #99	; 0x63
 80053fe:	2815      	cmp	r0, #21
 8005400:	d8f7      	bhi.n	80053f2 <_printf_i+0x2a>
 8005402:	f7fa fe7f 	bl	8000104 <__gnu_thumb1_case_shi>
 8005406:	0016      	.short	0x0016
 8005408:	fff6001f 	.word	0xfff6001f
 800540c:	fff6fff6 	.word	0xfff6fff6
 8005410:	001ffff6 	.word	0x001ffff6
 8005414:	fff6fff6 	.word	0xfff6fff6
 8005418:	fff6fff6 	.word	0xfff6fff6
 800541c:	003600a8 	.word	0x003600a8
 8005420:	fff6009a 	.word	0xfff6009a
 8005424:	00b9fff6 	.word	0x00b9fff6
 8005428:	0036fff6 	.word	0x0036fff6
 800542c:	fff6fff6 	.word	0xfff6fff6
 8005430:	009e      	.short	0x009e
 8005432:	0026      	movs	r6, r4
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	3642      	adds	r6, #66	; 0x42
 8005438:	1d11      	adds	r1, r2, #4
 800543a:	6019      	str	r1, [r3, #0]
 800543c:	6813      	ldr	r3, [r2, #0]
 800543e:	7033      	strb	r3, [r6, #0]
 8005440:	2301      	movs	r3, #1
 8005442:	e0a7      	b.n	8005594 <_printf_i+0x1cc>
 8005444:	6808      	ldr	r0, [r1, #0]
 8005446:	6819      	ldr	r1, [r3, #0]
 8005448:	1d0a      	adds	r2, r1, #4
 800544a:	0605      	lsls	r5, r0, #24
 800544c:	d50b      	bpl.n	8005466 <_printf_i+0x9e>
 800544e:	680d      	ldr	r5, [r1, #0]
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	2d00      	cmp	r5, #0
 8005454:	da03      	bge.n	800545e <_printf_i+0x96>
 8005456:	232d      	movs	r3, #45	; 0x2d
 8005458:	9a04      	ldr	r2, [sp, #16]
 800545a:	426d      	negs	r5, r5
 800545c:	7013      	strb	r3, [r2, #0]
 800545e:	4b61      	ldr	r3, [pc, #388]	; (80055e4 <_printf_i+0x21c>)
 8005460:	270a      	movs	r7, #10
 8005462:	9303      	str	r3, [sp, #12]
 8005464:	e01b      	b.n	800549e <_printf_i+0xd6>
 8005466:	680d      	ldr	r5, [r1, #0]
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	0641      	lsls	r1, r0, #25
 800546c:	d5f1      	bpl.n	8005452 <_printf_i+0x8a>
 800546e:	b22d      	sxth	r5, r5
 8005470:	e7ef      	b.n	8005452 <_printf_i+0x8a>
 8005472:	680d      	ldr	r5, [r1, #0]
 8005474:	6819      	ldr	r1, [r3, #0]
 8005476:	1d08      	adds	r0, r1, #4
 8005478:	6018      	str	r0, [r3, #0]
 800547a:	062e      	lsls	r6, r5, #24
 800547c:	d501      	bpl.n	8005482 <_printf_i+0xba>
 800547e:	680d      	ldr	r5, [r1, #0]
 8005480:	e003      	b.n	800548a <_printf_i+0xc2>
 8005482:	066d      	lsls	r5, r5, #25
 8005484:	d5fb      	bpl.n	800547e <_printf_i+0xb6>
 8005486:	680d      	ldr	r5, [r1, #0]
 8005488:	b2ad      	uxth	r5, r5
 800548a:	4b56      	ldr	r3, [pc, #344]	; (80055e4 <_printf_i+0x21c>)
 800548c:	2708      	movs	r7, #8
 800548e:	9303      	str	r3, [sp, #12]
 8005490:	2a6f      	cmp	r2, #111	; 0x6f
 8005492:	d000      	beq.n	8005496 <_printf_i+0xce>
 8005494:	3702      	adds	r7, #2
 8005496:	0023      	movs	r3, r4
 8005498:	2200      	movs	r2, #0
 800549a:	3343      	adds	r3, #67	; 0x43
 800549c:	701a      	strb	r2, [r3, #0]
 800549e:	6863      	ldr	r3, [r4, #4]
 80054a0:	60a3      	str	r3, [r4, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	db03      	blt.n	80054ae <_printf_i+0xe6>
 80054a6:	2204      	movs	r2, #4
 80054a8:	6821      	ldr	r1, [r4, #0]
 80054aa:	4391      	bics	r1, r2
 80054ac:	6021      	str	r1, [r4, #0]
 80054ae:	2d00      	cmp	r5, #0
 80054b0:	d102      	bne.n	80054b8 <_printf_i+0xf0>
 80054b2:	9e04      	ldr	r6, [sp, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00c      	beq.n	80054d2 <_printf_i+0x10a>
 80054b8:	9e04      	ldr	r6, [sp, #16]
 80054ba:	0028      	movs	r0, r5
 80054bc:	0039      	movs	r1, r7
 80054be:	f7fa feb1 	bl	8000224 <__aeabi_uidivmod>
 80054c2:	9b03      	ldr	r3, [sp, #12]
 80054c4:	3e01      	subs	r6, #1
 80054c6:	5c5b      	ldrb	r3, [r3, r1]
 80054c8:	7033      	strb	r3, [r6, #0]
 80054ca:	002b      	movs	r3, r5
 80054cc:	0005      	movs	r5, r0
 80054ce:	429f      	cmp	r7, r3
 80054d0:	d9f3      	bls.n	80054ba <_printf_i+0xf2>
 80054d2:	2f08      	cmp	r7, #8
 80054d4:	d109      	bne.n	80054ea <_printf_i+0x122>
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	07db      	lsls	r3, r3, #31
 80054da:	d506      	bpl.n	80054ea <_printf_i+0x122>
 80054dc:	6863      	ldr	r3, [r4, #4]
 80054de:	6922      	ldr	r2, [r4, #16]
 80054e0:	4293      	cmp	r3, r2
 80054e2:	dc02      	bgt.n	80054ea <_printf_i+0x122>
 80054e4:	2330      	movs	r3, #48	; 0x30
 80054e6:	3e01      	subs	r6, #1
 80054e8:	7033      	strb	r3, [r6, #0]
 80054ea:	9b04      	ldr	r3, [sp, #16]
 80054ec:	1b9b      	subs	r3, r3, r6
 80054ee:	6123      	str	r3, [r4, #16]
 80054f0:	9b07      	ldr	r3, [sp, #28]
 80054f2:	0021      	movs	r1, r4
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	9805      	ldr	r0, [sp, #20]
 80054f8:	9b06      	ldr	r3, [sp, #24]
 80054fa:	aa09      	add	r2, sp, #36	; 0x24
 80054fc:	f7ff fef4 	bl	80052e8 <_printf_common>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	d14c      	bne.n	800559e <_printf_i+0x1d6>
 8005504:	2001      	movs	r0, #1
 8005506:	4240      	negs	r0, r0
 8005508:	b00b      	add	sp, #44	; 0x2c
 800550a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800550c:	3145      	adds	r1, #69	; 0x45
 800550e:	700a      	strb	r2, [r1, #0]
 8005510:	4a34      	ldr	r2, [pc, #208]	; (80055e4 <_printf_i+0x21c>)
 8005512:	9203      	str	r2, [sp, #12]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	6821      	ldr	r1, [r4, #0]
 8005518:	ca20      	ldmia	r2!, {r5}
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	0608      	lsls	r0, r1, #24
 800551e:	d516      	bpl.n	800554e <_printf_i+0x186>
 8005520:	07cb      	lsls	r3, r1, #31
 8005522:	d502      	bpl.n	800552a <_printf_i+0x162>
 8005524:	2320      	movs	r3, #32
 8005526:	4319      	orrs	r1, r3
 8005528:	6021      	str	r1, [r4, #0]
 800552a:	2710      	movs	r7, #16
 800552c:	2d00      	cmp	r5, #0
 800552e:	d1b2      	bne.n	8005496 <_printf_i+0xce>
 8005530:	2320      	movs	r3, #32
 8005532:	6822      	ldr	r2, [r4, #0]
 8005534:	439a      	bics	r2, r3
 8005536:	6022      	str	r2, [r4, #0]
 8005538:	e7ad      	b.n	8005496 <_printf_i+0xce>
 800553a:	2220      	movs	r2, #32
 800553c:	6809      	ldr	r1, [r1, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	6022      	str	r2, [r4, #0]
 8005542:	0022      	movs	r2, r4
 8005544:	2178      	movs	r1, #120	; 0x78
 8005546:	3245      	adds	r2, #69	; 0x45
 8005548:	7011      	strb	r1, [r2, #0]
 800554a:	4a27      	ldr	r2, [pc, #156]	; (80055e8 <_printf_i+0x220>)
 800554c:	e7e1      	b.n	8005512 <_printf_i+0x14a>
 800554e:	0648      	lsls	r0, r1, #25
 8005550:	d5e6      	bpl.n	8005520 <_printf_i+0x158>
 8005552:	b2ad      	uxth	r5, r5
 8005554:	e7e4      	b.n	8005520 <_printf_i+0x158>
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	680d      	ldr	r5, [r1, #0]
 800555a:	1d10      	adds	r0, r2, #4
 800555c:	6949      	ldr	r1, [r1, #20]
 800555e:	6018      	str	r0, [r3, #0]
 8005560:	6813      	ldr	r3, [r2, #0]
 8005562:	062e      	lsls	r6, r5, #24
 8005564:	d501      	bpl.n	800556a <_printf_i+0x1a2>
 8005566:	6019      	str	r1, [r3, #0]
 8005568:	e002      	b.n	8005570 <_printf_i+0x1a8>
 800556a:	066d      	lsls	r5, r5, #25
 800556c:	d5fb      	bpl.n	8005566 <_printf_i+0x19e>
 800556e:	8019      	strh	r1, [r3, #0]
 8005570:	2300      	movs	r3, #0
 8005572:	9e04      	ldr	r6, [sp, #16]
 8005574:	6123      	str	r3, [r4, #16]
 8005576:	e7bb      	b.n	80054f0 <_printf_i+0x128>
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	1d11      	adds	r1, r2, #4
 800557c:	6019      	str	r1, [r3, #0]
 800557e:	6816      	ldr	r6, [r2, #0]
 8005580:	2100      	movs	r1, #0
 8005582:	0030      	movs	r0, r6
 8005584:	6862      	ldr	r2, [r4, #4]
 8005586:	f000 f831 	bl	80055ec <memchr>
 800558a:	2800      	cmp	r0, #0
 800558c:	d001      	beq.n	8005592 <_printf_i+0x1ca>
 800558e:	1b80      	subs	r0, r0, r6
 8005590:	6060      	str	r0, [r4, #4]
 8005592:	6863      	ldr	r3, [r4, #4]
 8005594:	6123      	str	r3, [r4, #16]
 8005596:	2300      	movs	r3, #0
 8005598:	9a04      	ldr	r2, [sp, #16]
 800559a:	7013      	strb	r3, [r2, #0]
 800559c:	e7a8      	b.n	80054f0 <_printf_i+0x128>
 800559e:	6923      	ldr	r3, [r4, #16]
 80055a0:	0032      	movs	r2, r6
 80055a2:	9906      	ldr	r1, [sp, #24]
 80055a4:	9805      	ldr	r0, [sp, #20]
 80055a6:	9d07      	ldr	r5, [sp, #28]
 80055a8:	47a8      	blx	r5
 80055aa:	1c43      	adds	r3, r0, #1
 80055ac:	d0aa      	beq.n	8005504 <_printf_i+0x13c>
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	079b      	lsls	r3, r3, #30
 80055b2:	d415      	bmi.n	80055e0 <_printf_i+0x218>
 80055b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055b6:	68e0      	ldr	r0, [r4, #12]
 80055b8:	4298      	cmp	r0, r3
 80055ba:	daa5      	bge.n	8005508 <_printf_i+0x140>
 80055bc:	0018      	movs	r0, r3
 80055be:	e7a3      	b.n	8005508 <_printf_i+0x140>
 80055c0:	0022      	movs	r2, r4
 80055c2:	2301      	movs	r3, #1
 80055c4:	9906      	ldr	r1, [sp, #24]
 80055c6:	9805      	ldr	r0, [sp, #20]
 80055c8:	9e07      	ldr	r6, [sp, #28]
 80055ca:	3219      	adds	r2, #25
 80055cc:	47b0      	blx	r6
 80055ce:	1c43      	adds	r3, r0, #1
 80055d0:	d098      	beq.n	8005504 <_printf_i+0x13c>
 80055d2:	3501      	adds	r5, #1
 80055d4:	68e3      	ldr	r3, [r4, #12]
 80055d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055d8:	1a9b      	subs	r3, r3, r2
 80055da:	42ab      	cmp	r3, r5
 80055dc:	dcf0      	bgt.n	80055c0 <_printf_i+0x1f8>
 80055de:	e7e9      	b.n	80055b4 <_printf_i+0x1ec>
 80055e0:	2500      	movs	r5, #0
 80055e2:	e7f7      	b.n	80055d4 <_printf_i+0x20c>
 80055e4:	0800599d 	.word	0x0800599d
 80055e8:	080059ae 	.word	0x080059ae

080055ec <memchr>:
 80055ec:	b2c9      	uxtb	r1, r1
 80055ee:	1882      	adds	r2, r0, r2
 80055f0:	4290      	cmp	r0, r2
 80055f2:	d101      	bne.n	80055f8 <memchr+0xc>
 80055f4:	2000      	movs	r0, #0
 80055f6:	4770      	bx	lr
 80055f8:	7803      	ldrb	r3, [r0, #0]
 80055fa:	428b      	cmp	r3, r1
 80055fc:	d0fb      	beq.n	80055f6 <memchr+0xa>
 80055fe:	3001      	adds	r0, #1
 8005600:	e7f6      	b.n	80055f0 <memchr+0x4>

08005602 <memcpy>:
 8005602:	2300      	movs	r3, #0
 8005604:	b510      	push	{r4, lr}
 8005606:	429a      	cmp	r2, r3
 8005608:	d100      	bne.n	800560c <memcpy+0xa>
 800560a:	bd10      	pop	{r4, pc}
 800560c:	5ccc      	ldrb	r4, [r1, r3]
 800560e:	54c4      	strb	r4, [r0, r3]
 8005610:	3301      	adds	r3, #1
 8005612:	e7f8      	b.n	8005606 <memcpy+0x4>

08005614 <memmove>:
 8005614:	b510      	push	{r4, lr}
 8005616:	4288      	cmp	r0, r1
 8005618:	d902      	bls.n	8005620 <memmove+0xc>
 800561a:	188b      	adds	r3, r1, r2
 800561c:	4298      	cmp	r0, r3
 800561e:	d303      	bcc.n	8005628 <memmove+0x14>
 8005620:	2300      	movs	r3, #0
 8005622:	e007      	b.n	8005634 <memmove+0x20>
 8005624:	5c8b      	ldrb	r3, [r1, r2]
 8005626:	5483      	strb	r3, [r0, r2]
 8005628:	3a01      	subs	r2, #1
 800562a:	d2fb      	bcs.n	8005624 <memmove+0x10>
 800562c:	bd10      	pop	{r4, pc}
 800562e:	5ccc      	ldrb	r4, [r1, r3]
 8005630:	54c4      	strb	r4, [r0, r3]
 8005632:	3301      	adds	r3, #1
 8005634:	429a      	cmp	r2, r3
 8005636:	d1fa      	bne.n	800562e <memmove+0x1a>
 8005638:	e7f8      	b.n	800562c <memmove+0x18>
	...

0800563c <_free_r>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	0005      	movs	r5, r0
 8005640:	2900      	cmp	r1, #0
 8005642:	d010      	beq.n	8005666 <_free_r+0x2a>
 8005644:	1f0c      	subs	r4, r1, #4
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	da00      	bge.n	800564e <_free_r+0x12>
 800564c:	18e4      	adds	r4, r4, r3
 800564e:	0028      	movs	r0, r5
 8005650:	f000 f918 	bl	8005884 <__malloc_lock>
 8005654:	4a1d      	ldr	r2, [pc, #116]	; (80056cc <_free_r+0x90>)
 8005656:	6813      	ldr	r3, [r2, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d105      	bne.n	8005668 <_free_r+0x2c>
 800565c:	6063      	str	r3, [r4, #4]
 800565e:	6014      	str	r4, [r2, #0]
 8005660:	0028      	movs	r0, r5
 8005662:	f000 f917 	bl	8005894 <__malloc_unlock>
 8005666:	bd70      	pop	{r4, r5, r6, pc}
 8005668:	42a3      	cmp	r3, r4
 800566a:	d908      	bls.n	800567e <_free_r+0x42>
 800566c:	6821      	ldr	r1, [r4, #0]
 800566e:	1860      	adds	r0, r4, r1
 8005670:	4283      	cmp	r3, r0
 8005672:	d1f3      	bne.n	800565c <_free_r+0x20>
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	1841      	adds	r1, r0, r1
 800567a:	6021      	str	r1, [r4, #0]
 800567c:	e7ee      	b.n	800565c <_free_r+0x20>
 800567e:	001a      	movs	r2, r3
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <_free_r+0x4e>
 8005686:	42a3      	cmp	r3, r4
 8005688:	d9f9      	bls.n	800567e <_free_r+0x42>
 800568a:	6811      	ldr	r1, [r2, #0]
 800568c:	1850      	adds	r0, r2, r1
 800568e:	42a0      	cmp	r0, r4
 8005690:	d10b      	bne.n	80056aa <_free_r+0x6e>
 8005692:	6820      	ldr	r0, [r4, #0]
 8005694:	1809      	adds	r1, r1, r0
 8005696:	1850      	adds	r0, r2, r1
 8005698:	6011      	str	r1, [r2, #0]
 800569a:	4283      	cmp	r3, r0
 800569c:	d1e0      	bne.n	8005660 <_free_r+0x24>
 800569e:	6818      	ldr	r0, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	1841      	adds	r1, r0, r1
 80056a4:	6011      	str	r1, [r2, #0]
 80056a6:	6053      	str	r3, [r2, #4]
 80056a8:	e7da      	b.n	8005660 <_free_r+0x24>
 80056aa:	42a0      	cmp	r0, r4
 80056ac:	d902      	bls.n	80056b4 <_free_r+0x78>
 80056ae:	230c      	movs	r3, #12
 80056b0:	602b      	str	r3, [r5, #0]
 80056b2:	e7d5      	b.n	8005660 <_free_r+0x24>
 80056b4:	6821      	ldr	r1, [r4, #0]
 80056b6:	1860      	adds	r0, r4, r1
 80056b8:	4283      	cmp	r3, r0
 80056ba:	d103      	bne.n	80056c4 <_free_r+0x88>
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	1841      	adds	r1, r0, r1
 80056c2:	6021      	str	r1, [r4, #0]
 80056c4:	6063      	str	r3, [r4, #4]
 80056c6:	6054      	str	r4, [r2, #4]
 80056c8:	e7ca      	b.n	8005660 <_free_r+0x24>
 80056ca:	46c0      	nop			; (mov r8, r8)
 80056cc:	20000180 	.word	0x20000180

080056d0 <sbrk_aligned>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	4e0f      	ldr	r6, [pc, #60]	; (8005710 <sbrk_aligned+0x40>)
 80056d4:	000d      	movs	r5, r1
 80056d6:	6831      	ldr	r1, [r6, #0]
 80056d8:	0004      	movs	r4, r0
 80056da:	2900      	cmp	r1, #0
 80056dc:	d102      	bne.n	80056e4 <sbrk_aligned+0x14>
 80056de:	f000 f8bf 	bl	8005860 <_sbrk_r>
 80056e2:	6030      	str	r0, [r6, #0]
 80056e4:	0029      	movs	r1, r5
 80056e6:	0020      	movs	r0, r4
 80056e8:	f000 f8ba 	bl	8005860 <_sbrk_r>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d00a      	beq.n	8005706 <sbrk_aligned+0x36>
 80056f0:	2303      	movs	r3, #3
 80056f2:	1cc5      	adds	r5, r0, #3
 80056f4:	439d      	bics	r5, r3
 80056f6:	42a8      	cmp	r0, r5
 80056f8:	d007      	beq.n	800570a <sbrk_aligned+0x3a>
 80056fa:	1a29      	subs	r1, r5, r0
 80056fc:	0020      	movs	r0, r4
 80056fe:	f000 f8af 	bl	8005860 <_sbrk_r>
 8005702:	1c43      	adds	r3, r0, #1
 8005704:	d101      	bne.n	800570a <sbrk_aligned+0x3a>
 8005706:	2501      	movs	r5, #1
 8005708:	426d      	negs	r5, r5
 800570a:	0028      	movs	r0, r5
 800570c:	bd70      	pop	{r4, r5, r6, pc}
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	20000184 	.word	0x20000184

08005714 <_malloc_r>:
 8005714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005716:	2203      	movs	r2, #3
 8005718:	1ccb      	adds	r3, r1, #3
 800571a:	4393      	bics	r3, r2
 800571c:	3308      	adds	r3, #8
 800571e:	0006      	movs	r6, r0
 8005720:	001f      	movs	r7, r3
 8005722:	2b0c      	cmp	r3, #12
 8005724:	d232      	bcs.n	800578c <_malloc_r+0x78>
 8005726:	270c      	movs	r7, #12
 8005728:	42b9      	cmp	r1, r7
 800572a:	d831      	bhi.n	8005790 <_malloc_r+0x7c>
 800572c:	0030      	movs	r0, r6
 800572e:	f000 f8a9 	bl	8005884 <__malloc_lock>
 8005732:	4d32      	ldr	r5, [pc, #200]	; (80057fc <_malloc_r+0xe8>)
 8005734:	682b      	ldr	r3, [r5, #0]
 8005736:	001c      	movs	r4, r3
 8005738:	2c00      	cmp	r4, #0
 800573a:	d12e      	bne.n	800579a <_malloc_r+0x86>
 800573c:	0039      	movs	r1, r7
 800573e:	0030      	movs	r0, r6
 8005740:	f7ff ffc6 	bl	80056d0 <sbrk_aligned>
 8005744:	0004      	movs	r4, r0
 8005746:	1c43      	adds	r3, r0, #1
 8005748:	d11e      	bne.n	8005788 <_malloc_r+0x74>
 800574a:	682c      	ldr	r4, [r5, #0]
 800574c:	0025      	movs	r5, r4
 800574e:	2d00      	cmp	r5, #0
 8005750:	d14a      	bne.n	80057e8 <_malloc_r+0xd4>
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	0029      	movs	r1, r5
 8005756:	18e3      	adds	r3, r4, r3
 8005758:	0030      	movs	r0, r6
 800575a:	9301      	str	r3, [sp, #4]
 800575c:	f000 f880 	bl	8005860 <_sbrk_r>
 8005760:	9b01      	ldr	r3, [sp, #4]
 8005762:	4283      	cmp	r3, r0
 8005764:	d143      	bne.n	80057ee <_malloc_r+0xda>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	3703      	adds	r7, #3
 800576a:	1aff      	subs	r7, r7, r3
 800576c:	2303      	movs	r3, #3
 800576e:	439f      	bics	r7, r3
 8005770:	3708      	adds	r7, #8
 8005772:	2f0c      	cmp	r7, #12
 8005774:	d200      	bcs.n	8005778 <_malloc_r+0x64>
 8005776:	270c      	movs	r7, #12
 8005778:	0039      	movs	r1, r7
 800577a:	0030      	movs	r0, r6
 800577c:	f7ff ffa8 	bl	80056d0 <sbrk_aligned>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	d034      	beq.n	80057ee <_malloc_r+0xda>
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	19df      	adds	r7, r3, r7
 8005788:	6027      	str	r7, [r4, #0]
 800578a:	e013      	b.n	80057b4 <_malloc_r+0xa0>
 800578c:	2b00      	cmp	r3, #0
 800578e:	dacb      	bge.n	8005728 <_malloc_r+0x14>
 8005790:	230c      	movs	r3, #12
 8005792:	2500      	movs	r5, #0
 8005794:	6033      	str	r3, [r6, #0]
 8005796:	0028      	movs	r0, r5
 8005798:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800579a:	6822      	ldr	r2, [r4, #0]
 800579c:	1bd1      	subs	r1, r2, r7
 800579e:	d420      	bmi.n	80057e2 <_malloc_r+0xce>
 80057a0:	290b      	cmp	r1, #11
 80057a2:	d917      	bls.n	80057d4 <_malloc_r+0xc0>
 80057a4:	19e2      	adds	r2, r4, r7
 80057a6:	6027      	str	r7, [r4, #0]
 80057a8:	42a3      	cmp	r3, r4
 80057aa:	d111      	bne.n	80057d0 <_malloc_r+0xbc>
 80057ac:	602a      	str	r2, [r5, #0]
 80057ae:	6863      	ldr	r3, [r4, #4]
 80057b0:	6011      	str	r1, [r2, #0]
 80057b2:	6053      	str	r3, [r2, #4]
 80057b4:	0030      	movs	r0, r6
 80057b6:	0025      	movs	r5, r4
 80057b8:	f000 f86c 	bl	8005894 <__malloc_unlock>
 80057bc:	2207      	movs	r2, #7
 80057be:	350b      	adds	r5, #11
 80057c0:	1d23      	adds	r3, r4, #4
 80057c2:	4395      	bics	r5, r2
 80057c4:	1aea      	subs	r2, r5, r3
 80057c6:	429d      	cmp	r5, r3
 80057c8:	d0e5      	beq.n	8005796 <_malloc_r+0x82>
 80057ca:	1b5b      	subs	r3, r3, r5
 80057cc:	50a3      	str	r3, [r4, r2]
 80057ce:	e7e2      	b.n	8005796 <_malloc_r+0x82>
 80057d0:	605a      	str	r2, [r3, #4]
 80057d2:	e7ec      	b.n	80057ae <_malloc_r+0x9a>
 80057d4:	6862      	ldr	r2, [r4, #4]
 80057d6:	42a3      	cmp	r3, r4
 80057d8:	d101      	bne.n	80057de <_malloc_r+0xca>
 80057da:	602a      	str	r2, [r5, #0]
 80057dc:	e7ea      	b.n	80057b4 <_malloc_r+0xa0>
 80057de:	605a      	str	r2, [r3, #4]
 80057e0:	e7e8      	b.n	80057b4 <_malloc_r+0xa0>
 80057e2:	0023      	movs	r3, r4
 80057e4:	6864      	ldr	r4, [r4, #4]
 80057e6:	e7a7      	b.n	8005738 <_malloc_r+0x24>
 80057e8:	002c      	movs	r4, r5
 80057ea:	686d      	ldr	r5, [r5, #4]
 80057ec:	e7af      	b.n	800574e <_malloc_r+0x3a>
 80057ee:	230c      	movs	r3, #12
 80057f0:	0030      	movs	r0, r6
 80057f2:	6033      	str	r3, [r6, #0]
 80057f4:	f000 f84e 	bl	8005894 <__malloc_unlock>
 80057f8:	e7cd      	b.n	8005796 <_malloc_r+0x82>
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	20000180 	.word	0x20000180

08005800 <_realloc_r>:
 8005800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005802:	0007      	movs	r7, r0
 8005804:	000e      	movs	r6, r1
 8005806:	0014      	movs	r4, r2
 8005808:	2900      	cmp	r1, #0
 800580a:	d105      	bne.n	8005818 <_realloc_r+0x18>
 800580c:	0011      	movs	r1, r2
 800580e:	f7ff ff81 	bl	8005714 <_malloc_r>
 8005812:	0005      	movs	r5, r0
 8005814:	0028      	movs	r0, r5
 8005816:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005818:	2a00      	cmp	r2, #0
 800581a:	d103      	bne.n	8005824 <_realloc_r+0x24>
 800581c:	f7ff ff0e 	bl	800563c <_free_r>
 8005820:	0025      	movs	r5, r4
 8005822:	e7f7      	b.n	8005814 <_realloc_r+0x14>
 8005824:	f000 f83e 	bl	80058a4 <_malloc_usable_size_r>
 8005828:	9001      	str	r0, [sp, #4]
 800582a:	4284      	cmp	r4, r0
 800582c:	d803      	bhi.n	8005836 <_realloc_r+0x36>
 800582e:	0035      	movs	r5, r6
 8005830:	0843      	lsrs	r3, r0, #1
 8005832:	42a3      	cmp	r3, r4
 8005834:	d3ee      	bcc.n	8005814 <_realloc_r+0x14>
 8005836:	0021      	movs	r1, r4
 8005838:	0038      	movs	r0, r7
 800583a:	f7ff ff6b 	bl	8005714 <_malloc_r>
 800583e:	1e05      	subs	r5, r0, #0
 8005840:	d0e8      	beq.n	8005814 <_realloc_r+0x14>
 8005842:	9b01      	ldr	r3, [sp, #4]
 8005844:	0022      	movs	r2, r4
 8005846:	429c      	cmp	r4, r3
 8005848:	d900      	bls.n	800584c <_realloc_r+0x4c>
 800584a:	001a      	movs	r2, r3
 800584c:	0031      	movs	r1, r6
 800584e:	0028      	movs	r0, r5
 8005850:	f7ff fed7 	bl	8005602 <memcpy>
 8005854:	0031      	movs	r1, r6
 8005856:	0038      	movs	r0, r7
 8005858:	f7ff fef0 	bl	800563c <_free_r>
 800585c:	e7da      	b.n	8005814 <_realloc_r+0x14>
	...

08005860 <_sbrk_r>:
 8005860:	2300      	movs	r3, #0
 8005862:	b570      	push	{r4, r5, r6, lr}
 8005864:	4d06      	ldr	r5, [pc, #24]	; (8005880 <_sbrk_r+0x20>)
 8005866:	0004      	movs	r4, r0
 8005868:	0008      	movs	r0, r1
 800586a:	602b      	str	r3, [r5, #0]
 800586c:	f7fb f988 	bl	8000b80 <_sbrk>
 8005870:	1c43      	adds	r3, r0, #1
 8005872:	d103      	bne.n	800587c <_sbrk_r+0x1c>
 8005874:	682b      	ldr	r3, [r5, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d000      	beq.n	800587c <_sbrk_r+0x1c>
 800587a:	6023      	str	r3, [r4, #0]
 800587c:	bd70      	pop	{r4, r5, r6, pc}
 800587e:	46c0      	nop			; (mov r8, r8)
 8005880:	20000188 	.word	0x20000188

08005884 <__malloc_lock>:
 8005884:	b510      	push	{r4, lr}
 8005886:	4802      	ldr	r0, [pc, #8]	; (8005890 <__malloc_lock+0xc>)
 8005888:	f000 f814 	bl	80058b4 <__retarget_lock_acquire_recursive>
 800588c:	bd10      	pop	{r4, pc}
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	2000018c 	.word	0x2000018c

08005894 <__malloc_unlock>:
 8005894:	b510      	push	{r4, lr}
 8005896:	4802      	ldr	r0, [pc, #8]	; (80058a0 <__malloc_unlock+0xc>)
 8005898:	f000 f80d 	bl	80058b6 <__retarget_lock_release_recursive>
 800589c:	bd10      	pop	{r4, pc}
 800589e:	46c0      	nop			; (mov r8, r8)
 80058a0:	2000018c 	.word	0x2000018c

080058a4 <_malloc_usable_size_r>:
 80058a4:	1f0b      	subs	r3, r1, #4
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	1f18      	subs	r0, r3, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	da01      	bge.n	80058b2 <_malloc_usable_size_r+0xe>
 80058ae:	580b      	ldr	r3, [r1, r0]
 80058b0:	18c0      	adds	r0, r0, r3
 80058b2:	4770      	bx	lr

080058b4 <__retarget_lock_acquire_recursive>:
 80058b4:	4770      	bx	lr

080058b6 <__retarget_lock_release_recursive>:
 80058b6:	4770      	bx	lr

080058b8 <_init>:
 80058b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ba:	46c0      	nop			; (mov r8, r8)
 80058bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058be:	bc08      	pop	{r3}
 80058c0:	469e      	mov	lr, r3
 80058c2:	4770      	bx	lr

080058c4 <_fini>:
 80058c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c6:	46c0      	nop			; (mov r8, r8)
 80058c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ca:	bc08      	pop	{r3}
 80058cc:	469e      	mov	lr, r3
 80058ce:	4770      	bx	lr
