
Nucleo_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005164  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08005220  08005220  00015220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052cc  080052cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080052cc  080052cc  000152cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052d4  080052d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052d8  080052d8  000152d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080052dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000908  2000000c  080052e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  080052e8  00020914  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c1e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025cd  00000000  00000000  00031c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00034220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00035160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a15  00000000  00000000  00035fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ee0  00000000  00000000  0004e9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a02d7  00000000  00000000  000608ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100b84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f0  00000000  00000000  00100bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005208 	.word	0x08005208

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08005208 	.word	0x08005208

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <mdbus_send_packet_it>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void mdbus_send_packet_it(uint8_t *data, uint16_t size)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	000a      	movs	r2, r1
 8000626:	1cbb      	adds	r3, r7, #2
 8000628:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart2, data, size);
 800062a:	1cbb      	adds	r3, r7, #2
 800062c:	881a      	ldrh	r2, [r3, #0]
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <mdbus_send_packet_it+0x24>)
 8000632:	0018      	movs	r0, r3
 8000634:	f002 fbdc 	bl	8002df0 <HAL_UART_Transmit_IT>
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b002      	add	sp, #8
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000074 	.word	0x20000074

08000644 <mdbus_read_packet_it>:

void mdbus_read_packet_it(uint8_t *data, uint16_t size)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	000a      	movs	r2, r1
 800064e:	1cbb      	adds	r3, r7, #2
 8000650:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, data, size);
 8000652:	1cbb      	adds	r3, r7, #2
 8000654:	881a      	ldrh	r2, [r3, #0]
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <mdbus_read_packet_it+0x24>)
 800065a:	0018      	movs	r0, r3
 800065c:	f002 fc84 	bl	8002f68 <HAL_UART_Receive_IT>
}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b002      	add	sp, #8
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000074 	.word	0x20000074

0800066c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

//send callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	mdbus_on_packet_send();
 8000674:	f000 fb6e 	bl	8000d54 <mdbus_on_packet_send>
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	b002      	add	sp, #8
 800067e:	bd80      	pop	{r7, pc}

08000680 <HAL_UART_RxCpltCallback>:

//receive callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	mdbus_on_packet_receive(receivedData, PACKETSIZE);
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <HAL_UART_RxCpltCallback+0x1c>)
 800068a:	2101      	movs	r1, #1
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fb7d 	bl	8000d8c <mdbus_on_packet_receive>
}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	b002      	add	sp, #8
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	20000104 	.word	0x20000104

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f000 fc40 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f818 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f000 f91a 	bl	80008e4 <MX_GPIO_Init>
  //stat listening sanding callback
  MX_USART2_UART_Init();
 80006b0:	f000 f8ca 	bl	8000848 <MX_USART2_UART_Init>
  //start timer
  MX_TIM2_Init();
 80006b4:	f000 f872 	bl	800079c <MX_TIM2_Init>
  //start listening receiving callback
  mdbus_read_packet_it(&receivedData, PACKETSIZE);
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <main+0x34>)
 80006ba:	2101      	movs	r1, #1
 80006bc:	0018      	movs	r0, r3
 80006be:	f7ff ffc1 	bl	8000644 <mdbus_read_packet_it>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <main+0x38>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 ff17 	bl	80024f8 <HAL_TIM_Base_Start_IT>

  mdbus_slave_configure();
 80006ca:	f000 fba7 	bl	8000e1c <mdbus_slave_configure>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mdbus_slave_run();
 80006ce:	f000 fb77 	bl	8000dc0 <mdbus_slave_run>
 80006d2:	e7fc      	b.n	80006ce <main+0x2e>
 80006d4:	20000104 	.word	0x20000104
 80006d8:	20000028 	.word	0x20000028

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b093      	sub	sp, #76	; 0x4c
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	2410      	movs	r4, #16
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	0018      	movs	r0, r3
 80006e8:	2338      	movs	r3, #56	; 0x38
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f004 fd83 	bl	80051f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f2:	003b      	movs	r3, r7
 80006f4:	0018      	movs	r0, r3
 80006f6:	2310      	movs	r3, #16
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f004 fd7c 	bl	80051f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	0018      	movs	r0, r3
 8000706:	f000 ffd7 	bl	80016b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	2202      	movs	r2, #2
 800070e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	0052      	lsls	r2, r2, #1
 8000716:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000718:	0021      	movs	r1, r4
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2240      	movs	r2, #64	; 0x40
 8000724:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2202      	movs	r2, #2
 800072a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2202      	movs	r2, #2
 8000730:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2200      	movs	r2, #0
 8000736:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2208      	movs	r2, #8
 800073c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2280      	movs	r2, #128	; 0x80
 8000742:	0292      	lsls	r2, r2, #10
 8000744:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0492      	lsls	r2, r2, #18
 800074c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	0592      	lsls	r2, r2, #22
 8000754:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	187b      	adds	r3, r7, r1
 8000758:	0018      	movs	r0, r3
 800075a:	f000 fff9 	bl	8001750 <HAL_RCC_OscConfig>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000762:	f000 f90f 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000766:	003b      	movs	r3, r7
 8000768:	2207      	movs	r2, #7
 800076a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	003b      	movs	r3, r7
 800076e:	2202      	movs	r2, #2
 8000770:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000772:	003b      	movs	r3, r7
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	0112      	lsls	r2, r2, #4
 8000778:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077a:	003b      	movs	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000780:	003b      	movs	r3, r7
 8000782:	2101      	movs	r1, #1
 8000784:	0018      	movs	r0, r3
 8000786:	f001 fafd 	bl	8001d84 <HAL_RCC_ClockConfig>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800078e:	f000 f8f9 	bl	8000984 <Error_Handler>
  }
}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b013      	add	sp, #76	; 0x4c
 8000798:	bd90      	pop	{r4, r7, pc}
	...

0800079c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a2:	2310      	movs	r3, #16
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	0018      	movs	r0, r3
 80007a8:	2310      	movs	r3, #16
 80007aa:	001a      	movs	r2, r3
 80007ac:	2100      	movs	r1, #0
 80007ae:	f004 fd23 	bl	80051f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	0018      	movs	r0, r3
 80007b6:	230c      	movs	r3, #12
 80007b8:	001a      	movs	r2, r3
 80007ba:	2100      	movs	r1, #0
 80007bc:	f004 fd1c 	bl	80051f8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <MX_TIM2_Init+0xa4>)
 80007c2:	2280      	movs	r2, #128	; 0x80
 80007c4:	05d2      	lsls	r2, r2, #23
 80007c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_TIM2_Init+0xa4>)
 80007ca:	22fa      	movs	r2, #250	; 0xfa
 80007cc:	0092      	lsls	r2, r2, #2
 80007ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_TIM2_Init+0xa4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_TIM2_Init+0xa4>)
 80007d8:	4a1a      	ldr	r2, [pc, #104]	; (8000844 <MX_TIM2_Init+0xa8>)
 80007da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_TIM2_Init+0xa4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_TIM2_Init+0xa4>)
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_TIM2_Init+0xa4>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f001 fe2c 	bl	8002448 <HAL_TIM_Base_Init>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80007f4:	f000 f8c6 	bl	8000984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f8:	2110      	movs	r1, #16
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2280      	movs	r2, #128	; 0x80
 80007fe:	0152      	lsls	r2, r2, #5
 8000800:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000802:	187a      	adds	r2, r7, r1
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_TIM2_Init+0xa4>)
 8000806:	0011      	movs	r1, r2
 8000808:	0018      	movs	r0, r3
 800080a:	f002 f803 	bl	8002814 <HAL_TIM_ConfigClockSource>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000812:	f000 f8b7 	bl	8000984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000822:	1d3a      	adds	r2, r7, #4
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_TIM2_Init+0xa4>)
 8000826:	0011      	movs	r1, r2
 8000828:	0018      	movs	r0, r3
 800082a:	f002 fa05 	bl	8002c38 <HAL_TIMEx_MasterConfigSynchronization>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000832:	f000 f8a7 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b008      	add	sp, #32
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	20000028 	.word	0x20000028
 8000844:	00008ca0 	.word	0x00008ca0

08000848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800084c:	4b23      	ldr	r3, [pc, #140]	; (80008dc <MX_USART2_UART_Init+0x94>)
 800084e:	4a24      	ldr	r2, [pc, #144]	; (80008e0 <MX_USART2_UART_Init+0x98>)
 8000850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000852:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_USART2_UART_Init+0x94>)
 8000854:	22e1      	movs	r2, #225	; 0xe1
 8000856:	0252      	lsls	r2, r2, #9
 8000858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_USART2_UART_Init+0x94>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_USART2_UART_Init+0x94>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_USART2_UART_Init+0x94>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_USART2_UART_Init+0x94>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_USART2_UART_Init+0x94>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_USART2_UART_Init+0x94>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_USART2_UART_Init+0x94>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_USART2_UART_Init+0x94>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_USART2_UART_Init+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_USART2_UART_Init+0x94>)
 8000892:	0018      	movs	r0, r3
 8000894:	f002 fa56 	bl	8002d44 <HAL_UART_Init>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800089c:	f000 f872 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART2_UART_Init+0x94>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	0018      	movs	r0, r3
 80008a6:	f004 fba3 	bl	8004ff0 <HAL_UARTEx_SetTxFifoThreshold>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ae:	f000 f869 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <MX_USART2_UART_Init+0x94>)
 80008b4:	2100      	movs	r1, #0
 80008b6:	0018      	movs	r0, r3
 80008b8:	f004 fbda 	bl	8005070 <HAL_UARTEx_SetRxFifoThreshold>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008c0:	f000 f860 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <MX_USART2_UART_Init+0x94>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f004 fb58 	bl	8004f7c <HAL_UARTEx_DisableFifoMode>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008d0:	f000 f858 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	20000074 	.word	0x20000074
 80008e0:	40004400 	.word	0x40004400

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b089      	sub	sp, #36	; 0x24
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	240c      	movs	r4, #12
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	0018      	movs	r0, r3
 80008f0:	2314      	movs	r3, #20
 80008f2:	001a      	movs	r2, r3
 80008f4:	2100      	movs	r1, #0
 80008f6:	f004 fc7f 	bl	80051f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <MX_GPIO_Init+0x9c>)
 80008fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <MX_GPIO_Init+0x9c>)
 8000900:	2104      	movs	r1, #4
 8000902:	430a      	orrs	r2, r1
 8000904:	635a      	str	r2, [r3, #52]	; 0x34
 8000906:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <MX_GPIO_Init+0x9c>)
 8000908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800090a:	2204      	movs	r2, #4
 800090c:	4013      	ands	r3, r2
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_GPIO_Init+0x9c>)
 8000914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_GPIO_Init+0x9c>)
 8000918:	2120      	movs	r1, #32
 800091a:	430a      	orrs	r2, r1
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_GPIO_Init+0x9c>)
 8000920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000922:	2220      	movs	r2, #32
 8000924:	4013      	ands	r3, r2
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_GPIO_Init+0x9c>)
 800092c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_GPIO_Init+0x9c>)
 8000930:	2101      	movs	r1, #1
 8000932:	430a      	orrs	r2, r1
 8000934:	635a      	str	r2, [r3, #52]	; 0x34
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_GPIO_Init+0x9c>)
 8000938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800093a:	2201      	movs	r2, #1
 800093c:	4013      	ands	r3, r2
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000942:	23a0      	movs	r3, #160	; 0xa0
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	2200      	movs	r2, #0
 8000948:	2120      	movs	r1, #32
 800094a:	0018      	movs	r0, r3
 800094c:	f000 fe96 	bl	800167c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000950:	0021      	movs	r1, r4
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2220      	movs	r2, #32
 8000956:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2201      	movs	r2, #1
 800095c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2202      	movs	r2, #2
 8000968:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800096a:	187a      	adds	r2, r7, r1
 800096c:	23a0      	movs	r3, #160	; 0xa0
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fd1e 	bl	80013b4 <HAL_GPIO_Init>

}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b009      	add	sp, #36	; 0x24
 800097e:	bd90      	pop	{r4, r7, pc}
 8000980:	40021000 	.word	0x40021000

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_MspInit+0x4c>)
 8000998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_MspInit+0x4c>)
 800099c:	2101      	movs	r1, #1
 800099e:	430a      	orrs	r2, r1
 80009a0:	641a      	str	r2, [r3, #64]	; 0x40
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	2201      	movs	r2, #1
 80009a8:	4013      	ands	r3, r2
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_MspInit+0x4c>)
 80009b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_MspInit+0x4c>)
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	0549      	lsls	r1, r1, #21
 80009b8:	430a      	orrs	r2, r1
 80009ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <HAL_MspInit+0x4c>)
 80009be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	055b      	lsls	r3, r3, #21
 80009c4:	4013      	ands	r3, r2
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80009ca:	23c0      	movs	r3, #192	; 0xc0
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 fb30 	bl	8001034 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b002      	add	sp, #8
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	05db      	lsls	r3, r3, #23
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d113      	bne.n	8000a1c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_TIM_Base_MspInit+0x44>)
 80009f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_TIM_Base_MspInit+0x44>)
 80009fa:	2101      	movs	r1, #1
 80009fc:	430a      	orrs	r2, r1
 80009fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_TIM_Base_MspInit+0x44>)
 8000a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a04:	2201      	movs	r2, #1
 8000a06:	4013      	ands	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	200f      	movs	r0, #15
 8000a12:	f000 fbd1 	bl	80011b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a16:	200f      	movs	r0, #15
 8000a18:	f000 fbe3 	bl	80011e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b004      	add	sp, #16
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b097      	sub	sp, #92	; 0x5c
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	2344      	movs	r3, #68	; 0x44
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	0018      	movs	r0, r3
 8000a36:	2314      	movs	r3, #20
 8000a38:	001a      	movs	r2, r3
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	f004 fbdc 	bl	80051f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a40:	2410      	movs	r4, #16
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	0018      	movs	r0, r3
 8000a46:	2334      	movs	r3, #52	; 0x34
 8000a48:	001a      	movs	r2, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	f004 fbd4 	bl	80051f8 <memset>
  if(huart->Instance==USART2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a26      	ldr	r2, [pc, #152]	; (8000af0 <HAL_UART_MspInit+0xc8>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d146      	bne.n	8000ae8 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f001 fb35 	bl	80020d8 <HAL_RCCEx_PeriphCLKConfig>
 8000a6e:	1e03      	subs	r3, r0, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a72:	f7ff ff87 	bl	8000984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <HAL_UART_MspInit+0xcc>)
 8000a78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <HAL_UART_MspInit+0xcc>)
 8000a7c:	2180      	movs	r1, #128	; 0x80
 8000a7e:	0289      	lsls	r1, r1, #10
 8000a80:	430a      	orrs	r2, r1
 8000a82:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <HAL_UART_MspInit+0xcc>)
 8000a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	029b      	lsls	r3, r3, #10
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_UART_MspInit+0xcc>)
 8000a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <HAL_UART_MspInit+0xcc>)
 8000a98:	2101      	movs	r1, #1
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_UART_MspInit+0xcc>)
 8000aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000aaa:	2144      	movs	r1, #68	; 0x44
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	220c      	movs	r2, #12
 8000ab0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2201      	movs	r2, #1
 8000abc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	187a      	adds	r2, r7, r1
 8000acc:	23a0      	movs	r3, #160	; 0xa0
 8000ace:	05db      	lsls	r3, r3, #23
 8000ad0:	0011      	movs	r1, r2
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 fc6e 	bl	80013b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	201c      	movs	r0, #28
 8000ade:	f000 fb6b 	bl	80011b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ae2:	201c      	movs	r0, #28
 8000ae4:	f000 fb7d 	bl	80011e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b017      	add	sp, #92	; 0x5c
 8000aee:	bd90      	pop	{r4, r7, pc}
 8000af0:	40004400 	.word	0x40004400
 8000af4:	40021000 	.word	0x40021000

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1c:	f000 fa6e 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <TIM2_IRQHandler+0x14>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f001 fd3e 	bl	80025b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	20000028 	.word	0x20000028

08000b40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <USART2_IRQHandler+0x14>)
 8000b46:	0018      	movs	r0, r3
 8000b48:	f002 fa78 	bl	800303c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	20000074 	.word	0x20000074

08000b58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <ring_buffer_is_empty+0x28>)
 8000b70:	5c9a      	ldrb	r2, [r3, r2]
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	5ccb      	ldrb	r3, [r1, r3]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	425a      	negs	r2, r3
 8000b7e:	4153      	adcs	r3, r2
 8000b80:	b2db      	uxtb	r3, r3
}
 8000b82:	0018      	movs	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b002      	add	sp, #8
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	00000401 	.word	0x00000401

08000b90 <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <ring_buffer_is_full+0x34>)
 8000b9c:	5c9b      	ldrb	r3, [r3, r2]
 8000b9e:	0019      	movs	r1, r3
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	5cd3      	ldrb	r3, [r2, r3]
 8000ba8:	1acb      	subs	r3, r1, r3
 8000baa:	059b      	lsls	r3, r3, #22
 8000bac:	0d9b      	lsrs	r3, r3, #22
 8000bae:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <ring_buffer_is_full+0x38>)
 8000bb0:	4694      	mov	ip, r2
 8000bb2:	4463      	add	r3, ip
 8000bb4:	425a      	negs	r2, r3
 8000bb6:	4153      	adcs	r3, r2
 8000bb8:	b2db      	uxtb	r3, r3
}
 8000bba:	0018      	movs	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b002      	add	sp, #8
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	00000401 	.word	0x00000401
 8000bc8:	fffffc01 	.word	0xfffffc01

08000bcc <ring_buffer_init>:
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	2100      	movs	r1, #0
 8000bdc:	54d1      	strb	r1, [r2, r3]
  buffer->head_index = 0;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a03      	ldr	r2, [pc, #12]	; (8000bf0 <ring_buffer_init+0x24>)
 8000be2:	2100      	movs	r1, #0
 8000be4:	5499      	strb	r1, [r3, r2]
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	00000401 	.word	0x00000401

08000bf4 <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, char data)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	000a      	movs	r2, r1
 8000bfe:	1cfb      	adds	r3, r7, #3
 8000c00:	701a      	strb	r2, [r3, #0]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff ffc3 	bl	8000b90 <ring_buffer_is_full>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d009      	beq.n	8000c22 <ring_buffer_queue+0x2e>
  {
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	5cd3      	ldrb	r3, [r2, r3]
 8000c16:	3301      	adds	r3, #1
 8000c18:	b2d9      	uxtb	r1, r3
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	54d1      	strb	r1, [r2, r3]
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a09      	ldr	r2, [pc, #36]	; (8000c4c <ring_buffer_queue+0x58>)
 8000c26:	5c9b      	ldrb	r3, [r3, r2]
 8000c28:	0019      	movs	r1, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	1cfa      	adds	r2, r7, #3
 8000c2e:	7812      	ldrb	r2, [r2, #0]
 8000c30:	545a      	strb	r2, [r3, r1]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <ring_buffer_queue+0x58>)
 8000c36:	5c9b      	ldrb	r3, [r3, r2]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	b2d9      	uxtb	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a03      	ldr	r2, [pc, #12]	; (8000c4c <ring_buffer_queue+0x58>)
 8000c40:	5499      	strb	r1, [r3, r2]
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b002      	add	sp, #8
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	00000401 	.word	0x00000401

08000c50 <ring_buffer_queue_arr>:

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b087      	sub	sp, #28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	701a      	strb	r2, [r3, #0]
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++)
 8000c5e:	2317      	movs	r3, #23
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	e00f      	b.n	8000c88 <ring_buffer_queue_arr+0x38>
  {
    ring_buffer_queue(buffer, data[i]);
 8000c68:	2417      	movs	r4, #23
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	18d3      	adds	r3, r2, r3
 8000c72:	781a      	ldrb	r2, [r3, #0]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff ffbb 	bl	8000bf4 <ring_buffer_queue>
  for(i = 0; i < size; i++)
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	3201      	adds	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
 8000c88:	2317      	movs	r3, #23
 8000c8a:	18fa      	adds	r2, r7, r3
 8000c8c:	1dfb      	adds	r3, r7, #7
 8000c8e:	7812      	ldrb	r2, [r2, #0]
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d3e8      	bcc.n	8000c68 <ring_buffer_queue_arr+0x18>
  }
}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b007      	add	sp, #28
 8000c9e:	bd90      	pop	{r4, r7, pc}

08000ca0 <ring_buffer_dequeue>:

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff ff59 	bl	8000b64 <ring_buffer_is_empty>
 8000cb2:	1e03      	subs	r3, r0, #0
 8000cb4:	d001      	beq.n	8000cba <ring_buffer_dequeue+0x1a>
  {
    /* No items */
    return 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e013      	b.n	8000ce2 <ring_buffer_dequeue+0x42>
  }

  *data = buffer->buffer[buffer->tail_index];
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	5cd3      	ldrb	r3, [r2, r3]
 8000cc2:	001a      	movs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	5c9a      	ldrb	r2, [r3, r2]
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	5cd3      	ldrb	r3, [r2, r3]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	b2d9      	uxtb	r1, r3
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	54d1      	strb	r1, [r2, r3]
  return 1;
 8000ce0:	2301      	movs	r3, #1
}
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b002      	add	sp, #8
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <ring_buffer_dequeue_arr>:

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	1dfb      	adds	r3, r7, #7
 8000cf6:	701a      	strb	r2, [r3, #0]
  if(ring_buffer_is_empty(buffer))
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f7ff ff32 	bl	8000b64 <ring_buffer_is_empty>
 8000d00:	1e03      	subs	r3, r0, #0
 8000d02:	d001      	beq.n	8000d08 <ring_buffer_dequeue_arr+0x1e>
  {
    /* No items */
    return 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	e021      	b.n	8000d4c <ring_buffer_dequeue_arr+0x62>
  }

  char *data_ptr = data;
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	617b      	str	r3, [r7, #20]
  ring_buffer_size_t cnt = 0;
 8000d0c:	2313      	movs	r3, #19
 8000d0e:	18fb      	adds	r3, r7, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr))
 8000d14:	e008      	b.n	8000d28 <ring_buffer_dequeue_arr+0x3e>
  {
    cnt++;
 8000d16:	2113      	movs	r1, #19
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	781a      	ldrb	r2, [r3, #0]
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	3201      	adds	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
    data_ptr++;
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr))
 8000d28:	2313      	movs	r3, #19
 8000d2a:	18fa      	adds	r2, r7, r3
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	7812      	ldrb	r2, [r2, #0]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d207      	bcs.n	8000d46 <ring_buffer_dequeue_arr+0x5c>
 8000d36:	697a      	ldr	r2, [r7, #20]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff ffaf 	bl	8000ca0 <ring_buffer_dequeue>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d1e7      	bne.n	8000d16 <ring_buffer_dequeue_arr+0x2c>
  }
  return cnt;
 8000d46:	2313      	movs	r3, #19
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	781b      	ldrb	r3, [r3, #0]
}
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b006      	add	sp, #24
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <mdbus_on_packet_send>:
ring_buffer_t m_message_queue_send;
ring_buffer_t m_message_queue_receive;
mdbus_State m_mdbus_state = IDLE;

void mdbus_on_packet_send()
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
	if(ring_buffer_is_empty(&m_message_queue_send)) return;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <mdbus_on_packet_send+0x34>)
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff ff01 	bl	8000b64 <ring_buffer_is_empty>
 8000d62:	1e03      	subs	r3, r0, #0
 8000d64:	d10b      	bne.n	8000d7e <mdbus_on_packet_send+0x2a>

	uint8_t data[PACKETSIZE];
	//read data from buffer
	ring_buffer_dequeue_arr(&m_message_queue_send, data, PACKETSIZE);
 8000d66:	1d39      	adds	r1, r7, #4
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <mdbus_on_packet_send+0x34>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff ffbc 	bl	8000cea <ring_buffer_dequeue_arr>
	//send queued package
	mdbus_send_packet_it(data, PACKETSIZE);
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2101      	movs	r1, #1
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff fc50 	bl	800061c <mdbus_send_packet_it>
 8000d7c:	e000      	b.n	8000d80 <mdbus_on_packet_send+0x2c>
	if(ring_buffer_is_empty(&m_message_queue_send)) return;
 8000d7e:	46c0      	nop			; (mov r8, r8)

}
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	20000108 	.word	0x20000108

08000d8c <mdbus_on_packet_receive>:

void mdbus_on_packet_receive(uint8_t *data, uint16_t size)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	000a      	movs	r2, r1
 8000d96:	1cbb      	adds	r3, r7, #2
 8000d98:	801a      	strh	r2, [r3, #0]
	ring_buffer_queue_arr(&m_message_queue_receive, data, PACKETSIZE);
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <mdbus_on_packet_receive+0x30>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff ff55 	bl	8000c50 <ring_buffer_queue_arr>
	mdbus_read_packet_it(data, size);
 8000da6:	1cbb      	adds	r3, r7, #2
 8000da8:	881a      	ldrh	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	0011      	movs	r1, r2
 8000dae:	0018      	movs	r0, r3
 8000db0:	f7ff fc48 	bl	8000644 <mdbus_read_packet_it>
}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b002      	add	sp, #8
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	2000050c 	.word	0x2000050c

08000dc0 <mdbus_slave_run>:

void mdbus_slave_run()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	switch(m_mdbus_state)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <mdbus_slave_run+0x54>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b08      	cmp	r3, #8
 8000dca:	d81f      	bhi.n	8000e0c <mdbus_slave_run+0x4c>
 8000dcc:	009a      	lsls	r2, r3, #2
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <mdbus_slave_run+0x58>)
 8000dd0:	18d3      	adds	r3, r2, r3
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	469f      	mov	pc, r3
	{
	case IDLE:
		idle();
 8000dd6:	f000 f837 	bl	8000e48 <idle>
		break;
 8000dda:	e018      	b.n	8000e0e <mdbus_slave_run+0x4e>

	case WAIT:
		wait();
 8000ddc:	f000 f852 	bl	8000e84 <wait>
		break;
 8000de0:	e015      	b.n	8000e0e <mdbus_slave_run+0x4e>

	case FUNC_ADRESS:
		func_adress();
 8000de2:	f000 f854 	bl	8000e8e <func_adress>
		break;
 8000de6:	e012      	b.n	8000e0e <mdbus_slave_run+0x4e>

	case ERROR_UNKNOWN:
		error_unknown();
 8000de8:	f000 f856 	bl	8000e98 <error_unknown>
		break;
 8000dec:	e00f      	b.n	8000e0e <mdbus_slave_run+0x4e>

	case OK:
		ok();
 8000dee:	f000 f858 	bl	8000ea2 <ok>
		break;
 8000df2:	e00c      	b.n	8000e0e <mdbus_slave_run+0x4e>

	case FAIL:
		fail();
 8000df4:	f000 f85a 	bl	8000eac <fail>
		break;
 8000df8:	e009      	b.n	8000e0e <mdbus_slave_run+0x4e>

	case CHECK_FRAME:
		check_frame();
 8000dfa:	f000 f85c 	bl	8000eb6 <check_frame>
		break;
 8000dfe:	e006      	b.n	8000e0e <mdbus_slave_run+0x4e>

	case FUNC1:
		func1();
 8000e00:	f000 f85e 	bl	8000ec0 <func1>
		break;
 8000e04:	e003      	b.n	8000e0e <mdbus_slave_run+0x4e>

	case FUNC2:
		func2();
 8000e06:	f000 f860 	bl	8000eca <func2>
		break;
 8000e0a:	e000      	b.n	8000e0e <mdbus_slave_run+0x4e>
	default:
		break;
 8000e0c:	46c0      	nop			; (mov r8, r8)
	}
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2000090e 	.word	0x2000090e
 8000e18:	08005280 	.word	0x08005280

08000e1c <mdbus_slave_configure>:

void mdbus_slave_configure()
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	m_mdbus_state = IDLE;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <mdbus_slave_configure+0x20>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
	ring_buffer_init(&m_message_queue_send);
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <mdbus_slave_configure+0x24>)
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f7ff fecf 	bl	8000bcc <ring_buffer_init>
	ring_buffer_init(&m_message_queue_receive);
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <mdbus_slave_configure+0x28>)
 8000e30:	0018      	movs	r0, r3
 8000e32:	f7ff fecb 	bl	8000bcc <ring_buffer_init>
}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	2000090e 	.word	0x2000090e
 8000e40:	20000108 	.word	0x20000108
 8000e44:	2000050c 	.word	0x2000050c

08000e48 <idle>:

void idle()
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	if(ring_buffer_is_empty(&m_message_queue_receive)) return;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <idle+0x34>)
 8000e50:	0018      	movs	r0, r3
 8000e52:	f7ff fe87 	bl	8000b64 <ring_buffer_is_empty>
 8000e56:	1e03      	subs	r3, r0, #0
 8000e58:	d10c      	bne.n	8000e74 <idle+0x2c>

	uint8_t data[PACKETSIZE];
	ring_buffer_dequeue_arr(&m_message_queue_receive, data, PACKETSIZE);
 8000e5a:	1d39      	adds	r1, r7, #4
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <idle+0x34>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	0018      	movs	r0, r3
 8000e62:	f7ff ff42 	bl	8000cea <ring_buffer_dequeue_arr>
	ring_buffer_queue_arr(&m_message_queue_send, data, PACKETSIZE);
 8000e66:	1d39      	adds	r1, r7, #4
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <idle+0x38>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff feef 	bl	8000c50 <ring_buffer_queue_arr>
 8000e72:	e000      	b.n	8000e76 <idle+0x2e>
	if(ring_buffer_is_empty(&m_message_queue_receive)) return;
 8000e74:	46c0      	nop			; (mov r8, r8)
}
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b002      	add	sp, #8
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	2000050c 	.word	0x2000050c
 8000e80:	20000108 	.word	0x20000108

08000e84 <wait>:

void wait()
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0

}
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <func_adress>:

void func_adress()
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	af00      	add	r7, sp, #0

}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <error_unknown>:

void error_unknown()
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0

}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <ok>:

void ok()
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0

}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <fail>:

void fail()
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0

}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <check_frame>:

void check_frame()
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0

}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <func1>:

void func1()
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0

}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <func2>:

void func2()
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0

}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ed4:	480d      	ldr	r0, [pc, #52]	; (8000f0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ed6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ed8:	f7ff fe3e 	bl	8000b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ede:	490d      	ldr	r1, [pc, #52]	; (8000f14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <LoopForever+0xe>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ef4:	4c0a      	ldr	r4, [pc, #40]	; (8000f20 <LoopForever+0x16>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f02:	f004 f955 	bl	80051b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f06:	f7ff fbcb 	bl	80006a0 <main>

08000f0a <LoopForever>:

LoopForever:
  b LoopForever
 8000f0a:	e7fe      	b.n	8000f0a <LoopForever>
  ldr   r0, =_estack
 8000f0c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f18:	080052dc 	.word	0x080052dc
  ldr r2, =_sbss
 8000f1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f20:	20000914 	.word	0x20000914

08000f24 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC1_COMP_IRQHandler>
	...

08000f28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <HAL_Init+0x3c>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_Init+0x3c>)
 8000f3a:	2180      	movs	r1, #128	; 0x80
 8000f3c:	0049      	lsls	r1, r1, #1
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f42:	2000      	movs	r0, #0
 8000f44:	f000 f810 	bl	8000f68 <HAL_InitTick>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f4c:	1dfb      	adds	r3, r7, #7
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
 8000f52:	e001      	b.n	8000f58 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f54:	f7ff fd1c 	bl	8000990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f58:	1dfb      	adds	r3, r7, #7
 8000f5a:	781b      	ldrb	r3, [r3, #0]
}
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40022000 	.word	0x40022000

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f70:	230f      	movs	r3, #15
 8000f72:	18fb      	adds	r3, r7, r3
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f78:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <HAL_InitTick+0x88>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d02b      	beq.n	8000fd8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f80:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <HAL_InitTick+0x8c>)
 8000f82:	681c      	ldr	r4, [r3, #0]
 8000f84:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <HAL_InitTick+0x88>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	0019      	movs	r1, r3
 8000f8a:	23fa      	movs	r3, #250	; 0xfa
 8000f8c:	0098      	lsls	r0, r3, #2
 8000f8e:	f7ff f8b9 	bl	8000104 <__udivsi3>
 8000f92:	0003      	movs	r3, r0
 8000f94:	0019      	movs	r1, r3
 8000f96:	0020      	movs	r0, r4
 8000f98:	f7ff f8b4 	bl	8000104 <__udivsi3>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 f92f 	bl	8001202 <HAL_SYSTICK_Config>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d112      	bne.n	8000fce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d80a      	bhi.n	8000fc4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	425b      	negs	r3, r3
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f000 f8fe 	bl	80011b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_InitTick+0x90>)
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	e00d      	b.n	8000fe0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	18fb      	adds	r3, r7, r3
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
 8000fcc:	e008      	b.n	8000fe0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fce:	230f      	movs	r3, #15
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	e003      	b.n	8000fe0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fd8:	230f      	movs	r3, #15
 8000fda:	18fb      	adds	r3, r7, r3
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	781b      	ldrb	r3, [r3, #0]
}
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b005      	add	sp, #20
 8000fec:	bd90      	pop	{r4, r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000004 	.word	0x20000004

08000ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <HAL_IncTick+0x1c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	001a      	movs	r2, r3
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_IncTick+0x20>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	18d2      	adds	r2, r2, r3
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_IncTick+0x20>)
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	20000008 	.word	0x20000008
 800101c:	20000910 	.word	0x20000910

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b02      	ldr	r3, [pc, #8]	; (8001030 <HAL_GetTick+0x10>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	20000910 	.word	0x20000910

08001034 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a06      	ldr	r2, [pc, #24]	; (800105c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001042:	4013      	ands	r3, r2
 8001044:	0019      	movs	r1, r3
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	430a      	orrs	r2, r1
 800104c:	601a      	str	r2, [r3, #0]
}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b002      	add	sp, #8
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	40010000 	.word	0x40010000
 800105c:	fffff9ff 	.word	0xfffff9ff

08001060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	0002      	movs	r2, r0
 8001068:	1dfb      	adds	r3, r7, #7
 800106a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800106c:	1dfb      	adds	r3, r7, #7
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b7f      	cmp	r3, #127	; 0x7f
 8001072:	d809      	bhi.n	8001088 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001074:	1dfb      	adds	r3, r7, #7
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	001a      	movs	r2, r3
 800107a:	231f      	movs	r3, #31
 800107c:	401a      	ands	r2, r3
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <__NVIC_EnableIRQ+0x30>)
 8001080:	2101      	movs	r1, #1
 8001082:	4091      	lsls	r1, r2
 8001084:	000a      	movs	r2, r1
 8001086:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	b002      	add	sp, #8
 800108e:	bd80      	pop	{r7, pc}
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	0002      	movs	r2, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010a2:	1dfb      	adds	r3, r7, #7
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b7f      	cmp	r3, #127	; 0x7f
 80010a8:	d828      	bhi.n	80010fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010aa:	4a2f      	ldr	r2, [pc, #188]	; (8001168 <__NVIC_SetPriority+0xd4>)
 80010ac:	1dfb      	adds	r3, r7, #7
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	33c0      	adds	r3, #192	; 0xc0
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	589b      	ldr	r3, [r3, r2]
 80010ba:	1dfa      	adds	r2, r7, #7
 80010bc:	7812      	ldrb	r2, [r2, #0]
 80010be:	0011      	movs	r1, r2
 80010c0:	2203      	movs	r2, #3
 80010c2:	400a      	ands	r2, r1
 80010c4:	00d2      	lsls	r2, r2, #3
 80010c6:	21ff      	movs	r1, #255	; 0xff
 80010c8:	4091      	lsls	r1, r2
 80010ca:	000a      	movs	r2, r1
 80010cc:	43d2      	mvns	r2, r2
 80010ce:	401a      	ands	r2, r3
 80010d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	019b      	lsls	r3, r3, #6
 80010d6:	22ff      	movs	r2, #255	; 0xff
 80010d8:	401a      	ands	r2, r3
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	0018      	movs	r0, r3
 80010e0:	2303      	movs	r3, #3
 80010e2:	4003      	ands	r3, r0
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e8:	481f      	ldr	r0, [pc, #124]	; (8001168 <__NVIC_SetPriority+0xd4>)
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	430a      	orrs	r2, r1
 80010f4:	33c0      	adds	r3, #192	; 0xc0
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010fa:	e031      	b.n	8001160 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010fc:	4a1b      	ldr	r2, [pc, #108]	; (800116c <__NVIC_SetPriority+0xd8>)
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	0019      	movs	r1, r3
 8001104:	230f      	movs	r3, #15
 8001106:	400b      	ands	r3, r1
 8001108:	3b08      	subs	r3, #8
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3306      	adds	r3, #6
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	18d3      	adds	r3, r2, r3
 8001112:	3304      	adds	r3, #4
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	1dfa      	adds	r2, r7, #7
 8001118:	7812      	ldrb	r2, [r2, #0]
 800111a:	0011      	movs	r1, r2
 800111c:	2203      	movs	r2, #3
 800111e:	400a      	ands	r2, r1
 8001120:	00d2      	lsls	r2, r2, #3
 8001122:	21ff      	movs	r1, #255	; 0xff
 8001124:	4091      	lsls	r1, r2
 8001126:	000a      	movs	r2, r1
 8001128:	43d2      	mvns	r2, r2
 800112a:	401a      	ands	r2, r3
 800112c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	019b      	lsls	r3, r3, #6
 8001132:	22ff      	movs	r2, #255	; 0xff
 8001134:	401a      	ands	r2, r3
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	0018      	movs	r0, r3
 800113c:	2303      	movs	r3, #3
 800113e:	4003      	ands	r3, r0
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001144:	4809      	ldr	r0, [pc, #36]	; (800116c <__NVIC_SetPriority+0xd8>)
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	001c      	movs	r4, r3
 800114c:	230f      	movs	r3, #15
 800114e:	4023      	ands	r3, r4
 8001150:	3b08      	subs	r3, #8
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	430a      	orrs	r2, r1
 8001156:	3306      	adds	r3, #6
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	18c3      	adds	r3, r0, r3
 800115c:	3304      	adds	r3, #4
 800115e:	601a      	str	r2, [r3, #0]
}
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	b003      	add	sp, #12
 8001166:	bd90      	pop	{r4, r7, pc}
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	1e5a      	subs	r2, r3, #1
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	045b      	lsls	r3, r3, #17
 8001180:	429a      	cmp	r2, r3
 8001182:	d301      	bcc.n	8001188 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001184:	2301      	movs	r3, #1
 8001186:	e010      	b.n	80011aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <SysTick_Config+0x44>)
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	3a01      	subs	r2, #1
 800118e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001190:	2301      	movs	r3, #1
 8001192:	425b      	negs	r3, r3
 8001194:	2103      	movs	r1, #3
 8001196:	0018      	movs	r0, r3
 8001198:	f7ff ff7c 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <SysTick_Config+0x44>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <SysTick_Config+0x44>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	0018      	movs	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b002      	add	sp, #8
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
 80011c2:	210f      	movs	r1, #15
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	1c02      	adds	r2, r0, #0
 80011c8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b25b      	sxtb	r3, r3
 80011d2:	0011      	movs	r1, r2
 80011d4:	0018      	movs	r0, r3
 80011d6:	f7ff ff5d 	bl	8001094 <__NVIC_SetPriority>
}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b004      	add	sp, #16
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	0002      	movs	r2, r0
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b25b      	sxtb	r3, r3
 80011f4:	0018      	movs	r0, r3
 80011f6:	f7ff ff33 	bl	8001060 <__NVIC_EnableIRQ>
}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b002      	add	sp, #8
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	0018      	movs	r0, r3
 800120e:	f7ff ffaf 	bl	8001170 <SysTick_Config>
 8001212:	0003      	movs	r3, r0
}
 8001214:	0018      	movs	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	b002      	add	sp, #8
 800121a:	bd80      	pop	{r7, pc}

0800121c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e050      	b.n	80012d0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2225      	movs	r2, #37	; 0x25
 8001232:	5c9b      	ldrb	r3, [r3, r2]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d008      	beq.n	800124c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2204      	movs	r2, #4
 800123e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2224      	movs	r2, #36	; 0x24
 8001244:	2100      	movs	r1, #0
 8001246:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e041      	b.n	80012d0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	210e      	movs	r1, #14
 8001258:	438a      	bics	r2, r1
 800125a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	491c      	ldr	r1, [pc, #112]	; (80012d8 <HAL_DMA_Abort+0xbc>)
 8001268:	400a      	ands	r2, r1
 800126a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2101      	movs	r1, #1
 8001278:	438a      	bics	r2, r1
 800127a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <HAL_DMA_Abort+0xc0>)
 800127e:	6859      	ldr	r1, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	221c      	movs	r2, #28
 8001286:	4013      	ands	r3, r2
 8001288:	2201      	movs	r2, #1
 800128a:	409a      	lsls	r2, r3
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <HAL_DMA_Abort+0xc0>)
 800128e:	430a      	orrs	r2, r1
 8001290:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800129a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00c      	beq.n	80012be <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ae:	490a      	ldr	r1, [pc, #40]	; (80012d8 <HAL_DMA_Abort+0xbc>)
 80012b0:	400a      	ands	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80012bc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2225      	movs	r2, #37	; 0x25
 80012c2:	2101      	movs	r1, #1
 80012c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2224      	movs	r2, #36	; 0x24
 80012ca:	2100      	movs	r1, #0
 80012cc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	0018      	movs	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b002      	add	sp, #8
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	fffffeff 	.word	0xfffffeff
 80012dc:	40020000 	.word	0x40020000

080012e0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e8:	210f      	movs	r1, #15
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2225      	movs	r2, #37	; 0x25
 80012f4:	5c9b      	ldrb	r3, [r3, r2]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d006      	beq.n	800130a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2204      	movs	r2, #4
 8001300:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001302:	187b      	adds	r3, r7, r1
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	e049      	b.n	800139e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	210e      	movs	r1, #14
 8001316:	438a      	bics	r2, r1
 8001318:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2101      	movs	r1, #1
 8001326:	438a      	bics	r2, r1
 8001328:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001334:	491d      	ldr	r1, [pc, #116]	; (80013ac <HAL_DMA_Abort_IT+0xcc>)
 8001336:	400a      	ands	r2, r1
 8001338:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <HAL_DMA_Abort_IT+0xd0>)
 800133c:	6859      	ldr	r1, [r3, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	221c      	movs	r2, #28
 8001344:	4013      	ands	r3, r2
 8001346:	2201      	movs	r2, #1
 8001348:	409a      	lsls	r2, r3
 800134a:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_DMA_Abort_IT+0xd0>)
 800134c:	430a      	orrs	r2, r1
 800134e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001358:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00c      	beq.n	800137c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800136c:	490f      	ldr	r1, [pc, #60]	; (80013ac <HAL_DMA_Abort_IT+0xcc>)
 800136e:	400a      	ands	r2, r1
 8001370:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800137a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2225      	movs	r2, #37	; 0x25
 8001380:	2101      	movs	r1, #1
 8001382:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2224      	movs	r2, #36	; 0x24
 8001388:	2100      	movs	r1, #0
 800138a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001390:	2b00      	cmp	r3, #0
 8001392:	d004      	beq.n	800139e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	0010      	movs	r0, r2
 800139c:	4798      	blx	r3
    }
  }
  return status;
 800139e:	230f      	movs	r3, #15
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	781b      	ldrb	r3, [r3, #0]
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b004      	add	sp, #16
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	fffffeff 	.word	0xfffffeff
 80013b0:	40020000 	.word	0x40020000

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c2:	e147      	b.n	8001654 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2101      	movs	r1, #1
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4091      	lsls	r1, r2
 80013ce:	000a      	movs	r2, r1
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d100      	bne.n	80013dc <HAL_GPIO_Init+0x28>
 80013da:	e138      	b.n	800164e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2203      	movs	r2, #3
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d005      	beq.n	80013f4 <HAL_GPIO_Init+0x40>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2203      	movs	r2, #3
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d130      	bne.n	8001456 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	409a      	lsls	r2, r3
 8001402:	0013      	movs	r3, r2
 8001404:	43da      	mvns	r2, r3
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	409a      	lsls	r2, r3
 8001416:	0013      	movs	r3, r2
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800142a:	2201      	movs	r2, #1
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
 8001430:	0013      	movs	r3, r2
 8001432:	43da      	mvns	r2, r3
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	2201      	movs	r2, #1
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
 8001448:	0013      	movs	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2203      	movs	r2, #3
 800145c:	4013      	ands	r3, r2
 800145e:	2b03      	cmp	r3, #3
 8001460:	d017      	beq.n	8001492 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	409a      	lsls	r2, r3
 8001470:	0013      	movs	r3, r2
 8001472:	43da      	mvns	r2, r3
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	409a      	lsls	r2, r3
 8001484:	0013      	movs	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2203      	movs	r2, #3
 8001498:	4013      	ands	r3, r2
 800149a:	2b02      	cmp	r3, #2
 800149c:	d123      	bne.n	80014e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	0092      	lsls	r2, r2, #2
 80014a8:	58d3      	ldr	r3, [r2, r3]
 80014aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2207      	movs	r2, #7
 80014b0:	4013      	ands	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	220f      	movs	r2, #15
 80014b6:	409a      	lsls	r2, r3
 80014b8:	0013      	movs	r3, r2
 80014ba:	43da      	mvns	r2, r3
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	691a      	ldr	r2, [r3, #16]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2107      	movs	r1, #7
 80014ca:	400b      	ands	r3, r1
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	409a      	lsls	r2, r3
 80014d0:	0013      	movs	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	08da      	lsrs	r2, r3, #3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3208      	adds	r2, #8
 80014e0:	0092      	lsls	r2, r2, #2
 80014e2:	6939      	ldr	r1, [r7, #16]
 80014e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	2203      	movs	r2, #3
 80014f2:	409a      	lsls	r2, r3
 80014f4:	0013      	movs	r3, r2
 80014f6:	43da      	mvns	r2, r3
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2203      	movs	r2, #3
 8001504:	401a      	ands	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	409a      	lsls	r2, r3
 800150c:	0013      	movs	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	23c0      	movs	r3, #192	; 0xc0
 8001520:	029b      	lsls	r3, r3, #10
 8001522:	4013      	ands	r3, r2
 8001524:	d100      	bne.n	8001528 <HAL_GPIO_Init+0x174>
 8001526:	e092      	b.n	800164e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001528:	4a50      	ldr	r2, [pc, #320]	; (800166c <HAL_GPIO_Init+0x2b8>)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3318      	adds	r3, #24
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	589b      	ldr	r3, [r3, r2]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2203      	movs	r2, #3
 800153a:	4013      	ands	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	220f      	movs	r2, #15
 8001540:	409a      	lsls	r2, r3
 8001542:	0013      	movs	r3, r2
 8001544:	43da      	mvns	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	23a0      	movs	r3, #160	; 0xa0
 8001550:	05db      	lsls	r3, r3, #23
 8001552:	429a      	cmp	r2, r3
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0x1ca>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a45      	ldr	r2, [pc, #276]	; (8001670 <HAL_GPIO_Init+0x2bc>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00d      	beq.n	800157a <HAL_GPIO_Init+0x1c6>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a44      	ldr	r2, [pc, #272]	; (8001674 <HAL_GPIO_Init+0x2c0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d007      	beq.n	8001576 <HAL_GPIO_Init+0x1c2>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a43      	ldr	r2, [pc, #268]	; (8001678 <HAL_GPIO_Init+0x2c4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_GPIO_Init+0x1be>
 800156e:	2303      	movs	r3, #3
 8001570:	e006      	b.n	8001580 <HAL_GPIO_Init+0x1cc>
 8001572:	2305      	movs	r3, #5
 8001574:	e004      	b.n	8001580 <HAL_GPIO_Init+0x1cc>
 8001576:	2302      	movs	r3, #2
 8001578:	e002      	b.n	8001580 <HAL_GPIO_Init+0x1cc>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <HAL_GPIO_Init+0x1cc>
 800157e:	2300      	movs	r3, #0
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	2103      	movs	r1, #3
 8001584:	400a      	ands	r2, r1
 8001586:	00d2      	lsls	r2, r2, #3
 8001588:	4093      	lsls	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001590:	4936      	ldr	r1, [pc, #216]	; (800166c <HAL_GPIO_Init+0x2b8>)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	3318      	adds	r3, #24
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800159e:	4b33      	ldr	r3, [pc, #204]	; (800166c <HAL_GPIO_Init+0x2b8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	43da      	mvns	r2, r3
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	035b      	lsls	r3, r3, #13
 80015b6:	4013      	ands	r3, r2
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015c2:	4b2a      	ldr	r3, [pc, #168]	; (800166c <HAL_GPIO_Init+0x2b8>)
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80015c8:	4b28      	ldr	r3, [pc, #160]	; (800166c <HAL_GPIO_Init+0x2b8>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	43da      	mvns	r2, r3
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	039b      	lsls	r3, r3, #14
 80015e0:	4013      	ands	r3, r2
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015ec:	4b1f      	ldr	r3, [pc, #124]	; (800166c <HAL_GPIO_Init+0x2b8>)
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015f2:	4a1e      	ldr	r2, [pc, #120]	; (800166c <HAL_GPIO_Init+0x2b8>)
 80015f4:	2384      	movs	r3, #132	; 0x84
 80015f6:	58d3      	ldr	r3, [r2, r3]
 80015f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	43da      	mvns	r2, r3
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	029b      	lsls	r3, r3, #10
 800160c:	4013      	ands	r3, r2
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001618:	4914      	ldr	r1, [pc, #80]	; (800166c <HAL_GPIO_Init+0x2b8>)
 800161a:	2284      	movs	r2, #132	; 0x84
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001620:	4a12      	ldr	r2, [pc, #72]	; (800166c <HAL_GPIO_Init+0x2b8>)
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	58d3      	ldr	r3, [r2, r3]
 8001626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	43da      	mvns	r2, r3
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	025b      	lsls	r3, r3, #9
 800163a:	4013      	ands	r3, r2
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001646:	4909      	ldr	r1, [pc, #36]	; (800166c <HAL_GPIO_Init+0x2b8>)
 8001648:	2280      	movs	r2, #128	; 0x80
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	40da      	lsrs	r2, r3
 800165c:	1e13      	subs	r3, r2, #0
 800165e:	d000      	beq.n	8001662 <HAL_GPIO_Init+0x2ae>
 8001660:	e6b0      	b.n	80013c4 <HAL_GPIO_Init+0x10>
  }
}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b006      	add	sp, #24
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40021800 	.word	0x40021800
 8001670:	50000400 	.word	0x50000400
 8001674:	50000800 	.word	0x50000800
 8001678:	50000c00 	.word	0x50000c00

0800167c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	0008      	movs	r0, r1
 8001686:	0011      	movs	r1, r2
 8001688:	1cbb      	adds	r3, r7, #2
 800168a:	1c02      	adds	r2, r0, #0
 800168c:	801a      	strh	r2, [r3, #0]
 800168e:	1c7b      	adds	r3, r7, #1
 8001690:	1c0a      	adds	r2, r1, #0
 8001692:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001694:	1c7b      	adds	r3, r7, #1
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d004      	beq.n	80016a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800169c:	1cbb      	adds	r3, r7, #2
 800169e:	881a      	ldrh	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a4:	e003      	b.n	80016ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016a6:	1cbb      	adds	r3, r7, #2
 80016a8:	881a      	ldrh	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b002      	add	sp, #8
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a19      	ldr	r2, [pc, #100]	; (800172c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	0019      	movs	r1, r3
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	429a      	cmp	r2, r3
 80016da:	d11f      	bne.n	800171c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	0013      	movs	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	189b      	adds	r3, r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4912      	ldr	r1, [pc, #72]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80016ea:	0018      	movs	r0, r3
 80016ec:	f7fe fd0a 	bl	8000104 <__udivsi3>
 80016f0:	0003      	movs	r3, r0
 80016f2:	3301      	adds	r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016f6:	e008      	b.n	800170a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3b01      	subs	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	e001      	b.n	800170a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e009      	b.n	800171e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800170c:	695a      	ldr	r2, [r3, #20]
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	401a      	ands	r2, r3
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	429a      	cmp	r2, r3
 800171a:	d0ed      	beq.n	80016f8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	0018      	movs	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	b004      	add	sp, #16
 8001724:	bd80      	pop	{r7, pc}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	40007000 	.word	0x40007000
 800172c:	fffff9ff 	.word	0xfffff9ff
 8001730:	20000000 	.word	0x20000000
 8001734:	000f4240 	.word	0x000f4240

08001738 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <LL_RCC_GetAPB1Prescaler+0x14>)
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	23e0      	movs	r3, #224	; 0xe0
 8001742:	01db      	lsls	r3, r3, #7
 8001744:	4013      	ands	r3, r2
}
 8001746:	0018      	movs	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40021000 	.word	0x40021000

08001750 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e2fe      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2201      	movs	r2, #1
 8001768:	4013      	ands	r3, r2
 800176a:	d100      	bne.n	800176e <HAL_RCC_OscConfig+0x1e>
 800176c:	e07c      	b.n	8001868 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800176e:	4bc3      	ldr	r3, [pc, #780]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2238      	movs	r2, #56	; 0x38
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001778:	4bc0      	ldr	r3, [pc, #768]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2203      	movs	r2, #3
 800177e:	4013      	ands	r3, r2
 8001780:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	2b10      	cmp	r3, #16
 8001786:	d102      	bne.n	800178e <HAL_RCC_OscConfig+0x3e>
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2b03      	cmp	r3, #3
 800178c:	d002      	beq.n	8001794 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	2b08      	cmp	r3, #8
 8001792:	d10b      	bne.n	80017ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001794:	4bb9      	ldr	r3, [pc, #740]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	029b      	lsls	r3, r3, #10
 800179c:	4013      	ands	r3, r2
 800179e:	d062      	beq.n	8001866 <HAL_RCC_OscConfig+0x116>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d15e      	bne.n	8001866 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e2d9      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	025b      	lsls	r3, r3, #9
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d107      	bne.n	80017c8 <HAL_RCC_OscConfig+0x78>
 80017b8:	4bb0      	ldr	r3, [pc, #704]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4baf      	ldr	r3, [pc, #700]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 80017be:	2180      	movs	r1, #128	; 0x80
 80017c0:	0249      	lsls	r1, r1, #9
 80017c2:	430a      	orrs	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e020      	b.n	800180a <HAL_RCC_OscConfig+0xba>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	23a0      	movs	r3, #160	; 0xa0
 80017ce:	02db      	lsls	r3, r3, #11
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d10e      	bne.n	80017f2 <HAL_RCC_OscConfig+0xa2>
 80017d4:	4ba9      	ldr	r3, [pc, #676]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4ba8      	ldr	r3, [pc, #672]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 80017da:	2180      	movs	r1, #128	; 0x80
 80017dc:	02c9      	lsls	r1, r1, #11
 80017de:	430a      	orrs	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	4ba6      	ldr	r3, [pc, #664]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4ba5      	ldr	r3, [pc, #660]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	0249      	lsls	r1, r1, #9
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	e00b      	b.n	800180a <HAL_RCC_OscConfig+0xba>
 80017f2:	4ba2      	ldr	r3, [pc, #648]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4ba1      	ldr	r3, [pc, #644]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 80017f8:	49a1      	ldr	r1, [pc, #644]	; (8001a80 <HAL_RCC_OscConfig+0x330>)
 80017fa:	400a      	ands	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	4b9f      	ldr	r3, [pc, #636]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4b9e      	ldr	r3, [pc, #632]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 8001804:	499f      	ldr	r1, [pc, #636]	; (8001a84 <HAL_RCC_OscConfig+0x334>)
 8001806:	400a      	ands	r2, r1
 8001808:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d014      	beq.n	800183c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001812:	f7ff fc05 	bl	8001020 <HAL_GetTick>
 8001816:	0003      	movs	r3, r0
 8001818:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fc00 	bl	8001020 <HAL_GetTick>
 8001820:	0002      	movs	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	; 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e298      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800182e:	4b93      	ldr	r3, [pc, #588]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	029b      	lsls	r3, r3, #10
 8001836:	4013      	ands	r3, r2
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0xcc>
 800183a:	e015      	b.n	8001868 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff fbf0 	bl	8001020 <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001846:	f7ff fbeb 	bl	8001020 <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b64      	cmp	r3, #100	; 0x64
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e283      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001858:	4b88      	ldr	r3, [pc, #544]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	029b      	lsls	r3, r3, #10
 8001860:	4013      	ands	r3, r2
 8001862:	d1f0      	bne.n	8001846 <HAL_RCC_OscConfig+0xf6>
 8001864:	e000      	b.n	8001868 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001866:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2202      	movs	r2, #2
 800186e:	4013      	ands	r3, r2
 8001870:	d100      	bne.n	8001874 <HAL_RCC_OscConfig+0x124>
 8001872:	e099      	b.n	80019a8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001874:	4b81      	ldr	r3, [pc, #516]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2238      	movs	r2, #56	; 0x38
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800187e:	4b7f      	ldr	r3, [pc, #508]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	2203      	movs	r2, #3
 8001884:	4013      	ands	r3, r2
 8001886:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	2b10      	cmp	r3, #16
 800188c:	d102      	bne.n	8001894 <HAL_RCC_OscConfig+0x144>
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d002      	beq.n	800189a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d135      	bne.n	8001906 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800189a:	4b78      	ldr	r3, [pc, #480]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4013      	ands	r3, r2
 80018a4:	d005      	beq.n	80018b2 <HAL_RCC_OscConfig+0x162>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e256      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b2:	4b72      	ldr	r3, [pc, #456]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4a74      	ldr	r2, [pc, #464]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	0019      	movs	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	021a      	lsls	r2, r3, #8
 80018c2:	4b6e      	ldr	r3, [pc, #440]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 80018c4:	430a      	orrs	r2, r1
 80018c6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d112      	bne.n	80018f4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018ce:	4b6b      	ldr	r3, [pc, #428]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a6e      	ldr	r2, [pc, #440]	; (8001a8c <HAL_RCC_OscConfig+0x33c>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	0019      	movs	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	4b67      	ldr	r3, [pc, #412]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 80018de:	430a      	orrs	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018e2:	4b66      	ldr	r3, [pc, #408]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	0adb      	lsrs	r3, r3, #11
 80018e8:	2207      	movs	r2, #7
 80018ea:	4013      	ands	r3, r2
 80018ec:	4a68      	ldr	r2, [pc, #416]	; (8001a90 <HAL_RCC_OscConfig+0x340>)
 80018ee:	40da      	lsrs	r2, r3
 80018f0:	4b68      	ldr	r3, [pc, #416]	; (8001a94 <HAL_RCC_OscConfig+0x344>)
 80018f2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018f4:	4b68      	ldr	r3, [pc, #416]	; (8001a98 <HAL_RCC_OscConfig+0x348>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	0018      	movs	r0, r3
 80018fa:	f7ff fb35 	bl	8000f68 <HAL_InitTick>
 80018fe:	1e03      	subs	r3, r0, #0
 8001900:	d051      	beq.n	80019a6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e22c      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d030      	beq.n	8001970 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800190e:	4b5b      	ldr	r3, [pc, #364]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a5e      	ldr	r2, [pc, #376]	; (8001a8c <HAL_RCC_OscConfig+0x33c>)
 8001914:	4013      	ands	r3, r2
 8001916:	0019      	movs	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691a      	ldr	r2, [r3, #16]
 800191c:	4b57      	ldr	r3, [pc, #348]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 800191e:	430a      	orrs	r2, r1
 8001920:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001922:	4b56      	ldr	r3, [pc, #344]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4b55      	ldr	r3, [pc, #340]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	0049      	lsls	r1, r1, #1
 800192c:	430a      	orrs	r2, r1
 800192e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001930:	f7ff fb76 	bl	8001020 <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193a:	f7ff fb71 	bl	8001020 <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e209      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800194c:	4b4b      	ldr	r3, [pc, #300]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4013      	ands	r3, r2
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001958:	4b48      	ldr	r3, [pc, #288]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4a4a      	ldr	r2, [pc, #296]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 800195e:	4013      	ands	r3, r2
 8001960:	0019      	movs	r1, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	021a      	lsls	r2, r3, #8
 8001968:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 800196a:	430a      	orrs	r2, r1
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	e01b      	b.n	80019a8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001970:	4b42      	ldr	r3, [pc, #264]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 8001976:	4949      	ldr	r1, [pc, #292]	; (8001a9c <HAL_RCC_OscConfig+0x34c>)
 8001978:	400a      	ands	r2, r1
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff fb50 	bl	8001020 <HAL_GetTick>
 8001980:	0003      	movs	r3, r0
 8001982:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001986:	f7ff fb4b 	bl	8001020 <HAL_GetTick>
 800198a:	0002      	movs	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e1e3      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001998:	4b38      	ldr	r3, [pc, #224]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4013      	ands	r3, r2
 80019a2:	d1f0      	bne.n	8001986 <HAL_RCC_OscConfig+0x236>
 80019a4:	e000      	b.n	80019a8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019a6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2208      	movs	r2, #8
 80019ae:	4013      	ands	r3, r2
 80019b0:	d047      	beq.n	8001a42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019b2:	4b32      	ldr	r3, [pc, #200]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2238      	movs	r2, #56	; 0x38
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b18      	cmp	r3, #24
 80019bc:	d10a      	bne.n	80019d4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80019be:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	2202      	movs	r2, #2
 80019c4:	4013      	ands	r3, r2
 80019c6:	d03c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x2f2>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d138      	bne.n	8001a42 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e1c5      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d019      	beq.n	8001a10 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80019dc:	4b27      	ldr	r3, [pc, #156]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 80019de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019e0:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 80019e2:	2101      	movs	r1, #1
 80019e4:	430a      	orrs	r2, r1
 80019e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff fb1a 	bl	8001020 <HAL_GetTick>
 80019ec:	0003      	movs	r3, r0
 80019ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f2:	f7ff fb15 	bl	8001020 <HAL_GetTick>
 80019f6:	0002      	movs	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e1ad      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a04:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 8001a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a08:	2202      	movs	r2, #2
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d0f1      	beq.n	80019f2 <HAL_RCC_OscConfig+0x2a2>
 8001a0e:	e018      	b.n	8001a42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 8001a12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 8001a16:	2101      	movs	r1, #1
 8001a18:	438a      	bics	r2, r1
 8001a1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fb00 	bl	8001020 <HAL_GetTick>
 8001a20:	0003      	movs	r3, r0
 8001a22:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a26:	f7ff fafb 	bl	8001020 <HAL_GetTick>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e193      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a38:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 8001a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d1f1      	bne.n	8001a26 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2204      	movs	r2, #4
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <HAL_RCC_OscConfig+0x2fe>
 8001a4c:	e0c6      	b.n	8001bdc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a4e:	231f      	movs	r3, #31
 8001a50:	18fb      	adds	r3, r7, r3
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2238      	movs	r2, #56	; 0x38
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b20      	cmp	r3, #32
 8001a60:	d11e      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_RCC_OscConfig+0x32c>)
 8001a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a66:	2202      	movs	r2, #2
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d100      	bne.n	8001a6e <HAL_RCC_OscConfig+0x31e>
 8001a6c:	e0b6      	b.n	8001bdc <HAL_RCC_OscConfig+0x48c>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d000      	beq.n	8001a78 <HAL_RCC_OscConfig+0x328>
 8001a76:	e0b1      	b.n	8001bdc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e171      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	fffeffff 	.word	0xfffeffff
 8001a84:	fffbffff 	.word	0xfffbffff
 8001a88:	ffff80ff 	.word	0xffff80ff
 8001a8c:	ffffc7ff 	.word	0xffffc7ff
 8001a90:	00f42400 	.word	0x00f42400
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20000004 	.word	0x20000004
 8001a9c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001aa0:	4bb1      	ldr	r3, [pc, #708]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	055b      	lsls	r3, r3, #21
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x360>
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <HAL_RCC_OscConfig+0x362>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d011      	beq.n	8001ada <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4bac      	ldr	r3, [pc, #688]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001ab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aba:	4bab      	ldr	r3, [pc, #684]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001abc:	2180      	movs	r1, #128	; 0x80
 8001abe:	0549      	lsls	r1, r1, #21
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ac4:	4ba8      	ldr	r3, [pc, #672]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	055b      	lsls	r3, r3, #21
 8001acc:	4013      	ands	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001ad2:	231f      	movs	r3, #31
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ada:	4ba4      	ldr	r3, [pc, #656]	; (8001d6c <HAL_RCC_OscConfig+0x61c>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d11a      	bne.n	8001b1c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ae6:	4ba1      	ldr	r3, [pc, #644]	; (8001d6c <HAL_RCC_OscConfig+0x61c>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4ba0      	ldr	r3, [pc, #640]	; (8001d6c <HAL_RCC_OscConfig+0x61c>)
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	0049      	lsls	r1, r1, #1
 8001af0:	430a      	orrs	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fa94 	bl	8001020 <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001afe:	f7ff fa8f 	bl	8001020 <HAL_GetTick>
 8001b02:	0002      	movs	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e127      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b10:	4b96      	ldr	r3, [pc, #600]	; (8001d6c <HAL_RCC_OscConfig+0x61c>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d106      	bne.n	8001b32 <HAL_RCC_OscConfig+0x3e2>
 8001b24:	4b90      	ldr	r3, [pc, #576]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001b26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b28:	4b8f      	ldr	r3, [pc, #572]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b30:	e01c      	b.n	8001b6c <HAL_RCC_OscConfig+0x41c>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b05      	cmp	r3, #5
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x404>
 8001b3a:	4b8b      	ldr	r3, [pc, #556]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001b3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b3e:	4b8a      	ldr	r3, [pc, #552]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001b40:	2104      	movs	r1, #4
 8001b42:	430a      	orrs	r2, r1
 8001b44:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b46:	4b88      	ldr	r3, [pc, #544]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001b48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b4a:	4b87      	ldr	r3, [pc, #540]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b52:	e00b      	b.n	8001b6c <HAL_RCC_OscConfig+0x41c>
 8001b54:	4b84      	ldr	r3, [pc, #528]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001b56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b58:	4b83      	ldr	r3, [pc, #524]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	438a      	bics	r2, r1
 8001b5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b60:	4b81      	ldr	r3, [pc, #516]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001b62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b64:	4b80      	ldr	r3, [pc, #512]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001b66:	2104      	movs	r1, #4
 8001b68:	438a      	bics	r2, r1
 8001b6a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d014      	beq.n	8001b9e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff fa54 	bl	8001020 <HAL_GetTick>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b7c:	e009      	b.n	8001b92 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7e:	f7ff fa4f 	bl	8001020 <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	4a79      	ldr	r2, [pc, #484]	; (8001d70 <HAL_RCC_OscConfig+0x620>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e0e6      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b92:	4b75      	ldr	r3, [pc, #468]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b96:	2202      	movs	r2, #2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x42e>
 8001b9c:	e013      	b.n	8001bc6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9e:	f7ff fa3f 	bl	8001020 <HAL_GetTick>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ba6:	e009      	b.n	8001bbc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fa3a 	bl	8001020 <HAL_GetTick>
 8001bac:	0002      	movs	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	4a6f      	ldr	r2, [pc, #444]	; (8001d70 <HAL_RCC_OscConfig+0x620>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e0d1      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bbc:	4b6a      	ldr	r3, [pc, #424]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001bc6:	231f      	movs	r3, #31
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001bd0:	4b65      	ldr	r3, [pc, #404]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bd4:	4b64      	ldr	r3, [pc, #400]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001bd6:	4967      	ldr	r1, [pc, #412]	; (8001d74 <HAL_RCC_OscConfig+0x624>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d100      	bne.n	8001be6 <HAL_RCC_OscConfig+0x496>
 8001be4:	e0bb      	b.n	8001d5e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be6:	4b60      	ldr	r3, [pc, #384]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2238      	movs	r2, #56	; 0x38
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b10      	cmp	r3, #16
 8001bf0:	d100      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x4a4>
 8001bf2:	e07b      	b.n	8001cec <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d156      	bne.n	8001caa <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfc:	4b5a      	ldr	r3, [pc, #360]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b59      	ldr	r3, [pc, #356]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001c02:	495d      	ldr	r1, [pc, #372]	; (8001d78 <HAL_RCC_OscConfig+0x628>)
 8001c04:	400a      	ands	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7ff fa0a 	bl	8001020 <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c12:	f7ff fa05 	bl	8001020 <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e09d      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c24:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	049b      	lsls	r3, r3, #18
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d1f0      	bne.n	8001c12 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c30:	4b4d      	ldr	r3, [pc, #308]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4a51      	ldr	r2, [pc, #324]	; (8001d7c <HAL_RCC_OscConfig+0x62c>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	0019      	movs	r1, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1a      	ldr	r2, [r3, #32]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001c60:	430a      	orrs	r2, r1
 8001c62:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c64:	4b40      	ldr	r3, [pc, #256]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	0449      	lsls	r1, r1, #17
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001c72:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	4b3c      	ldr	r3, [pc, #240]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001c78:	2180      	movs	r1, #128	; 0x80
 8001c7a:	0549      	lsls	r1, r1, #21
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff f9ce 	bl	8001020 <HAL_GetTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8a:	f7ff f9c9 	bl	8001020 <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e061      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9c:	4b32      	ldr	r3, [pc, #200]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	049b      	lsls	r3, r3, #18
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x53a>
 8001ca8:	e059      	b.n	8001d5e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001caa:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001cb0:	4931      	ldr	r1, [pc, #196]	; (8001d78 <HAL_RCC_OscConfig+0x628>)
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb6:	f7ff f9b3 	bl	8001020 <HAL_GetTick>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff f9ae 	bl	8001020 <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e046      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd2:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	049b      	lsls	r3, r3, #18
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001cde:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001ce4:	4926      	ldr	r1, [pc, #152]	; (8001d80 <HAL_RCC_OscConfig+0x630>)
 8001ce6:	400a      	ands	r2, r1
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	e038      	b.n	8001d5e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e033      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2203      	movs	r2, #3
 8001d02:	401a      	ands	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d126      	bne.n	8001d5a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2270      	movs	r2, #112	; 0x70
 8001d10:	401a      	ands	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d11f      	bne.n	8001d5a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	23fe      	movs	r3, #254	; 0xfe
 8001d1e:	01db      	lsls	r3, r3, #7
 8001d20:	401a      	ands	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d116      	bne.n	8001d5a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	23f8      	movs	r3, #248	; 0xf8
 8001d30:	039b      	lsls	r3, r3, #14
 8001d32:	401a      	ands	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d10e      	bne.n	8001d5a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	23e0      	movs	r3, #224	; 0xe0
 8001d40:	051b      	lsls	r3, r3, #20
 8001d42:	401a      	ands	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	0f5b      	lsrs	r3, r3, #29
 8001d50:	075a      	lsls	r2, r3, #29
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d001      	beq.n	8001d5e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	0018      	movs	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b008      	add	sp, #32
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	00001388 	.word	0x00001388
 8001d74:	efffffff 	.word	0xefffffff
 8001d78:	feffffff 	.word	0xfeffffff
 8001d7c:	11c1808c 	.word	0x11c1808c
 8001d80:	eefefffc 	.word	0xeefefffc

08001d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0e9      	b.n	8001f6c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d98:	4b76      	ldr	r3, [pc, #472]	; (8001f74 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	4013      	ands	r3, r2
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d91e      	bls.n	8001de4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b73      	ldr	r3, [pc, #460]	; (8001f74 <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2207      	movs	r2, #7
 8001dac:	4393      	bics	r3, r2
 8001dae:	0019      	movs	r1, r3
 8001db0:	4b70      	ldr	r3, [pc, #448]	; (8001f74 <HAL_RCC_ClockConfig+0x1f0>)
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001db8:	f7ff f932 	bl	8001020 <HAL_GetTick>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dc0:	e009      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc2:	f7ff f92d 	bl	8001020 <HAL_GetTick>
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	4a6a      	ldr	r2, [pc, #424]	; (8001f78 <HAL_RCC_ClockConfig+0x1f4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e0ca      	b.n	8001f6c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dd6:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2207      	movs	r2, #7
 8001ddc:	4013      	ands	r3, r2
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d1ee      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2202      	movs	r2, #2
 8001dea:	4013      	ands	r3, r2
 8001dec:	d015      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2204      	movs	r2, #4
 8001df4:	4013      	ands	r3, r2
 8001df6:	d006      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001df8:	4b60      	ldr	r3, [pc, #384]	; (8001f7c <HAL_RCC_ClockConfig+0x1f8>)
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	4b5f      	ldr	r3, [pc, #380]	; (8001f7c <HAL_RCC_ClockConfig+0x1f8>)
 8001dfe:	21e0      	movs	r1, #224	; 0xe0
 8001e00:	01c9      	lsls	r1, r1, #7
 8001e02:	430a      	orrs	r2, r1
 8001e04:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e06:	4b5d      	ldr	r3, [pc, #372]	; (8001f7c <HAL_RCC_ClockConfig+0x1f8>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	4a5d      	ldr	r2, [pc, #372]	; (8001f80 <HAL_RCC_ClockConfig+0x1fc>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	0019      	movs	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	4b59      	ldr	r3, [pc, #356]	; (8001f7c <HAL_RCC_ClockConfig+0x1f8>)
 8001e16:	430a      	orrs	r2, r1
 8001e18:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4013      	ands	r3, r2
 8001e22:	d057      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d107      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e2c:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_RCC_ClockConfig+0x1f8>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	029b      	lsls	r3, r3, #10
 8001e34:	4013      	ands	r3, r2
 8001e36:	d12b      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e097      	b.n	8001f6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d107      	bne.n	8001e54 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e44:	4b4d      	ldr	r3, [pc, #308]	; (8001f7c <HAL_RCC_ClockConfig+0x1f8>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	049b      	lsls	r3, r3, #18
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d11f      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e08b      	b.n	8001f6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d107      	bne.n	8001e6c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e5c:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <HAL_RCC_ClockConfig+0x1f8>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4013      	ands	r3, r2
 8001e66:	d113      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e07f      	b.n	8001f6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d106      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e74:	4b41      	ldr	r3, [pc, #260]	; (8001f7c <HAL_RCC_ClockConfig+0x1f8>)
 8001e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e78:	2202      	movs	r2, #2
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d108      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e074      	b.n	8001f6c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e82:	4b3e      	ldr	r3, [pc, #248]	; (8001f7c <HAL_RCC_ClockConfig+0x1f8>)
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e86:	2202      	movs	r2, #2
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e06d      	b.n	8001f6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e90:	4b3a      	ldr	r3, [pc, #232]	; (8001f7c <HAL_RCC_ClockConfig+0x1f8>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2207      	movs	r2, #7
 8001e96:	4393      	bics	r3, r2
 8001e98:	0019      	movs	r1, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	4b37      	ldr	r3, [pc, #220]	; (8001f7c <HAL_RCC_ClockConfig+0x1f8>)
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ea4:	f7ff f8bc 	bl	8001020 <HAL_GetTick>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eac:	e009      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eae:	f7ff f8b7 	bl	8001020 <HAL_GetTick>
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	4a2f      	ldr	r2, [pc, #188]	; (8001f78 <HAL_RCC_ClockConfig+0x1f4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e054      	b.n	8001f6c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec2:	4b2e      	ldr	r3, [pc, #184]	; (8001f7c <HAL_RCC_ClockConfig+0x1f8>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2238      	movs	r2, #56	; 0x38
 8001ec8:	401a      	ands	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d1ec      	bne.n	8001eae <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2207      	movs	r2, #7
 8001eda:	4013      	ands	r3, r2
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d21e      	bcs.n	8001f20 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2207      	movs	r2, #7
 8001ee8:	4393      	bics	r3, r2
 8001eea:	0019      	movs	r1, r3
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <HAL_RCC_ClockConfig+0x1f0>)
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ef4:	f7ff f894 	bl	8001020 <HAL_GetTick>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001efc:	e009      	b.n	8001f12 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efe:	f7ff f88f 	bl	8001020 <HAL_GetTick>
 8001f02:	0002      	movs	r2, r0
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_RCC_ClockConfig+0x1f4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e02c      	b.n	8001f6c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_RCC_ClockConfig+0x1f0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2207      	movs	r2, #7
 8001f18:	4013      	ands	r3, r2
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d1ee      	bne.n	8001efe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2204      	movs	r2, #4
 8001f26:	4013      	ands	r3, r2
 8001f28:	d009      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f2a:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <HAL_RCC_ClockConfig+0x1f8>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	4a15      	ldr	r2, [pc, #84]	; (8001f84 <HAL_RCC_ClockConfig+0x200>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	0019      	movs	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <HAL_RCC_ClockConfig+0x1f8>)
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f3e:	f000 f829 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8001f42:	0001      	movs	r1, r0
 8001f44:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <HAL_RCC_ClockConfig+0x1f8>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	401a      	ands	r2, r3
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <HAL_RCC_ClockConfig+0x204>)
 8001f50:	0092      	lsls	r2, r2, #2
 8001f52:	58d3      	ldr	r3, [r2, r3]
 8001f54:	221f      	movs	r2, #31
 8001f56:	4013      	ands	r3, r2
 8001f58:	000a      	movs	r2, r1
 8001f5a:	40da      	lsrs	r2, r3
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_RCC_ClockConfig+0x208>)
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_RCC_ClockConfig+0x20c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f7fe ffff 	bl	8000f68 <HAL_InitTick>
 8001f6a:	0003      	movs	r3, r0
}
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b004      	add	sp, #16
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40022000 	.word	0x40022000
 8001f78:	00001388 	.word	0x00001388
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	fffff0ff 	.word	0xfffff0ff
 8001f84:	ffff8fff 	.word	0xffff8fff
 8001f88:	08005220 	.word	0x08005220
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000004 	.word	0x20000004

08001f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f9a:	4b3c      	ldr	r3, [pc, #240]	; (800208c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2238      	movs	r2, #56	; 0x38
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d10f      	bne.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001fa4:	4b39      	ldr	r3, [pc, #228]	; (800208c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0adb      	lsrs	r3, r3, #11
 8001faa:	2207      	movs	r2, #7
 8001fac:	4013      	ands	r3, r2
 8001fae:	2201      	movs	r2, #1
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	0013      	movs	r3, r2
 8001fb4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001fb6:	6839      	ldr	r1, [r7, #0]
 8001fb8:	4835      	ldr	r0, [pc, #212]	; (8002090 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fba:	f7fe f8a3 	bl	8000104 <__udivsi3>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	e05d      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fc4:	4b31      	ldr	r3, [pc, #196]	; (800208c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2238      	movs	r2, #56	; 0x38
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d102      	bne.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fd0:	4b30      	ldr	r3, [pc, #192]	; (8002094 <HAL_RCC_GetSysClockFreq+0x100>)
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	e054      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fd6:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2238      	movs	r2, #56	; 0x38
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b10      	cmp	r3, #16
 8001fe0:	d138      	bne.n	8002054 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fec:	4b27      	ldr	r3, [pc, #156]	; (800208c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	2207      	movs	r2, #7
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d10d      	bne.n	800201c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	4824      	ldr	r0, [pc, #144]	; (8002094 <HAL_RCC_GetSysClockFreq+0x100>)
 8002004:	f7fe f87e 	bl	8000104 <__udivsi3>
 8002008:	0003      	movs	r3, r0
 800200a:	0019      	movs	r1, r3
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <HAL_RCC_GetSysClockFreq+0xf8>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	227f      	movs	r2, #127	; 0x7f
 8002014:	4013      	ands	r3, r2
 8002016:	434b      	muls	r3, r1
 8002018:	617b      	str	r3, [r7, #20]
        break;
 800201a:	e00d      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	481c      	ldr	r0, [pc, #112]	; (8002090 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002020:	f7fe f870 	bl	8000104 <__udivsi3>
 8002024:	0003      	movs	r3, r0
 8002026:	0019      	movs	r1, r3
 8002028:	4b18      	ldr	r3, [pc, #96]	; (800208c <HAL_RCC_GetSysClockFreq+0xf8>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	227f      	movs	r2, #127	; 0x7f
 8002030:	4013      	ands	r3, r2
 8002032:	434b      	muls	r3, r1
 8002034:	617b      	str	r3, [r7, #20]
        break;
 8002036:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002038:	4b14      	ldr	r3, [pc, #80]	; (800208c <HAL_RCC_GetSysClockFreq+0xf8>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	0f5b      	lsrs	r3, r3, #29
 800203e:	2207      	movs	r2, #7
 8002040:	4013      	ands	r3, r2
 8002042:	3301      	adds	r3, #1
 8002044:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	6978      	ldr	r0, [r7, #20]
 800204a:	f7fe f85b 	bl	8000104 <__udivsi3>
 800204e:	0003      	movs	r3, r0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	e015      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002054:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2238      	movs	r2, #56	; 0x38
 800205a:	4013      	ands	r3, r2
 800205c:	2b20      	cmp	r3, #32
 800205e:	d103      	bne.n	8002068 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	e00b      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_RCC_GetSysClockFreq+0xf8>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2238      	movs	r2, #56	; 0x38
 800206e:	4013      	ands	r3, r2
 8002070:	2b18      	cmp	r3, #24
 8002072:	d103      	bne.n	800207c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002074:	23fa      	movs	r3, #250	; 0xfa
 8002076:	01db      	lsls	r3, r3, #7
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	e001      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002080:	693b      	ldr	r3, [r7, #16]
}
 8002082:	0018      	movs	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	b006      	add	sp, #24
 8002088:	bd80      	pop	{r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	40021000 	.word	0x40021000
 8002090:	00f42400 	.word	0x00f42400
 8002094:	007a1200 	.word	0x007a1200

08002098 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800209c:	4b02      	ldr	r3, [pc, #8]	; (80020a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	20000000 	.word	0x20000000

080020ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ac:	b5b0      	push	{r4, r5, r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80020b0:	f7ff fff2 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020b4:	0004      	movs	r4, r0
 80020b6:	f7ff fb3f 	bl	8001738 <LL_RCC_GetAPB1Prescaler>
 80020ba:	0003      	movs	r3, r0
 80020bc:	0b1a      	lsrs	r2, r3, #12
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020c0:	0092      	lsls	r2, r2, #2
 80020c2:	58d3      	ldr	r3, [r2, r3]
 80020c4:	221f      	movs	r2, #31
 80020c6:	4013      	ands	r3, r2
 80020c8:	40dc      	lsrs	r4, r3
 80020ca:	0023      	movs	r3, r4
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bdb0      	pop	{r4, r5, r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	08005260 	.word	0x08005260

080020d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80020e0:	2313      	movs	r3, #19
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020e8:	2312      	movs	r3, #18
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	029b      	lsls	r3, r3, #10
 80020f8:	4013      	ands	r3, r2
 80020fa:	d100      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x26>
 80020fc:	e0a3      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fe:	2011      	movs	r0, #17
 8002100:	183b      	adds	r3, r7, r0
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002106:	4bc3      	ldr	r3, [pc, #780]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002108:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	055b      	lsls	r3, r3, #21
 800210e:	4013      	ands	r3, r2
 8002110:	d110      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	4bc0      	ldr	r3, [pc, #768]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002114:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002116:	4bbf      	ldr	r3, [pc, #764]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002118:	2180      	movs	r1, #128	; 0x80
 800211a:	0549      	lsls	r1, r1, #21
 800211c:	430a      	orrs	r2, r1
 800211e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002120:	4bbc      	ldr	r3, [pc, #752]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	055b      	lsls	r3, r3, #21
 8002128:	4013      	ands	r3, r2
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212e:	183b      	adds	r3, r7, r0
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002134:	4bb8      	ldr	r3, [pc, #736]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4bb7      	ldr	r3, [pc, #732]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800213a:	2180      	movs	r1, #128	; 0x80
 800213c:	0049      	lsls	r1, r1, #1
 800213e:	430a      	orrs	r2, r1
 8002140:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002142:	f7fe ff6d 	bl	8001020 <HAL_GetTick>
 8002146:	0003      	movs	r3, r0
 8002148:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800214a:	e00b      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214c:	f7fe ff68 	bl	8001020 <HAL_GetTick>
 8002150:	0002      	movs	r2, r0
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d904      	bls.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800215a:	2313      	movs	r3, #19
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	2203      	movs	r2, #3
 8002160:	701a      	strb	r2, [r3, #0]
        break;
 8002162:	e005      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002164:	4bac      	ldr	r3, [pc, #688]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4013      	ands	r3, r2
 800216e:	d0ed      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002170:	2313      	movs	r3, #19
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d154      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800217a:	4ba6      	ldr	r3, [pc, #664]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800217c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800217e:	23c0      	movs	r3, #192	; 0xc0
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4013      	ands	r3, r2
 8002184:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d019      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	429a      	cmp	r2, r3
 8002194:	d014      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002196:	4b9f      	ldr	r3, [pc, #636]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219a:	4aa0      	ldr	r2, [pc, #640]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800219c:	4013      	ands	r3, r2
 800219e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021a0:	4b9c      	ldr	r3, [pc, #624]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021a4:	4b9b      	ldr	r3, [pc, #620]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021a6:	2180      	movs	r1, #128	; 0x80
 80021a8:	0249      	lsls	r1, r1, #9
 80021aa:	430a      	orrs	r2, r1
 80021ac:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021ae:	4b99      	ldr	r3, [pc, #612]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021b2:	4b98      	ldr	r3, [pc, #608]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021b4:	499a      	ldr	r1, [pc, #616]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80021b6:	400a      	ands	r2, r1
 80021b8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021ba:	4b96      	ldr	r3, [pc, #600]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2201      	movs	r2, #1
 80021c4:	4013      	ands	r3, r2
 80021c6:	d016      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe ff2a 	bl	8001020 <HAL_GetTick>
 80021cc:	0003      	movs	r3, r0
 80021ce:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d0:	e00c      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d2:	f7fe ff25 	bl	8001020 <HAL_GetTick>
 80021d6:	0002      	movs	r2, r0
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	4a91      	ldr	r2, [pc, #580]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d904      	bls.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80021e2:	2313      	movs	r3, #19
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	2203      	movs	r2, #3
 80021e8:	701a      	strb	r2, [r3, #0]
            break;
 80021ea:	e004      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ec:	4b89      	ldr	r3, [pc, #548]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f0:	2202      	movs	r2, #2
 80021f2:	4013      	ands	r3, r2
 80021f4:	d0ed      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80021f6:	2313      	movs	r3, #19
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10a      	bne.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002200:	4b84      	ldr	r3, [pc, #528]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002204:	4a85      	ldr	r2, [pc, #532]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002206:	4013      	ands	r3, r2
 8002208:	0019      	movs	r1, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800220e:	4b81      	ldr	r3, [pc, #516]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002210:	430a      	orrs	r2, r1
 8002212:	65da      	str	r2, [r3, #92]	; 0x5c
 8002214:	e00c      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002216:	2312      	movs	r3, #18
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	2213      	movs	r2, #19
 800221c:	18ba      	adds	r2, r7, r2
 800221e:	7812      	ldrb	r2, [r2, #0]
 8002220:	701a      	strb	r2, [r3, #0]
 8002222:	e005      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002224:	2312      	movs	r3, #18
 8002226:	18fb      	adds	r3, r7, r3
 8002228:	2213      	movs	r2, #19
 800222a:	18ba      	adds	r2, r7, r2
 800222c:	7812      	ldrb	r2, [r2, #0]
 800222e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002230:	2311      	movs	r3, #17
 8002232:	18fb      	adds	r3, r7, r3
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d105      	bne.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223a:	4b76      	ldr	r3, [pc, #472]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800223c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800223e:	4b75      	ldr	r3, [pc, #468]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002240:	4979      	ldr	r1, [pc, #484]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002242:	400a      	ands	r2, r1
 8002244:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2201      	movs	r2, #1
 800224c:	4013      	ands	r3, r2
 800224e:	d009      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002250:	4b70      	ldr	r3, [pc, #448]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002254:	2203      	movs	r2, #3
 8002256:	4393      	bics	r3, r2
 8002258:	0019      	movs	r1, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	4b6d      	ldr	r3, [pc, #436]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002260:	430a      	orrs	r2, r1
 8002262:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2202      	movs	r2, #2
 800226a:	4013      	ands	r3, r2
 800226c:	d009      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800226e:	4b69      	ldr	r3, [pc, #420]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002272:	220c      	movs	r2, #12
 8002274:	4393      	bics	r3, r2
 8002276:	0019      	movs	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	4b65      	ldr	r3, [pc, #404]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800227e:	430a      	orrs	r2, r1
 8002280:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2210      	movs	r2, #16
 8002288:	4013      	ands	r3, r2
 800228a:	d009      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800228c:	4b61      	ldr	r3, [pc, #388]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002290:	4a66      	ldr	r2, [pc, #408]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002292:	4013      	ands	r3, r2
 8002294:	0019      	movs	r1, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	4b5e      	ldr	r3, [pc, #376]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800229c:	430a      	orrs	r2, r1
 800229e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4013      	ands	r3, r2
 80022aa:	d009      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ac:	4b59      	ldr	r3, [pc, #356]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b0:	4a5f      	ldr	r2, [pc, #380]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	0019      	movs	r1, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699a      	ldr	r2, [r3, #24]
 80022ba:	4b56      	ldr	r3, [pc, #344]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022bc:	430a      	orrs	r2, r1
 80022be:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4013      	ands	r3, r2
 80022ca:	d009      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022cc:	4b51      	ldr	r3, [pc, #324]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d0:	4a58      	ldr	r2, [pc, #352]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	0019      	movs	r1, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69da      	ldr	r2, [r3, #28]
 80022da:	4b4e      	ldr	r3, [pc, #312]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022dc:	430a      	orrs	r2, r1
 80022de:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2220      	movs	r2, #32
 80022e6:	4013      	ands	r3, r2
 80022e8:	d009      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ea:	4b4a      	ldr	r3, [pc, #296]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	4a52      	ldr	r2, [pc, #328]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	4b46      	ldr	r3, [pc, #280]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022fa:	430a      	orrs	r2, r1
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	01db      	lsls	r3, r3, #7
 8002306:	4013      	ands	r3, r2
 8002308:	d015      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800230a:	4b42      	ldr	r3, [pc, #264]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	0899      	lsrs	r1, r3, #2
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1a      	ldr	r2, [r3, #32]
 8002316:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002318:	430a      	orrs	r2, r1
 800231a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1a      	ldr	r2, [r3, #32]
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	05db      	lsls	r3, r3, #23
 8002324:	429a      	cmp	r2, r3
 8002326:	d106      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002328:	4b3a      	ldr	r3, [pc, #232]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	4b39      	ldr	r3, [pc, #228]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232e:	2180      	movs	r1, #128	; 0x80
 8002330:	0249      	lsls	r1, r1, #9
 8002332:	430a      	orrs	r2, r1
 8002334:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	031b      	lsls	r3, r3, #12
 800233e:	4013      	ands	r3, r2
 8002340:	d009      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002342:	4b34      	ldr	r3, [pc, #208]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	2240      	movs	r2, #64	; 0x40
 8002348:	4393      	bics	r3, r2
 800234a:	0019      	movs	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002350:	4b30      	ldr	r3, [pc, #192]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002352:	430a      	orrs	r2, r1
 8002354:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	039b      	lsls	r3, r3, #14
 800235e:	4013      	ands	r3, r2
 8002360:	d016      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002362:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002366:	4a35      	ldr	r2, [pc, #212]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002368:	4013      	ands	r3, r2
 800236a:	0019      	movs	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002370:	4b28      	ldr	r3, [pc, #160]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002372:	430a      	orrs	r2, r1
 8002374:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	03db      	lsls	r3, r3, #15
 800237e:	429a      	cmp	r2, r3
 8002380:	d106      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002382:	4b24      	ldr	r3, [pc, #144]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	4b23      	ldr	r3, [pc, #140]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002388:	2180      	movs	r1, #128	; 0x80
 800238a:	0449      	lsls	r1, r1, #17
 800238c:	430a      	orrs	r2, r1
 800238e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	03db      	lsls	r3, r3, #15
 8002398:	4013      	ands	r3, r2
 800239a:	d016      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800239c:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800239e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a0:	4a27      	ldr	r2, [pc, #156]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	0019      	movs	r1, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023aa:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ac:	430a      	orrs	r2, r1
 80023ae:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	045b      	lsls	r3, r3, #17
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d106      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023bc:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	4b14      	ldr	r3, [pc, #80]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c2:	2180      	movs	r1, #128	; 0x80
 80023c4:	0449      	lsls	r1, r1, #17
 80023c6:	430a      	orrs	r2, r1
 80023c8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	4013      	ands	r3, r2
 80023d4:	d016      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	4a1a      	ldr	r2, [pc, #104]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80023dc:	4013      	ands	r3, r2
 80023de:	0019      	movs	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023e6:	430a      	orrs	r2, r1
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695a      	ldr	r2, [r3, #20]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	01db      	lsls	r3, r3, #7
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d106      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023fc:	2180      	movs	r1, #128	; 0x80
 80023fe:	0249      	lsls	r1, r1, #9
 8002400:	430a      	orrs	r2, r1
 8002402:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002404:	2312      	movs	r3, #18
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	781b      	ldrb	r3, [r3, #0]
}
 800240a:	0018      	movs	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	b006      	add	sp, #24
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	40021000 	.word	0x40021000
 8002418:	40007000 	.word	0x40007000
 800241c:	fffffcff 	.word	0xfffffcff
 8002420:	fffeffff 	.word	0xfffeffff
 8002424:	00001388 	.word	0x00001388
 8002428:	efffffff 	.word	0xefffffff
 800242c:	fffff3ff 	.word	0xfffff3ff
 8002430:	fff3ffff 	.word	0xfff3ffff
 8002434:	ffcfffff 	.word	0xffcfffff
 8002438:	ffffcfff 	.word	0xffffcfff
 800243c:	ffbfffff 	.word	0xffbfffff
 8002440:	feffffff 	.word	0xfeffffff
 8002444:	ffff3fff 	.word	0xffff3fff

08002448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e04a      	b.n	80024f0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	223d      	movs	r2, #61	; 0x3d
 800245e:	5c9b      	ldrb	r3, [r3, r2]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d107      	bne.n	8002476 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	223c      	movs	r2, #60	; 0x3c
 800246a:	2100      	movs	r1, #0
 800246c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	0018      	movs	r0, r3
 8002472:	f7fe fab5 	bl	80009e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	223d      	movs	r2, #61	; 0x3d
 800247a:	2102      	movs	r1, #2
 800247c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3304      	adds	r3, #4
 8002486:	0019      	movs	r1, r3
 8002488:	0010      	movs	r0, r2
 800248a:	f000 fab9 	bl	8002a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2248      	movs	r2, #72	; 0x48
 8002492:	2101      	movs	r1, #1
 8002494:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	223e      	movs	r2, #62	; 0x3e
 800249a:	2101      	movs	r1, #1
 800249c:	5499      	strb	r1, [r3, r2]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	223f      	movs	r2, #63	; 0x3f
 80024a2:	2101      	movs	r1, #1
 80024a4:	5499      	strb	r1, [r3, r2]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2240      	movs	r2, #64	; 0x40
 80024aa:	2101      	movs	r1, #1
 80024ac:	5499      	strb	r1, [r3, r2]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2241      	movs	r2, #65	; 0x41
 80024b2:	2101      	movs	r1, #1
 80024b4:	5499      	strb	r1, [r3, r2]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2242      	movs	r2, #66	; 0x42
 80024ba:	2101      	movs	r1, #1
 80024bc:	5499      	strb	r1, [r3, r2]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2243      	movs	r2, #67	; 0x43
 80024c2:	2101      	movs	r1, #1
 80024c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2244      	movs	r2, #68	; 0x44
 80024ca:	2101      	movs	r1, #1
 80024cc:	5499      	strb	r1, [r3, r2]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2245      	movs	r2, #69	; 0x45
 80024d2:	2101      	movs	r1, #1
 80024d4:	5499      	strb	r1, [r3, r2]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2246      	movs	r2, #70	; 0x46
 80024da:	2101      	movs	r1, #1
 80024dc:	5499      	strb	r1, [r3, r2]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2247      	movs	r2, #71	; 0x47
 80024e2:	2101      	movs	r1, #1
 80024e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	223d      	movs	r2, #61	; 0x3d
 80024ea:	2101      	movs	r1, #1
 80024ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	0018      	movs	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b002      	add	sp, #8
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	223d      	movs	r2, #61	; 0x3d
 8002504:	5c9b      	ldrb	r3, [r3, r2]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b01      	cmp	r3, #1
 800250a:	d001      	beq.n	8002510 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e042      	b.n	8002596 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	223d      	movs	r2, #61	; 0x3d
 8002514:	2102      	movs	r1, #2
 8002516:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2101      	movs	r1, #1
 8002524:	430a      	orrs	r2, r1
 8002526:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a1c      	ldr	r2, [pc, #112]	; (80025a0 <HAL_TIM_Base_Start_IT+0xa8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00f      	beq.n	8002552 <HAL_TIM_Base_Start_IT+0x5a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	05db      	lsls	r3, r3, #23
 800253a:	429a      	cmp	r2, r3
 800253c:	d009      	beq.n	8002552 <HAL_TIM_Base_Start_IT+0x5a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a18      	ldr	r2, [pc, #96]	; (80025a4 <HAL_TIM_Base_Start_IT+0xac>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d004      	beq.n	8002552 <HAL_TIM_Base_Start_IT+0x5a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d116      	bne.n	8002580 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	4a14      	ldr	r2, [pc, #80]	; (80025ac <HAL_TIM_Base_Start_IT+0xb4>)
 800255a:	4013      	ands	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b06      	cmp	r3, #6
 8002562:	d016      	beq.n	8002592 <HAL_TIM_Base_Start_IT+0x9a>
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	025b      	lsls	r3, r3, #9
 800256a:	429a      	cmp	r2, r3
 800256c:	d011      	beq.n	8002592 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2101      	movs	r1, #1
 800257a:	430a      	orrs	r2, r1
 800257c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800257e:	e008      	b.n	8002592 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2101      	movs	r1, #1
 800258c:	430a      	orrs	r2, r1
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	e000      	b.n	8002594 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002592:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b004      	add	sp, #16
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	40012c00 	.word	0x40012c00
 80025a4:	40000400 	.word	0x40000400
 80025a8:	40014000 	.word	0x40014000
 80025ac:	00010007 	.word	0x00010007

080025b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	2202      	movs	r2, #2
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d124      	bne.n	8002610 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2202      	movs	r2, #2
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d11d      	bne.n	8002610 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2203      	movs	r2, #3
 80025da:	4252      	negs	r2, r2
 80025dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2203      	movs	r2, #3
 80025ec:	4013      	ands	r3, r2
 80025ee:	d004      	beq.n	80025fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	0018      	movs	r0, r3
 80025f4:	f000 f9ec 	bl	80029d0 <HAL_TIM_IC_CaptureCallback>
 80025f8:	e007      	b.n	800260a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 f9df 	bl	80029c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	0018      	movs	r0, r3
 8002606:	f000 f9eb 	bl	80029e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2204      	movs	r2, #4
 8002618:	4013      	ands	r3, r2
 800261a:	2b04      	cmp	r3, #4
 800261c:	d125      	bne.n	800266a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	2204      	movs	r2, #4
 8002626:	4013      	ands	r3, r2
 8002628:	2b04      	cmp	r3, #4
 800262a:	d11e      	bne.n	800266a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2205      	movs	r2, #5
 8002632:	4252      	negs	r2, r2
 8002634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2202      	movs	r2, #2
 800263a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	23c0      	movs	r3, #192	; 0xc0
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4013      	ands	r3, r2
 8002648:	d004      	beq.n	8002654 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	0018      	movs	r0, r3
 800264e:	f000 f9bf 	bl	80029d0 <HAL_TIM_IC_CaptureCallback>
 8002652:	e007      	b.n	8002664 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	0018      	movs	r0, r3
 8002658:	f000 f9b2 	bl	80029c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	0018      	movs	r0, r3
 8002660:	f000 f9be 	bl	80029e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	2208      	movs	r2, #8
 8002672:	4013      	ands	r3, r2
 8002674:	2b08      	cmp	r3, #8
 8002676:	d124      	bne.n	80026c2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	2208      	movs	r2, #8
 8002680:	4013      	ands	r3, r2
 8002682:	2b08      	cmp	r3, #8
 8002684:	d11d      	bne.n	80026c2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2209      	movs	r2, #9
 800268c:	4252      	negs	r2, r2
 800268e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2204      	movs	r2, #4
 8002694:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	2203      	movs	r2, #3
 800269e:	4013      	ands	r3, r2
 80026a0:	d004      	beq.n	80026ac <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	0018      	movs	r0, r3
 80026a6:	f000 f993 	bl	80029d0 <HAL_TIM_IC_CaptureCallback>
 80026aa:	e007      	b.n	80026bc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	0018      	movs	r0, r3
 80026b0:	f000 f986 	bl	80029c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	0018      	movs	r0, r3
 80026b8:	f000 f992 	bl	80029e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	2210      	movs	r2, #16
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b10      	cmp	r3, #16
 80026ce:	d125      	bne.n	800271c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2210      	movs	r2, #16
 80026d8:	4013      	ands	r3, r2
 80026da:	2b10      	cmp	r3, #16
 80026dc:	d11e      	bne.n	800271c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2211      	movs	r2, #17
 80026e4:	4252      	negs	r2, r2
 80026e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2208      	movs	r2, #8
 80026ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	69da      	ldr	r2, [r3, #28]
 80026f4:	23c0      	movs	r3, #192	; 0xc0
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4013      	ands	r3, r2
 80026fa:	d004      	beq.n	8002706 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	0018      	movs	r0, r3
 8002700:	f000 f966 	bl	80029d0 <HAL_TIM_IC_CaptureCallback>
 8002704:	e007      	b.n	8002716 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	0018      	movs	r0, r3
 800270a:	f000 f959 	bl	80029c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	0018      	movs	r0, r3
 8002712:	f000 f965 	bl	80029e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2201      	movs	r2, #1
 8002724:	4013      	ands	r3, r2
 8002726:	2b01      	cmp	r3, #1
 8002728:	d10f      	bne.n	800274a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	4013      	ands	r3, r2
 8002734:	2b01      	cmp	r3, #1
 8002736:	d108      	bne.n	800274a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2202      	movs	r2, #2
 800273e:	4252      	negs	r2, r2
 8002740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	0018      	movs	r0, r3
 8002746:	f7fd ff91 	bl	800066c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	4013      	ands	r3, r2
 8002754:	2b80      	cmp	r3, #128	; 0x80
 8002756:	d10f      	bne.n	8002778 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2280      	movs	r2, #128	; 0x80
 8002760:	4013      	ands	r3, r2
 8002762:	2b80      	cmp	r3, #128	; 0x80
 8002764:	d108      	bne.n	8002778 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2281      	movs	r2, #129	; 0x81
 800276c:	4252      	negs	r2, r2
 800276e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	0018      	movs	r0, r3
 8002774:	f000 fad6 	bl	8002d24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	401a      	ands	r2, r3
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	429a      	cmp	r2, r3
 800278a:	d10e      	bne.n	80027aa <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2280      	movs	r2, #128	; 0x80
 8002794:	4013      	ands	r3, r2
 8002796:	2b80      	cmp	r3, #128	; 0x80
 8002798:	d107      	bne.n	80027aa <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <HAL_TIM_IRQHandler+0x260>)
 80027a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f000 fac5 	bl	8002d34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	2240      	movs	r2, #64	; 0x40
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b40      	cmp	r3, #64	; 0x40
 80027b6:	d10f      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2240      	movs	r2, #64	; 0x40
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b40      	cmp	r3, #64	; 0x40
 80027c4:	d108      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2241      	movs	r2, #65	; 0x41
 80027cc:	4252      	negs	r2, r2
 80027ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 f90c 	bl	80029f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2220      	movs	r2, #32
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	d10f      	bne.n	8002806 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d108      	bne.n	8002806 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2221      	movs	r2, #33	; 0x21
 80027fa:	4252      	negs	r2, r2
 80027fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	0018      	movs	r0, r3
 8002802:	f000 fa87 	bl	8002d14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	46bd      	mov	sp, r7
 800280a:	b002      	add	sp, #8
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	fffffeff 	.word	0xfffffeff

08002814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800281e:	230f      	movs	r3, #15
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	223c      	movs	r2, #60	; 0x3c
 800282a:	5c9b      	ldrb	r3, [r3, r2]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_TIM_ConfigClockSource+0x20>
 8002830:	2302      	movs	r3, #2
 8002832:	e0bc      	b.n	80029ae <HAL_TIM_ConfigClockSource+0x19a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	223c      	movs	r2, #60	; 0x3c
 8002838:	2101      	movs	r1, #1
 800283a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	223d      	movs	r2, #61	; 0x3d
 8002840:	2102      	movs	r1, #2
 8002842:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4a5a      	ldr	r2, [pc, #360]	; (80029b8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002850:	4013      	ands	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4a59      	ldr	r2, [pc, #356]	; (80029bc <HAL_TIM_ConfigClockSource+0x1a8>)
 8002858:	4013      	ands	r3, r2
 800285a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2280      	movs	r2, #128	; 0x80
 800286a:	0192      	lsls	r2, r2, #6
 800286c:	4293      	cmp	r3, r2
 800286e:	d040      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0xde>
 8002870:	2280      	movs	r2, #128	; 0x80
 8002872:	0192      	lsls	r2, r2, #6
 8002874:	4293      	cmp	r3, r2
 8002876:	d900      	bls.n	800287a <HAL_TIM_ConfigClockSource+0x66>
 8002878:	e088      	b.n	800298c <HAL_TIM_ConfigClockSource+0x178>
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	0152      	lsls	r2, r2, #5
 800287e:	4293      	cmp	r3, r2
 8002880:	d100      	bne.n	8002884 <HAL_TIM_ConfigClockSource+0x70>
 8002882:	e088      	b.n	8002996 <HAL_TIM_ConfigClockSource+0x182>
 8002884:	2280      	movs	r2, #128	; 0x80
 8002886:	0152      	lsls	r2, r2, #5
 8002888:	4293      	cmp	r3, r2
 800288a:	d900      	bls.n	800288e <HAL_TIM_ConfigClockSource+0x7a>
 800288c:	e07e      	b.n	800298c <HAL_TIM_ConfigClockSource+0x178>
 800288e:	2b70      	cmp	r3, #112	; 0x70
 8002890:	d018      	beq.n	80028c4 <HAL_TIM_ConfigClockSource+0xb0>
 8002892:	d900      	bls.n	8002896 <HAL_TIM_ConfigClockSource+0x82>
 8002894:	e07a      	b.n	800298c <HAL_TIM_ConfigClockSource+0x178>
 8002896:	2b60      	cmp	r3, #96	; 0x60
 8002898:	d04f      	beq.n	800293a <HAL_TIM_ConfigClockSource+0x126>
 800289a:	d900      	bls.n	800289e <HAL_TIM_ConfigClockSource+0x8a>
 800289c:	e076      	b.n	800298c <HAL_TIM_ConfigClockSource+0x178>
 800289e:	2b50      	cmp	r3, #80	; 0x50
 80028a0:	d03b      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x106>
 80028a2:	d900      	bls.n	80028a6 <HAL_TIM_ConfigClockSource+0x92>
 80028a4:	e072      	b.n	800298c <HAL_TIM_ConfigClockSource+0x178>
 80028a6:	2b40      	cmp	r3, #64	; 0x40
 80028a8:	d057      	beq.n	800295a <HAL_TIM_ConfigClockSource+0x146>
 80028aa:	d900      	bls.n	80028ae <HAL_TIM_ConfigClockSource+0x9a>
 80028ac:	e06e      	b.n	800298c <HAL_TIM_ConfigClockSource+0x178>
 80028ae:	2b30      	cmp	r3, #48	; 0x30
 80028b0:	d063      	beq.n	800297a <HAL_TIM_ConfigClockSource+0x166>
 80028b2:	d86b      	bhi.n	800298c <HAL_TIM_ConfigClockSource+0x178>
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d060      	beq.n	800297a <HAL_TIM_ConfigClockSource+0x166>
 80028b8:	d868      	bhi.n	800298c <HAL_TIM_ConfigClockSource+0x178>
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d05d      	beq.n	800297a <HAL_TIM_ConfigClockSource+0x166>
 80028be:	2b10      	cmp	r3, #16
 80028c0:	d05b      	beq.n	800297a <HAL_TIM_ConfigClockSource+0x166>
 80028c2:	e063      	b.n	800298c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	6899      	ldr	r1, [r3, #8]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f000 f990 	bl	8002bf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2277      	movs	r2, #119	; 0x77
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	609a      	str	r2, [r3, #8]
      break;
 80028f0:	e052      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6899      	ldr	r1, [r3, #8]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f000 f979 	bl	8002bf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2180      	movs	r1, #128	; 0x80
 8002912:	01c9      	lsls	r1, r1, #7
 8002914:	430a      	orrs	r2, r1
 8002916:	609a      	str	r2, [r3, #8]
      break;
 8002918:	e03e      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6859      	ldr	r1, [r3, #4]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	001a      	movs	r2, r3
 8002928:	f000 f8ea 	bl	8002b00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2150      	movs	r1, #80	; 0x50
 8002932:	0018      	movs	r0, r3
 8002934:	f000 f944 	bl	8002bc0 <TIM_ITRx_SetConfig>
      break;
 8002938:	e02e      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6859      	ldr	r1, [r3, #4]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	001a      	movs	r2, r3
 8002948:	f000 f908 	bl	8002b5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2160      	movs	r1, #96	; 0x60
 8002952:	0018      	movs	r0, r3
 8002954:	f000 f934 	bl	8002bc0 <TIM_ITRx_SetConfig>
      break;
 8002958:	e01e      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6859      	ldr	r1, [r3, #4]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	001a      	movs	r2, r3
 8002968:	f000 f8ca 	bl	8002b00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2140      	movs	r1, #64	; 0x40
 8002972:	0018      	movs	r0, r3
 8002974:	f000 f924 	bl	8002bc0 <TIM_ITRx_SetConfig>
      break;
 8002978:	e00e      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	0019      	movs	r1, r3
 8002984:	0010      	movs	r0, r2
 8002986:	f000 f91b 	bl	8002bc0 <TIM_ITRx_SetConfig>
      break;
 800298a:	e005      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800298c:	230f      	movs	r3, #15
 800298e:	18fb      	adds	r3, r7, r3
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
      break;
 8002994:	e000      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002996:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	223d      	movs	r2, #61	; 0x3d
 800299c:	2101      	movs	r1, #1
 800299e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	223c      	movs	r2, #60	; 0x3c
 80029a4:	2100      	movs	r1, #0
 80029a6:	5499      	strb	r1, [r3, r2]

  return status;
 80029a8:	230f      	movs	r3, #15
 80029aa:	18fb      	adds	r3, r7, r3
 80029ac:	781b      	ldrb	r3, [r3, #0]
}
 80029ae:	0018      	movs	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b004      	add	sp, #16
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	ffceff88 	.word	0xffceff88
 80029bc:	ffff00ff 	.word	0xffff00ff

080029c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029c8:	46c0      	nop			; (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b002      	add	sp, #8
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029d8:	46c0      	nop			; (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	b002      	add	sp, #8
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029e8:	46c0      	nop			; (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b002      	add	sp, #8
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b002      	add	sp, #8
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a34      	ldr	r2, [pc, #208]	; (8002ae4 <TIM_Base_SetConfig+0xe4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d008      	beq.n	8002a2a <TIM_Base_SetConfig+0x2a>
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	05db      	lsls	r3, r3, #23
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d003      	beq.n	8002a2a <TIM_Base_SetConfig+0x2a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a30      	ldr	r2, [pc, #192]	; (8002ae8 <TIM_Base_SetConfig+0xe8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d108      	bne.n	8002a3c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2270      	movs	r2, #112	; 0x70
 8002a2e:	4393      	bics	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a29      	ldr	r2, [pc, #164]	; (8002ae4 <TIM_Base_SetConfig+0xe4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d018      	beq.n	8002a76 <TIM_Base_SetConfig+0x76>
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	05db      	lsls	r3, r3, #23
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d013      	beq.n	8002a76 <TIM_Base_SetConfig+0x76>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a25      	ldr	r2, [pc, #148]	; (8002ae8 <TIM_Base_SetConfig+0xe8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00f      	beq.n	8002a76 <TIM_Base_SetConfig+0x76>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a24      	ldr	r2, [pc, #144]	; (8002aec <TIM_Base_SetConfig+0xec>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00b      	beq.n	8002a76 <TIM_Base_SetConfig+0x76>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a23      	ldr	r2, [pc, #140]	; (8002af0 <TIM_Base_SetConfig+0xf0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d007      	beq.n	8002a76 <TIM_Base_SetConfig+0x76>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a22      	ldr	r2, [pc, #136]	; (8002af4 <TIM_Base_SetConfig+0xf4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d003      	beq.n	8002a76 <TIM_Base_SetConfig+0x76>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a21      	ldr	r2, [pc, #132]	; (8002af8 <TIM_Base_SetConfig+0xf8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d108      	bne.n	8002a88 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4a20      	ldr	r2, [pc, #128]	; (8002afc <TIM_Base_SetConfig+0xfc>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2280      	movs	r2, #128	; 0x80
 8002a8c:	4393      	bics	r3, r2
 8002a8e:	001a      	movs	r2, r3
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a0c      	ldr	r2, [pc, #48]	; (8002ae4 <TIM_Base_SetConfig+0xe4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00b      	beq.n	8002ace <TIM_Base_SetConfig+0xce>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <TIM_Base_SetConfig+0xf0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d007      	beq.n	8002ace <TIM_Base_SetConfig+0xce>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a0c      	ldr	r2, [pc, #48]	; (8002af4 <TIM_Base_SetConfig+0xf4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d003      	beq.n	8002ace <TIM_Base_SetConfig+0xce>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <TIM_Base_SetConfig+0xf8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d103      	bne.n	8002ad6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	615a      	str	r2, [r3, #20]
}
 8002adc:	46c0      	nop			; (mov r8, r8)
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b004      	add	sp, #16
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40012c00 	.word	0x40012c00
 8002ae8:	40000400 	.word	0x40000400
 8002aec:	40002000 	.word	0x40002000
 8002af0:	40014000 	.word	0x40014000
 8002af4:	40014400 	.word	0x40014400
 8002af8:	40014800 	.word	0x40014800
 8002afc:	fffffcff 	.word	0xfffffcff

08002b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	2201      	movs	r2, #1
 8002b18:	4393      	bics	r3, r2
 8002b1a:	001a      	movs	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	22f0      	movs	r2, #240	; 0xf0
 8002b2a:	4393      	bics	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	220a      	movs	r2, #10
 8002b3c:	4393      	bics	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	621a      	str	r2, [r3, #32]
}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b006      	add	sp, #24
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	4393      	bics	r3, r2
 8002b70:	001a      	movs	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <TIM_TI2_ConfigInputStage+0x60>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	031b      	lsls	r3, r3, #12
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	22a0      	movs	r2, #160	; 0xa0
 8002b98:	4393      	bics	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	621a      	str	r2, [r3, #32]
}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b006      	add	sp, #24
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	ffff0fff 	.word	0xffff0fff

08002bc0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4a08      	ldr	r2, [pc, #32]	; (8002bf4 <TIM_ITRx_SetConfig+0x34>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	2207      	movs	r2, #7
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	609a      	str	r2, [r3, #8]
}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b004      	add	sp, #16
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	ffcfff8f 	.word	0xffcfff8f

08002bf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	4a09      	ldr	r2, [pc, #36]	; (8002c34 <TIM_ETR_SetConfig+0x3c>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	021a      	lsls	r2, r3, #8
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	609a      	str	r2, [r3, #8]
}
 8002c2c:	46c0      	nop			; (mov r8, r8)
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b006      	add	sp, #24
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	ffff00ff 	.word	0xffff00ff

08002c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	223c      	movs	r2, #60	; 0x3c
 8002c46:	5c9b      	ldrb	r3, [r3, r2]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e055      	b.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	223c      	movs	r2, #60	; 0x3c
 8002c54:	2101      	movs	r1, #1
 8002c56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	223d      	movs	r2, #61	; 0x3d
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a23      	ldr	r2, [pc, #140]	; (8002d04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d108      	bne.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4a22      	ldr	r2, [pc, #136]	; (8002d08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2270      	movs	r2, #112	; 0x70
 8002c90:	4393      	bics	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a16      	ldr	r2, [pc, #88]	; (8002d04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00f      	beq.n	8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	05db      	lsls	r3, r3, #23
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d009      	beq.n	8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a12      	ldr	r2, [pc, #72]	; (8002d0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a11      	ldr	r2, [pc, #68]	; (8002d10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d10c      	bne.n	8002cea <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2280      	movs	r2, #128	; 0x80
 8002cd4:	4393      	bics	r3, r2
 8002cd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	223d      	movs	r2, #61	; 0x3d
 8002cee:	2101      	movs	r1, #1
 8002cf0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	223c      	movs	r2, #60	; 0x3c
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b004      	add	sp, #16
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40012c00 	.word	0x40012c00
 8002d08:	ff0fffff 	.word	0xff0fffff
 8002d0c:	40000400 	.word	0x40000400
 8002d10:	40014000 	.word	0x40014000

08002d14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b002      	add	sp, #8
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d2c:	46c0      	nop			; (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b002      	add	sp, #8
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d3c:	46c0      	nop			; (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b002      	add	sp, #8
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e046      	b.n	8002de4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2284      	movs	r2, #132	; 0x84
 8002d5a:	589b      	ldr	r3, [r3, r2]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d107      	bne.n	8002d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2280      	movs	r2, #128	; 0x80
 8002d64:	2100      	movs	r1, #0
 8002d66:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f7fd fe5c 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2284      	movs	r2, #132	; 0x84
 8002d74:	2124      	movs	r1, #36	; 0x24
 8002d76:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2101      	movs	r1, #1
 8002d84:	438a      	bics	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f000 fc8c 	bl	80036a8 <UART_SetConfig>
 8002d90:	0003      	movs	r3, r0
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e024      	b.n	8002de4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	0018      	movs	r0, r3
 8002da6:	f000 ff3d 	bl	8003c24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	490d      	ldr	r1, [pc, #52]	; (8002dec <HAL_UART_Init+0xa8>)
 8002db6:	400a      	ands	r2, r1
 8002db8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	212a      	movs	r1, #42	; 0x2a
 8002dc6:	438a      	bics	r2, r1
 8002dc8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f000 ffd5 	bl	8003d8c <UART_CheckIdleState>
 8002de2:	0003      	movs	r3, r0
}
 8002de4:	0018      	movs	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b002      	add	sp, #8
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	ffffb7ff 	.word	0xffffb7ff

08002df0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08c      	sub	sp, #48	; 0x30
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	1dbb      	adds	r3, r7, #6
 8002dfc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2284      	movs	r2, #132	; 0x84
 8002e02:	589b      	ldr	r3, [r3, r2]
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d000      	beq.n	8002e0a <HAL_UART_Transmit_IT+0x1a>
 8002e08:	e0a0      	b.n	8002f4c <HAL_UART_Transmit_IT+0x15c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <HAL_UART_Transmit_IT+0x28>
 8002e10:	1dbb      	adds	r3, r7, #6
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e098      	b.n	8002f4e <HAL_UART_Transmit_IT+0x15e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	015b      	lsls	r3, r3, #5
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d109      	bne.n	8002e3c <HAL_UART_Transmit_IT+0x4c>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d105      	bne.n	8002e3c <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2201      	movs	r2, #1
 8002e34:	4013      	ands	r3, r2
 8002e36:	d001      	beq.n	8002e3c <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e088      	b.n	8002f4e <HAL_UART_Transmit_IT+0x15e>
      }
    }

    __HAL_LOCK(huart);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2280      	movs	r2, #128	; 0x80
 8002e40:	5c9b      	ldrb	r3, [r3, r2]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_UART_Transmit_IT+0x5a>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e081      	b.n	8002f4e <HAL_UART_Transmit_IT+0x15e>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2280      	movs	r2, #128	; 0x80
 8002e4e:	2101      	movs	r1, #1
 8002e50:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1dba      	adds	r2, r7, #6
 8002e5c:	2154      	movs	r1, #84	; 0x54
 8002e5e:	8812      	ldrh	r2, [r2, #0]
 8002e60:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1dba      	adds	r2, r7, #6
 8002e66:	2156      	movs	r1, #86	; 0x56
 8002e68:	8812      	ldrh	r2, [r2, #0]
 8002e6a:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	228c      	movs	r2, #140	; 0x8c
 8002e76:	2100      	movs	r1, #0
 8002e78:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2284      	movs	r2, #132	; 0x84
 8002e7e:	2121      	movs	r1, #33	; 0x21
 8002e80:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	059b      	lsls	r3, r3, #22
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d12e      	bne.n	8002eec <HAL_UART_Transmit_IT+0xfc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	015b      	lsls	r3, r3, #5
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d107      	bne.n	8002eaa <HAL_UART_Transmit_IT+0xba>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4a2c      	ldr	r2, [pc, #176]	; (8002f58 <HAL_UART_Transmit_IT+0x168>)
 8002ea6:	675a      	str	r2, [r3, #116]	; 0x74
 8002ea8:	e002      	b.n	8002eb0 <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4a2b      	ldr	r2, [pc, #172]	; (8002f5c <HAL_UART_Transmit_IT+0x16c>)
 8002eae:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2280      	movs	r2, #128	; 0x80
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8002ebc:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ebe:	69fb      	ldr	r3, [r7, #28]

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	f383 8810 	msr	PRIMASK, r3
}
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2180      	movs	r1, #128	; 0x80
 8002eda:	0409      	lsls	r1, r1, #16
 8002edc:	430a      	orrs	r2, r1
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	f383 8810 	msr	PRIMASK, r3
}
 8002eea:	e02d      	b.n	8002f48 <HAL_UART_Transmit_IT+0x158>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	015b      	lsls	r3, r3, #5
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d107      	bne.n	8002f08 <HAL_UART_Transmit_IT+0x118>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d103      	bne.n	8002f08 <HAL_UART_Transmit_IT+0x118>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4a17      	ldr	r2, [pc, #92]	; (8002f60 <HAL_UART_Transmit_IT+0x170>)
 8002f04:	675a      	str	r2, [r3, #116]	; 0x74
 8002f06:	e002      	b.n	8002f0e <HAL_UART_Transmit_IT+0x11e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4a16      	ldr	r2, [pc, #88]	; (8002f64 <HAL_UART_Transmit_IT+0x174>)
 8002f0c:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2280      	movs	r2, #128	; 0x80
 8002f12:	2100      	movs	r1, #0
 8002f14:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f16:	f3ef 8310 	mrs	r3, PRIMASK
 8002f1a:	613b      	str	r3, [r7, #16]
  return(result);
 8002f1c:	693b      	ldr	r3, [r7, #16]

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f20:	2301      	movs	r3, #1
 8002f22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f383 8810 	msr	PRIMASK, r3
}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2180      	movs	r1, #128	; 0x80
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	f383 8810 	msr	PRIMASK, r3
}
 8002f46:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e000      	b.n	8002f4e <HAL_UART_Transmit_IT+0x15e>
  }
  else
  {
    return HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
  }
}
 8002f4e:	0018      	movs	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b00c      	add	sp, #48	; 0x30
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	08004561 	.word	0x08004561
 8002f5c:	08004475 	.word	0x08004475
 8002f60:	080043b7 	.word	0x080043b7
 8002f64:	08004303 	.word	0x08004303

08002f68 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	1dbb      	adds	r3, r7, #6
 8002f74:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2288      	movs	r2, #136	; 0x88
 8002f7a:	589b      	ldr	r3, [r3, r2]
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d155      	bne.n	800302c <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_UART_Receive_IT+0x26>
 8002f86:	1dbb      	adds	r3, r7, #6
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e04d      	b.n	800302e <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	015b      	lsls	r3, r3, #5
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d109      	bne.n	8002fb2 <HAL_UART_Receive_IT+0x4a>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d105      	bne.n	8002fb2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4013      	ands	r3, r2
 8002fac:	d001      	beq.n	8002fb2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e03d      	b.n	800302e <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2280      	movs	r2, #128	; 0x80
 8002fb6:	5c9b      	ldrb	r3, [r3, r2]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_UART_Receive_IT+0x58>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e036      	b.n	800302e <HAL_UART_Receive_IT+0xc6>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a19      	ldr	r2, [pc, #100]	; (8003038 <HAL_UART_Receive_IT+0xd0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d020      	beq.n	800301a <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d019      	beq.n	800301a <HAL_UART_Receive_IT+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8002fea:	613b      	str	r3, [r7, #16]
  return(result);
 8002fec:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fee:	61fb      	str	r3, [r7, #28]
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f383 8810 	msr	PRIMASK, r3
}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2180      	movs	r1, #128	; 0x80
 8003008:	04c9      	lsls	r1, r1, #19
 800300a:	430a      	orrs	r2, r1
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	f383 8810 	msr	PRIMASK, r3
}
 8003018:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800301a:	1dbb      	adds	r3, r7, #6
 800301c:	881a      	ldrh	r2, [r3, #0]
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	0018      	movs	r0, r3
 8003024:	f000 ffc4 	bl	8003fb0 <UART_Start_Receive_IT>
 8003028:	0003      	movs	r3, r0
 800302a:	e000      	b.n	800302e <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800302c:	2302      	movs	r3, #2
  }
}
 800302e:	0018      	movs	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	b008      	add	sp, #32
 8003034:	bd80      	pop	{r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	40008000 	.word	0x40008000

0800303c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800303c:	b5b0      	push	{r4, r5, r7, lr}
 800303e:	b0aa      	sub	sp, #168	; 0xa8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	22a4      	movs	r2, #164	; 0xa4
 800304c:	18b9      	adds	r1, r7, r2
 800304e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	20a0      	movs	r0, #160	; 0xa0
 8003058:	1839      	adds	r1, r7, r0
 800305a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	249c      	movs	r4, #156	; 0x9c
 8003064:	1939      	adds	r1, r7, r4
 8003066:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003068:	0011      	movs	r1, r2
 800306a:	18bb      	adds	r3, r7, r2
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4aa0      	ldr	r2, [pc, #640]	; (80032f0 <HAL_UART_IRQHandler+0x2b4>)
 8003070:	4013      	ands	r3, r2
 8003072:	2298      	movs	r2, #152	; 0x98
 8003074:	18bd      	adds	r5, r7, r2
 8003076:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003078:	18bb      	adds	r3, r7, r2
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d11a      	bne.n	80030b6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003080:	187b      	adds	r3, r7, r1
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2220      	movs	r2, #32
 8003086:	4013      	ands	r3, r2
 8003088:	d015      	beq.n	80030b6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800308a:	183b      	adds	r3, r7, r0
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2220      	movs	r2, #32
 8003090:	4013      	ands	r3, r2
 8003092:	d105      	bne.n	80030a0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003094:	193b      	adds	r3, r7, r4
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	055b      	lsls	r3, r3, #21
 800309c:	4013      	ands	r3, r2
 800309e:	d00a      	beq.n	80030b6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d100      	bne.n	80030aa <HAL_UART_IRQHandler+0x6e>
 80030a8:	e2cf      	b.n	800364a <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	0010      	movs	r0, r2
 80030b2:	4798      	blx	r3
      }
      return;
 80030b4:	e2c9      	b.n	800364a <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030b6:	2398      	movs	r3, #152	; 0x98
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d100      	bne.n	80030c2 <HAL_UART_IRQHandler+0x86>
 80030c0:	e11e      	b.n	8003300 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80030c2:	239c      	movs	r3, #156	; 0x9c
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a8a      	ldr	r2, [pc, #552]	; (80032f4 <HAL_UART_IRQHandler+0x2b8>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	d106      	bne.n	80030dc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80030ce:	23a0      	movs	r3, #160	; 0xa0
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a88      	ldr	r2, [pc, #544]	; (80032f8 <HAL_UART_IRQHandler+0x2bc>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	d100      	bne.n	80030dc <HAL_UART_IRQHandler+0xa0>
 80030da:	e111      	b.n	8003300 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030dc:	23a4      	movs	r3, #164	; 0xa4
 80030de:	18fb      	adds	r3, r7, r3
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2201      	movs	r2, #1
 80030e4:	4013      	ands	r3, r2
 80030e6:	d012      	beq.n	800310e <HAL_UART_IRQHandler+0xd2>
 80030e8:	23a0      	movs	r3, #160	; 0xa0
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4013      	ands	r3, r2
 80030f4:	d00b      	beq.n	800310e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2201      	movs	r2, #1
 80030fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	228c      	movs	r2, #140	; 0x8c
 8003102:	589b      	ldr	r3, [r3, r2]
 8003104:	2201      	movs	r2, #1
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	218c      	movs	r1, #140	; 0x8c
 800310c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800310e:	23a4      	movs	r3, #164	; 0xa4
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2202      	movs	r2, #2
 8003116:	4013      	ands	r3, r2
 8003118:	d011      	beq.n	800313e <HAL_UART_IRQHandler+0x102>
 800311a:	239c      	movs	r3, #156	; 0x9c
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2201      	movs	r2, #1
 8003122:	4013      	ands	r3, r2
 8003124:	d00b      	beq.n	800313e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2202      	movs	r2, #2
 800312c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	228c      	movs	r2, #140	; 0x8c
 8003132:	589b      	ldr	r3, [r3, r2]
 8003134:	2204      	movs	r2, #4
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	218c      	movs	r1, #140	; 0x8c
 800313c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800313e:	23a4      	movs	r3, #164	; 0xa4
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2204      	movs	r2, #4
 8003146:	4013      	ands	r3, r2
 8003148:	d011      	beq.n	800316e <HAL_UART_IRQHandler+0x132>
 800314a:	239c      	movs	r3, #156	; 0x9c
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2201      	movs	r2, #1
 8003152:	4013      	ands	r3, r2
 8003154:	d00b      	beq.n	800316e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2204      	movs	r2, #4
 800315c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	228c      	movs	r2, #140	; 0x8c
 8003162:	589b      	ldr	r3, [r3, r2]
 8003164:	2202      	movs	r2, #2
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	218c      	movs	r1, #140	; 0x8c
 800316c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800316e:	23a4      	movs	r3, #164	; 0xa4
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2208      	movs	r2, #8
 8003176:	4013      	ands	r3, r2
 8003178:	d017      	beq.n	80031aa <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800317a:	23a0      	movs	r3, #160	; 0xa0
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2220      	movs	r2, #32
 8003182:	4013      	ands	r3, r2
 8003184:	d105      	bne.n	8003192 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003186:	239c      	movs	r3, #156	; 0x9c
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a59      	ldr	r2, [pc, #356]	; (80032f4 <HAL_UART_IRQHandler+0x2b8>)
 800318e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003190:	d00b      	beq.n	80031aa <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2208      	movs	r2, #8
 8003198:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	228c      	movs	r2, #140	; 0x8c
 800319e:	589b      	ldr	r3, [r3, r2]
 80031a0:	2208      	movs	r2, #8
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	218c      	movs	r1, #140	; 0x8c
 80031a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031aa:	23a4      	movs	r3, #164	; 0xa4
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	4013      	ands	r3, r2
 80031b6:	d013      	beq.n	80031e0 <HAL_UART_IRQHandler+0x1a4>
 80031b8:	23a0      	movs	r3, #160	; 0xa0
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	04db      	lsls	r3, r3, #19
 80031c2:	4013      	ands	r3, r2
 80031c4:	d00c      	beq.n	80031e0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2280      	movs	r2, #128	; 0x80
 80031cc:	0112      	lsls	r2, r2, #4
 80031ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	228c      	movs	r2, #140	; 0x8c
 80031d4:	589b      	ldr	r3, [r3, r2]
 80031d6:	2220      	movs	r2, #32
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	218c      	movs	r1, #140	; 0x8c
 80031de:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	228c      	movs	r2, #140	; 0x8c
 80031e4:	589b      	ldr	r3, [r3, r2]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d100      	bne.n	80031ec <HAL_UART_IRQHandler+0x1b0>
 80031ea:	e230      	b.n	800364e <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80031ec:	23a4      	movs	r3, #164	; 0xa4
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2220      	movs	r2, #32
 80031f4:	4013      	ands	r3, r2
 80031f6:	d015      	beq.n	8003224 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80031f8:	23a0      	movs	r3, #160	; 0xa0
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2220      	movs	r2, #32
 8003200:	4013      	ands	r3, r2
 8003202:	d106      	bne.n	8003212 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003204:	239c      	movs	r3, #156	; 0x9c
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	055b      	lsls	r3, r3, #21
 800320e:	4013      	ands	r3, r2
 8003210:	d008      	beq.n	8003224 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	2b00      	cmp	r3, #0
 8003218:	d004      	beq.n	8003224 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	0010      	movs	r0, r2
 8003222:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	228c      	movs	r2, #140	; 0x8c
 8003228:	589b      	ldr	r3, [r3, r2]
 800322a:	2194      	movs	r1, #148	; 0x94
 800322c:	187a      	adds	r2, r7, r1
 800322e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2240      	movs	r2, #64	; 0x40
 8003238:	4013      	ands	r3, r2
 800323a:	2b40      	cmp	r3, #64	; 0x40
 800323c:	d004      	beq.n	8003248 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800323e:	187b      	adds	r3, r7, r1
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2228      	movs	r2, #40	; 0x28
 8003244:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003246:	d047      	beq.n	80032d8 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	0018      	movs	r0, r3
 800324c:	f000 ffdc 	bl	8004208 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2240      	movs	r2, #64	; 0x40
 8003258:	4013      	ands	r3, r2
 800325a:	2b40      	cmp	r3, #64	; 0x40
 800325c:	d137      	bne.n	80032ce <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800325e:	f3ef 8310 	mrs	r3, PRIMASK
 8003262:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003264:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003266:	2090      	movs	r0, #144	; 0x90
 8003268:	183a      	adds	r2, r7, r0
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	2301      	movs	r3, #1
 800326e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003272:	f383 8810 	msr	PRIMASK, r3
}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2140      	movs	r1, #64	; 0x40
 8003284:	438a      	bics	r2, r1
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	183b      	adds	r3, r7, r0
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003290:	f383 8810 	msr	PRIMASK, r3
}
 8003294:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800329a:	2b00      	cmp	r3, #0
 800329c:	d012      	beq.n	80032c4 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032a2:	4a16      	ldr	r2, [pc, #88]	; (80032fc <HAL_UART_IRQHandler+0x2c0>)
 80032a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032aa:	0018      	movs	r0, r3
 80032ac:	f7fe f818 	bl	80012e0 <HAL_DMA_Abort_IT>
 80032b0:	1e03      	subs	r3, r0, #0
 80032b2:	d01a      	beq.n	80032ea <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032be:	0018      	movs	r0, r3
 80032c0:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c2:	e012      	b.n	80032ea <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	0018      	movs	r0, r3
 80032c8:	f000 f9da 	bl	8003680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032cc:	e00d      	b.n	80032ea <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f000 f9d5 	bl	8003680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d6:	e008      	b.n	80032ea <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	0018      	movs	r0, r3
 80032dc:	f000 f9d0 	bl	8003680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	228c      	movs	r2, #140	; 0x8c
 80032e4:	2100      	movs	r1, #0
 80032e6:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80032e8:	e1b1      	b.n	800364e <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ea:	46c0      	nop			; (mov r8, r8)
    return;
 80032ec:	e1af      	b.n	800364e <HAL_UART_IRQHandler+0x612>
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	0000080f 	.word	0x0000080f
 80032f4:	10000001 	.word	0x10000001
 80032f8:	04000120 	.word	0x04000120
 80032fc:	080042d5 	.word	0x080042d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003304:	2b01      	cmp	r3, #1
 8003306:	d000      	beq.n	800330a <HAL_UART_IRQHandler+0x2ce>
 8003308:	e135      	b.n	8003576 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800330a:	23a4      	movs	r3, #164	; 0xa4
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2210      	movs	r2, #16
 8003312:	4013      	ands	r3, r2
 8003314:	d100      	bne.n	8003318 <HAL_UART_IRQHandler+0x2dc>
 8003316:	e12e      	b.n	8003576 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003318:	23a0      	movs	r3, #160	; 0xa0
 800331a:	18fb      	adds	r3, r7, r3
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2210      	movs	r2, #16
 8003320:	4013      	ands	r3, r2
 8003322:	d100      	bne.n	8003326 <HAL_UART_IRQHandler+0x2ea>
 8003324:	e127      	b.n	8003576 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2210      	movs	r2, #16
 800332c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2240      	movs	r2, #64	; 0x40
 8003336:	4013      	ands	r3, r2
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d000      	beq.n	800333e <HAL_UART_IRQHandler+0x302>
 800333c:	e09e      	b.n	800347c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	217e      	movs	r1, #126	; 0x7e
 8003348:	187b      	adds	r3, r7, r1
 800334a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800334c:	187b      	adds	r3, r7, r1
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d100      	bne.n	8003356 <HAL_UART_IRQHandler+0x31a>
 8003354:	e17d      	b.n	8003652 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	225c      	movs	r2, #92	; 0x5c
 800335a:	5a9b      	ldrh	r3, [r3, r2]
 800335c:	187a      	adds	r2, r7, r1
 800335e:	8812      	ldrh	r2, [r2, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d300      	bcc.n	8003366 <HAL_UART_IRQHandler+0x32a>
 8003364:	e175      	b.n	8003652 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	187a      	adds	r2, r7, r1
 800336a:	215e      	movs	r1, #94	; 0x5e
 800336c:	8812      	ldrh	r2, [r2, #0]
 800336e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2220      	movs	r2, #32
 800337a:	4013      	ands	r3, r2
 800337c:	d16f      	bne.n	800345e <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800337e:	f3ef 8310 	mrs	r3, PRIMASK
 8003382:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003386:	67bb      	str	r3, [r7, #120]	; 0x78
 8003388:	2301      	movs	r3, #1
 800338a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338e:	f383 8810 	msr	PRIMASK, r3
}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	49b1      	ldr	r1, [pc, #708]	; (8003664 <HAL_UART_IRQHandler+0x628>)
 80033a0:	400a      	ands	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033aa:	f383 8810 	msr	PRIMASK, r3
}
 80033ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033b0:	f3ef 8310 	mrs	r3, PRIMASK
 80033b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80033b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b8:	677b      	str	r3, [r7, #116]	; 0x74
 80033ba:	2301      	movs	r3, #1
 80033bc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c0:	f383 8810 	msr	PRIMASK, r3
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2101      	movs	r1, #1
 80033d2:	438a      	bics	r2, r1
 80033d4:	609a      	str	r2, [r3, #8]
 80033d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033dc:	f383 8810 	msr	PRIMASK, r3
}
 80033e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e2:	f3ef 8310 	mrs	r3, PRIMASK
 80033e6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80033e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ea:	673b      	str	r3, [r7, #112]	; 0x70
 80033ec:	2301      	movs	r3, #1
 80033ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033f2:	f383 8810 	msr	PRIMASK, r3
}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2140      	movs	r1, #64	; 0x40
 8003404:	438a      	bics	r2, r1
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800340a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800340e:	f383 8810 	msr	PRIMASK, r3
}
 8003412:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2288      	movs	r2, #136	; 0x88
 8003418:	2120      	movs	r1, #32
 800341a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003422:	f3ef 8310 	mrs	r3, PRIMASK
 8003426:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003428:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800342a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800342c:	2301      	movs	r3, #1
 800342e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003430:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003432:	f383 8810 	msr	PRIMASK, r3
}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2110      	movs	r1, #16
 8003444:	438a      	bics	r2, r1
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800344a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800344e:	f383 8810 	msr	PRIMASK, r3
}
 8003452:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003458:	0018      	movs	r0, r3
 800345a:	f7fd fedf 	bl	800121c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	225c      	movs	r2, #92	; 0x5c
 8003462:	5a9a      	ldrh	r2, [r3, r2]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	215e      	movs	r1, #94	; 0x5e
 8003468:	5a5b      	ldrh	r3, [r3, r1]
 800346a:	b29b      	uxth	r3, r3
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	b29a      	uxth	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	0011      	movs	r1, r2
 8003474:	0018      	movs	r0, r3
 8003476:	f000 f90b 	bl	8003690 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800347a:	e0ea      	b.n	8003652 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	225c      	movs	r2, #92	; 0x5c
 8003480:	5a99      	ldrh	r1, [r3, r2]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	225e      	movs	r2, #94	; 0x5e
 8003486:	5a9b      	ldrh	r3, [r3, r2]
 8003488:	b29a      	uxth	r2, r3
 800348a:	208e      	movs	r0, #142	; 0x8e
 800348c:	183b      	adds	r3, r7, r0
 800348e:	1a8a      	subs	r2, r1, r2
 8003490:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	225e      	movs	r2, #94	; 0x5e
 8003496:	5a9b      	ldrh	r3, [r3, r2]
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d100      	bne.n	80034a0 <HAL_UART_IRQHandler+0x464>
 800349e:	e0da      	b.n	8003656 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 80034a0:	183b      	adds	r3, r7, r0
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d100      	bne.n	80034aa <HAL_UART_IRQHandler+0x46e>
 80034a8:	e0d5      	b.n	8003656 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034aa:	f3ef 8310 	mrs	r3, PRIMASK
 80034ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80034b0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034b2:	2488      	movs	r4, #136	; 0x88
 80034b4:	193a      	adds	r2, r7, r4
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	2301      	movs	r3, #1
 80034ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f383 8810 	msr	PRIMASK, r3
}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4966      	ldr	r1, [pc, #408]	; (8003668 <HAL_UART_IRQHandler+0x62c>)
 80034d0:	400a      	ands	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	193b      	adds	r3, r7, r4
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f383 8810 	msr	PRIMASK, r3
}
 80034e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e2:	f3ef 8310 	mrs	r3, PRIMASK
 80034e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80034e8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80034ea:	2484      	movs	r4, #132	; 0x84
 80034ec:	193a      	adds	r2, r7, r4
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	2301      	movs	r3, #1
 80034f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f383 8810 	msr	PRIMASK, r3
}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4959      	ldr	r1, [pc, #356]	; (800366c <HAL_UART_IRQHandler+0x630>)
 8003508:	400a      	ands	r2, r1
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	193b      	adds	r3, r7, r4
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	f383 8810 	msr	PRIMASK, r3
}
 8003518:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2288      	movs	r2, #136	; 0x88
 800351e:	2120      	movs	r1, #32
 8003520:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800352e:	f3ef 8310 	mrs	r3, PRIMASK
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003536:	2480      	movs	r4, #128	; 0x80
 8003538:	193a      	adds	r2, r7, r4
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	2301      	movs	r3, #1
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003542:	f383 8810 	msr	PRIMASK, r3
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2110      	movs	r1, #16
 8003554:	438a      	bics	r2, r1
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	193b      	adds	r3, r7, r4
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	f383 8810 	msr	PRIMASK, r3
}
 8003564:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003566:	183b      	adds	r3, r7, r0
 8003568:	881a      	ldrh	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	0011      	movs	r1, r2
 800356e:	0018      	movs	r0, r3
 8003570:	f000 f88e 	bl	8003690 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003574:	e06f      	b.n	8003656 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003576:	23a4      	movs	r3, #164	; 0xa4
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	2380      	movs	r3, #128	; 0x80
 800357e:	035b      	lsls	r3, r3, #13
 8003580:	4013      	ands	r3, r2
 8003582:	d010      	beq.n	80035a6 <HAL_UART_IRQHandler+0x56a>
 8003584:	239c      	movs	r3, #156	; 0x9c
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	03db      	lsls	r3, r3, #15
 800358e:	4013      	ands	r3, r2
 8003590:	d009      	beq.n	80035a6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2280      	movs	r2, #128	; 0x80
 8003598:	0352      	lsls	r2, r2, #13
 800359a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	0018      	movs	r0, r3
 80035a0:	f001 fcd4 	bl	8004f4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035a4:	e05a      	b.n	800365c <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80035a6:	23a4      	movs	r3, #164	; 0xa4
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2280      	movs	r2, #128	; 0x80
 80035ae:	4013      	ands	r3, r2
 80035b0:	d016      	beq.n	80035e0 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80035b2:	23a0      	movs	r3, #160	; 0xa0
 80035b4:	18fb      	adds	r3, r7, r3
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2280      	movs	r2, #128	; 0x80
 80035ba:	4013      	ands	r3, r2
 80035bc:	d106      	bne.n	80035cc <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80035be:	239c      	movs	r3, #156	; 0x9c
 80035c0:	18fb      	adds	r3, r7, r3
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	2380      	movs	r3, #128	; 0x80
 80035c6:	041b      	lsls	r3, r3, #16
 80035c8:	4013      	ands	r3, r2
 80035ca:	d009      	beq.n	80035e0 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d042      	beq.n	800365a <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	0010      	movs	r0, r2
 80035dc:	4798      	blx	r3
    }
    return;
 80035de:	e03c      	b.n	800365a <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035e0:	23a4      	movs	r3, #164	; 0xa4
 80035e2:	18fb      	adds	r3, r7, r3
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2240      	movs	r2, #64	; 0x40
 80035e8:	4013      	ands	r3, r2
 80035ea:	d00a      	beq.n	8003602 <HAL_UART_IRQHandler+0x5c6>
 80035ec:	23a0      	movs	r3, #160	; 0xa0
 80035ee:	18fb      	adds	r3, r7, r3
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2240      	movs	r2, #64	; 0x40
 80035f4:	4013      	ands	r3, r2
 80035f6:	d004      	beq.n	8003602 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	0018      	movs	r0, r3
 80035fc:	f001 f82a 	bl	8004654 <UART_EndTransmit_IT>
    return;
 8003600:	e02c      	b.n	800365c <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003602:	23a4      	movs	r3, #164	; 0xa4
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	041b      	lsls	r3, r3, #16
 800360c:	4013      	ands	r3, r2
 800360e:	d00b      	beq.n	8003628 <HAL_UART_IRQHandler+0x5ec>
 8003610:	23a0      	movs	r3, #160	; 0xa0
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	05db      	lsls	r3, r3, #23
 800361a:	4013      	ands	r3, r2
 800361c:	d004      	beq.n	8003628 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	0018      	movs	r0, r3
 8003622:	f001 fca3 	bl	8004f6c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003626:	e019      	b.n	800365c <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003628:	23a4      	movs	r3, #164	; 0xa4
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	2380      	movs	r3, #128	; 0x80
 8003630:	045b      	lsls	r3, r3, #17
 8003632:	4013      	ands	r3, r2
 8003634:	d012      	beq.n	800365c <HAL_UART_IRQHandler+0x620>
 8003636:	23a0      	movs	r3, #160	; 0xa0
 8003638:	18fb      	adds	r3, r7, r3
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	da0d      	bge.n	800365c <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	0018      	movs	r0, r3
 8003644:	f001 fc8a 	bl	8004f5c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003648:	e008      	b.n	800365c <HAL_UART_IRQHandler+0x620>
      return;
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	e006      	b.n	800365c <HAL_UART_IRQHandler+0x620>
    return;
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	e004      	b.n	800365c <HAL_UART_IRQHandler+0x620>
      return;
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	e002      	b.n	800365c <HAL_UART_IRQHandler+0x620>
      return;
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	e000      	b.n	800365c <HAL_UART_IRQHandler+0x620>
    return;
 800365a:	46c0      	nop			; (mov r8, r8)
  }
}
 800365c:	46bd      	mov	sp, r7
 800365e:	b02a      	add	sp, #168	; 0xa8
 8003660:	bdb0      	pop	{r4, r5, r7, pc}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	fffffeff 	.word	0xfffffeff
 8003668:	fffffedf 	.word	0xfffffedf
 800366c:	effffffe 	.word	0xeffffffe

08003670 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b002      	add	sp, #8
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	46bd      	mov	sp, r7
 800368c:	b002      	add	sp, #8
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	000a      	movs	r2, r1
 800369a:	1cbb      	adds	r3, r7, #2
 800369c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b002      	add	sp, #8
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036a8:	b5b0      	push	{r4, r5, r7, lr}
 80036aa:	b090      	sub	sp, #64	; 0x40
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036b0:	231a      	movs	r3, #26
 80036b2:	2220      	movs	r2, #32
 80036b4:	189b      	adds	r3, r3, r2
 80036b6:	19db      	adds	r3, r3, r7
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	431a      	orrs	r2, r3
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4aaf      	ldr	r2, [pc, #700]	; (8003998 <UART_SetConfig+0x2f0>)
 80036dc:	4013      	ands	r3, r2
 80036de:	0019      	movs	r1, r3
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e6:	430b      	orrs	r3, r1
 80036e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4aaa      	ldr	r2, [pc, #680]	; (800399c <UART_SetConfig+0x2f4>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	0018      	movs	r0, r3
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	68d9      	ldr	r1, [r3, #12]
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	0003      	movs	r3, r0
 8003700:	430b      	orrs	r3, r1
 8003702:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4aa4      	ldr	r2, [pc, #656]	; (80039a0 <UART_SetConfig+0x2f8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d004      	beq.n	800371e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800371a:	4313      	orrs	r3, r2
 800371c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	4a9f      	ldr	r2, [pc, #636]	; (80039a4 <UART_SetConfig+0x2fc>)
 8003726:	4013      	ands	r3, r2
 8003728:	0019      	movs	r1, r3
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003730:	430b      	orrs	r3, r1
 8003732:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	220f      	movs	r2, #15
 800373c:	4393      	bics	r3, r2
 800373e:	0018      	movs	r0, r3
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	0003      	movs	r3, r0
 800374a:	430b      	orrs	r3, r1
 800374c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a95      	ldr	r2, [pc, #596]	; (80039a8 <UART_SetConfig+0x300>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d131      	bne.n	80037bc <UART_SetConfig+0x114>
 8003758:	4b94      	ldr	r3, [pc, #592]	; (80039ac <UART_SetConfig+0x304>)
 800375a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375c:	2203      	movs	r2, #3
 800375e:	4013      	ands	r3, r2
 8003760:	2b03      	cmp	r3, #3
 8003762:	d01d      	beq.n	80037a0 <UART_SetConfig+0xf8>
 8003764:	d823      	bhi.n	80037ae <UART_SetConfig+0x106>
 8003766:	2b02      	cmp	r3, #2
 8003768:	d00c      	beq.n	8003784 <UART_SetConfig+0xdc>
 800376a:	d820      	bhi.n	80037ae <UART_SetConfig+0x106>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <UART_SetConfig+0xce>
 8003770:	2b01      	cmp	r3, #1
 8003772:	d00e      	beq.n	8003792 <UART_SetConfig+0xea>
 8003774:	e01b      	b.n	80037ae <UART_SetConfig+0x106>
 8003776:	231b      	movs	r3, #27
 8003778:	2220      	movs	r2, #32
 800377a:	189b      	adds	r3, r3, r2
 800377c:	19db      	adds	r3, r3, r7
 800377e:	2200      	movs	r2, #0
 8003780:	701a      	strb	r2, [r3, #0]
 8003782:	e0b4      	b.n	80038ee <UART_SetConfig+0x246>
 8003784:	231b      	movs	r3, #27
 8003786:	2220      	movs	r2, #32
 8003788:	189b      	adds	r3, r3, r2
 800378a:	19db      	adds	r3, r3, r7
 800378c:	2202      	movs	r2, #2
 800378e:	701a      	strb	r2, [r3, #0]
 8003790:	e0ad      	b.n	80038ee <UART_SetConfig+0x246>
 8003792:	231b      	movs	r3, #27
 8003794:	2220      	movs	r2, #32
 8003796:	189b      	adds	r3, r3, r2
 8003798:	19db      	adds	r3, r3, r7
 800379a:	2204      	movs	r2, #4
 800379c:	701a      	strb	r2, [r3, #0]
 800379e:	e0a6      	b.n	80038ee <UART_SetConfig+0x246>
 80037a0:	231b      	movs	r3, #27
 80037a2:	2220      	movs	r2, #32
 80037a4:	189b      	adds	r3, r3, r2
 80037a6:	19db      	adds	r3, r3, r7
 80037a8:	2208      	movs	r2, #8
 80037aa:	701a      	strb	r2, [r3, #0]
 80037ac:	e09f      	b.n	80038ee <UART_SetConfig+0x246>
 80037ae:	231b      	movs	r3, #27
 80037b0:	2220      	movs	r2, #32
 80037b2:	189b      	adds	r3, r3, r2
 80037b4:	19db      	adds	r3, r3, r7
 80037b6:	2210      	movs	r2, #16
 80037b8:	701a      	strb	r2, [r3, #0]
 80037ba:	e098      	b.n	80038ee <UART_SetConfig+0x246>
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a7b      	ldr	r2, [pc, #492]	; (80039b0 <UART_SetConfig+0x308>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d131      	bne.n	800382a <UART_SetConfig+0x182>
 80037c6:	4b79      	ldr	r3, [pc, #484]	; (80039ac <UART_SetConfig+0x304>)
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	220c      	movs	r2, #12
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b0c      	cmp	r3, #12
 80037d0:	d01d      	beq.n	800380e <UART_SetConfig+0x166>
 80037d2:	d823      	bhi.n	800381c <UART_SetConfig+0x174>
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d00c      	beq.n	80037f2 <UART_SetConfig+0x14a>
 80037d8:	d820      	bhi.n	800381c <UART_SetConfig+0x174>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <UART_SetConfig+0x13c>
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d00e      	beq.n	8003800 <UART_SetConfig+0x158>
 80037e2:	e01b      	b.n	800381c <UART_SetConfig+0x174>
 80037e4:	231b      	movs	r3, #27
 80037e6:	2220      	movs	r2, #32
 80037e8:	189b      	adds	r3, r3, r2
 80037ea:	19db      	adds	r3, r3, r7
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e07d      	b.n	80038ee <UART_SetConfig+0x246>
 80037f2:	231b      	movs	r3, #27
 80037f4:	2220      	movs	r2, #32
 80037f6:	189b      	adds	r3, r3, r2
 80037f8:	19db      	adds	r3, r3, r7
 80037fa:	2202      	movs	r2, #2
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	e076      	b.n	80038ee <UART_SetConfig+0x246>
 8003800:	231b      	movs	r3, #27
 8003802:	2220      	movs	r2, #32
 8003804:	189b      	adds	r3, r3, r2
 8003806:	19db      	adds	r3, r3, r7
 8003808:	2204      	movs	r2, #4
 800380a:	701a      	strb	r2, [r3, #0]
 800380c:	e06f      	b.n	80038ee <UART_SetConfig+0x246>
 800380e:	231b      	movs	r3, #27
 8003810:	2220      	movs	r2, #32
 8003812:	189b      	adds	r3, r3, r2
 8003814:	19db      	adds	r3, r3, r7
 8003816:	2208      	movs	r2, #8
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	e068      	b.n	80038ee <UART_SetConfig+0x246>
 800381c:	231b      	movs	r3, #27
 800381e:	2220      	movs	r2, #32
 8003820:	189b      	adds	r3, r3, r2
 8003822:	19db      	adds	r3, r3, r7
 8003824:	2210      	movs	r2, #16
 8003826:	701a      	strb	r2, [r3, #0]
 8003828:	e061      	b.n	80038ee <UART_SetConfig+0x246>
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a61      	ldr	r2, [pc, #388]	; (80039b4 <UART_SetConfig+0x30c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d106      	bne.n	8003842 <UART_SetConfig+0x19a>
 8003834:	231b      	movs	r3, #27
 8003836:	2220      	movs	r2, #32
 8003838:	189b      	adds	r3, r3, r2
 800383a:	19db      	adds	r3, r3, r7
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
 8003840:	e055      	b.n	80038ee <UART_SetConfig+0x246>
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a5c      	ldr	r2, [pc, #368]	; (80039b8 <UART_SetConfig+0x310>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d106      	bne.n	800385a <UART_SetConfig+0x1b2>
 800384c:	231b      	movs	r3, #27
 800384e:	2220      	movs	r2, #32
 8003850:	189b      	adds	r3, r3, r2
 8003852:	19db      	adds	r3, r3, r7
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
 8003858:	e049      	b.n	80038ee <UART_SetConfig+0x246>
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a50      	ldr	r2, [pc, #320]	; (80039a0 <UART_SetConfig+0x2f8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d13e      	bne.n	80038e2 <UART_SetConfig+0x23a>
 8003864:	4b51      	ldr	r3, [pc, #324]	; (80039ac <UART_SetConfig+0x304>)
 8003866:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003868:	23c0      	movs	r3, #192	; 0xc0
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	4013      	ands	r3, r2
 800386e:	22c0      	movs	r2, #192	; 0xc0
 8003870:	0112      	lsls	r2, r2, #4
 8003872:	4293      	cmp	r3, r2
 8003874:	d027      	beq.n	80038c6 <UART_SetConfig+0x21e>
 8003876:	22c0      	movs	r2, #192	; 0xc0
 8003878:	0112      	lsls	r2, r2, #4
 800387a:	4293      	cmp	r3, r2
 800387c:	d82a      	bhi.n	80038d4 <UART_SetConfig+0x22c>
 800387e:	2280      	movs	r2, #128	; 0x80
 8003880:	0112      	lsls	r2, r2, #4
 8003882:	4293      	cmp	r3, r2
 8003884:	d011      	beq.n	80038aa <UART_SetConfig+0x202>
 8003886:	2280      	movs	r2, #128	; 0x80
 8003888:	0112      	lsls	r2, r2, #4
 800388a:	4293      	cmp	r3, r2
 800388c:	d822      	bhi.n	80038d4 <UART_SetConfig+0x22c>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d004      	beq.n	800389c <UART_SetConfig+0x1f4>
 8003892:	2280      	movs	r2, #128	; 0x80
 8003894:	00d2      	lsls	r2, r2, #3
 8003896:	4293      	cmp	r3, r2
 8003898:	d00e      	beq.n	80038b8 <UART_SetConfig+0x210>
 800389a:	e01b      	b.n	80038d4 <UART_SetConfig+0x22c>
 800389c:	231b      	movs	r3, #27
 800389e:	2220      	movs	r2, #32
 80038a0:	189b      	adds	r3, r3, r2
 80038a2:	19db      	adds	r3, r3, r7
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
 80038a8:	e021      	b.n	80038ee <UART_SetConfig+0x246>
 80038aa:	231b      	movs	r3, #27
 80038ac:	2220      	movs	r2, #32
 80038ae:	189b      	adds	r3, r3, r2
 80038b0:	19db      	adds	r3, r3, r7
 80038b2:	2202      	movs	r2, #2
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	e01a      	b.n	80038ee <UART_SetConfig+0x246>
 80038b8:	231b      	movs	r3, #27
 80038ba:	2220      	movs	r2, #32
 80038bc:	189b      	adds	r3, r3, r2
 80038be:	19db      	adds	r3, r3, r7
 80038c0:	2204      	movs	r2, #4
 80038c2:	701a      	strb	r2, [r3, #0]
 80038c4:	e013      	b.n	80038ee <UART_SetConfig+0x246>
 80038c6:	231b      	movs	r3, #27
 80038c8:	2220      	movs	r2, #32
 80038ca:	189b      	adds	r3, r3, r2
 80038cc:	19db      	adds	r3, r3, r7
 80038ce:	2208      	movs	r2, #8
 80038d0:	701a      	strb	r2, [r3, #0]
 80038d2:	e00c      	b.n	80038ee <UART_SetConfig+0x246>
 80038d4:	231b      	movs	r3, #27
 80038d6:	2220      	movs	r2, #32
 80038d8:	189b      	adds	r3, r3, r2
 80038da:	19db      	adds	r3, r3, r7
 80038dc:	2210      	movs	r2, #16
 80038de:	701a      	strb	r2, [r3, #0]
 80038e0:	e005      	b.n	80038ee <UART_SetConfig+0x246>
 80038e2:	231b      	movs	r3, #27
 80038e4:	2220      	movs	r2, #32
 80038e6:	189b      	adds	r3, r3, r2
 80038e8:	19db      	adds	r3, r3, r7
 80038ea:	2210      	movs	r2, #16
 80038ec:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a2b      	ldr	r2, [pc, #172]	; (80039a0 <UART_SetConfig+0x2f8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d000      	beq.n	80038fa <UART_SetConfig+0x252>
 80038f8:	e0a9      	b.n	8003a4e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038fa:	231b      	movs	r3, #27
 80038fc:	2220      	movs	r2, #32
 80038fe:	189b      	adds	r3, r3, r2
 8003900:	19db      	adds	r3, r3, r7
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b08      	cmp	r3, #8
 8003906:	d015      	beq.n	8003934 <UART_SetConfig+0x28c>
 8003908:	dc18      	bgt.n	800393c <UART_SetConfig+0x294>
 800390a:	2b04      	cmp	r3, #4
 800390c:	d00d      	beq.n	800392a <UART_SetConfig+0x282>
 800390e:	dc15      	bgt.n	800393c <UART_SetConfig+0x294>
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <UART_SetConfig+0x272>
 8003914:	2b02      	cmp	r3, #2
 8003916:	d005      	beq.n	8003924 <UART_SetConfig+0x27c>
 8003918:	e010      	b.n	800393c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800391a:	f7fe fbc7 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 800391e:	0003      	movs	r3, r0
 8003920:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003922:	e014      	b.n	800394e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003924:	4b25      	ldr	r3, [pc, #148]	; (80039bc <UART_SetConfig+0x314>)
 8003926:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003928:	e011      	b.n	800394e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800392a:	f7fe fb33 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 800392e:	0003      	movs	r3, r0
 8003930:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003932:	e00c      	b.n	800394e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003934:	2380      	movs	r3, #128	; 0x80
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800393a:	e008      	b.n	800394e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003940:	231a      	movs	r3, #26
 8003942:	2220      	movs	r2, #32
 8003944:	189b      	adds	r3, r3, r2
 8003946:	19db      	adds	r3, r3, r7
 8003948:	2201      	movs	r2, #1
 800394a:	701a      	strb	r2, [r3, #0]
        break;
 800394c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800394e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003950:	2b00      	cmp	r3, #0
 8003952:	d100      	bne.n	8003956 <UART_SetConfig+0x2ae>
 8003954:	e14b      	b.n	8003bee <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800395a:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <UART_SetConfig+0x318>)
 800395c:	0052      	lsls	r2, r2, #1
 800395e:	5ad3      	ldrh	r3, [r2, r3]
 8003960:	0019      	movs	r1, r3
 8003962:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003964:	f7fc fbce 	bl	8000104 <__udivsi3>
 8003968:	0003      	movs	r3, r0
 800396a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	0013      	movs	r3, r2
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	189b      	adds	r3, r3, r2
 8003976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003978:	429a      	cmp	r2, r3
 800397a:	d305      	bcc.n	8003988 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003984:	429a      	cmp	r2, r3
 8003986:	d91d      	bls.n	80039c4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003988:	231a      	movs	r3, #26
 800398a:	2220      	movs	r2, #32
 800398c:	189b      	adds	r3, r3, r2
 800398e:	19db      	adds	r3, r3, r7
 8003990:	2201      	movs	r2, #1
 8003992:	701a      	strb	r2, [r3, #0]
 8003994:	e12b      	b.n	8003bee <UART_SetConfig+0x546>
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	cfff69f3 	.word	0xcfff69f3
 800399c:	ffffcfff 	.word	0xffffcfff
 80039a0:	40008000 	.word	0x40008000
 80039a4:	11fff4ff 	.word	0x11fff4ff
 80039a8:	40013800 	.word	0x40013800
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40004400 	.word	0x40004400
 80039b4:	40004800 	.word	0x40004800
 80039b8:	40004c00 	.word	0x40004c00
 80039bc:	00f42400 	.word	0x00f42400
 80039c0:	080052a4 	.word	0x080052a4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039d0:	4b92      	ldr	r3, [pc, #584]	; (8003c1c <UART_SetConfig+0x574>)
 80039d2:	0052      	lsls	r2, r2, #1
 80039d4:	5ad3      	ldrh	r3, [r2, r3]
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	69b8      	ldr	r0, [r7, #24]
 80039e2:	69f9      	ldr	r1, [r7, #28]
 80039e4:	f7fc fd04 	bl	80003f0 <__aeabi_uldivmod>
 80039e8:	0002      	movs	r2, r0
 80039ea:	000b      	movs	r3, r1
 80039ec:	0e11      	lsrs	r1, r2, #24
 80039ee:	021d      	lsls	r5, r3, #8
 80039f0:	430d      	orrs	r5, r1
 80039f2:	0214      	lsls	r4, r2, #8
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	085b      	lsrs	r3, r3, #1
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68b8      	ldr	r0, [r7, #8]
 8003a02:	68f9      	ldr	r1, [r7, #12]
 8003a04:	1900      	adds	r0, r0, r4
 8003a06:	4169      	adcs	r1, r5
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	607b      	str	r3, [r7, #4]
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f7fc fceb 	bl	80003f0 <__aeabi_uldivmod>
 8003a1a:	0002      	movs	r2, r0
 8003a1c:	000b      	movs	r3, r1
 8003a1e:	0013      	movs	r3, r2
 8003a20:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a24:	23c0      	movs	r3, #192	; 0xc0
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d309      	bcc.n	8003a40 <UART_SetConfig+0x398>
 8003a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	035b      	lsls	r3, r3, #13
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d204      	bcs.n	8003a40 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a3c:	60da      	str	r2, [r3, #12]
 8003a3e:	e0d6      	b.n	8003bee <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003a40:	231a      	movs	r3, #26
 8003a42:	2220      	movs	r2, #32
 8003a44:	189b      	adds	r3, r3, r2
 8003a46:	19db      	adds	r3, r3, r7
 8003a48:	2201      	movs	r2, #1
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	e0cf      	b.n	8003bee <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	2380      	movs	r3, #128	; 0x80
 8003a54:	021b      	lsls	r3, r3, #8
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d000      	beq.n	8003a5c <UART_SetConfig+0x3b4>
 8003a5a:	e070      	b.n	8003b3e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003a5c:	231b      	movs	r3, #27
 8003a5e:	2220      	movs	r2, #32
 8003a60:	189b      	adds	r3, r3, r2
 8003a62:	19db      	adds	r3, r3, r7
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d015      	beq.n	8003a96 <UART_SetConfig+0x3ee>
 8003a6a:	dc18      	bgt.n	8003a9e <UART_SetConfig+0x3f6>
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d00d      	beq.n	8003a8c <UART_SetConfig+0x3e4>
 8003a70:	dc15      	bgt.n	8003a9e <UART_SetConfig+0x3f6>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <UART_SetConfig+0x3d4>
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d005      	beq.n	8003a86 <UART_SetConfig+0x3de>
 8003a7a:	e010      	b.n	8003a9e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a7c:	f7fe fb16 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8003a80:	0003      	movs	r3, r0
 8003a82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a84:	e014      	b.n	8003ab0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a86:	4b66      	ldr	r3, [pc, #408]	; (8003c20 <UART_SetConfig+0x578>)
 8003a88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a8a:	e011      	b.n	8003ab0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a8c:	f7fe fa82 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8003a90:	0003      	movs	r3, r0
 8003a92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a94:	e00c      	b.n	8003ab0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a96:	2380      	movs	r3, #128	; 0x80
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a9c:	e008      	b.n	8003ab0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003aa2:	231a      	movs	r3, #26
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	189b      	adds	r3, r3, r2
 8003aa8:	19db      	adds	r3, r3, r7
 8003aaa:	2201      	movs	r2, #1
 8003aac:	701a      	strb	r2, [r3, #0]
        break;
 8003aae:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d100      	bne.n	8003ab8 <UART_SetConfig+0x410>
 8003ab6:	e09a      	b.n	8003bee <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003abc:	4b57      	ldr	r3, [pc, #348]	; (8003c1c <UART_SetConfig+0x574>)
 8003abe:	0052      	lsls	r2, r2, #1
 8003ac0:	5ad3      	ldrh	r3, [r2, r3]
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ac6:	f7fc fb1d 	bl	8000104 <__udivsi3>
 8003aca:	0003      	movs	r3, r0
 8003acc:	005a      	lsls	r2, r3, #1
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	085b      	lsrs	r3, r3, #1
 8003ad4:	18d2      	adds	r2, r2, r3
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	0019      	movs	r1, r3
 8003adc:	0010      	movs	r0, r2
 8003ade:	f7fc fb11 	bl	8000104 <__udivsi3>
 8003ae2:	0003      	movs	r3, r0
 8003ae4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	2b0f      	cmp	r3, #15
 8003aea:	d921      	bls.n	8003b30 <UART_SetConfig+0x488>
 8003aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aee:	2380      	movs	r3, #128	; 0x80
 8003af0:	025b      	lsls	r3, r3, #9
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d21c      	bcs.n	8003b30 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	200e      	movs	r0, #14
 8003afc:	2420      	movs	r4, #32
 8003afe:	1903      	adds	r3, r0, r4
 8003b00:	19db      	adds	r3, r3, r7
 8003b02:	210f      	movs	r1, #15
 8003b04:	438a      	bics	r2, r1
 8003b06:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	085b      	lsrs	r3, r3, #1
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2207      	movs	r2, #7
 8003b10:	4013      	ands	r3, r2
 8003b12:	b299      	uxth	r1, r3
 8003b14:	1903      	adds	r3, r0, r4
 8003b16:	19db      	adds	r3, r3, r7
 8003b18:	1902      	adds	r2, r0, r4
 8003b1a:	19d2      	adds	r2, r2, r7
 8003b1c:	8812      	ldrh	r2, [r2, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	1902      	adds	r2, r0, r4
 8003b28:	19d2      	adds	r2, r2, r7
 8003b2a:	8812      	ldrh	r2, [r2, #0]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	e05e      	b.n	8003bee <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003b30:	231a      	movs	r3, #26
 8003b32:	2220      	movs	r2, #32
 8003b34:	189b      	adds	r3, r3, r2
 8003b36:	19db      	adds	r3, r3, r7
 8003b38:	2201      	movs	r2, #1
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	e057      	b.n	8003bee <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b3e:	231b      	movs	r3, #27
 8003b40:	2220      	movs	r2, #32
 8003b42:	189b      	adds	r3, r3, r2
 8003b44:	19db      	adds	r3, r3, r7
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d015      	beq.n	8003b78 <UART_SetConfig+0x4d0>
 8003b4c:	dc18      	bgt.n	8003b80 <UART_SetConfig+0x4d8>
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d00d      	beq.n	8003b6e <UART_SetConfig+0x4c6>
 8003b52:	dc15      	bgt.n	8003b80 <UART_SetConfig+0x4d8>
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <UART_SetConfig+0x4b6>
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d005      	beq.n	8003b68 <UART_SetConfig+0x4c0>
 8003b5c:	e010      	b.n	8003b80 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b5e:	f7fe faa5 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8003b62:	0003      	movs	r3, r0
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b66:	e014      	b.n	8003b92 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b68:	4b2d      	ldr	r3, [pc, #180]	; (8003c20 <UART_SetConfig+0x578>)
 8003b6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b6c:	e011      	b.n	8003b92 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b6e:	f7fe fa11 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8003b72:	0003      	movs	r3, r0
 8003b74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b76:	e00c      	b.n	8003b92 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b78:	2380      	movs	r3, #128	; 0x80
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b7e:	e008      	b.n	8003b92 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003b84:	231a      	movs	r3, #26
 8003b86:	2220      	movs	r2, #32
 8003b88:	189b      	adds	r3, r3, r2
 8003b8a:	19db      	adds	r3, r3, r7
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	701a      	strb	r2, [r3, #0]
        break;
 8003b90:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d02a      	beq.n	8003bee <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b9c:	4b1f      	ldr	r3, [pc, #124]	; (8003c1c <UART_SetConfig+0x574>)
 8003b9e:	0052      	lsls	r2, r2, #1
 8003ba0:	5ad3      	ldrh	r3, [r2, r3]
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ba6:	f7fc faad 	bl	8000104 <__udivsi3>
 8003baa:	0003      	movs	r3, r0
 8003bac:	001a      	movs	r2, r3
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	085b      	lsrs	r3, r3, #1
 8003bb4:	18d2      	adds	r2, r2, r3
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	0019      	movs	r1, r3
 8003bbc:	0010      	movs	r0, r2
 8003bbe:	f7fc faa1 	bl	8000104 <__udivsi3>
 8003bc2:	0003      	movs	r3, r0
 8003bc4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	2b0f      	cmp	r3, #15
 8003bca:	d90a      	bls.n	8003be2 <UART_SetConfig+0x53a>
 8003bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	025b      	lsls	r3, r3, #9
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d205      	bcs.n	8003be2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60da      	str	r2, [r3, #12]
 8003be0:	e005      	b.n	8003bee <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003be2:	231a      	movs	r3, #26
 8003be4:	2220      	movs	r2, #32
 8003be6:	189b      	adds	r3, r3, r2
 8003be8:	19db      	adds	r3, r3, r7
 8003bea:	2201      	movs	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	226a      	movs	r2, #106	; 0x6a
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	2268      	movs	r2, #104	; 0x68
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	2200      	movs	r2, #0
 8003c02:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	2200      	movs	r2, #0
 8003c08:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003c0a:	231a      	movs	r3, #26
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	189b      	adds	r3, r3, r2
 8003c10:	19db      	adds	r3, r3, r7
 8003c12:	781b      	ldrb	r3, [r3, #0]
}
 8003c14:	0018      	movs	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b010      	add	sp, #64	; 0x40
 8003c1a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c1c:	080052a4 	.word	0x080052a4
 8003c20:	00f42400 	.word	0x00f42400

08003c24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	2201      	movs	r2, #1
 8003c32:	4013      	ands	r3, r2
 8003c34:	d00b      	beq.n	8003c4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	4a4a      	ldr	r2, [pc, #296]	; (8003d68 <UART_AdvFeatureConfig+0x144>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	0019      	movs	r1, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	2202      	movs	r2, #2
 8003c54:	4013      	ands	r3, r2
 8003c56:	d00b      	beq.n	8003c70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4a43      	ldr	r2, [pc, #268]	; (8003d6c <UART_AdvFeatureConfig+0x148>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	0019      	movs	r1, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	2204      	movs	r2, #4
 8003c76:	4013      	ands	r3, r2
 8003c78:	d00b      	beq.n	8003c92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	4a3b      	ldr	r2, [pc, #236]	; (8003d70 <UART_AdvFeatureConfig+0x14c>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	0019      	movs	r1, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c96:	2208      	movs	r2, #8
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d00b      	beq.n	8003cb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4a34      	ldr	r2, [pc, #208]	; (8003d74 <UART_AdvFeatureConfig+0x150>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb8:	2210      	movs	r2, #16
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d00b      	beq.n	8003cd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	4a2c      	ldr	r2, [pc, #176]	; (8003d78 <UART_AdvFeatureConfig+0x154>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	0019      	movs	r1, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cda:	2220      	movs	r2, #32
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d00b      	beq.n	8003cf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	4a25      	ldr	r2, [pc, #148]	; (8003d7c <UART_AdvFeatureConfig+0x158>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	0019      	movs	r1, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	2240      	movs	r2, #64	; 0x40
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d01d      	beq.n	8003d3e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4a1d      	ldr	r2, [pc, #116]	; (8003d80 <UART_AdvFeatureConfig+0x15c>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	0019      	movs	r1, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d1e:	2380      	movs	r3, #128	; 0x80
 8003d20:	035b      	lsls	r3, r3, #13
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d10b      	bne.n	8003d3e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	4a15      	ldr	r2, [pc, #84]	; (8003d84 <UART_AdvFeatureConfig+0x160>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	0019      	movs	r1, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d42:	2280      	movs	r2, #128	; 0x80
 8003d44:	4013      	ands	r3, r2
 8003d46:	d00b      	beq.n	8003d60 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4a0e      	ldr	r2, [pc, #56]	; (8003d88 <UART_AdvFeatureConfig+0x164>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	0019      	movs	r1, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	605a      	str	r2, [r3, #4]
  }
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b002      	add	sp, #8
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	fffdffff 	.word	0xfffdffff
 8003d6c:	fffeffff 	.word	0xfffeffff
 8003d70:	fffbffff 	.word	0xfffbffff
 8003d74:	ffff7fff 	.word	0xffff7fff
 8003d78:	ffffefff 	.word	0xffffefff
 8003d7c:	ffffdfff 	.word	0xffffdfff
 8003d80:	ffefffff 	.word	0xffefffff
 8003d84:	ff9fffff 	.word	0xff9fffff
 8003d88:	fff7ffff 	.word	0xfff7ffff

08003d8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	228c      	movs	r2, #140	; 0x8c
 8003d98:	2100      	movs	r1, #0
 8003d9a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d9c:	f7fd f940 	bl	8001020 <HAL_GetTick>
 8003da0:	0003      	movs	r3, r0
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2208      	movs	r2, #8
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d10c      	bne.n	8003dcc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2280      	movs	r2, #128	; 0x80
 8003db6:	0391      	lsls	r1, r2, #14
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <UART_CheckIdleState+0x90>)
 8003dbc:	9200      	str	r2, [sp, #0]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f000 f82e 	bl	8003e20 <UART_WaitOnFlagUntilTimeout>
 8003dc4:	1e03      	subs	r3, r0, #0
 8003dc6:	d001      	beq.n	8003dcc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e023      	b.n	8003e14 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d10c      	bne.n	8003df4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2280      	movs	r2, #128	; 0x80
 8003dde:	03d1      	lsls	r1, r2, #15
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	4a0e      	ldr	r2, [pc, #56]	; (8003e1c <UART_CheckIdleState+0x90>)
 8003de4:	9200      	str	r2, [sp, #0]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f000 f81a 	bl	8003e20 <UART_WaitOnFlagUntilTimeout>
 8003dec:	1e03      	subs	r3, r0, #0
 8003dee:	d001      	beq.n	8003df4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e00f      	b.n	8003e14 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2284      	movs	r2, #132	; 0x84
 8003df8:	2120      	movs	r1, #32
 8003dfa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2288      	movs	r2, #136	; 0x88
 8003e00:	2120      	movs	r1, #32
 8003e02:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2280      	movs	r2, #128	; 0x80
 8003e0e:	2100      	movs	r1, #0
 8003e10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b004      	add	sp, #16
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	01ffffff 	.word	0x01ffffff

08003e20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b094      	sub	sp, #80	; 0x50
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	1dfb      	adds	r3, r7, #7
 8003e2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e30:	e0a7      	b.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e34:	3301      	adds	r3, #1
 8003e36:	d100      	bne.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003e38:	e0a3      	b.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3a:	f7fd f8f1 	bl	8001020 <HAL_GetTick>
 8003e3e:	0002      	movs	r2, r0
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d302      	bcc.n	8003e50 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d13f      	bne.n	8003ed0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e50:	f3ef 8310 	mrs	r3, PRIMASK
 8003e54:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003e58:	647b      	str	r3, [r7, #68]	; 0x44
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e60:	f383 8810 	msr	PRIMASK, r3
}
 8003e64:	46c0      	nop			; (mov r8, r8)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	494e      	ldr	r1, [pc, #312]	; (8003fac <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003e72:	400a      	ands	r2, r1
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e78:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	f383 8810 	msr	PRIMASK, r3
}
 8003e80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e82:	f3ef 8310 	mrs	r3, PRIMASK
 8003e86:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e92:	f383 8810 	msr	PRIMASK, r3
}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	438a      	bics	r2, r1
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eae:	f383 8810 	msr	PRIMASK, r3
}
 8003eb2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2284      	movs	r2, #132	; 0x84
 8003eb8:	2120      	movs	r1, #32
 8003eba:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2288      	movs	r2, #136	; 0x88
 8003ec0:	2120      	movs	r1, #32
 8003ec2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2280      	movs	r2, #128	; 0x80
 8003ec8:	2100      	movs	r1, #0
 8003eca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e069      	b.n	8003fa4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2204      	movs	r2, #4
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d052      	beq.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69da      	ldr	r2, [r3, #28]
 8003ee2:	2380      	movs	r3, #128	; 0x80
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	401a      	ands	r2, r3
 8003ee8:	2380      	movs	r3, #128	; 0x80
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d148      	bne.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2280      	movs	r2, #128	; 0x80
 8003ef6:	0112      	lsls	r2, r2, #4
 8003ef8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003efa:	f3ef 8310 	mrs	r3, PRIMASK
 8003efe:	613b      	str	r3, [r7, #16]
  return(result);
 8003f00:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f04:	2301      	movs	r3, #1
 8003f06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f383 8810 	msr	PRIMASK, r3
}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4924      	ldr	r1, [pc, #144]	; (8003fac <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003f1c:	400a      	ands	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	f383 8810 	msr	PRIMASK, r3
}
 8003f2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f30:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f32:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f34:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f36:	2301      	movs	r3, #1
 8003f38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	f383 8810 	msr	PRIMASK, r3
}
 8003f40:	46c0      	nop			; (mov r8, r8)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	438a      	bics	r2, r1
 8003f50:	609a      	str	r2, [r3, #8]
 8003f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f54:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	f383 8810 	msr	PRIMASK, r3
}
 8003f5c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2284      	movs	r2, #132	; 0x84
 8003f62:	2120      	movs	r1, #32
 8003f64:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2288      	movs	r2, #136	; 0x88
 8003f6a:	2120      	movs	r1, #32
 8003f6c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	228c      	movs	r2, #140	; 0x8c
 8003f72:	2120      	movs	r1, #32
 8003f74:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2280      	movs	r2, #128	; 0x80
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e010      	b.n	8003fa4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	425a      	negs	r2, r3
 8003f92:	4153      	adcs	r3, r2
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	001a      	movs	r2, r3
 8003f98:	1dfb      	adds	r3, r7, #7
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d100      	bne.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0x182>
 8003fa0:	e747      	b.n	8003e32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b014      	add	sp, #80	; 0x50
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	fffffe5f 	.word	0xfffffe5f

08003fb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b098      	sub	sp, #96	; 0x60
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	1dbb      	adds	r3, r7, #6
 8003fbc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1dba      	adds	r2, r7, #6
 8003fc8:	215c      	movs	r1, #92	; 0x5c
 8003fca:	8812      	ldrh	r2, [r2, #0]
 8003fcc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1dba      	adds	r2, r7, #6
 8003fd2:	215e      	movs	r1, #94	; 0x5e
 8003fd4:	8812      	ldrh	r2, [r2, #0]
 8003fd6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	2380      	movs	r3, #128	; 0x80
 8003fe4:	015b      	lsls	r3, r3, #5
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d10d      	bne.n	8004006 <UART_Start_Receive_IT+0x56>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d104      	bne.n	8003ffc <UART_Start_Receive_IT+0x4c>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2260      	movs	r2, #96	; 0x60
 8003ff6:	497f      	ldr	r1, [pc, #508]	; (80041f4 <UART_Start_Receive_IT+0x244>)
 8003ff8:	5299      	strh	r1, [r3, r2]
 8003ffa:	e02e      	b.n	800405a <UART_Start_Receive_IT+0xaa>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2260      	movs	r2, #96	; 0x60
 8004000:	21ff      	movs	r1, #255	; 0xff
 8004002:	5299      	strh	r1, [r3, r2]
 8004004:	e029      	b.n	800405a <UART_Start_Receive_IT+0xaa>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10d      	bne.n	800402a <UART_Start_Receive_IT+0x7a>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d104      	bne.n	8004020 <UART_Start_Receive_IT+0x70>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2260      	movs	r2, #96	; 0x60
 800401a:	21ff      	movs	r1, #255	; 0xff
 800401c:	5299      	strh	r1, [r3, r2]
 800401e:	e01c      	b.n	800405a <UART_Start_Receive_IT+0xaa>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2260      	movs	r2, #96	; 0x60
 8004024:	217f      	movs	r1, #127	; 0x7f
 8004026:	5299      	strh	r1, [r3, r2]
 8004028:	e017      	b.n	800405a <UART_Start_Receive_IT+0xaa>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	2380      	movs	r3, #128	; 0x80
 8004030:	055b      	lsls	r3, r3, #21
 8004032:	429a      	cmp	r2, r3
 8004034:	d10d      	bne.n	8004052 <UART_Start_Receive_IT+0xa2>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d104      	bne.n	8004048 <UART_Start_Receive_IT+0x98>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2260      	movs	r2, #96	; 0x60
 8004042:	217f      	movs	r1, #127	; 0x7f
 8004044:	5299      	strh	r1, [r3, r2]
 8004046:	e008      	b.n	800405a <UART_Start_Receive_IT+0xaa>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2260      	movs	r2, #96	; 0x60
 800404c:	213f      	movs	r1, #63	; 0x3f
 800404e:	5299      	strh	r1, [r3, r2]
 8004050:	e003      	b.n	800405a <UART_Start_Receive_IT+0xaa>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2260      	movs	r2, #96	; 0x60
 8004056:	2100      	movs	r1, #0
 8004058:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	228c      	movs	r2, #140	; 0x8c
 800405e:	2100      	movs	r1, #0
 8004060:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2288      	movs	r2, #136	; 0x88
 8004066:	2122      	movs	r1, #34	; 0x22
 8004068:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800406a:	f3ef 8310 	mrs	r3, PRIMASK
 800406e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8004070:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004072:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004074:	2301      	movs	r3, #1
 8004076:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800407a:	f383 8810 	msr	PRIMASK, r3
}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2101      	movs	r1, #1
 800408c:	430a      	orrs	r2, r1
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004092:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004096:	f383 8810 	msr	PRIMASK, r3
}
 800409a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80040a0:	2380      	movs	r3, #128	; 0x80
 80040a2:	059b      	lsls	r3, r3, #22
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d154      	bne.n	8004152 <UART_Start_Receive_IT+0x1a2>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2268      	movs	r2, #104	; 0x68
 80040ac:	5a9b      	ldrh	r3, [r3, r2]
 80040ae:	1dba      	adds	r2, r7, #6
 80040b0:	8812      	ldrh	r2, [r2, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d34d      	bcc.n	8004152 <UART_Start_Receive_IT+0x1a2>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	015b      	lsls	r3, r3, #5
 80040be:	429a      	cmp	r2, r3
 80040c0:	d107      	bne.n	80040d2 <UART_Start_Receive_IT+0x122>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d103      	bne.n	80040d2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4a4a      	ldr	r2, [pc, #296]	; (80041f8 <UART_Start_Receive_IT+0x248>)
 80040ce:	671a      	str	r2, [r3, #112]	; 0x70
 80040d0:	e002      	b.n	80040d8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4a49      	ldr	r2, [pc, #292]	; (80041fc <UART_Start_Receive_IT+0x24c>)
 80040d6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2280      	movs	r2, #128	; 0x80
 80040dc:	2100      	movs	r1, #0
 80040de:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d019      	beq.n	800411c <UART_Start_Receive_IT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e8:	f3ef 8310 	mrs	r3, PRIMASK
 80040ec:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80040ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80040f2:	2301      	movs	r3, #1
 80040f4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	f383 8810 	msr	PRIMASK, r3
}
 80040fc:	46c0      	nop			; (mov r8, r8)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2180      	movs	r1, #128	; 0x80
 800410a:	0049      	lsls	r1, r1, #1
 800410c:	430a      	orrs	r2, r1
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004112:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004116:	f383 8810 	msr	PRIMASK, r3
}
 800411a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800411c:	f3ef 8310 	mrs	r3, PRIMASK
 8004120:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004124:	657b      	str	r3, [r7, #84]	; 0x54
 8004126:	2301      	movs	r3, #1
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412c:	f383 8810 	msr	PRIMASK, r3
}
 8004130:	46c0      	nop			; (mov r8, r8)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2180      	movs	r1, #128	; 0x80
 800413e:	0549      	lsls	r1, r1, #21
 8004140:	430a      	orrs	r2, r1
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004146:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	f383 8810 	msr	PRIMASK, r3
}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	e04b      	b.n	80041ea <UART_Start_Receive_IT+0x23a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	2380      	movs	r3, #128	; 0x80
 8004158:	015b      	lsls	r3, r3, #5
 800415a:	429a      	cmp	r2, r3
 800415c:	d107      	bne.n	800416e <UART_Start_Receive_IT+0x1be>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d103      	bne.n	800416e <UART_Start_Receive_IT+0x1be>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4a25      	ldr	r2, [pc, #148]	; (8004200 <UART_Start_Receive_IT+0x250>)
 800416a:	671a      	str	r2, [r3, #112]	; 0x70
 800416c:	e002      	b.n	8004174 <UART_Start_Receive_IT+0x1c4>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4a24      	ldr	r2, [pc, #144]	; (8004204 <UART_Start_Receive_IT+0x254>)
 8004172:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2280      	movs	r2, #128	; 0x80
 8004178:	2100      	movs	r1, #0
 800417a:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d019      	beq.n	80041b8 <UART_Start_Receive_IT+0x208>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004184:	f3ef 8310 	mrs	r3, PRIMASK
 8004188:	61fb      	str	r3, [r7, #28]
  return(result);
 800418a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800418c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800418e:	2301      	movs	r3, #1
 8004190:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	f383 8810 	msr	PRIMASK, r3
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2190      	movs	r1, #144	; 0x90
 80041a6:	0049      	lsls	r1, r1, #1
 80041a8:	430a      	orrs	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	f383 8810 	msr	PRIMASK, r3
}
 80041b6:	e018      	b.n	80041ea <UART_Start_Receive_IT+0x23a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b8:	f3ef 8310 	mrs	r3, PRIMASK
 80041bc:	613b      	str	r3, [r7, #16]
  return(result);
 80041be:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80041c0:	653b      	str	r3, [r7, #80]	; 0x50
 80041c2:	2301      	movs	r3, #1
 80041c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f383 8810 	msr	PRIMASK, r3
}
 80041cc:	46c0      	nop			; (mov r8, r8)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2120      	movs	r1, #32
 80041da:	430a      	orrs	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	f383 8810 	msr	PRIMASK, r3
}
 80041e8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	0018      	movs	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b018      	add	sp, #96	; 0x60
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	000001ff 	.word	0x000001ff
 80041f8:	08004c69 	.word	0x08004c69
 80041fc:	08004985 	.word	0x08004985
 8004200:	08004819 	.word	0x08004819
 8004204:	080046ad 	.word	0x080046ad

08004208 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08e      	sub	sp, #56	; 0x38
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004210:	f3ef 8310 	mrs	r3, PRIMASK
 8004214:	617b      	str	r3, [r7, #20]
  return(result);
 8004216:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004218:	637b      	str	r3, [r7, #52]	; 0x34
 800421a:	2301      	movs	r3, #1
 800421c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	f383 8810 	msr	PRIMASK, r3
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4926      	ldr	r1, [pc, #152]	; (80042cc <UART_EndRxTransfer+0xc4>)
 8004232:	400a      	ands	r2, r1
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004238:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f383 8810 	msr	PRIMASK, r3
}
 8004240:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004242:	f3ef 8310 	mrs	r3, PRIMASK
 8004246:	623b      	str	r3, [r7, #32]
  return(result);
 8004248:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800424a:	633b      	str	r3, [r7, #48]	; 0x30
 800424c:	2301      	movs	r3, #1
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	f383 8810 	msr	PRIMASK, r3
}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	491b      	ldr	r1, [pc, #108]	; (80042d0 <UART_EndRxTransfer+0xc8>)
 8004264:	400a      	ands	r2, r1
 8004266:	609a      	str	r2, [r3, #8]
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426e:	f383 8810 	msr	PRIMASK, r3
}
 8004272:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004278:	2b01      	cmp	r3, #1
 800427a:	d118      	bne.n	80042ae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800427c:	f3ef 8310 	mrs	r3, PRIMASK
 8004280:	60bb      	str	r3, [r7, #8]
  return(result);
 8004282:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004286:	2301      	movs	r3, #1
 8004288:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f383 8810 	msr	PRIMASK, r3
}
 8004290:	46c0      	nop			; (mov r8, r8)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2110      	movs	r1, #16
 800429e:	438a      	bics	r2, r1
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f383 8810 	msr	PRIMASK, r3
}
 80042ac:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2288      	movs	r2, #136	; 0x88
 80042b2:	2120      	movs	r1, #32
 80042b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	671a      	str	r2, [r3, #112]	; 0x70
}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	46bd      	mov	sp, r7
 80042c6:	b00e      	add	sp, #56	; 0x38
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	fffffedf 	.word	0xfffffedf
 80042d0:	effffffe 	.word	0xeffffffe

080042d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	225e      	movs	r2, #94	; 0x5e
 80042e6:	2100      	movs	r1, #0
 80042e8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2256      	movs	r2, #86	; 0x56
 80042ee:	2100      	movs	r1, #0
 80042f0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	0018      	movs	r0, r3
 80042f6:	f7ff f9c3 	bl	8003680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b004      	add	sp, #16
 8004300:	bd80      	pop	{r7, pc}

08004302 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b08a      	sub	sp, #40	; 0x28
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2284      	movs	r2, #132	; 0x84
 800430e:	589b      	ldr	r3, [r3, r2]
 8004310:	2b21      	cmp	r3, #33	; 0x21
 8004312:	d14c      	bne.n	80043ae <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2256      	movs	r2, #86	; 0x56
 8004318:	5a9b      	ldrh	r3, [r3, r2]
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d132      	bne.n	8004386 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004320:	f3ef 8310 	mrs	r3, PRIMASK
 8004324:	60bb      	str	r3, [r7, #8]
  return(result);
 8004326:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
 800432a:	2301      	movs	r3, #1
 800432c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f383 8810 	msr	PRIMASK, r3
}
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2180      	movs	r1, #128	; 0x80
 8004342:	438a      	bics	r2, r1
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f383 8810 	msr	PRIMASK, r3
}
 8004350:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004352:	f3ef 8310 	mrs	r3, PRIMASK
 8004356:	617b      	str	r3, [r7, #20]
  return(result);
 8004358:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800435a:	623b      	str	r3, [r7, #32]
 800435c:	2301      	movs	r3, #1
 800435e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	f383 8810 	msr	PRIMASK, r3
}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2140      	movs	r1, #64	; 0x40
 8004374:	430a      	orrs	r2, r1
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f383 8810 	msr	PRIMASK, r3
}
 8004382:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004384:	e013      	b.n	80043ae <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438a:	781a      	ldrb	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2256      	movs	r2, #86	; 0x56
 80043a0:	5a9b      	ldrh	r3, [r3, r2]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b299      	uxth	r1, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2256      	movs	r2, #86	; 0x56
 80043ac:	5299      	strh	r1, [r3, r2]
}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b00a      	add	sp, #40	; 0x28
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b08c      	sub	sp, #48	; 0x30
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2284      	movs	r2, #132	; 0x84
 80043c2:	589b      	ldr	r3, [r3, r2]
 80043c4:	2b21      	cmp	r3, #33	; 0x21
 80043c6:	d151      	bne.n	800446c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2256      	movs	r2, #86	; 0x56
 80043cc:	5a9b      	ldrh	r3, [r3, r2]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d132      	bne.n	800443a <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d4:	f3ef 8310 	mrs	r3, PRIMASK
 80043d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80043da:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043de:	2301      	movs	r3, #1
 80043e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f383 8810 	msr	PRIMASK, r3
}
 80043e8:	46c0      	nop			; (mov r8, r8)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2180      	movs	r1, #128	; 0x80
 80043f6:	438a      	bics	r2, r1
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f383 8810 	msr	PRIMASK, r3
}
 8004404:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004406:	f3ef 8310 	mrs	r3, PRIMASK
 800440a:	61bb      	str	r3, [r7, #24]
  return(result);
 800440c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
 8004410:	2301      	movs	r3, #1
 8004412:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f383 8810 	msr	PRIMASK, r3
}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2140      	movs	r1, #64	; 0x40
 8004428:	430a      	orrs	r2, r1
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	f383 8810 	msr	PRIMASK, r3
}
 8004436:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004438:	e018      	b.n	800446c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800443e:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	001a      	movs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	05d2      	lsls	r2, r2, #23
 800444c:	0dd2      	lsrs	r2, r2, #23
 800444e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004454:	1c9a      	adds	r2, r3, #2
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2256      	movs	r2, #86	; 0x56
 800445e:	5a9b      	ldrh	r3, [r3, r2]
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b299      	uxth	r1, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2256      	movs	r2, #86	; 0x56
 800446a:	5299      	strh	r1, [r3, r2]
}
 800446c:	46c0      	nop			; (mov r8, r8)
 800446e:	46bd      	mov	sp, r7
 8004470:	b00c      	add	sp, #48	; 0x30
 8004472:	bd80      	pop	{r7, pc}

08004474 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08c      	sub	sp, #48	; 0x30
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2284      	movs	r2, #132	; 0x84
 8004480:	589b      	ldr	r3, [r3, r2]
 8004482:	2b21      	cmp	r3, #33	; 0x21
 8004484:	d165      	bne.n	8004552 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004486:	232e      	movs	r3, #46	; 0x2e
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	216a      	movs	r1, #106	; 0x6a
 800448e:	5a52      	ldrh	r2, [r2, r1]
 8004490:	801a      	strh	r2, [r3, #0]
 8004492:	e059      	b.n	8004548 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2256      	movs	r2, #86	; 0x56
 8004498:	5a9b      	ldrh	r3, [r3, r2]
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d133      	bne.n	8004508 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a0:	f3ef 8310 	mrs	r3, PRIMASK
 80044a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80044a6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80044a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044aa:	2301      	movs	r3, #1
 80044ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f383 8810 	msr	PRIMASK, r3
}
 80044b4:	46c0      	nop			; (mov r8, r8)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4926      	ldr	r1, [pc, #152]	; (800455c <UART_TxISR_8BIT_FIFOEN+0xe8>)
 80044c2:	400a      	ands	r2, r1
 80044c4:	609a      	str	r2, [r3, #8]
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f383 8810 	msr	PRIMASK, r3
}
 80044d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d2:	f3ef 8310 	mrs	r3, PRIMASK
 80044d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80044d8:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
 80044dc:	2301      	movs	r3, #1
 80044de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f383 8810 	msr	PRIMASK, r3
}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2140      	movs	r1, #64	; 0x40
 80044f4:	430a      	orrs	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	f383 8810 	msr	PRIMASK, r3
}
 8004502:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8004504:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8004506:	e024      	b.n	8004552 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	2280      	movs	r2, #128	; 0x80
 8004510:	4013      	ands	r3, r2
 8004512:	d013      	beq.n	800453c <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2256      	movs	r2, #86	; 0x56
 800452e:	5a9b      	ldrh	r3, [r3, r2]
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b299      	uxth	r1, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2256      	movs	r2, #86	; 0x56
 800453a:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800453c:	212e      	movs	r1, #46	; 0x2e
 800453e:	187b      	adds	r3, r7, r1
 8004540:	881a      	ldrh	r2, [r3, #0]
 8004542:	187b      	adds	r3, r7, r1
 8004544:	3a01      	subs	r2, #1
 8004546:	801a      	strh	r2, [r3, #0]
 8004548:	232e      	movs	r3, #46	; 0x2e
 800454a:	18fb      	adds	r3, r7, r3
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1a0      	bne.n	8004494 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	46bd      	mov	sp, r7
 8004556:	b00c      	add	sp, #48	; 0x30
 8004558:	bd80      	pop	{r7, pc}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	ff7fffff 	.word	0xff7fffff

08004560 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08c      	sub	sp, #48	; 0x30
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2284      	movs	r2, #132	; 0x84
 800456c:	589b      	ldr	r3, [r3, r2]
 800456e:	2b21      	cmp	r3, #33	; 0x21
 8004570:	d16a      	bne.n	8004648 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004572:	232e      	movs	r3, #46	; 0x2e
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	216a      	movs	r1, #106	; 0x6a
 800457a:	5a52      	ldrh	r2, [r2, r1]
 800457c:	801a      	strh	r2, [r3, #0]
 800457e:	e05e      	b.n	800463e <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2256      	movs	r2, #86	; 0x56
 8004584:	5a9b      	ldrh	r3, [r3, r2]
 8004586:	b29b      	uxth	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	d133      	bne.n	80045f4 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800458c:	f3ef 8310 	mrs	r3, PRIMASK
 8004590:	60bb      	str	r3, [r7, #8]
  return(result);
 8004592:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
 8004596:	2301      	movs	r3, #1
 8004598:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f383 8810 	msr	PRIMASK, r3
}
 80045a0:	46c0      	nop			; (mov r8, r8)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4928      	ldr	r1, [pc, #160]	; (8004650 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 80045ae:	400a      	ands	r2, r1
 80045b0:	609a      	str	r2, [r3, #8]
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f383 8810 	msr	PRIMASK, r3
}
 80045bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045be:	f3ef 8310 	mrs	r3, PRIMASK
 80045c2:	617b      	str	r3, [r7, #20]
  return(result);
 80045c4:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045c6:	623b      	str	r3, [r7, #32]
 80045c8:	2301      	movs	r3, #1
 80045ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f383 8810 	msr	PRIMASK, r3
}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2140      	movs	r1, #64	; 0x40
 80045e0:	430a      	orrs	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f383 8810 	msr	PRIMASK, r3
}
 80045ee:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 80045f0:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80045f2:	e029      	b.n	8004648 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	2280      	movs	r2, #128	; 0x80
 80045fc:	4013      	ands	r3, r2
 80045fe:	d018      	beq.n	8004632 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004604:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	001a      	movs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	05d2      	lsls	r2, r2, #23
 8004612:	0dd2      	lsrs	r2, r2, #23
 8004614:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461a:	1c9a      	adds	r2, r3, #2
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2256      	movs	r2, #86	; 0x56
 8004624:	5a9b      	ldrh	r3, [r3, r2]
 8004626:	b29b      	uxth	r3, r3
 8004628:	3b01      	subs	r3, #1
 800462a:	b299      	uxth	r1, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2256      	movs	r2, #86	; 0x56
 8004630:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004632:	212e      	movs	r1, #46	; 0x2e
 8004634:	187b      	adds	r3, r7, r1
 8004636:	881a      	ldrh	r2, [r3, #0]
 8004638:	187b      	adds	r3, r7, r1
 800463a:	3a01      	subs	r2, #1
 800463c:	801a      	strh	r2, [r3, #0]
 800463e:	232e      	movs	r3, #46	; 0x2e
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d19b      	bne.n	8004580 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8004648:	46c0      	nop			; (mov r8, r8)
 800464a:	46bd      	mov	sp, r7
 800464c:	b00c      	add	sp, #48	; 0x30
 800464e:	bd80      	pop	{r7, pc}
 8004650:	ff7fffff 	.word	0xff7fffff

08004654 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800465c:	f3ef 8310 	mrs	r3, PRIMASK
 8004660:	60bb      	str	r3, [r7, #8]
  return(result);
 8004662:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	2301      	movs	r3, #1
 8004668:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f383 8810 	msr	PRIMASK, r3
}
 8004670:	46c0      	nop			; (mov r8, r8)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2140      	movs	r1, #64	; 0x40
 800467e:	438a      	bics	r2, r1
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f383 8810 	msr	PRIMASK, r3
}
 800468c:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2284      	movs	r2, #132	; 0x84
 8004692:	2120      	movs	r1, #32
 8004694:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	0018      	movs	r0, r3
 80046a0:	f7fe ffe6 	bl	8003670 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046a4:	46c0      	nop			; (mov r8, r8)
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b006      	add	sp, #24
 80046aa:	bd80      	pop	{r7, pc}

080046ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b090      	sub	sp, #64	; 0x40
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80046b4:	203e      	movs	r0, #62	; 0x3e
 80046b6:	183b      	adds	r3, r7, r0
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	2160      	movs	r1, #96	; 0x60
 80046bc:	5a52      	ldrh	r2, [r2, r1]
 80046be:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2288      	movs	r2, #136	; 0x88
 80046c4:	589b      	ldr	r3, [r3, r2]
 80046c6:	2b22      	cmp	r3, #34	; 0x22
 80046c8:	d000      	beq.n	80046cc <UART_RxISR_8BIT+0x20>
 80046ca:	e097      	b.n	80047fc <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046d2:	213c      	movs	r1, #60	; 0x3c
 80046d4:	187b      	adds	r3, r7, r1
 80046d6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80046d8:	187b      	adds	r3, r7, r1
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	183b      	adds	r3, r7, r0
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	b2d9      	uxtb	r1, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e8:	400a      	ands	r2, r1
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	225e      	movs	r2, #94	; 0x5e
 80046fc:	5a9b      	ldrh	r3, [r3, r2]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b299      	uxth	r1, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	225e      	movs	r2, #94	; 0x5e
 8004708:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	225e      	movs	r2, #94	; 0x5e
 800470e:	5a9b      	ldrh	r3, [r3, r2]
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d000      	beq.n	8004718 <UART_RxISR_8BIT+0x6c>
 8004716:	e079      	b.n	800480c <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004718:	f3ef 8310 	mrs	r3, PRIMASK
 800471c:	61bb      	str	r3, [r7, #24]
  return(result);
 800471e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004720:	63bb      	str	r3, [r7, #56]	; 0x38
 8004722:	2301      	movs	r3, #1
 8004724:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f383 8810 	msr	PRIMASK, r3
}
 800472c:	46c0      	nop			; (mov r8, r8)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4936      	ldr	r1, [pc, #216]	; (8004814 <UART_RxISR_8BIT+0x168>)
 800473a:	400a      	ands	r2, r1
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004740:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	f383 8810 	msr	PRIMASK, r3
}
 8004748:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800474a:	f3ef 8310 	mrs	r3, PRIMASK
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004752:	637b      	str	r3, [r7, #52]	; 0x34
 8004754:	2301      	movs	r3, #1
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	f383 8810 	msr	PRIMASK, r3
}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2101      	movs	r1, #1
 800476c:	438a      	bics	r2, r1
 800476e:	609a      	str	r2, [r3, #8]
 8004770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004772:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004776:	f383 8810 	msr	PRIMASK, r3
}
 800477a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2288      	movs	r2, #136	; 0x88
 8004780:	2120      	movs	r1, #32
 8004782:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800478e:	2b01      	cmp	r3, #1
 8004790:	d12f      	bne.n	80047f2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004798:	f3ef 8310 	mrs	r3, PRIMASK
 800479c:	60fb      	str	r3, [r7, #12]
  return(result);
 800479e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a0:	633b      	str	r3, [r7, #48]	; 0x30
 80047a2:	2301      	movs	r3, #1
 80047a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f383 8810 	msr	PRIMASK, r3
}
 80047ac:	46c0      	nop			; (mov r8, r8)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2110      	movs	r1, #16
 80047ba:	438a      	bics	r2, r1
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f383 8810 	msr	PRIMASK, r3
}
 80047c8:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	2210      	movs	r2, #16
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b10      	cmp	r3, #16
 80047d6:	d103      	bne.n	80047e0 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2210      	movs	r2, #16
 80047de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	225c      	movs	r2, #92	; 0x5c
 80047e4:	5a9a      	ldrh	r2, [r3, r2]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	0011      	movs	r1, r2
 80047ea:	0018      	movs	r0, r3
 80047ec:	f7fe ff50 	bl	8003690 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047f0:	e00c      	b.n	800480c <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	0018      	movs	r0, r3
 80047f6:	f7fb ff43 	bl	8000680 <HAL_UART_RxCpltCallback>
}
 80047fa:	e007      	b.n	800480c <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2108      	movs	r1, #8
 8004808:	430a      	orrs	r2, r1
 800480a:	619a      	str	r2, [r3, #24]
}
 800480c:	46c0      	nop			; (mov r8, r8)
 800480e:	46bd      	mov	sp, r7
 8004810:	b010      	add	sp, #64	; 0x40
 8004812:	bd80      	pop	{r7, pc}
 8004814:	fffffedf 	.word	0xfffffedf

08004818 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b090      	sub	sp, #64	; 0x40
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004820:	203e      	movs	r0, #62	; 0x3e
 8004822:	183b      	adds	r3, r7, r0
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	2160      	movs	r1, #96	; 0x60
 8004828:	5a52      	ldrh	r2, [r2, r1]
 800482a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2288      	movs	r2, #136	; 0x88
 8004830:	589b      	ldr	r3, [r3, r2]
 8004832:	2b22      	cmp	r3, #34	; 0x22
 8004834:	d000      	beq.n	8004838 <UART_RxISR_16BIT+0x20>
 8004836:	e097      	b.n	8004968 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800483e:	213c      	movs	r1, #60	; 0x3c
 8004840:	187b      	adds	r3, r7, r1
 8004842:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004848:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800484a:	187b      	adds	r3, r7, r1
 800484c:	183a      	adds	r2, r7, r0
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	8812      	ldrh	r2, [r2, #0]
 8004852:	4013      	ands	r3, r2
 8004854:	b29a      	uxth	r2, r3
 8004856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004858:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485e:	1c9a      	adds	r2, r3, #2
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	225e      	movs	r2, #94	; 0x5e
 8004868:	5a9b      	ldrh	r3, [r3, r2]
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b299      	uxth	r1, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	225e      	movs	r2, #94	; 0x5e
 8004874:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	225e      	movs	r2, #94	; 0x5e
 800487a:	5a9b      	ldrh	r3, [r3, r2]
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d000      	beq.n	8004884 <UART_RxISR_16BIT+0x6c>
 8004882:	e079      	b.n	8004978 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004884:	f3ef 8310 	mrs	r3, PRIMASK
 8004888:	617b      	str	r3, [r7, #20]
  return(result);
 800488a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800488c:	637b      	str	r3, [r7, #52]	; 0x34
 800488e:	2301      	movs	r3, #1
 8004890:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	f383 8810 	msr	PRIMASK, r3
}
 8004898:	46c0      	nop			; (mov r8, r8)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4936      	ldr	r1, [pc, #216]	; (8004980 <UART_RxISR_16BIT+0x168>)
 80048a6:	400a      	ands	r2, r1
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	f383 8810 	msr	PRIMASK, r3
}
 80048b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b6:	f3ef 8310 	mrs	r3, PRIMASK
 80048ba:	623b      	str	r3, [r7, #32]
  return(result);
 80048bc:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048be:	633b      	str	r3, [r7, #48]	; 0x30
 80048c0:	2301      	movs	r3, #1
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	f383 8810 	msr	PRIMASK, r3
}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2101      	movs	r1, #1
 80048d8:	438a      	bics	r2, r1
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	f383 8810 	msr	PRIMASK, r3
}
 80048e6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2288      	movs	r2, #136	; 0x88
 80048ec:	2120      	movs	r1, #32
 80048ee:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d12f      	bne.n	800495e <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004904:	f3ef 8310 	mrs	r3, PRIMASK
 8004908:	60bb      	str	r3, [r7, #8]
  return(result);
 800490a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800490e:	2301      	movs	r3, #1
 8004910:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f383 8810 	msr	PRIMASK, r3
}
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2110      	movs	r1, #16
 8004926:	438a      	bics	r2, r1
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f383 8810 	msr	PRIMASK, r3
}
 8004934:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	2210      	movs	r2, #16
 800493e:	4013      	ands	r3, r2
 8004940:	2b10      	cmp	r3, #16
 8004942:	d103      	bne.n	800494c <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2210      	movs	r2, #16
 800494a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	225c      	movs	r2, #92	; 0x5c
 8004950:	5a9a      	ldrh	r2, [r3, r2]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	0011      	movs	r1, r2
 8004956:	0018      	movs	r0, r3
 8004958:	f7fe fe9a 	bl	8003690 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800495c:	e00c      	b.n	8004978 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	0018      	movs	r0, r3
 8004962:	f7fb fe8d 	bl	8000680 <HAL_UART_RxCpltCallback>
}
 8004966:	e007      	b.n	8004978 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699a      	ldr	r2, [r3, #24]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2108      	movs	r1, #8
 8004974:	430a      	orrs	r2, r1
 8004976:	619a      	str	r2, [r3, #24]
}
 8004978:	46c0      	nop			; (mov r8, r8)
 800497a:	46bd      	mov	sp, r7
 800497c:	b010      	add	sp, #64	; 0x40
 800497e:	bd80      	pop	{r7, pc}
 8004980:	fffffedf 	.word	0xfffffedf

08004984 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b09c      	sub	sp, #112	; 0x70
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800498c:	236a      	movs	r3, #106	; 0x6a
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	2160      	movs	r1, #96	; 0x60
 8004994:	5a52      	ldrh	r2, [r2, r1]
 8004996:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2288      	movs	r2, #136	; 0x88
 80049b4:	589b      	ldr	r3, [r3, r2]
 80049b6:	2b22      	cmp	r3, #34	; 0x22
 80049b8:	d000      	beq.n	80049bc <UART_RxISR_8BIT_FIFOEN+0x38>
 80049ba:	e141      	b.n	8004c40 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80049bc:	235e      	movs	r3, #94	; 0x5e
 80049be:	18fb      	adds	r3, r7, r3
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	2168      	movs	r1, #104	; 0x68
 80049c4:	5a52      	ldrh	r2, [r2, r1]
 80049c6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80049c8:	e0e8      	b.n	8004b9c <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d0:	215c      	movs	r1, #92	; 0x5c
 80049d2:	187b      	adds	r3, r7, r1
 80049d4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80049d6:	187b      	adds	r3, r7, r1
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	236a      	movs	r3, #106	; 0x6a
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b2d9      	uxtb	r1, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e8:	400a      	ands	r2, r1
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	225e      	movs	r2, #94	; 0x5e
 80049fc:	5a9b      	ldrh	r3, [r3, r2]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b299      	uxth	r1, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	225e      	movs	r2, #94	; 0x5e
 8004a08:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a14:	2207      	movs	r2, #7
 8004a16:	4013      	ands	r3, r2
 8004a18:	d049      	beq.n	8004aae <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d010      	beq.n	8004a44 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004a22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d00b      	beq.n	8004a44 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2201      	movs	r2, #1
 8004a32:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	228c      	movs	r2, #140	; 0x8c
 8004a38:	589b      	ldr	r3, [r3, r2]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	218c      	movs	r1, #140	; 0x8c
 8004a42:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a46:	2202      	movs	r2, #2
 8004a48:	4013      	ands	r3, r2
 8004a4a:	d00f      	beq.n	8004a6c <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a4e:	2201      	movs	r2, #1
 8004a50:	4013      	ands	r3, r2
 8004a52:	d00b      	beq.n	8004a6c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	228c      	movs	r2, #140	; 0x8c
 8004a60:	589b      	ldr	r3, [r3, r2]
 8004a62:	2204      	movs	r2, #4
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	218c      	movs	r1, #140	; 0x8c
 8004a6a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a6e:	2204      	movs	r2, #4
 8004a70:	4013      	ands	r3, r2
 8004a72:	d00f      	beq.n	8004a94 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004a74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a76:	2201      	movs	r2, #1
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d00b      	beq.n	8004a94 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2204      	movs	r2, #4
 8004a82:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	228c      	movs	r2, #140	; 0x8c
 8004a88:	589b      	ldr	r3, [r3, r2]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	218c      	movs	r1, #140	; 0x8c
 8004a92:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	228c      	movs	r2, #140	; 0x8c
 8004a98:	589b      	ldr	r3, [r3, r2]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f7fe fded 	bl	8003680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	228c      	movs	r2, #140	; 0x8c
 8004aaa:	2100      	movs	r1, #0
 8004aac:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	225e      	movs	r2, #94	; 0x5e
 8004ab2:	5a9b      	ldrh	r3, [r3, r2]
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d170      	bne.n	8004b9c <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aba:	f3ef 8310 	mrs	r3, PRIMASK
 8004abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ac2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	f383 8810 	msr	PRIMASK, r3
}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	495f      	ldr	r1, [pc, #380]	; (8004c58 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8004adc:	400a      	ands	r2, r1
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ae2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae6:	f383 8810 	msr	PRIMASK, r3
}
 8004aea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aec:	f3ef 8310 	mrs	r3, PRIMASK
 8004af0:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004af4:	657b      	str	r3, [r7, #84]	; 0x54
 8004af6:	2301      	movs	r3, #1
 8004af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afc:	f383 8810 	msr	PRIMASK, r3
}
 8004b00:	46c0      	nop			; (mov r8, r8)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4953      	ldr	r1, [pc, #332]	; (8004c5c <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8004b0e:	400a      	ands	r2, r1
 8004b10:	609a      	str	r2, [r3, #8]
 8004b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b14:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b18:	f383 8810 	msr	PRIMASK, r3
}
 8004b1c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2288      	movs	r2, #136	; 0x88
 8004b22:	2120      	movs	r1, #32
 8004b24:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d12f      	bne.n	8004b94 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b3e:	623b      	str	r3, [r7, #32]
  return(result);
 8004b40:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b42:	653b      	str	r3, [r7, #80]	; 0x50
 8004b44:	2301      	movs	r3, #1
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	f383 8810 	msr	PRIMASK, r3
}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2110      	movs	r1, #16
 8004b5c:	438a      	bics	r2, r1
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	f383 8810 	msr	PRIMASK, r3
}
 8004b6a:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	2210      	movs	r2, #16
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d103      	bne.n	8004b82 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2210      	movs	r2, #16
 8004b80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	225c      	movs	r2, #92	; 0x5c
 8004b86:	5a9a      	ldrh	r2, [r3, r2]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	0011      	movs	r1, r2
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f7fe fd7f 	bl	8003690 <HAL_UARTEx_RxEventCallback>
 8004b92:	e003      	b.n	8004b9c <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	0018      	movs	r0, r3
 8004b98:	f7fb fd72 	bl	8000680 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004b9c:	235e      	movs	r3, #94	; 0x5e
 8004b9e:	18fb      	adds	r3, r7, r3
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d004      	beq.n	8004bb0 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8004ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba8:	2220      	movs	r2, #32
 8004baa:	4013      	ands	r3, r2
 8004bac:	d000      	beq.n	8004bb0 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8004bae:	e70c      	b.n	80049ca <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004bb0:	204e      	movs	r0, #78	; 0x4e
 8004bb2:	183b      	adds	r3, r7, r0
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	215e      	movs	r1, #94	; 0x5e
 8004bb8:	5a52      	ldrh	r2, [r2, r1]
 8004bba:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004bbc:	0001      	movs	r1, r0
 8004bbe:	187b      	adds	r3, r7, r1
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d044      	beq.n	8004c50 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2268      	movs	r2, #104	; 0x68
 8004bca:	5a9b      	ldrh	r3, [r3, r2]
 8004bcc:	187a      	adds	r2, r7, r1
 8004bce:	8812      	ldrh	r2, [r2, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d23d      	bcs.n	8004c50 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bd4:	f3ef 8310 	mrs	r3, PRIMASK
 8004bd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bda:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004bdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bde:	2301      	movs	r3, #1
 8004be0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f383 8810 	msr	PRIMASK, r3
}
 8004be8:	46c0      	nop			; (mov r8, r8)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	491a      	ldr	r1, [pc, #104]	; (8004c60 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8004bf6:	400a      	ands	r2, r1
 8004bf8:	609a      	str	r2, [r3, #8]
 8004bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f383 8810 	msr	PRIMASK, r3
}
 8004c04:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a16      	ldr	r2, [pc, #88]	; (8004c64 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8004c0a:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c10:	617b      	str	r3, [r7, #20]
  return(result);
 8004c12:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004c14:	647b      	str	r3, [r7, #68]	; 0x44
 8004c16:	2301      	movs	r3, #1
 8004c18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	f383 8810 	msr	PRIMASK, r3
}
 8004c20:	46c0      	nop			; (mov r8, r8)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2120      	movs	r1, #32
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	f383 8810 	msr	PRIMASK, r3
}
 8004c3c:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c3e:	e007      	b.n	8004c50 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2108      	movs	r1, #8
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	619a      	str	r2, [r3, #24]
}
 8004c50:	46c0      	nop			; (mov r8, r8)
 8004c52:	46bd      	mov	sp, r7
 8004c54:	b01c      	add	sp, #112	; 0x70
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	fffffeff 	.word	0xfffffeff
 8004c5c:	effffffe 	.word	0xeffffffe
 8004c60:	efffffff 	.word	0xefffffff
 8004c64:	080046ad 	.word	0x080046ad

08004c68 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b09e      	sub	sp, #120	; 0x78
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004c70:	2372      	movs	r3, #114	; 0x72
 8004c72:	18fb      	adds	r3, r7, r3
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	2160      	movs	r1, #96	; 0x60
 8004c78:	5a52      	ldrh	r2, [r2, r1]
 8004c7a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2288      	movs	r2, #136	; 0x88
 8004c98:	589b      	ldr	r3, [r3, r2]
 8004c9a:	2b22      	cmp	r3, #34	; 0x22
 8004c9c:	d000      	beq.n	8004ca0 <UART_RxISR_16BIT_FIFOEN+0x38>
 8004c9e:	e141      	b.n	8004f24 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004ca0:	2366      	movs	r3, #102	; 0x66
 8004ca2:	18fb      	adds	r3, r7, r3
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	2168      	movs	r1, #104	; 0x68
 8004ca8:	5a52      	ldrh	r2, [r2, r1]
 8004caa:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004cac:	e0e8      	b.n	8004e80 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cb4:	2164      	movs	r1, #100	; 0x64
 8004cb6:	187b      	adds	r3, r7, r1
 8004cb8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbe:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8004cc0:	187b      	adds	r3, r7, r1
 8004cc2:	2272      	movs	r2, #114	; 0x72
 8004cc4:	18ba      	adds	r2, r7, r2
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	8812      	ldrh	r2, [r2, #0]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd6:	1c9a      	adds	r2, r3, #2
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	225e      	movs	r2, #94	; 0x5e
 8004ce0:	5a9b      	ldrh	r3, [r3, r2]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b299      	uxth	r1, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	225e      	movs	r2, #94	; 0x5e
 8004cec:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cf8:	2207      	movs	r2, #7
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d049      	beq.n	8004d92 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d00:	2201      	movs	r2, #1
 8004d02:	4013      	ands	r3, r2
 8004d04:	d010      	beq.n	8004d28 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8004d06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d08:	2380      	movs	r3, #128	; 0x80
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	d00b      	beq.n	8004d28 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2201      	movs	r2, #1
 8004d16:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	228c      	movs	r2, #140	; 0x8c
 8004d1c:	589b      	ldr	r3, [r3, r2]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	218c      	movs	r1, #140	; 0x8c
 8004d26:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d00f      	beq.n	8004d50 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8004d30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d32:	2201      	movs	r2, #1
 8004d34:	4013      	ands	r3, r2
 8004d36:	d00b      	beq.n	8004d50 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	228c      	movs	r2, #140	; 0x8c
 8004d44:	589b      	ldr	r3, [r3, r2]
 8004d46:	2204      	movs	r2, #4
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	218c      	movs	r1, #140	; 0x8c
 8004d4e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d52:	2204      	movs	r2, #4
 8004d54:	4013      	ands	r3, r2
 8004d56:	d00f      	beq.n	8004d78 <UART_RxISR_16BIT_FIFOEN+0x110>
 8004d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d00b      	beq.n	8004d78 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2204      	movs	r2, #4
 8004d66:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	228c      	movs	r2, #140	; 0x8c
 8004d6c:	589b      	ldr	r3, [r3, r2]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	218c      	movs	r1, #140	; 0x8c
 8004d76:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	228c      	movs	r2, #140	; 0x8c
 8004d7c:	589b      	ldr	r3, [r3, r2]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d007      	beq.n	8004d92 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	0018      	movs	r0, r3
 8004d86:	f7fe fc7b 	bl	8003680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	228c      	movs	r2, #140	; 0x8c
 8004d8e:	2100      	movs	r1, #0
 8004d90:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	225e      	movs	r2, #94	; 0x5e
 8004d96:	5a9b      	ldrh	r3, [r3, r2]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d170      	bne.n	8004e80 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004da2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004da6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004da8:	2301      	movs	r3, #1
 8004daa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dae:	f383 8810 	msr	PRIMASK, r3
}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	495f      	ldr	r1, [pc, #380]	; (8004f3c <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8004dc0:	400a      	ands	r2, r1
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dca:	f383 8810 	msr	PRIMASK, r3
}
 8004dce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004dd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dda:	2301      	movs	r3, #1
 8004ddc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de0:	f383 8810 	msr	PRIMASK, r3
}
 8004de4:	46c0      	nop			; (mov r8, r8)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4953      	ldr	r1, [pc, #332]	; (8004f40 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8004df2:	400a      	ands	r2, r1
 8004df4:	609a      	str	r2, [r3, #8]
 8004df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004df8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dfc:	f383 8810 	msr	PRIMASK, r3
}
 8004e00:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2288      	movs	r2, #136	; 0x88
 8004e06:	2120      	movs	r1, #32
 8004e08:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d12f      	bne.n	8004e78 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e26:	657b      	str	r3, [r7, #84]	; 0x54
 8004e28:	2301      	movs	r3, #1
 8004e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	f383 8810 	msr	PRIMASK, r3
}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2110      	movs	r1, #16
 8004e40:	438a      	bics	r2, r1
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4a:	f383 8810 	msr	PRIMASK, r3
}
 8004e4e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	2210      	movs	r2, #16
 8004e58:	4013      	ands	r3, r2
 8004e5a:	2b10      	cmp	r3, #16
 8004e5c:	d103      	bne.n	8004e66 <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2210      	movs	r2, #16
 8004e64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	225c      	movs	r2, #92	; 0x5c
 8004e6a:	5a9a      	ldrh	r2, [r3, r2]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	0011      	movs	r1, r2
 8004e70:	0018      	movs	r0, r3
 8004e72:	f7fe fc0d 	bl	8003690 <HAL_UARTEx_RxEventCallback>
 8004e76:	e003      	b.n	8004e80 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f7fb fc00 	bl	8000680 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004e80:	2366      	movs	r3, #102	; 0x66
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d004      	beq.n	8004e94 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d000      	beq.n	8004e94 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004e92:	e70c      	b.n	8004cae <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004e94:	2052      	movs	r0, #82	; 0x52
 8004e96:	183b      	adds	r3, r7, r0
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	215e      	movs	r1, #94	; 0x5e
 8004e9c:	5a52      	ldrh	r2, [r2, r1]
 8004e9e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004ea0:	0001      	movs	r1, r0
 8004ea2:	187b      	adds	r3, r7, r1
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d044      	beq.n	8004f34 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2268      	movs	r2, #104	; 0x68
 8004eae:	5a9b      	ldrh	r3, [r3, r2]
 8004eb0:	187a      	adds	r2, r7, r1
 8004eb2:	8812      	ldrh	r2, [r2, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d23d      	bcs.n	8004f34 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8004ebc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f383 8810 	msr	PRIMASK, r3
}
 8004ecc:	46c0      	nop			; (mov r8, r8)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	491a      	ldr	r1, [pc, #104]	; (8004f44 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8004eda:	400a      	ands	r2, r1
 8004edc:	609a      	str	r2, [r3, #8]
 8004ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f383 8810 	msr	PRIMASK, r3
}
 8004ee8:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a16      	ldr	r2, [pc, #88]	; (8004f48 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8004eee:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ef4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ef6:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004ef8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004efa:	2301      	movs	r3, #1
 8004efc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	f383 8810 	msr	PRIMASK, r3
}
 8004f04:	46c0      	nop			; (mov r8, r8)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2120      	movs	r1, #32
 8004f12:	430a      	orrs	r2, r1
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	f383 8810 	msr	PRIMASK, r3
}
 8004f20:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f22:	e007      	b.n	8004f34 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2108      	movs	r1, #8
 8004f30:	430a      	orrs	r2, r1
 8004f32:	619a      	str	r2, [r3, #24]
}
 8004f34:	46c0      	nop			; (mov r8, r8)
 8004f36:	46bd      	mov	sp, r7
 8004f38:	b01e      	add	sp, #120	; 0x78
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	fffffeff 	.word	0xfffffeff
 8004f40:	effffffe 	.word	0xeffffffe
 8004f44:	efffffff 	.word	0xefffffff
 8004f48:	08004819 	.word	0x08004819

08004f4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b002      	add	sp, #8
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004f64:	46c0      	nop			; (mov r8, r8)
 8004f66:	46bd      	mov	sp, r7
 8004f68:	b002      	add	sp, #8
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004f74:	46c0      	nop			; (mov r8, r8)
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b002      	add	sp, #8
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2280      	movs	r2, #128	; 0x80
 8004f88:	5c9b      	ldrb	r3, [r3, r2]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_UARTEx_DisableFifoMode+0x16>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e027      	b.n	8004fe2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2280      	movs	r2, #128	; 0x80
 8004f96:	2101      	movs	r1, #1
 8004f98:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2284      	movs	r2, #132	; 0x84
 8004f9e:	2124      	movs	r1, #36	; 0x24
 8004fa0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	438a      	bics	r2, r1
 8004fb8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4a0b      	ldr	r2, [pc, #44]	; (8004fec <HAL_UARTEx_DisableFifoMode+0x70>)
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2284      	movs	r2, #132	; 0x84
 8004fd4:	2120      	movs	r1, #32
 8004fd6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2280      	movs	r2, #128	; 0x80
 8004fdc:	2100      	movs	r1, #0
 8004fde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	b004      	add	sp, #16
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	dfffffff 	.word	0xdfffffff

08004ff0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2280      	movs	r2, #128	; 0x80
 8004ffe:	5c9b      	ldrb	r3, [r3, r2]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005004:	2302      	movs	r3, #2
 8005006:	e02e      	b.n	8005066 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2280      	movs	r2, #128	; 0x80
 800500c:	2101      	movs	r1, #1
 800500e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2284      	movs	r2, #132	; 0x84
 8005014:	2124      	movs	r1, #36	; 0x24
 8005016:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2101      	movs	r1, #1
 800502c:	438a      	bics	r2, r1
 800502e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	08d9      	lsrs	r1, r3, #3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	0018      	movs	r0, r3
 8005048:	f000 f854 	bl	80050f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2284      	movs	r2, #132	; 0x84
 8005058:	2120      	movs	r1, #32
 800505a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2280      	movs	r2, #128	; 0x80
 8005060:	2100      	movs	r1, #0
 8005062:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	0018      	movs	r0, r3
 8005068:	46bd      	mov	sp, r7
 800506a:	b004      	add	sp, #16
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2280      	movs	r2, #128	; 0x80
 800507e:	5c9b      	ldrb	r3, [r3, r2]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005084:	2302      	movs	r3, #2
 8005086:	e02f      	b.n	80050e8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2280      	movs	r2, #128	; 0x80
 800508c:	2101      	movs	r1, #1
 800508e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2284      	movs	r2, #132	; 0x84
 8005094:	2124      	movs	r1, #36	; 0x24
 8005096:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2101      	movs	r1, #1
 80050ac:	438a      	bics	r2, r1
 80050ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	4a0e      	ldr	r2, [pc, #56]	; (80050f0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	0019      	movs	r1, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	0018      	movs	r0, r3
 80050ca:	f000 f813 	bl	80050f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2284      	movs	r2, #132	; 0x84
 80050da:	2120      	movs	r1, #32
 80050dc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2280      	movs	r2, #128	; 0x80
 80050e2:	2100      	movs	r1, #0
 80050e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	0018      	movs	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b004      	add	sp, #16
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	f1ffffff 	.word	0xf1ffffff

080050f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80050f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005100:	2b00      	cmp	r3, #0
 8005102:	d108      	bne.n	8005116 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	226a      	movs	r2, #106	; 0x6a
 8005108:	2101      	movs	r1, #1
 800510a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2268      	movs	r2, #104	; 0x68
 8005110:	2101      	movs	r1, #1
 8005112:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005114:	e043      	b.n	800519e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005116:	260f      	movs	r6, #15
 8005118:	19bb      	adds	r3, r7, r6
 800511a:	2208      	movs	r2, #8
 800511c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800511e:	200e      	movs	r0, #14
 8005120:	183b      	adds	r3, r7, r0
 8005122:	2208      	movs	r2, #8
 8005124:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	0e5b      	lsrs	r3, r3, #25
 800512e:	b2da      	uxtb	r2, r3
 8005130:	240d      	movs	r4, #13
 8005132:	193b      	adds	r3, r7, r4
 8005134:	2107      	movs	r1, #7
 8005136:	400a      	ands	r2, r1
 8005138:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	0f5b      	lsrs	r3, r3, #29
 8005142:	b2da      	uxtb	r2, r3
 8005144:	250c      	movs	r5, #12
 8005146:	197b      	adds	r3, r7, r5
 8005148:	2107      	movs	r1, #7
 800514a:	400a      	ands	r2, r1
 800514c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800514e:	183b      	adds	r3, r7, r0
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	197a      	adds	r2, r7, r5
 8005154:	7812      	ldrb	r2, [r2, #0]
 8005156:	4914      	ldr	r1, [pc, #80]	; (80051a8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005158:	5c8a      	ldrb	r2, [r1, r2]
 800515a:	435a      	muls	r2, r3
 800515c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800515e:	197b      	adds	r3, r7, r5
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	4a12      	ldr	r2, [pc, #72]	; (80051ac <UARTEx_SetNbDataToProcess+0xb8>)
 8005164:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005166:	0019      	movs	r1, r3
 8005168:	f7fb f856 	bl	8000218 <__divsi3>
 800516c:	0003      	movs	r3, r0
 800516e:	b299      	uxth	r1, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	226a      	movs	r2, #106	; 0x6a
 8005174:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005176:	19bb      	adds	r3, r7, r6
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	193a      	adds	r2, r7, r4
 800517c:	7812      	ldrb	r2, [r2, #0]
 800517e:	490a      	ldr	r1, [pc, #40]	; (80051a8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005180:	5c8a      	ldrb	r2, [r1, r2]
 8005182:	435a      	muls	r2, r3
 8005184:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005186:	193b      	adds	r3, r7, r4
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	4a08      	ldr	r2, [pc, #32]	; (80051ac <UARTEx_SetNbDataToProcess+0xb8>)
 800518c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800518e:	0019      	movs	r1, r3
 8005190:	f7fb f842 	bl	8000218 <__divsi3>
 8005194:	0003      	movs	r3, r0
 8005196:	b299      	uxth	r1, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2268      	movs	r2, #104	; 0x68
 800519c:	5299      	strh	r1, [r3, r2]
}
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	46bd      	mov	sp, r7
 80051a2:	b005      	add	sp, #20
 80051a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	080052bc 	.word	0x080052bc
 80051ac:	080052c4 	.word	0x080052c4

080051b0 <__libc_init_array>:
 80051b0:	b570      	push	{r4, r5, r6, lr}
 80051b2:	2600      	movs	r6, #0
 80051b4:	4d0c      	ldr	r5, [pc, #48]	; (80051e8 <__libc_init_array+0x38>)
 80051b6:	4c0d      	ldr	r4, [pc, #52]	; (80051ec <__libc_init_array+0x3c>)
 80051b8:	1b64      	subs	r4, r4, r5
 80051ba:	10a4      	asrs	r4, r4, #2
 80051bc:	42a6      	cmp	r6, r4
 80051be:	d109      	bne.n	80051d4 <__libc_init_array+0x24>
 80051c0:	2600      	movs	r6, #0
 80051c2:	f000 f821 	bl	8005208 <_init>
 80051c6:	4d0a      	ldr	r5, [pc, #40]	; (80051f0 <__libc_init_array+0x40>)
 80051c8:	4c0a      	ldr	r4, [pc, #40]	; (80051f4 <__libc_init_array+0x44>)
 80051ca:	1b64      	subs	r4, r4, r5
 80051cc:	10a4      	asrs	r4, r4, #2
 80051ce:	42a6      	cmp	r6, r4
 80051d0:	d105      	bne.n	80051de <__libc_init_array+0x2e>
 80051d2:	bd70      	pop	{r4, r5, r6, pc}
 80051d4:	00b3      	lsls	r3, r6, #2
 80051d6:	58eb      	ldr	r3, [r5, r3]
 80051d8:	4798      	blx	r3
 80051da:	3601      	adds	r6, #1
 80051dc:	e7ee      	b.n	80051bc <__libc_init_array+0xc>
 80051de:	00b3      	lsls	r3, r6, #2
 80051e0:	58eb      	ldr	r3, [r5, r3]
 80051e2:	4798      	blx	r3
 80051e4:	3601      	adds	r6, #1
 80051e6:	e7f2      	b.n	80051ce <__libc_init_array+0x1e>
 80051e8:	080052d4 	.word	0x080052d4
 80051ec:	080052d4 	.word	0x080052d4
 80051f0:	080052d4 	.word	0x080052d4
 80051f4:	080052d8 	.word	0x080052d8

080051f8 <memset>:
 80051f8:	0003      	movs	r3, r0
 80051fa:	1882      	adds	r2, r0, r2
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d100      	bne.n	8005202 <memset+0xa>
 8005200:	4770      	bx	lr
 8005202:	7019      	strb	r1, [r3, #0]
 8005204:	3301      	adds	r3, #1
 8005206:	e7f9      	b.n	80051fc <memset+0x4>

08005208 <_init>:
 8005208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520e:	bc08      	pop	{r3}
 8005210:	469e      	mov	lr, r3
 8005212:	4770      	bx	lr

08005214 <_fini>:
 8005214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521a:	bc08      	pop	{r3}
 800521c:	469e      	mov	lr, r3
 800521e:	4770      	bx	lr
