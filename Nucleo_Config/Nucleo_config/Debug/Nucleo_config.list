
Nucleo_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005290  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800534c  0800534c  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053f8  080053f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080053f8  080053f8  000153f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005400  08005400  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005400  08005400  00015400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005404  08005404  00015404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000908  20000010  08005418  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000918  08005418  00020918  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cc4  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e9  00000000  00000000  00031cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  000342e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  00035230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a40  00000000  00000000  00036090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f83  00000000  00000000  0004ead0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0331  00000000  00000000  00060a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100d84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003720  00000000  00000000  00100dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005334 	.word	0x08005334

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08005334 	.word	0x08005334

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <mdbus_send_packet_it>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void mdbus_send_packet_it(uint8_t *data, uint16_t size)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	000a      	movs	r2, r1
 8000626:	1cbb      	adds	r3, r7, #2
 8000628:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart2, data, size);
 800062a:	1cbb      	adds	r3, r7, #2
 800062c:	881a      	ldrh	r2, [r3, #0]
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <mdbus_send_packet_it+0x24>)
 8000632:	0018      	movs	r0, r3
 8000634:	f002 fc72 	bl	8002f1c <HAL_UART_Transmit_IT>
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b002      	add	sp, #8
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000078 	.word	0x20000078

08000644 <mdbus_read_packet_it>:

void mdbus_read_packet_it(uint8_t *data, uint16_t size)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	000a      	movs	r2, r1
 800064e:	1cbb      	adds	r3, r7, #2
 8000650:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, data, size);
 8000652:	1cbb      	adds	r3, r7, #2
 8000654:	881a      	ldrh	r2, [r3, #0]
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <mdbus_read_packet_it+0x24>)
 800065a:	0018      	movs	r0, r3
 800065c:	f002 fd1a 	bl	8003094 <HAL_UART_Receive_IT>
}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b002      	add	sp, #8
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000078 	.word	0x20000078

0800066c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

//send callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	mdbus_on_packet_send();
 8000674:	f000 fb6e 	bl	8000d54 <mdbus_on_packet_send>
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	b002      	add	sp, #8
 800067e:	bd80      	pop	{r7, pc}

08000680 <HAL_UART_RxCpltCallback>:

//receive callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	mdbus_on_packet_receive(receivedData, PACKETSIZE);
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <HAL_UART_RxCpltCallback+0x1c>)
 800068a:	2101      	movs	r1, #1
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fb7d 	bl	8000d8c <mdbus_on_packet_receive>
}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	b002      	add	sp, #8
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	20000108 	.word	0x20000108

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f000 fcd6 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f81a 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f000 f91a 	bl	80008e4 <MX_GPIO_Init>
  //stat listening sanding callback
  MX_USART2_UART_Init();
 80006b0:	f000 f8ca 	bl	8000848 <MX_USART2_UART_Init>
  //start timer
  MX_TIM2_Init();
 80006b4:	f000 f874 	bl	80007a0 <MX_TIM2_Init>
  //start listening receiving callback
  mdbus_read_packet_it(&receivedData, PACKETSIZE);
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <main+0x38>)
 80006ba:	2101      	movs	r1, #1
 80006bc:	0018      	movs	r0, r3
 80006be:	f7ff ffc1 	bl	8000644 <mdbus_read_packet_it>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <main+0x3c>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 ffad 	bl	8002624 <HAL_TIM_Base_Start_IT>

  mdbus_slave_configure('1');
 80006ca:	2031      	movs	r0, #49	; 0x31
 80006cc:	f000 fba6 	bl	8000e1c <mdbus_slave_configure>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mdbus_slave_run();
 80006d0:	f000 fb76 	bl	8000dc0 <mdbus_slave_run>
 80006d4:	e7fc      	b.n	80006d0 <main+0x30>
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	20000108 	.word	0x20000108
 80006dc:	2000002c 	.word	0x2000002c

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b093      	sub	sp, #76	; 0x4c
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	2410      	movs	r4, #16
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	0018      	movs	r0, r3
 80006ec:	2338      	movs	r3, #56	; 0x38
 80006ee:	001a      	movs	r2, r3
 80006f0:	2100      	movs	r1, #0
 80006f2:	f004 fe17 	bl	8005324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f6:	003b      	movs	r3, r7
 80006f8:	0018      	movs	r0, r3
 80006fa:	2310      	movs	r3, #16
 80006fc:	001a      	movs	r2, r3
 80006fe:	2100      	movs	r1, #0
 8000700:	f004 fe10 	bl	8005324 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	0018      	movs	r0, r3
 800070a:	f001 f86b 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2202      	movs	r2, #2
 8000712:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	0052      	lsls	r2, r2, #1
 800071a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800071c:	0021      	movs	r1, r4
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2240      	movs	r2, #64	; 0x40
 8000728:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2202      	movs	r2, #2
 800072e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2202      	movs	r2, #2
 8000734:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2208      	movs	r2, #8
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0292      	lsls	r2, r2, #10
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	0492      	lsls	r2, r2, #18
 8000750:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	0592      	lsls	r2, r2, #22
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	187b      	adds	r3, r7, r1
 800075c:	0018      	movs	r0, r3
 800075e:	f001 f88d 	bl	800187c <HAL_RCC_OscConfig>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000766:	f000 f90d 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	003b      	movs	r3, r7
 800076c:	2207      	movs	r2, #7
 800076e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	003b      	movs	r3, r7
 8000772:	2202      	movs	r2, #2
 8000774:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000776:	003b      	movs	r3, r7
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	0112      	lsls	r2, r2, #4
 800077c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077e:	003b      	movs	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000784:	003b      	movs	r3, r7
 8000786:	2101      	movs	r1, #1
 8000788:	0018      	movs	r0, r3
 800078a:	f001 fb91 	bl	8001eb0 <HAL_RCC_ClockConfig>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000792:	f000 f8f7 	bl	8000984 <Error_Handler>
  }
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b013      	add	sp, #76	; 0x4c
 800079c:	bd90      	pop	{r4, r7, pc}
	...

080007a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	2310      	movs	r3, #16
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	0018      	movs	r0, r3
 80007ac:	2310      	movs	r3, #16
 80007ae:	001a      	movs	r2, r3
 80007b0:	2100      	movs	r1, #0
 80007b2:	f004 fdb7 	bl	8005324 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	0018      	movs	r0, r3
 80007ba:	230c      	movs	r3, #12
 80007bc:	001a      	movs	r2, r3
 80007be:	2100      	movs	r1, #0
 80007c0:	f004 fdb0 	bl	8005324 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_TIM2_Init+0xa0>)
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	05d2      	lsls	r2, r2, #23
 80007ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_TIM2_Init+0xa0>)
 80007ce:	220a      	movs	r2, #10
 80007d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_TIM2_Init+0xa0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000;
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_TIM2_Init+0xa0>)
 80007da:	4a1a      	ldr	r2, [pc, #104]	; (8000844 <MX_TIM2_Init+0xa4>)
 80007dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_TIM2_Init+0xa0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_TIM2_Init+0xa0>)
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_TIM2_Init+0xa0>)
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 fec1 	bl	8002574 <HAL_TIM_Base_Init>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80007f6:	f000 f8c5 	bl	8000984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fa:	2110      	movs	r1, #16
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2280      	movs	r2, #128	; 0x80
 8000800:	0152      	lsls	r2, r2, #5
 8000802:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000804:	187a      	adds	r2, r7, r1
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_TIM2_Init+0xa0>)
 8000808:	0011      	movs	r1, r2
 800080a:	0018      	movs	r0, r3
 800080c:	f002 f898 	bl	8002940 <HAL_TIM_ConfigClockSource>
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000814:	f000 f8b6 	bl	8000984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000824:	1d3a      	adds	r2, r7, #4
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_TIM2_Init+0xa0>)
 8000828:	0011      	movs	r1, r2
 800082a:	0018      	movs	r0, r3
 800082c:	f002 fa9a 	bl	8002d64 <HAL_TIMEx_MasterConfigSynchronization>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000834:	f000 f8a6 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b008      	add	sp, #32
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2000002c 	.word	0x2000002c
 8000844:	00008ca0 	.word	0x00008ca0

08000848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800084c:	4b23      	ldr	r3, [pc, #140]	; (80008dc <MX_USART2_UART_Init+0x94>)
 800084e:	4a24      	ldr	r2, [pc, #144]	; (80008e0 <MX_USART2_UART_Init+0x98>)
 8000850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000852:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_USART2_UART_Init+0x94>)
 8000854:	22e1      	movs	r2, #225	; 0xe1
 8000856:	0252      	lsls	r2, r2, #9
 8000858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_USART2_UART_Init+0x94>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_USART2_UART_Init+0x94>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_USART2_UART_Init+0x94>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_USART2_UART_Init+0x94>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_USART2_UART_Init+0x94>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_USART2_UART_Init+0x94>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_USART2_UART_Init+0x94>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_USART2_UART_Init+0x94>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_USART2_UART_Init+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_USART2_UART_Init+0x94>)
 8000892:	0018      	movs	r0, r3
 8000894:	f002 faec 	bl	8002e70 <HAL_UART_Init>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800089c:	f000 f872 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART2_UART_Init+0x94>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	0018      	movs	r0, r3
 80008a6:	f004 fc39 	bl	800511c <HAL_UARTEx_SetTxFifoThreshold>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ae:	f000 f869 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <MX_USART2_UART_Init+0x94>)
 80008b4:	2100      	movs	r1, #0
 80008b6:	0018      	movs	r0, r3
 80008b8:	f004 fc70 	bl	800519c <HAL_UARTEx_SetRxFifoThreshold>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008c0:	f000 f860 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <MX_USART2_UART_Init+0x94>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f004 fbee 	bl	80050a8 <HAL_UARTEx_DisableFifoMode>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008d0:	f000 f858 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	20000078 	.word	0x20000078
 80008e0:	40004400 	.word	0x40004400

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b089      	sub	sp, #36	; 0x24
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	240c      	movs	r4, #12
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	0018      	movs	r0, r3
 80008f0:	2314      	movs	r3, #20
 80008f2:	001a      	movs	r2, r3
 80008f4:	2100      	movs	r1, #0
 80008f6:	f004 fd15 	bl	8005324 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <MX_GPIO_Init+0x9c>)
 80008fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <MX_GPIO_Init+0x9c>)
 8000900:	2104      	movs	r1, #4
 8000902:	430a      	orrs	r2, r1
 8000904:	635a      	str	r2, [r3, #52]	; 0x34
 8000906:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <MX_GPIO_Init+0x9c>)
 8000908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800090a:	2204      	movs	r2, #4
 800090c:	4013      	ands	r3, r2
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_GPIO_Init+0x9c>)
 8000914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_GPIO_Init+0x9c>)
 8000918:	2120      	movs	r1, #32
 800091a:	430a      	orrs	r2, r1
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_GPIO_Init+0x9c>)
 8000920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000922:	2220      	movs	r2, #32
 8000924:	4013      	ands	r3, r2
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_GPIO_Init+0x9c>)
 800092c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_GPIO_Init+0x9c>)
 8000930:	2101      	movs	r1, #1
 8000932:	430a      	orrs	r2, r1
 8000934:	635a      	str	r2, [r3, #52]	; 0x34
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_GPIO_Init+0x9c>)
 8000938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800093a:	2201      	movs	r2, #1
 800093c:	4013      	ands	r3, r2
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000942:	23a0      	movs	r3, #160	; 0xa0
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	2200      	movs	r2, #0
 8000948:	2120      	movs	r1, #32
 800094a:	0018      	movs	r0, r3
 800094c:	f000 ff2c 	bl	80017a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000950:	0021      	movs	r1, r4
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2220      	movs	r2, #32
 8000956:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2201      	movs	r2, #1
 800095c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2202      	movs	r2, #2
 8000968:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800096a:	187a      	adds	r2, r7, r1
 800096c:	23a0      	movs	r3, #160	; 0xa0
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fdb4 	bl	80014e0 <HAL_GPIO_Init>

}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b009      	add	sp, #36	; 0x24
 800097e:	bd90      	pop	{r4, r7, pc}
 8000980:	40021000 	.word	0x40021000

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_MspInit+0x4c>)
 8000998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_MspInit+0x4c>)
 800099c:	2101      	movs	r1, #1
 800099e:	430a      	orrs	r2, r1
 80009a0:	641a      	str	r2, [r3, #64]	; 0x40
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	2201      	movs	r2, #1
 80009a8:	4013      	ands	r3, r2
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_MspInit+0x4c>)
 80009b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_MspInit+0x4c>)
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	0549      	lsls	r1, r1, #21
 80009b8:	430a      	orrs	r2, r1
 80009ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <HAL_MspInit+0x4c>)
 80009be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	055b      	lsls	r3, r3, #21
 80009c4:	4013      	ands	r3, r2
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80009ca:	23c0      	movs	r3, #192	; 0xc0
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 fbc6 	bl	8001160 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b002      	add	sp, #8
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	05db      	lsls	r3, r3, #23
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d113      	bne.n	8000a1c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_TIM_Base_MspInit+0x44>)
 80009f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_TIM_Base_MspInit+0x44>)
 80009fa:	2101      	movs	r1, #1
 80009fc:	430a      	orrs	r2, r1
 80009fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_TIM_Base_MspInit+0x44>)
 8000a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a04:	2201      	movs	r2, #1
 8000a06:	4013      	ands	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	200f      	movs	r0, #15
 8000a12:	f000 fc67 	bl	80012e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a16:	200f      	movs	r0, #15
 8000a18:	f000 fc79 	bl	800130e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b004      	add	sp, #16
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b097      	sub	sp, #92	; 0x5c
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	2344      	movs	r3, #68	; 0x44
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	0018      	movs	r0, r3
 8000a36:	2314      	movs	r3, #20
 8000a38:	001a      	movs	r2, r3
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	f004 fc72 	bl	8005324 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a40:	2410      	movs	r4, #16
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	0018      	movs	r0, r3
 8000a46:	2334      	movs	r3, #52	; 0x34
 8000a48:	001a      	movs	r2, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	f004 fc6a 	bl	8005324 <memset>
  if(huart->Instance==USART2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a26      	ldr	r2, [pc, #152]	; (8000af0 <HAL_UART_MspInit+0xc8>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d146      	bne.n	8000ae8 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f001 fbcb 	bl	8002204 <HAL_RCCEx_PeriphCLKConfig>
 8000a6e:	1e03      	subs	r3, r0, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a72:	f7ff ff87 	bl	8000984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <HAL_UART_MspInit+0xcc>)
 8000a78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <HAL_UART_MspInit+0xcc>)
 8000a7c:	2180      	movs	r1, #128	; 0x80
 8000a7e:	0289      	lsls	r1, r1, #10
 8000a80:	430a      	orrs	r2, r1
 8000a82:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <HAL_UART_MspInit+0xcc>)
 8000a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	029b      	lsls	r3, r3, #10
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_UART_MspInit+0xcc>)
 8000a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <HAL_UART_MspInit+0xcc>)
 8000a98:	2101      	movs	r1, #1
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_UART_MspInit+0xcc>)
 8000aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000aaa:	2144      	movs	r1, #68	; 0x44
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	220c      	movs	r2, #12
 8000ab0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2201      	movs	r2, #1
 8000abc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	187a      	adds	r2, r7, r1
 8000acc:	23a0      	movs	r3, #160	; 0xa0
 8000ace:	05db      	lsls	r3, r3, #23
 8000ad0:	0011      	movs	r1, r2
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 fd04 	bl	80014e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	201c      	movs	r0, #28
 8000ade:	f000 fc01 	bl	80012e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ae2:	201c      	movs	r0, #28
 8000ae4:	f000 fc13 	bl	800130e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b017      	add	sp, #92	; 0x5c
 8000aee:	bd90      	pop	{r4, r7, pc}
 8000af0:	40004400 	.word	0x40004400
 8000af4:	40021000 	.word	0x40021000

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1c:	f000 fb04 	bl	8001128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <TIM2_IRQHandler+0x14>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f001 fdd4 	bl	80026dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	2000002c 	.word	0x2000002c

08000b40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <USART2_IRQHandler+0x14>)
 8000b46:	0018      	movs	r0, r3
 8000b48:	f002 fb0e 	bl	8003168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	20000078 	.word	0x20000078

08000b58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <ring_buffer_is_empty+0x28>)
 8000b70:	5c9a      	ldrb	r2, [r3, r2]
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	5ccb      	ldrb	r3, [r1, r3]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	425a      	negs	r2, r3
 8000b7e:	4153      	adcs	r3, r2
 8000b80:	b2db      	uxtb	r3, r3
}
 8000b82:	0018      	movs	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b002      	add	sp, #8
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	00000401 	.word	0x00000401

08000b90 <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <ring_buffer_is_full+0x34>)
 8000b9c:	5c9b      	ldrb	r3, [r3, r2]
 8000b9e:	0019      	movs	r1, r3
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	5cd3      	ldrb	r3, [r2, r3]
 8000ba8:	1acb      	subs	r3, r1, r3
 8000baa:	059b      	lsls	r3, r3, #22
 8000bac:	0d9b      	lsrs	r3, r3, #22
 8000bae:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <ring_buffer_is_full+0x38>)
 8000bb0:	4694      	mov	ip, r2
 8000bb2:	4463      	add	r3, ip
 8000bb4:	425a      	negs	r2, r3
 8000bb6:	4153      	adcs	r3, r2
 8000bb8:	b2db      	uxtb	r3, r3
}
 8000bba:	0018      	movs	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b002      	add	sp, #8
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	00000401 	.word	0x00000401
 8000bc8:	fffffc01 	.word	0xfffffc01

08000bcc <ring_buffer_init>:
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	2100      	movs	r1, #0
 8000bdc:	54d1      	strb	r1, [r2, r3]
  buffer->head_index = 0;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a03      	ldr	r2, [pc, #12]	; (8000bf0 <ring_buffer_init+0x24>)
 8000be2:	2100      	movs	r1, #0
 8000be4:	5499      	strb	r1, [r3, r2]
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	00000401 	.word	0x00000401

08000bf4 <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, char data)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	000a      	movs	r2, r1
 8000bfe:	1cfb      	adds	r3, r7, #3
 8000c00:	701a      	strb	r2, [r3, #0]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff ffc3 	bl	8000b90 <ring_buffer_is_full>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d009      	beq.n	8000c22 <ring_buffer_queue+0x2e>
  {
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	5cd3      	ldrb	r3, [r2, r3]
 8000c16:	3301      	adds	r3, #1
 8000c18:	b2d9      	uxtb	r1, r3
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	54d1      	strb	r1, [r2, r3]
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a09      	ldr	r2, [pc, #36]	; (8000c4c <ring_buffer_queue+0x58>)
 8000c26:	5c9b      	ldrb	r3, [r3, r2]
 8000c28:	0019      	movs	r1, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	1cfa      	adds	r2, r7, #3
 8000c2e:	7812      	ldrb	r2, [r2, #0]
 8000c30:	545a      	strb	r2, [r3, r1]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <ring_buffer_queue+0x58>)
 8000c36:	5c9b      	ldrb	r3, [r3, r2]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	b2d9      	uxtb	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a03      	ldr	r2, [pc, #12]	; (8000c4c <ring_buffer_queue+0x58>)
 8000c40:	5499      	strb	r1, [r3, r2]
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b002      	add	sp, #8
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	00000401 	.word	0x00000401

08000c50 <ring_buffer_queue_arr>:

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b087      	sub	sp, #28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	701a      	strb	r2, [r3, #0]
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++)
 8000c5e:	2317      	movs	r3, #23
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	e00f      	b.n	8000c88 <ring_buffer_queue_arr+0x38>
  {
    ring_buffer_queue(buffer, data[i]);
 8000c68:	2417      	movs	r4, #23
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	18d3      	adds	r3, r2, r3
 8000c72:	781a      	ldrb	r2, [r3, #0]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff ffbb 	bl	8000bf4 <ring_buffer_queue>
  for(i = 0; i < size; i++)
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	3201      	adds	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
 8000c88:	2317      	movs	r3, #23
 8000c8a:	18fa      	adds	r2, r7, r3
 8000c8c:	1dfb      	adds	r3, r7, #7
 8000c8e:	7812      	ldrb	r2, [r2, #0]
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d3e8      	bcc.n	8000c68 <ring_buffer_queue_arr+0x18>
  }
}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b007      	add	sp, #28
 8000c9e:	bd90      	pop	{r4, r7, pc}

08000ca0 <ring_buffer_dequeue>:

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff ff59 	bl	8000b64 <ring_buffer_is_empty>
 8000cb2:	1e03      	subs	r3, r0, #0
 8000cb4:	d001      	beq.n	8000cba <ring_buffer_dequeue+0x1a>
  {
    /* No items */
    return 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e013      	b.n	8000ce2 <ring_buffer_dequeue+0x42>
  }

  *data = buffer->buffer[buffer->tail_index];
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	5cd3      	ldrb	r3, [r2, r3]
 8000cc2:	001a      	movs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	5c9a      	ldrb	r2, [r3, r2]
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	5cd3      	ldrb	r3, [r2, r3]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	b2d9      	uxtb	r1, r3
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	54d1      	strb	r1, [r2, r3]
  return 1;
 8000ce0:	2301      	movs	r3, #1
}
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b002      	add	sp, #8
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <ring_buffer_dequeue_arr>:

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	1dfb      	adds	r3, r7, #7
 8000cf6:	701a      	strb	r2, [r3, #0]
  if(ring_buffer_is_empty(buffer))
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f7ff ff32 	bl	8000b64 <ring_buffer_is_empty>
 8000d00:	1e03      	subs	r3, r0, #0
 8000d02:	d001      	beq.n	8000d08 <ring_buffer_dequeue_arr+0x1e>
  {
    /* No items */
    return 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	e021      	b.n	8000d4c <ring_buffer_dequeue_arr+0x62>
  }

  char *data_ptr = data;
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	617b      	str	r3, [r7, #20]
  ring_buffer_size_t cnt = 0;
 8000d0c:	2313      	movs	r3, #19
 8000d0e:	18fb      	adds	r3, r7, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr))
 8000d14:	e008      	b.n	8000d28 <ring_buffer_dequeue_arr+0x3e>
  {
    cnt++;
 8000d16:	2113      	movs	r1, #19
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	781a      	ldrb	r2, [r3, #0]
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	3201      	adds	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
    data_ptr++;
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr))
 8000d28:	2313      	movs	r3, #19
 8000d2a:	18fa      	adds	r2, r7, r3
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	7812      	ldrb	r2, [r2, #0]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d207      	bcs.n	8000d46 <ring_buffer_dequeue_arr+0x5c>
 8000d36:	697a      	ldr	r2, [r7, #20]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff ffaf 	bl	8000ca0 <ring_buffer_dequeue>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d1e7      	bne.n	8000d16 <ring_buffer_dequeue_arr+0x2c>
  }
  return cnt;
 8000d46:	2313      	movs	r3, #19
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	781b      	ldrb	r3, [r3, #0]
}
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b006      	add	sp, #24
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <mdbus_on_packet_send>:
ring_buffer_t m_message_queue_receive;
mdbus_State m_mdbus_state = IDLE;
uint8_t m_slave = '0';

void mdbus_on_packet_send()
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
	if(ring_buffer_is_empty(&m_message_queue_send)) return;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <mdbus_on_packet_send+0x34>)
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff ff01 	bl	8000b64 <ring_buffer_is_empty>
 8000d62:	1e03      	subs	r3, r0, #0
 8000d64:	d10b      	bne.n	8000d7e <mdbus_on_packet_send+0x2a>

	uint8_t data[PACKETSIZE];
	//read data from buffer
	ring_buffer_dequeue_arr(&m_message_queue_send, data, PACKETSIZE);
 8000d66:	1d39      	adds	r1, r7, #4
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <mdbus_on_packet_send+0x34>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff ffbc 	bl	8000cea <ring_buffer_dequeue_arr>
	//send queued package
	mdbus_send_packet_it(data, PACKETSIZE);
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2101      	movs	r1, #1
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff fc50 	bl	800061c <mdbus_send_packet_it>
 8000d7c:	e000      	b.n	8000d80 <mdbus_on_packet_send+0x2c>
	if(ring_buffer_is_empty(&m_message_queue_send)) return;
 8000d7e:	46c0      	nop			; (mov r8, r8)

}
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	2000010c 	.word	0x2000010c

08000d8c <mdbus_on_packet_receive>:

void mdbus_on_packet_receive(uint8_t *data, uint16_t size)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	000a      	movs	r2, r1
 8000d96:	1cbb      	adds	r3, r7, #2
 8000d98:	801a      	strh	r2, [r3, #0]
	ring_buffer_queue_arr(&m_message_queue_receive, data, PACKETSIZE);
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <mdbus_on_packet_receive+0x30>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff ff55 	bl	8000c50 <ring_buffer_queue_arr>
	mdbus_read_packet_it(data, size);
 8000da6:	1cbb      	adds	r3, r7, #2
 8000da8:	881a      	ldrh	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	0011      	movs	r1, r2
 8000dae:	0018      	movs	r0, r3
 8000db0:	f7ff fc48 	bl	8000644 <mdbus_read_packet_it>
}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b002      	add	sp, #8
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000510 	.word	0x20000510

08000dc0 <mdbus_slave_run>:

void mdbus_slave_run()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	switch(m_mdbus_state)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <mdbus_slave_run+0x54>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b08      	cmp	r3, #8
 8000dca:	d81f      	bhi.n	8000e0c <mdbus_slave_run+0x4c>
 8000dcc:	009a      	lsls	r2, r3, #2
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <mdbus_slave_run+0x58>)
 8000dd0:	18d3      	adds	r3, r2, r3
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	469f      	mov	pc, r3
	{
	case IDLE:
		idle();
 8000dd6:	f000 f843 	bl	8000e60 <idle>
		break;
 8000dda:	e018      	b.n	8000e0e <mdbus_slave_run+0x4e>

	case WAIT:
		wait();
 8000ddc:	f000 f868 	bl	8000eb0 <wait>
		break;
 8000de0:	e015      	b.n	8000e0e <mdbus_slave_run+0x4e>

	case FUNC_ADRESS:
		func_adress();
 8000de2:	f000 f881 	bl	8000ee8 <func_adress>
		break;
 8000de6:	e012      	b.n	8000e0e <mdbus_slave_run+0x4e>

	case ERROR_UNKNOWN:
		error_unknown();
 8000de8:	f000 f8a4 	bl	8000f34 <error_unknown>
		break;
 8000dec:	e00f      	b.n	8000e0e <mdbus_slave_run+0x4e>

	case OK:
		ok();
 8000dee:	f000 f8bd 	bl	8000f6c <ok>
		break;
 8000df2:	e00c      	b.n	8000e0e <mdbus_slave_run+0x4e>

	case FAIL:
		fail();
 8000df4:	f000 f8d6 	bl	8000fa4 <fail>
		break;
 8000df8:	e009      	b.n	8000e0e <mdbus_slave_run+0x4e>

	case CHECK_FRAME:
		check_frame();
 8000dfa:	f000 f8e1 	bl	8000fc0 <check_frame>
		break;
 8000dfe:	e006      	b.n	8000e0e <mdbus_slave_run+0x4e>

	case FUNC1:
		func1();
 8000e00:	f000 f8e4 	bl	8000fcc <func1>
		break;
 8000e04:	e003      	b.n	8000e0e <mdbus_slave_run+0x4e>

	case FUNC2:
		func2();
 8000e06:	f000 f8eb 	bl	8000fe0 <func2>
		break;
 8000e0a:	e000      	b.n	8000e0e <mdbus_slave_run+0x4e>

	default:
		break;
 8000e0c:	46c0      	nop			; (mov r8, r8)
	}
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000912 	.word	0x20000912
 8000e18:	080053ac 	.word	0x080053ac

08000e1c <mdbus_slave_configure>:

void mdbus_slave_configure(uint8_t adress)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	0002      	movs	r2, r0
 8000e24:	1dfb      	adds	r3, r7, #7
 8000e26:	701a      	strb	r2, [r3, #0]
	m_mdbus_state = IDLE;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <mdbus_slave_configure+0x34>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
	ring_buffer_init(&m_message_queue_send);
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <mdbus_slave_configure+0x38>)
 8000e30:	0018      	movs	r0, r3
 8000e32:	f7ff fecb 	bl	8000bcc <ring_buffer_init>
	ring_buffer_init(&m_message_queue_receive);
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <mdbus_slave_configure+0x3c>)
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff fec7 	bl	8000bcc <ring_buffer_init>
	m_slave = adress;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <mdbus_slave_configure+0x40>)
 8000e40:	1dfa      	adds	r2, r7, #7
 8000e42:	7812      	ldrb	r2, [r2, #0]
 8000e44:	701a      	strb	r2, [r3, #0]
}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	20000912 	.word	0x20000912
 8000e54:	2000010c 	.word	0x2000010c
 8000e58:	20000510 	.word	0x20000510
 8000e5c:	20000004 	.word	0x20000004

08000e60 <idle>:

void idle()
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
	if(ring_buffer_is_empty(&m_message_queue_receive)) return;
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <idle+0x44>)
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f7ff fe7b 	bl	8000b64 <ring_buffer_is_empty>
 8000e6e:	1e03      	subs	r3, r0, #0
 8000e70:	d113      	bne.n	8000e9a <idle+0x3a>

	uint8_t data[PACKETSIZE];
	ring_buffer_dequeue_arr(&m_message_queue_receive, data, PACKETSIZE);
 8000e72:	1d39      	adds	r1, r7, #4
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <idle+0x44>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff ff36 	bl	8000cea <ring_buffer_dequeue_arr>

	//if the first bite is the adress of our mashine, if not, wait for end of package
	if(m_slave == data[0])
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	781a      	ldrb	r2, [r3, #0]
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <idle+0x48>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d103      	bne.n	8000e92 <idle+0x32>
	{
		m_mdbus_state = FUNC_ADRESS;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <idle+0x4c>)
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	701a      	strb	r2, [r3, #0]
 8000e90:	e004      	b.n	8000e9c <idle+0x3c>
	}else
	{
		m_mdbus_state = WAIT;
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <idle+0x4c>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	701a      	strb	r2, [r3, #0]
 8000e98:	e000      	b.n	8000e9c <idle+0x3c>
	if(ring_buffer_is_empty(&m_message_queue_receive)) return;
 8000e9a:	46c0      	nop			; (mov r8, r8)
	}

}
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	20000510 	.word	0x20000510
 8000ea8:	20000004 	.word	0x20000004
 8000eac:	20000912 	.word	0x20000912

08000eb0 <wait>:

void wait()
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
	uint8_t data[PACKETSIZE];
	*data = 'w';
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2277      	movs	r2, #119	; 0x77
 8000eba:	701a      	strb	r2, [r3, #0]
	ring_buffer_queue_arr(&m_message_queue_send, data, PACKETSIZE);
 8000ebc:	1d39      	adds	r1, r7, #4
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <wait+0x30>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f7ff fec4 	bl	8000c50 <ring_buffer_queue_arr>
	if(isEof())
 8000ec8:	f000 f894 	bl	8000ff4 <isEof>
 8000ecc:	1e03      	subs	r3, r0, #0
 8000ece:	d002      	beq.n	8000ed6 <wait+0x26>
	{
		m_mdbus_state = IDLE;
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <wait+0x34>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
	}
}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b002      	add	sp, #8
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	2000010c 	.word	0x2000010c
 8000ee4:	20000912 	.word	0x20000912

08000ee8 <func_adress>:

void func_adress()
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
	//read function adress from input
	if(ring_buffer_is_empty(&m_message_queue_receive)) return;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <func_adress+0x40>)
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f7ff fe37 	bl	8000b64 <ring_buffer_is_empty>
 8000ef6:	1e03      	subs	r3, r0, #0
 8000ef8:	d112      	bne.n	8000f20 <func_adress+0x38>

	uint8_t data[PACKETSIZE];
	ring_buffer_dequeue_arr(&m_message_queue_receive, data, PACKETSIZE);
 8000efa:	1d39      	adds	r1, r7, #4
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <func_adress+0x40>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff fef2 	bl	8000cea <ring_buffer_dequeue_arr>

	//when we have data select right funciton to do

	uint8_t data1[PACKETSIZE];
	*data1 = 'f';
 8000f06:	003b      	movs	r3, r7
 8000f08:	2266      	movs	r2, #102	; 0x66
 8000f0a:	701a      	strb	r2, [r3, #0]
	ring_buffer_queue_arr(&m_message_queue_send, data1, PACKETSIZE);
 8000f0c:	0039      	movs	r1, r7
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <func_adress+0x44>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	0018      	movs	r0, r3
 8000f14:	f7ff fe9c 	bl	8000c50 <ring_buffer_queue_arr>

	m_mdbus_state = IDLE;
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <func_adress+0x48>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	e000      	b.n	8000f22 <func_adress+0x3a>
	if(ring_buffer_is_empty(&m_message_queue_receive)) return;
 8000f20:	46c0      	nop			; (mov r8, r8)

}
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b002      	add	sp, #8
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000510 	.word	0x20000510
 8000f2c:	2000010c 	.word	0x2000010c
 8000f30:	20000912 	.word	0x20000912

08000f34 <error_unknown>:

void error_unknown()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
	if(isEof())
 8000f3a:	f000 f85b 	bl	8000ff4 <isEof>
 8000f3e:	1e03      	subs	r3, r0, #0
 8000f40:	d002      	beq.n	8000f48 <error_unknown+0x14>
	{
		m_mdbus_state = IDLE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <error_unknown+0x30>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
	}

	uint8_t data[PACKETSIZE];
	*data = 'e';
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2265      	movs	r2, #101	; 0x65
 8000f4c:	701a      	strb	r2, [r3, #0]
	ring_buffer_queue_arr(&m_message_queue_send, data, PACKETSIZE);
 8000f4e:	1d39      	adds	r1, r7, #4
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <error_unknown+0x34>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff fe7b 	bl	8000c50 <ring_buffer_queue_arr>
}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b002      	add	sp, #8
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	20000912 	.word	0x20000912
 8000f68:	2000010c 	.word	0x2000010c

08000f6c <ok>:

void ok()
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
	// wait for end of frame and go to idle state
	if(isEof())	m_mdbus_state = IDLE;
 8000f72:	f000 f83f 	bl	8000ff4 <isEof>
 8000f76:	1e03      	subs	r3, r0, #0
 8000f78:	d002      	beq.n	8000f80 <ok+0x14>
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <ok+0x30>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]

	uint8_t data[PACKETSIZE];
	*data = 'k';
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	226b      	movs	r2, #107	; 0x6b
 8000f84:	701a      	strb	r2, [r3, #0]
	ring_buffer_queue_arr(&m_message_queue_send, data, PACKETSIZE);
 8000f86:	1d39      	adds	r1, r7, #4
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <ok+0x34>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f7ff fe5f 	bl	8000c50 <ring_buffer_queue_arr>
}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	20000912 	.word	0x20000912
 8000fa0:	2000010c 	.word	0x2000010c

08000fa4 <fail>:

void fail()
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	// wait for end of frame and go to idle state
	if(isEof())	m_mdbus_state = IDLE;
 8000fa8:	f000 f824 	bl	8000ff4 <isEof>
 8000fac:	1e03      	subs	r3, r0, #0
 8000fae:	d002      	beq.n	8000fb6 <fail+0x12>
 8000fb0:	4b02      	ldr	r3, [pc, #8]	; (8000fbc <fail+0x18>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000912 	.word	0x20000912

08000fc0 <check_frame>:

void check_frame()
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0

}
 8000fc4:	46c0      	nop			; (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <func1>:

void func1()
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	//at the end check if frame is ok
	m_mdbus_state = CHECK_FRAME;
 8000fd0:	4b02      	ldr	r3, [pc, #8]	; (8000fdc <func1+0x10>)
 8000fd2:	2206      	movs	r2, #6
 8000fd4:	701a      	strb	r2, [r3, #0]
}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000912 	.word	0x20000912

08000fe0 <func2>:

void func2()
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	//at the end check if frame is ok
	m_mdbus_state = CHECK_FRAME;
 8000fe4:	4b02      	ldr	r3, [pc, #8]	; (8000ff0 <func2+0x10>)
 8000fe6:	2206      	movs	r2, #6
 8000fe8:	701a      	strb	r2, [r3, #0]
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000912 	.word	0x20000912

08000ff4 <isEof>:

bool isEof()
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	return true;
 8000ff8:	2301      	movs	r3, #1
}
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001002:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001004:	f7ff fda8 	bl	8000b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <LoopForever+0x6>)
  ldr r1, =_edata
 800100a:	490d      	ldr	r1, [pc, #52]	; (8001040 <LoopForever+0xa>)
  ldr r2, =_sidata
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <LoopForever+0xe>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001020:	4c0a      	ldr	r4, [pc, #40]	; (800104c <LoopForever+0x16>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800102e:	f004 f955 	bl	80052dc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001032:	f7ff fb35 	bl	80006a0 <main>

08001036 <LoopForever>:

LoopForever:
  b LoopForever
 8001036:	e7fe      	b.n	8001036 <LoopForever>
  ldr   r0, =_estack
 8001038:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001044:	08005408 	.word	0x08005408
  ldr r2, =_sbss
 8001048:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800104c:	20000918 	.word	0x20000918

08001050 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC1_COMP_IRQHandler>
	...

08001054 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_Init+0x3c>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_Init+0x3c>)
 8001066:	2180      	movs	r1, #128	; 0x80
 8001068:	0049      	lsls	r1, r1, #1
 800106a:	430a      	orrs	r2, r1
 800106c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106e:	2000      	movs	r0, #0
 8001070:	f000 f810 	bl	8001094 <HAL_InitTick>
 8001074:	1e03      	subs	r3, r0, #0
 8001076:	d003      	beq.n	8001080 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001078:	1dfb      	adds	r3, r7, #7
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	e001      	b.n	8001084 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001080:	f7ff fc86 	bl	8000990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001084:	1dfb      	adds	r3, r7, #7
 8001086:	781b      	ldrb	r3, [r3, #0]
}
 8001088:	0018      	movs	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	b002      	add	sp, #8
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40022000 	.word	0x40022000

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800109c:	230f      	movs	r3, #15
 800109e:	18fb      	adds	r3, r7, r3
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <HAL_InitTick+0x88>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d02b      	beq.n	8001104 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <HAL_InitTick+0x8c>)
 80010ae:	681c      	ldr	r4, [r3, #0]
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <HAL_InitTick+0x88>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	0019      	movs	r1, r3
 80010b6:	23fa      	movs	r3, #250	; 0xfa
 80010b8:	0098      	lsls	r0, r3, #2
 80010ba:	f7ff f823 	bl	8000104 <__udivsi3>
 80010be:	0003      	movs	r3, r0
 80010c0:	0019      	movs	r1, r3
 80010c2:	0020      	movs	r0, r4
 80010c4:	f7ff f81e 	bl	8000104 <__udivsi3>
 80010c8:	0003      	movs	r3, r0
 80010ca:	0018      	movs	r0, r3
 80010cc:	f000 f92f 	bl	800132e <HAL_SYSTICK_Config>
 80010d0:	1e03      	subs	r3, r0, #0
 80010d2:	d112      	bne.n	80010fa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d80a      	bhi.n	80010f0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	2301      	movs	r3, #1
 80010de:	425b      	negs	r3, r3
 80010e0:	2200      	movs	r2, #0
 80010e2:	0018      	movs	r0, r3
 80010e4:	f000 f8fe 	bl	80012e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_InitTick+0x90>)
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	e00d      	b.n	800110c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010f0:	230f      	movs	r3, #15
 80010f2:	18fb      	adds	r3, r7, r3
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	e008      	b.n	800110c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010fa:	230f      	movs	r3, #15
 80010fc:	18fb      	adds	r3, r7, r3
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
 8001102:	e003      	b.n	800110c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001104:	230f      	movs	r3, #15
 8001106:	18fb      	adds	r3, r7, r3
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800110c:	230f      	movs	r3, #15
 800110e:	18fb      	adds	r3, r7, r3
 8001110:	781b      	ldrb	r3, [r3, #0]
}
 8001112:	0018      	movs	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	b005      	add	sp, #20
 8001118:	bd90      	pop	{r4, r7, pc}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	2000000c 	.word	0x2000000c
 8001120:	20000000 	.word	0x20000000
 8001124:	20000008 	.word	0x20000008

08001128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_IncTick+0x1c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	001a      	movs	r2, r3
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_IncTick+0x20>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	18d2      	adds	r2, r2, r3
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_IncTick+0x20>)
 800113a:	601a      	str	r2, [r3, #0]
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	2000000c 	.word	0x2000000c
 8001148:	20000914 	.word	0x20000914

0800114c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b02      	ldr	r3, [pc, #8]	; (800115c <HAL_GetTick+0x10>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	20000914 	.word	0x20000914

08001160 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800116e:	4013      	ands	r3, r2
 8001170:	0019      	movs	r1, r3
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	430a      	orrs	r2, r1
 8001178:	601a      	str	r2, [r3, #0]
}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	b002      	add	sp, #8
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	40010000 	.word	0x40010000
 8001188:	fffff9ff 	.word	0xfffff9ff

0800118c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	0002      	movs	r2, r0
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b7f      	cmp	r3, #127	; 0x7f
 800119e:	d809      	bhi.n	80011b4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a0:	1dfb      	adds	r3, r7, #7
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	001a      	movs	r2, r3
 80011a6:	231f      	movs	r3, #31
 80011a8:	401a      	ands	r2, r3
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <__NVIC_EnableIRQ+0x30>)
 80011ac:	2101      	movs	r1, #1
 80011ae:	4091      	lsls	r1, r2
 80011b0:	000a      	movs	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b002      	add	sp, #8
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	0002      	movs	r2, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b7f      	cmp	r3, #127	; 0x7f
 80011d4:	d828      	bhi.n	8001228 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d6:	4a2f      	ldr	r2, [pc, #188]	; (8001294 <__NVIC_SetPriority+0xd4>)
 80011d8:	1dfb      	adds	r3, r7, #7
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	33c0      	adds	r3, #192	; 0xc0
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	589b      	ldr	r3, [r3, r2]
 80011e6:	1dfa      	adds	r2, r7, #7
 80011e8:	7812      	ldrb	r2, [r2, #0]
 80011ea:	0011      	movs	r1, r2
 80011ec:	2203      	movs	r2, #3
 80011ee:	400a      	ands	r2, r1
 80011f0:	00d2      	lsls	r2, r2, #3
 80011f2:	21ff      	movs	r1, #255	; 0xff
 80011f4:	4091      	lsls	r1, r2
 80011f6:	000a      	movs	r2, r1
 80011f8:	43d2      	mvns	r2, r2
 80011fa:	401a      	ands	r2, r3
 80011fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	019b      	lsls	r3, r3, #6
 8001202:	22ff      	movs	r2, #255	; 0xff
 8001204:	401a      	ands	r2, r3
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	0018      	movs	r0, r3
 800120c:	2303      	movs	r3, #3
 800120e:	4003      	ands	r3, r0
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001214:	481f      	ldr	r0, [pc, #124]	; (8001294 <__NVIC_SetPriority+0xd4>)
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	b25b      	sxtb	r3, r3
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	430a      	orrs	r2, r1
 8001220:	33c0      	adds	r3, #192	; 0xc0
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001226:	e031      	b.n	800128c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001228:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <__NVIC_SetPriority+0xd8>)
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	0019      	movs	r1, r3
 8001230:	230f      	movs	r3, #15
 8001232:	400b      	ands	r3, r1
 8001234:	3b08      	subs	r3, #8
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	3306      	adds	r3, #6
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	18d3      	adds	r3, r2, r3
 800123e:	3304      	adds	r3, #4
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	1dfa      	adds	r2, r7, #7
 8001244:	7812      	ldrb	r2, [r2, #0]
 8001246:	0011      	movs	r1, r2
 8001248:	2203      	movs	r2, #3
 800124a:	400a      	ands	r2, r1
 800124c:	00d2      	lsls	r2, r2, #3
 800124e:	21ff      	movs	r1, #255	; 0xff
 8001250:	4091      	lsls	r1, r2
 8001252:	000a      	movs	r2, r1
 8001254:	43d2      	mvns	r2, r2
 8001256:	401a      	ands	r2, r3
 8001258:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	019b      	lsls	r3, r3, #6
 800125e:	22ff      	movs	r2, #255	; 0xff
 8001260:	401a      	ands	r2, r3
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	0018      	movs	r0, r3
 8001268:	2303      	movs	r3, #3
 800126a:	4003      	ands	r3, r0
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <__NVIC_SetPriority+0xd8>)
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	001c      	movs	r4, r3
 8001278:	230f      	movs	r3, #15
 800127a:	4023      	ands	r3, r4
 800127c:	3b08      	subs	r3, #8
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	430a      	orrs	r2, r1
 8001282:	3306      	adds	r3, #6
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	18c3      	adds	r3, r0, r3
 8001288:	3304      	adds	r3, #4
 800128a:	601a      	str	r2, [r3, #0]
}
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	b003      	add	sp, #12
 8001292:	bd90      	pop	{r4, r7, pc}
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	1e5a      	subs	r2, r3, #1
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	045b      	lsls	r3, r3, #17
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d301      	bcc.n	80012b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b0:	2301      	movs	r3, #1
 80012b2:	e010      	b.n	80012d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <SysTick_Config+0x44>)
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	3a01      	subs	r2, #1
 80012ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012bc:	2301      	movs	r3, #1
 80012be:	425b      	negs	r3, r3
 80012c0:	2103      	movs	r1, #3
 80012c2:	0018      	movs	r0, r3
 80012c4:	f7ff ff7c 	bl	80011c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SysTick_Config+0x44>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Config+0x44>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	0018      	movs	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	210f      	movs	r1, #15
 80012f0:	187b      	adds	r3, r7, r1
 80012f2:	1c02      	adds	r2, r0, #0
 80012f4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	187b      	adds	r3, r7, r1
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b25b      	sxtb	r3, r3
 80012fe:	0011      	movs	r1, r2
 8001300:	0018      	movs	r0, r3
 8001302:	f7ff ff5d 	bl	80011c0 <__NVIC_SetPriority>
}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b004      	add	sp, #16
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	0002      	movs	r2, r0
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b25b      	sxtb	r3, r3
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff ff33 	bl	800118c <__NVIC_EnableIRQ>
}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	46bd      	mov	sp, r7
 800132a:	b002      	add	sp, #8
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	0018      	movs	r0, r3
 800133a:	f7ff ffaf 	bl	800129c <SysTick_Config>
 800133e:	0003      	movs	r3, r0
}
 8001340:	0018      	movs	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	b002      	add	sp, #8
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e050      	b.n	80013fc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2225      	movs	r2, #37	; 0x25
 800135e:	5c9b      	ldrb	r3, [r3, r2]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d008      	beq.n	8001378 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2204      	movs	r2, #4
 800136a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2224      	movs	r2, #36	; 0x24
 8001370:	2100      	movs	r1, #0
 8001372:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e041      	b.n	80013fc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	210e      	movs	r1, #14
 8001384:	438a      	bics	r2, r1
 8001386:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	491c      	ldr	r1, [pc, #112]	; (8001404 <HAL_DMA_Abort+0xbc>)
 8001394:	400a      	ands	r2, r1
 8001396:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2101      	movs	r1, #1
 80013a4:	438a      	bics	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HAL_DMA_Abort+0xc0>)
 80013aa:	6859      	ldr	r1, [r3, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	221c      	movs	r2, #28
 80013b2:	4013      	ands	r3, r2
 80013b4:	2201      	movs	r2, #1
 80013b6:	409a      	lsls	r2, r3
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_DMA_Abort+0xc0>)
 80013ba:	430a      	orrs	r2, r1
 80013bc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80013c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00c      	beq.n	80013ea <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013da:	490a      	ldr	r1, [pc, #40]	; (8001404 <HAL_DMA_Abort+0xbc>)
 80013dc:	400a      	ands	r2, r1
 80013de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80013e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2225      	movs	r2, #37	; 0x25
 80013ee:	2101      	movs	r1, #1
 80013f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2224      	movs	r2, #36	; 0x24
 80013f6:	2100      	movs	r1, #0
 80013f8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	b002      	add	sp, #8
 8001402:	bd80      	pop	{r7, pc}
 8001404:	fffffeff 	.word	0xfffffeff
 8001408:	40020000 	.word	0x40020000

0800140c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001414:	210f      	movs	r1, #15
 8001416:	187b      	adds	r3, r7, r1
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2225      	movs	r2, #37	; 0x25
 8001420:	5c9b      	ldrb	r3, [r3, r2]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d006      	beq.n	8001436 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2204      	movs	r2, #4
 800142c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800142e:	187b      	adds	r3, r7, r1
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
 8001434:	e049      	b.n	80014ca <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	210e      	movs	r1, #14
 8001442:	438a      	bics	r2, r1
 8001444:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2101      	movs	r1, #1
 8001452:	438a      	bics	r2, r1
 8001454:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001460:	491d      	ldr	r1, [pc, #116]	; (80014d8 <HAL_DMA_Abort_IT+0xcc>)
 8001462:	400a      	ands	r2, r1
 8001464:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <HAL_DMA_Abort_IT+0xd0>)
 8001468:	6859      	ldr	r1, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	221c      	movs	r2, #28
 8001470:	4013      	ands	r3, r2
 8001472:	2201      	movs	r2, #1
 8001474:	409a      	lsls	r2, r3
 8001476:	4b19      	ldr	r3, [pc, #100]	; (80014dc <HAL_DMA_Abort_IT+0xd0>)
 8001478:	430a      	orrs	r2, r1
 800147a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001484:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00c      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001498:	490f      	ldr	r1, [pc, #60]	; (80014d8 <HAL_DMA_Abort_IT+0xcc>)
 800149a:	400a      	ands	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80014a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2225      	movs	r2, #37	; 0x25
 80014ac:	2101      	movs	r1, #1
 80014ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2224      	movs	r2, #36	; 0x24
 80014b4:	2100      	movs	r1, #0
 80014b6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d004      	beq.n	80014ca <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	0010      	movs	r0, r2
 80014c8:	4798      	blx	r3
    }
  }
  return status;
 80014ca:	230f      	movs	r3, #15
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	781b      	ldrb	r3, [r3, #0]
}
 80014d0:	0018      	movs	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b004      	add	sp, #16
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	fffffeff 	.word	0xfffffeff
 80014dc:	40020000 	.word	0x40020000

080014e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ee:	e147      	b.n	8001780 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2101      	movs	r1, #1
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	4091      	lsls	r1, r2
 80014fa:	000a      	movs	r2, r1
 80014fc:	4013      	ands	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d100      	bne.n	8001508 <HAL_GPIO_Init+0x28>
 8001506:	e138      	b.n	800177a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2203      	movs	r2, #3
 800150e:	4013      	ands	r3, r2
 8001510:	2b01      	cmp	r3, #1
 8001512:	d005      	beq.n	8001520 <HAL_GPIO_Init+0x40>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2203      	movs	r2, #3
 800151a:	4013      	ands	r3, r2
 800151c:	2b02      	cmp	r3, #2
 800151e:	d130      	bne.n	8001582 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	409a      	lsls	r2, r3
 800152e:	0013      	movs	r3, r2
 8001530:	43da      	mvns	r2, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	68da      	ldr	r2, [r3, #12]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	409a      	lsls	r2, r3
 8001542:	0013      	movs	r3, r2
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001556:	2201      	movs	r2, #1
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
 800155c:	0013      	movs	r3, r2
 800155e:	43da      	mvns	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	091b      	lsrs	r3, r3, #4
 800156c:	2201      	movs	r2, #1
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
 8001574:	0013      	movs	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2203      	movs	r2, #3
 8001588:	4013      	ands	r3, r2
 800158a:	2b03      	cmp	r3, #3
 800158c:	d017      	beq.n	80015be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	2203      	movs	r2, #3
 800159a:	409a      	lsls	r2, r3
 800159c:	0013      	movs	r3, r2
 800159e:	43da      	mvns	r2, r3
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	409a      	lsls	r2, r3
 80015b0:	0013      	movs	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2203      	movs	r2, #3
 80015c4:	4013      	ands	r3, r2
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d123      	bne.n	8001612 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	08da      	lsrs	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3208      	adds	r2, #8
 80015d2:	0092      	lsls	r2, r2, #2
 80015d4:	58d3      	ldr	r3, [r2, r3]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2207      	movs	r2, #7
 80015dc:	4013      	ands	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	220f      	movs	r2, #15
 80015e2:	409a      	lsls	r2, r3
 80015e4:	0013      	movs	r3, r2
 80015e6:	43da      	mvns	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	691a      	ldr	r2, [r3, #16]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2107      	movs	r1, #7
 80015f6:	400b      	ands	r3, r1
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	409a      	lsls	r2, r3
 80015fc:	0013      	movs	r3, r2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	08da      	lsrs	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3208      	adds	r2, #8
 800160c:	0092      	lsls	r2, r2, #2
 800160e:	6939      	ldr	r1, [r7, #16]
 8001610:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	409a      	lsls	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	43da      	mvns	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2203      	movs	r2, #3
 8001630:	401a      	ands	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	409a      	lsls	r2, r3
 8001638:	0013      	movs	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	23c0      	movs	r3, #192	; 0xc0
 800164c:	029b      	lsls	r3, r3, #10
 800164e:	4013      	ands	r3, r2
 8001650:	d100      	bne.n	8001654 <HAL_GPIO_Init+0x174>
 8001652:	e092      	b.n	800177a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001654:	4a50      	ldr	r2, [pc, #320]	; (8001798 <HAL_GPIO_Init+0x2b8>)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	3318      	adds	r3, #24
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	589b      	ldr	r3, [r3, r2]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2203      	movs	r2, #3
 8001666:	4013      	ands	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	220f      	movs	r2, #15
 800166c:	409a      	lsls	r2, r3
 800166e:	0013      	movs	r3, r2
 8001670:	43da      	mvns	r2, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	23a0      	movs	r3, #160	; 0xa0
 800167c:	05db      	lsls	r3, r3, #23
 800167e:	429a      	cmp	r2, r3
 8001680:	d013      	beq.n	80016aa <HAL_GPIO_Init+0x1ca>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a45      	ldr	r2, [pc, #276]	; (800179c <HAL_GPIO_Init+0x2bc>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d00d      	beq.n	80016a6 <HAL_GPIO_Init+0x1c6>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a44      	ldr	r2, [pc, #272]	; (80017a0 <HAL_GPIO_Init+0x2c0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d007      	beq.n	80016a2 <HAL_GPIO_Init+0x1c2>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a43      	ldr	r2, [pc, #268]	; (80017a4 <HAL_GPIO_Init+0x2c4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d101      	bne.n	800169e <HAL_GPIO_Init+0x1be>
 800169a:	2303      	movs	r3, #3
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x1cc>
 800169e:	2305      	movs	r3, #5
 80016a0:	e004      	b.n	80016ac <HAL_GPIO_Init+0x1cc>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_Init+0x1cc>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <HAL_GPIO_Init+0x1cc>
 80016aa:	2300      	movs	r3, #0
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	2103      	movs	r1, #3
 80016b0:	400a      	ands	r2, r1
 80016b2:	00d2      	lsls	r2, r2, #3
 80016b4:	4093      	lsls	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80016bc:	4936      	ldr	r1, [pc, #216]	; (8001798 <HAL_GPIO_Init+0x2b8>)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3318      	adds	r3, #24
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016ca:	4b33      	ldr	r3, [pc, #204]	; (8001798 <HAL_GPIO_Init+0x2b8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43da      	mvns	r2, r3
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	035b      	lsls	r3, r3, #13
 80016e2:	4013      	ands	r3, r2
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016ee:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <HAL_GPIO_Init+0x2b8>)
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80016f4:	4b28      	ldr	r3, [pc, #160]	; (8001798 <HAL_GPIO_Init+0x2b8>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	43da      	mvns	r2, r3
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	039b      	lsls	r3, r3, #14
 800170c:	4013      	ands	r3, r2
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001718:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <HAL_GPIO_Init+0x2b8>)
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800171e:	4a1e      	ldr	r2, [pc, #120]	; (8001798 <HAL_GPIO_Init+0x2b8>)
 8001720:	2384      	movs	r3, #132	; 0x84
 8001722:	58d3      	ldr	r3, [r2, r3]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43da      	mvns	r2, r3
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	029b      	lsls	r3, r3, #10
 8001738:	4013      	ands	r3, r2
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001744:	4914      	ldr	r1, [pc, #80]	; (8001798 <HAL_GPIO_Init+0x2b8>)
 8001746:	2284      	movs	r2, #132	; 0x84
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800174c:	4a12      	ldr	r2, [pc, #72]	; (8001798 <HAL_GPIO_Init+0x2b8>)
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	58d3      	ldr	r3, [r2, r3]
 8001752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	43da      	mvns	r2, r3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	025b      	lsls	r3, r3, #9
 8001766:	4013      	ands	r3, r2
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001772:	4909      	ldr	r1, [pc, #36]	; (8001798 <HAL_GPIO_Init+0x2b8>)
 8001774:	2280      	movs	r2, #128	; 0x80
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	40da      	lsrs	r2, r3
 8001788:	1e13      	subs	r3, r2, #0
 800178a:	d000      	beq.n	800178e <HAL_GPIO_Init+0x2ae>
 800178c:	e6b0      	b.n	80014f0 <HAL_GPIO_Init+0x10>
  }
}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b006      	add	sp, #24
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021800 	.word	0x40021800
 800179c:	50000400 	.word	0x50000400
 80017a0:	50000800 	.word	0x50000800
 80017a4:	50000c00 	.word	0x50000c00

080017a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	0008      	movs	r0, r1
 80017b2:	0011      	movs	r1, r2
 80017b4:	1cbb      	adds	r3, r7, #2
 80017b6:	1c02      	adds	r2, r0, #0
 80017b8:	801a      	strh	r2, [r3, #0]
 80017ba:	1c7b      	adds	r3, r7, #1
 80017bc:	1c0a      	adds	r2, r1, #0
 80017be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017c0:	1c7b      	adds	r3, r7, #1
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017c8:	1cbb      	adds	r3, r7, #2
 80017ca:	881a      	ldrh	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017d0:	e003      	b.n	80017da <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017d2:	1cbb      	adds	r3, r7, #2
 80017d4:	881a      	ldrh	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	46bd      	mov	sp, r7
 80017de:	b002      	add	sp, #8
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a19      	ldr	r2, [pc, #100]	; (8001858 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	4b17      	ldr	r3, [pc, #92]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	429a      	cmp	r2, r3
 8001806:	d11f      	bne.n	8001848 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	0013      	movs	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	189b      	adds	r3, r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4912      	ldr	r1, [pc, #72]	; (8001860 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001816:	0018      	movs	r0, r3
 8001818:	f7fe fc74 	bl	8000104 <__udivsi3>
 800181c:	0003      	movs	r3, r0
 800181e:	3301      	adds	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001822:	e008      	b.n	8001836 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3b01      	subs	r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e001      	b.n	8001836 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e009      	b.n	800184a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001836:	4b07      	ldr	r3, [pc, #28]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	401a      	ands	r2, r3
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	429a      	cmp	r2, r3
 8001846:	d0ed      	beq.n	8001824 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	0018      	movs	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	b004      	add	sp, #16
 8001850:	bd80      	pop	{r7, pc}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	40007000 	.word	0x40007000
 8001858:	fffff9ff 	.word	0xfffff9ff
 800185c:	20000000 	.word	0x20000000
 8001860:	000f4240 	.word	0x000f4240

08001864 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <LL_RCC_GetAPB1Prescaler+0x14>)
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	23e0      	movs	r3, #224	; 0xe0
 800186e:	01db      	lsls	r3, r3, #7
 8001870:	4013      	ands	r3, r2
}
 8001872:	0018      	movs	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40021000 	.word	0x40021000

0800187c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e2fe      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2201      	movs	r2, #1
 8001894:	4013      	ands	r3, r2
 8001896:	d100      	bne.n	800189a <HAL_RCC_OscConfig+0x1e>
 8001898:	e07c      	b.n	8001994 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800189a:	4bc3      	ldr	r3, [pc, #780]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2238      	movs	r2, #56	; 0x38
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018a4:	4bc0      	ldr	r3, [pc, #768]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2203      	movs	r2, #3
 80018aa:	4013      	ands	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	2b10      	cmp	r3, #16
 80018b2:	d102      	bne.n	80018ba <HAL_RCC_OscConfig+0x3e>
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d002      	beq.n	80018c0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d10b      	bne.n	80018d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c0:	4bb9      	ldr	r3, [pc, #740]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	029b      	lsls	r3, r3, #10
 80018c8:	4013      	ands	r3, r2
 80018ca:	d062      	beq.n	8001992 <HAL_RCC_OscConfig+0x116>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d15e      	bne.n	8001992 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e2d9      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	025b      	lsls	r3, r3, #9
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d107      	bne.n	80018f4 <HAL_RCC_OscConfig+0x78>
 80018e4:	4bb0      	ldr	r3, [pc, #704]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4baf      	ldr	r3, [pc, #700]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80018ea:	2180      	movs	r1, #128	; 0x80
 80018ec:	0249      	lsls	r1, r1, #9
 80018ee:	430a      	orrs	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e020      	b.n	8001936 <HAL_RCC_OscConfig+0xba>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	23a0      	movs	r3, #160	; 0xa0
 80018fa:	02db      	lsls	r3, r3, #11
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d10e      	bne.n	800191e <HAL_RCC_OscConfig+0xa2>
 8001900:	4ba9      	ldr	r3, [pc, #676]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4ba8      	ldr	r3, [pc, #672]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	02c9      	lsls	r1, r1, #11
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	4ba6      	ldr	r3, [pc, #664]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	4ba5      	ldr	r3, [pc, #660]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	0249      	lsls	r1, r1, #9
 8001918:	430a      	orrs	r2, r1
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	e00b      	b.n	8001936 <HAL_RCC_OscConfig+0xba>
 800191e:	4ba2      	ldr	r3, [pc, #648]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4ba1      	ldr	r3, [pc, #644]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001924:	49a1      	ldr	r1, [pc, #644]	; (8001bac <HAL_RCC_OscConfig+0x330>)
 8001926:	400a      	ands	r2, r1
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	4b9f      	ldr	r3, [pc, #636]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4b9e      	ldr	r3, [pc, #632]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001930:	499f      	ldr	r1, [pc, #636]	; (8001bb0 <HAL_RCC_OscConfig+0x334>)
 8001932:	400a      	ands	r2, r1
 8001934:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d014      	beq.n	8001968 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193e:	f7ff fc05 	bl	800114c <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff fc00 	bl	800114c <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e298      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800195a:	4b93      	ldr	r3, [pc, #588]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	029b      	lsls	r3, r3, #10
 8001962:	4013      	ands	r3, r2
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0xcc>
 8001966:	e015      	b.n	8001994 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001968:	f7ff fbf0 	bl	800114c <HAL_GetTick>
 800196c:	0003      	movs	r3, r0
 800196e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001972:	f7ff fbeb 	bl	800114c <HAL_GetTick>
 8001976:	0002      	movs	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b64      	cmp	r3, #100	; 0x64
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e283      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001984:	4b88      	ldr	r3, [pc, #544]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	029b      	lsls	r3, r3, #10
 800198c:	4013      	ands	r3, r2
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0xf6>
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001992:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2202      	movs	r2, #2
 800199a:	4013      	ands	r3, r2
 800199c:	d100      	bne.n	80019a0 <HAL_RCC_OscConfig+0x124>
 800199e:	e099      	b.n	8001ad4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019a0:	4b81      	ldr	r3, [pc, #516]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2238      	movs	r2, #56	; 0x38
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019aa:	4b7f      	ldr	r3, [pc, #508]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2203      	movs	r2, #3
 80019b0:	4013      	ands	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2b10      	cmp	r3, #16
 80019b8:	d102      	bne.n	80019c0 <HAL_RCC_OscConfig+0x144>
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d002      	beq.n	80019c6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d135      	bne.n	8001a32 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c6:	4b78      	ldr	r3, [pc, #480]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4013      	ands	r3, r2
 80019d0:	d005      	beq.n	80019de <HAL_RCC_OscConfig+0x162>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e256      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019de:	4b72      	ldr	r3, [pc, #456]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4a74      	ldr	r2, [pc, #464]	; (8001bb4 <HAL_RCC_OscConfig+0x338>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	021a      	lsls	r2, r3, #8
 80019ee:	4b6e      	ldr	r3, [pc, #440]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80019f0:	430a      	orrs	r2, r1
 80019f2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d112      	bne.n	8001a20 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019fa:	4b6b      	ldr	r3, [pc, #428]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a6e      	ldr	r2, [pc, #440]	; (8001bb8 <HAL_RCC_OscConfig+0x33c>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	0019      	movs	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	4b67      	ldr	r3, [pc, #412]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a0e:	4b66      	ldr	r3, [pc, #408]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0adb      	lsrs	r3, r3, #11
 8001a14:	2207      	movs	r2, #7
 8001a16:	4013      	ands	r3, r2
 8001a18:	4a68      	ldr	r2, [pc, #416]	; (8001bbc <HAL_RCC_OscConfig+0x340>)
 8001a1a:	40da      	lsrs	r2, r3
 8001a1c:	4b68      	ldr	r3, [pc, #416]	; (8001bc0 <HAL_RCC_OscConfig+0x344>)
 8001a1e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a20:	4b68      	ldr	r3, [pc, #416]	; (8001bc4 <HAL_RCC_OscConfig+0x348>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7ff fb35 	bl	8001094 <HAL_InitTick>
 8001a2a:	1e03      	subs	r3, r0, #0
 8001a2c:	d051      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e22c      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d030      	beq.n	8001a9c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a3a:	4b5b      	ldr	r3, [pc, #364]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a5e      	ldr	r2, [pc, #376]	; (8001bb8 <HAL_RCC_OscConfig+0x33c>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	4b57      	ldr	r3, [pc, #348]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001a4e:	4b56      	ldr	r3, [pc, #344]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4b55      	ldr	r3, [pc, #340]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	0049      	lsls	r1, r1, #1
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fb76 	bl	800114c <HAL_GetTick>
 8001a60:	0003      	movs	r3, r0
 8001a62:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a66:	f7ff fb71 	bl	800114c <HAL_GetTick>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e209      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a78:	4b4b      	ldr	r3, [pc, #300]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4013      	ands	r3, r2
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a84:	4b48      	ldr	r3, [pc, #288]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	4a4a      	ldr	r2, [pc, #296]	; (8001bb4 <HAL_RCC_OscConfig+0x338>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	021a      	lsls	r2, r3, #8
 8001a94:	4b44      	ldr	r3, [pc, #272]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a96:	430a      	orrs	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	e01b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001a9c:	4b42      	ldr	r3, [pc, #264]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b41      	ldr	r3, [pc, #260]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001aa2:	4949      	ldr	r1, [pc, #292]	; (8001bc8 <HAL_RCC_OscConfig+0x34c>)
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fb50 	bl	800114c <HAL_GetTick>
 8001aac:	0003      	movs	r3, r0
 8001aae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab2:	f7ff fb4b 	bl	800114c <HAL_GetTick>
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e1e3      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ac4:	4b38      	ldr	r3, [pc, #224]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4013      	ands	r3, r2
 8001ace:	d1f0      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x236>
 8001ad0:	e000      	b.n	8001ad4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2208      	movs	r2, #8
 8001ada:	4013      	ands	r3, r2
 8001adc:	d047      	beq.n	8001b6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ade:	4b32      	ldr	r3, [pc, #200]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2238      	movs	r2, #56	; 0x38
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b18      	cmp	r3, #24
 8001ae8:	d10a      	bne.n	8001b00 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001aea:	4b2f      	ldr	r3, [pc, #188]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aee:	2202      	movs	r2, #2
 8001af0:	4013      	ands	r3, r2
 8001af2:	d03c      	beq.n	8001b6e <HAL_RCC_OscConfig+0x2f2>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d138      	bne.n	8001b6e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e1c5      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d019      	beq.n	8001b3c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b08:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001b0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b0c:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001b0e:	2101      	movs	r1, #1
 8001b10:	430a      	orrs	r2, r1
 8001b12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff fb1a 	bl	800114c <HAL_GetTick>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1e:	f7ff fb15 	bl	800114c <HAL_GetTick>
 8001b22:	0002      	movs	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e1ad      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b30:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b34:	2202      	movs	r2, #2
 8001b36:	4013      	ands	r3, r2
 8001b38:	d0f1      	beq.n	8001b1e <HAL_RCC_OscConfig+0x2a2>
 8001b3a:	e018      	b.n	8001b6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001b3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001b42:	2101      	movs	r1, #1
 8001b44:	438a      	bics	r2, r1
 8001b46:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff fb00 	bl	800114c <HAL_GetTick>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b52:	f7ff fafb 	bl	800114c <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e193      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b64:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b68:	2202      	movs	r2, #2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d1f1      	bne.n	8001b52 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2204      	movs	r2, #4
 8001b74:	4013      	ands	r3, r2
 8001b76:	d100      	bne.n	8001b7a <HAL_RCC_OscConfig+0x2fe>
 8001b78:	e0c6      	b.n	8001d08 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b7a:	231f      	movs	r3, #31
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2238      	movs	r2, #56	; 0x38
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b20      	cmp	r3, #32
 8001b8c:	d11e      	bne.n	8001bcc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_RCC_OscConfig+0x32c>)
 8001b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b92:	2202      	movs	r2, #2
 8001b94:	4013      	ands	r3, r2
 8001b96:	d100      	bne.n	8001b9a <HAL_RCC_OscConfig+0x31e>
 8001b98:	e0b6      	b.n	8001d08 <HAL_RCC_OscConfig+0x48c>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d000      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x328>
 8001ba2:	e0b1      	b.n	8001d08 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e171      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	fffeffff 	.word	0xfffeffff
 8001bb0:	fffbffff 	.word	0xfffbffff
 8001bb4:	ffff80ff 	.word	0xffff80ff
 8001bb8:	ffffc7ff 	.word	0xffffc7ff
 8001bbc:	00f42400 	.word	0x00f42400
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001bcc:	4bb1      	ldr	r3, [pc, #708]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	055b      	lsls	r3, r3, #21
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_OscConfig+0x360>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x362>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d011      	beq.n	8001c06 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	4bac      	ldr	r3, [pc, #688]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001be4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001be6:	4bab      	ldr	r3, [pc, #684]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001be8:	2180      	movs	r1, #128	; 0x80
 8001bea:	0549      	lsls	r1, r1, #21
 8001bec:	430a      	orrs	r2, r1
 8001bee:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bf0:	4ba8      	ldr	r3, [pc, #672]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	055b      	lsls	r3, r3, #21
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001bfe:	231f      	movs	r3, #31
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c06:	4ba4      	ldr	r3, [pc, #656]	; (8001e98 <HAL_RCC_OscConfig+0x61c>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d11a      	bne.n	8001c48 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c12:	4ba1      	ldr	r3, [pc, #644]	; (8001e98 <HAL_RCC_OscConfig+0x61c>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	4ba0      	ldr	r3, [pc, #640]	; (8001e98 <HAL_RCC_OscConfig+0x61c>)
 8001c18:	2180      	movs	r1, #128	; 0x80
 8001c1a:	0049      	lsls	r1, r1, #1
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fa94 	bl	800114c <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2a:	f7ff fa8f 	bl	800114c <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e127      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c3c:	4b96      	ldr	r3, [pc, #600]	; (8001e98 <HAL_RCC_OscConfig+0x61c>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4013      	ands	r3, r2
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d106      	bne.n	8001c5e <HAL_RCC_OscConfig+0x3e2>
 8001c50:	4b90      	ldr	r3, [pc, #576]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c54:	4b8f      	ldr	r3, [pc, #572]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c56:	2101      	movs	r1, #1
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c5c:	e01c      	b.n	8001c98 <HAL_RCC_OscConfig+0x41c>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x404>
 8001c66:	4b8b      	ldr	r3, [pc, #556]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c6a:	4b8a      	ldr	r3, [pc, #552]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c6c:	2104      	movs	r1, #4
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c72:	4b88      	ldr	r3, [pc, #544]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c76:	4b87      	ldr	r3, [pc, #540]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c78:	2101      	movs	r1, #1
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c7e:	e00b      	b.n	8001c98 <HAL_RCC_OscConfig+0x41c>
 8001c80:	4b84      	ldr	r3, [pc, #528]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c84:	4b83      	ldr	r3, [pc, #524]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c86:	2101      	movs	r1, #1
 8001c88:	438a      	bics	r2, r1
 8001c8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c8c:	4b81      	ldr	r3, [pc, #516]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c90:	4b80      	ldr	r3, [pc, #512]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001c92:	2104      	movs	r1, #4
 8001c94:	438a      	bics	r2, r1
 8001c96:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d014      	beq.n	8001cca <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fa54 	bl	800114c <HAL_GetTick>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca8:	e009      	b.n	8001cbe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001caa:	f7ff fa4f 	bl	800114c <HAL_GetTick>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	4a79      	ldr	r2, [pc, #484]	; (8001e9c <HAL_RCC_OscConfig+0x620>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e0e6      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cbe:	4b75      	ldr	r3, [pc, #468]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x42e>
 8001cc8:	e013      	b.n	8001cf2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cca:	f7ff fa3f 	bl	800114c <HAL_GetTick>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd2:	e009      	b.n	8001ce8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff fa3a 	bl	800114c <HAL_GetTick>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	4a6f      	ldr	r2, [pc, #444]	; (8001e9c <HAL_RCC_OscConfig+0x620>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e0d1      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ce8:	4b6a      	ldr	r3, [pc, #424]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cec:	2202      	movs	r2, #2
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001cf2:	231f      	movs	r3, #31
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d105      	bne.n	8001d08 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001cfc:	4b65      	ldr	r3, [pc, #404]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d00:	4b64      	ldr	r3, [pc, #400]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001d02:	4967      	ldr	r1, [pc, #412]	; (8001ea0 <HAL_RCC_OscConfig+0x624>)
 8001d04:	400a      	ands	r2, r1
 8001d06:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d100      	bne.n	8001d12 <HAL_RCC_OscConfig+0x496>
 8001d10:	e0bb      	b.n	8001e8a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d12:	4b60      	ldr	r3, [pc, #384]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2238      	movs	r2, #56	; 0x38
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b10      	cmp	r3, #16
 8001d1c:	d100      	bne.n	8001d20 <HAL_RCC_OscConfig+0x4a4>
 8001d1e:	e07b      	b.n	8001e18 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d156      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d28:	4b5a      	ldr	r3, [pc, #360]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b59      	ldr	r3, [pc, #356]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001d2e:	495d      	ldr	r1, [pc, #372]	; (8001ea4 <HAL_RCC_OscConfig+0x628>)
 8001d30:	400a      	ands	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff fa0a 	bl	800114c <HAL_GetTick>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7ff fa05 	bl	800114c <HAL_GetTick>
 8001d42:	0002      	movs	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e09d      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d50:	4b50      	ldr	r3, [pc, #320]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	049b      	lsls	r3, r3, #18
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5c:	4b4d      	ldr	r3, [pc, #308]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	4a51      	ldr	r2, [pc, #324]	; (8001ea8 <HAL_RCC_OscConfig+0x62c>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	0019      	movs	r1, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1a      	ldr	r2, [r3, #32]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	4b42      	ldr	r3, [pc, #264]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d90:	4b40      	ldr	r3, [pc, #256]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b3f      	ldr	r3, [pc, #252]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001d96:	2180      	movs	r1, #128	; 0x80
 8001d98:	0449      	lsls	r1, r1, #17
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001d9e:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	4b3c      	ldr	r3, [pc, #240]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	0549      	lsls	r1, r1, #21
 8001da8:	430a      	orrs	r2, r1
 8001daa:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7ff f9ce 	bl	800114c <HAL_GetTick>
 8001db0:	0003      	movs	r3, r0
 8001db2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db6:	f7ff f9c9 	bl	800114c <HAL_GetTick>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e061      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc8:	4b32      	ldr	r3, [pc, #200]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	049b      	lsls	r3, r3, #18
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x53a>
 8001dd4:	e059      	b.n	8001e8a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001ddc:	4931      	ldr	r1, [pc, #196]	; (8001ea4 <HAL_RCC_OscConfig+0x628>)
 8001dde:	400a      	ands	r2, r1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de2:	f7ff f9b3 	bl	800114c <HAL_GetTick>
 8001de6:	0003      	movs	r3, r0
 8001de8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7ff f9ae 	bl	800114c <HAL_GetTick>
 8001df0:	0002      	movs	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e046      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	049b      	lsls	r3, r3, #18
 8001e06:	4013      	ands	r3, r2
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001e0a:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001e10:	4926      	ldr	r1, [pc, #152]	; (8001eac <HAL_RCC_OscConfig+0x630>)
 8001e12:	400a      	ands	r2, r1
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	e038      	b.n	8001e8a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e033      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <HAL_RCC_OscConfig+0x618>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	401a      	ands	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d126      	bne.n	8001e86 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2270      	movs	r2, #112	; 0x70
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d11f      	bne.n	8001e86 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	23fe      	movs	r3, #254	; 0xfe
 8001e4a:	01db      	lsls	r3, r3, #7
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d116      	bne.n	8001e86 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	23f8      	movs	r3, #248	; 0xf8
 8001e5c:	039b      	lsls	r3, r3, #14
 8001e5e:	401a      	ands	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d10e      	bne.n	8001e86 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	23e0      	movs	r3, #224	; 0xe0
 8001e6c:	051b      	lsls	r3, r3, #20
 8001e6e:	401a      	ands	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	0f5b      	lsrs	r3, r3, #29
 8001e7c:	075a      	lsls	r2, r3, #29
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d001      	beq.n	8001e8a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b008      	add	sp, #32
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40007000 	.word	0x40007000
 8001e9c:	00001388 	.word	0x00001388
 8001ea0:	efffffff 	.word	0xefffffff
 8001ea4:	feffffff 	.word	0xfeffffff
 8001ea8:	11c1808c 	.word	0x11c1808c
 8001eac:	eefefffc 	.word	0xeefefffc

08001eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0e9      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b76      	ldr	r3, [pc, #472]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2207      	movs	r2, #7
 8001eca:	4013      	ands	r3, r2
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d91e      	bls.n	8001f10 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b73      	ldr	r3, [pc, #460]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2207      	movs	r2, #7
 8001ed8:	4393      	bics	r3, r2
 8001eda:	0019      	movs	r1, r3
 8001edc:	4b70      	ldr	r3, [pc, #448]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ee4:	f7ff f932 	bl	800114c <HAL_GetTick>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001eec:	e009      	b.n	8001f02 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eee:	f7ff f92d 	bl	800114c <HAL_GetTick>
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	4a6a      	ldr	r2, [pc, #424]	; (80020a4 <HAL_RCC_ClockConfig+0x1f4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e0ca      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f02:	4b67      	ldr	r3, [pc, #412]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2207      	movs	r2, #7
 8001f08:	4013      	ands	r3, r2
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1ee      	bne.n	8001eee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2202      	movs	r2, #2
 8001f16:	4013      	ands	r3, r2
 8001f18:	d015      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2204      	movs	r2, #4
 8001f20:	4013      	ands	r3, r2
 8001f22:	d006      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f24:	4b60      	ldr	r3, [pc, #384]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	4b5f      	ldr	r3, [pc, #380]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f2a:	21e0      	movs	r1, #224	; 0xe0
 8001f2c:	01c9      	lsls	r1, r1, #7
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f32:	4b5d      	ldr	r3, [pc, #372]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	4a5d      	ldr	r2, [pc, #372]	; (80020ac <HAL_RCC_ClockConfig+0x1fc>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	4b59      	ldr	r3, [pc, #356]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f42:	430a      	orrs	r2, r1
 8001f44:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d057      	beq.n	8002000 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f58:	4b53      	ldr	r3, [pc, #332]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	029b      	lsls	r3, r3, #10
 8001f60:	4013      	ands	r3, r2
 8001f62:	d12b      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e097      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d107      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f70:	4b4d      	ldr	r3, [pc, #308]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	049b      	lsls	r3, r3, #18
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d11f      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e08b      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f88:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4013      	ands	r3, r2
 8001f92:	d113      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e07f      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fa0:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d108      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e074      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fae:	4b3e      	ldr	r3, [pc, #248]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e06d      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fbc:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	4393      	bics	r3, r2
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	4b37      	ldr	r3, [pc, #220]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd0:	f7ff f8bc 	bl	800114c <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd8:	e009      	b.n	8001fee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fda:	f7ff f8b7 	bl	800114c <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	4a2f      	ldr	r2, [pc, #188]	; (80020a4 <HAL_RCC_ClockConfig+0x1f4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e054      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2238      	movs	r2, #56	; 0x38
 8001ff4:	401a      	ands	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d1ec      	bne.n	8001fda <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002000:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2207      	movs	r2, #7
 8002006:	4013      	ands	r3, r2
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d21e      	bcs.n	800204c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200e:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2207      	movs	r2, #7
 8002014:	4393      	bics	r3, r2
 8002016:	0019      	movs	r1, r3
 8002018:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002020:	f7ff f894 	bl	800114c <HAL_GetTick>
 8002024:	0003      	movs	r3, r0
 8002026:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002028:	e009      	b.n	800203e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202a:	f7ff f88f 	bl	800114c <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	4a1b      	ldr	r2, [pc, #108]	; (80020a4 <HAL_RCC_ClockConfig+0x1f4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e02c      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800203e:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2207      	movs	r2, #7
 8002044:	4013      	ands	r3, r2
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d1ee      	bne.n	800202a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2204      	movs	r2, #4
 8002052:	4013      	ands	r3, r2
 8002054:	d009      	beq.n	800206a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002056:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <HAL_RCC_ClockConfig+0x200>)
 800205c:	4013      	ands	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002066:	430a      	orrs	r2, r1
 8002068:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800206a:	f000 f829 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 800206e:	0001      	movs	r1, r0
 8002070:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	220f      	movs	r2, #15
 8002078:	401a      	ands	r2, r3
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_RCC_ClockConfig+0x204>)
 800207c:	0092      	lsls	r2, r2, #2
 800207e:	58d3      	ldr	r3, [r2, r3]
 8002080:	221f      	movs	r2, #31
 8002082:	4013      	ands	r3, r2
 8002084:	000a      	movs	r2, r1
 8002086:	40da      	lsrs	r2, r3
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_RCC_ClockConfig+0x208>)
 800208a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_ClockConfig+0x20c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	0018      	movs	r0, r3
 8002092:	f7fe ffff 	bl	8001094 <HAL_InitTick>
 8002096:	0003      	movs	r3, r0
}
 8002098:	0018      	movs	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	b004      	add	sp, #16
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40022000 	.word	0x40022000
 80020a4:	00001388 	.word	0x00001388
 80020a8:	40021000 	.word	0x40021000
 80020ac:	fffff0ff 	.word	0xfffff0ff
 80020b0:	ffff8fff 	.word	0xffff8fff
 80020b4:	0800534c 	.word	0x0800534c
 80020b8:	20000000 	.word	0x20000000
 80020bc:	20000008 	.word	0x20000008

080020c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020c6:	4b3c      	ldr	r3, [pc, #240]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2238      	movs	r2, #56	; 0x38
 80020cc:	4013      	ands	r3, r2
 80020ce:	d10f      	bne.n	80020f0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80020d0:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	0adb      	lsrs	r3, r3, #11
 80020d6:	2207      	movs	r2, #7
 80020d8:	4013      	ands	r3, r2
 80020da:	2201      	movs	r2, #1
 80020dc:	409a      	lsls	r2, r3
 80020de:	0013      	movs	r3, r2
 80020e0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80020e2:	6839      	ldr	r1, [r7, #0]
 80020e4:	4835      	ldr	r0, [pc, #212]	; (80021bc <HAL_RCC_GetSysClockFreq+0xfc>)
 80020e6:	f7fe f80d 	bl	8000104 <__udivsi3>
 80020ea:	0003      	movs	r3, r0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	e05d      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f0:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2238      	movs	r2, #56	; 0x38
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d102      	bne.n	8002102 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020fc:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x100>)
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	e054      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002102:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2238      	movs	r2, #56	; 0x38
 8002108:	4013      	ands	r3, r2
 800210a:	2b10      	cmp	r3, #16
 800210c:	d138      	bne.n	8002180 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800210e:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2203      	movs	r2, #3
 8002114:	4013      	ands	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002118:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	2207      	movs	r2, #7
 8002120:	4013      	ands	r3, r2
 8002122:	3301      	adds	r3, #1
 8002124:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d10d      	bne.n	8002148 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	4824      	ldr	r0, [pc, #144]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002130:	f7fd ffe8 	bl	8000104 <__udivsi3>
 8002134:	0003      	movs	r3, r0
 8002136:	0019      	movs	r1, r3
 8002138:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	227f      	movs	r2, #127	; 0x7f
 8002140:	4013      	ands	r3, r2
 8002142:	434b      	muls	r3, r1
 8002144:	617b      	str	r3, [r7, #20]
        break;
 8002146:	e00d      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	481c      	ldr	r0, [pc, #112]	; (80021bc <HAL_RCC_GetSysClockFreq+0xfc>)
 800214c:	f7fd ffda 	bl	8000104 <__udivsi3>
 8002150:	0003      	movs	r3, r0
 8002152:	0019      	movs	r1, r3
 8002154:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	227f      	movs	r2, #127	; 0x7f
 800215c:	4013      	ands	r3, r2
 800215e:	434b      	muls	r3, r1
 8002160:	617b      	str	r3, [r7, #20]
        break;
 8002162:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0f5b      	lsrs	r3, r3, #29
 800216a:	2207      	movs	r2, #7
 800216c:	4013      	ands	r3, r2
 800216e:	3301      	adds	r3, #1
 8002170:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	6978      	ldr	r0, [r7, #20]
 8002176:	f7fd ffc5 	bl	8000104 <__udivsi3>
 800217a:	0003      	movs	r3, r0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	e015      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002180:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2238      	movs	r2, #56	; 0x38
 8002186:	4013      	ands	r3, r2
 8002188:	2b20      	cmp	r3, #32
 800218a:	d103      	bne.n	8002194 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	e00b      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2238      	movs	r2, #56	; 0x38
 800219a:	4013      	ands	r3, r2
 800219c:	2b18      	cmp	r3, #24
 800219e:	d103      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80021a0:	23fa      	movs	r3, #250	; 0xfa
 80021a2:	01db      	lsls	r3, r3, #7
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	e001      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021ac:	693b      	ldr	r3, [r7, #16]
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b006      	add	sp, #24
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	40021000 	.word	0x40021000
 80021bc:	00f42400 	.word	0x00f42400
 80021c0:	007a1200 	.word	0x007a1200

080021c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c8:	4b02      	ldr	r3, [pc, #8]	; (80021d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	0018      	movs	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	20000000 	.word	0x20000000

080021d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d8:	b5b0      	push	{r4, r5, r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80021dc:	f7ff fff2 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 80021e0:	0004      	movs	r4, r0
 80021e2:	f7ff fb3f 	bl	8001864 <LL_RCC_GetAPB1Prescaler>
 80021e6:	0003      	movs	r3, r0
 80021e8:	0b1a      	lsrs	r2, r3, #12
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ec:	0092      	lsls	r2, r2, #2
 80021ee:	58d3      	ldr	r3, [r2, r3]
 80021f0:	221f      	movs	r2, #31
 80021f2:	4013      	ands	r3, r2
 80021f4:	40dc      	lsrs	r4, r3
 80021f6:	0023      	movs	r3, r4
}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bdb0      	pop	{r4, r5, r7, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	0800538c 	.word	0x0800538c

08002204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800220c:	2313      	movs	r3, #19
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002214:	2312      	movs	r3, #18
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	029b      	lsls	r3, r3, #10
 8002224:	4013      	ands	r3, r2
 8002226:	d100      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002228:	e0a3      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800222a:	2011      	movs	r0, #17
 800222c:	183b      	adds	r3, r7, r0
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002232:	4bc3      	ldr	r3, [pc, #780]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002234:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	055b      	lsls	r3, r3, #21
 800223a:	4013      	ands	r3, r2
 800223c:	d110      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	4bc0      	ldr	r3, [pc, #768]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002242:	4bbf      	ldr	r3, [pc, #764]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002244:	2180      	movs	r1, #128	; 0x80
 8002246:	0549      	lsls	r1, r1, #21
 8002248:	430a      	orrs	r2, r1
 800224a:	63da      	str	r2, [r3, #60]	; 0x3c
 800224c:	4bbc      	ldr	r3, [pc, #752]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800224e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	055b      	lsls	r3, r3, #21
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800225a:	183b      	adds	r3, r7, r0
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002260:	4bb8      	ldr	r3, [pc, #736]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4bb7      	ldr	r3, [pc, #732]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002266:	2180      	movs	r1, #128	; 0x80
 8002268:	0049      	lsls	r1, r1, #1
 800226a:	430a      	orrs	r2, r1
 800226c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800226e:	f7fe ff6d 	bl	800114c <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002276:	e00b      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002278:	f7fe ff68 	bl	800114c <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d904      	bls.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002286:	2313      	movs	r3, #19
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	2203      	movs	r2, #3
 800228c:	701a      	strb	r2, [r3, #0]
        break;
 800228e:	e005      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002290:	4bac      	ldr	r3, [pc, #688]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4013      	ands	r3, r2
 800229a:	d0ed      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800229c:	2313      	movs	r3, #19
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d154      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022a6:	4ba6      	ldr	r3, [pc, #664]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022aa:	23c0      	movs	r3, #192	; 0xc0
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4013      	ands	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d019      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d014      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022c2:	4b9f      	ldr	r3, [pc, #636]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c6:	4aa0      	ldr	r2, [pc, #640]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022cc:	4b9c      	ldr	r3, [pc, #624]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022d0:	4b9b      	ldr	r3, [pc, #620]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d2:	2180      	movs	r1, #128	; 0x80
 80022d4:	0249      	lsls	r1, r1, #9
 80022d6:	430a      	orrs	r2, r1
 80022d8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022da:	4b99      	ldr	r3, [pc, #612]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022de:	4b98      	ldr	r3, [pc, #608]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022e0:	499a      	ldr	r1, [pc, #616]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80022e2:	400a      	ands	r2, r1
 80022e4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022e6:	4b96      	ldr	r3, [pc, #600]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2201      	movs	r2, #1
 80022f0:	4013      	ands	r3, r2
 80022f2:	d016      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe ff2a 	bl	800114c <HAL_GetTick>
 80022f8:	0003      	movs	r3, r0
 80022fa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022fc:	e00c      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fe:	f7fe ff25 	bl	800114c <HAL_GetTick>
 8002302:	0002      	movs	r2, r0
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	4a91      	ldr	r2, [pc, #580]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d904      	bls.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800230e:	2313      	movs	r3, #19
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	2203      	movs	r2, #3
 8002314:	701a      	strb	r2, [r3, #0]
            break;
 8002316:	e004      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002318:	4b89      	ldr	r3, [pc, #548]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800231a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231c:	2202      	movs	r2, #2
 800231e:	4013      	ands	r3, r2
 8002320:	d0ed      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002322:	2313      	movs	r3, #19
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10a      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800232c:	4b84      	ldr	r3, [pc, #528]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002330:	4a85      	ldr	r2, [pc, #532]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002332:	4013      	ands	r3, r2
 8002334:	0019      	movs	r1, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800233a:	4b81      	ldr	r3, [pc, #516]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800233c:	430a      	orrs	r2, r1
 800233e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002340:	e00c      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002342:	2312      	movs	r3, #18
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	2213      	movs	r2, #19
 8002348:	18ba      	adds	r2, r7, r2
 800234a:	7812      	ldrb	r2, [r2, #0]
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	e005      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002350:	2312      	movs	r3, #18
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	2213      	movs	r2, #19
 8002356:	18ba      	adds	r2, r7, r2
 8002358:	7812      	ldrb	r2, [r2, #0]
 800235a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800235c:	2311      	movs	r3, #17
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d105      	bne.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002366:	4b76      	ldr	r3, [pc, #472]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002368:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800236a:	4b75      	ldr	r3, [pc, #468]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800236c:	4979      	ldr	r1, [pc, #484]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800236e:	400a      	ands	r2, r1
 8002370:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2201      	movs	r2, #1
 8002378:	4013      	ands	r3, r2
 800237a:	d009      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800237c:	4b70      	ldr	r3, [pc, #448]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800237e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002380:	2203      	movs	r2, #3
 8002382:	4393      	bics	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	4b6d      	ldr	r3, [pc, #436]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800238c:	430a      	orrs	r2, r1
 800238e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2202      	movs	r2, #2
 8002396:	4013      	ands	r3, r2
 8002398:	d009      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800239a:	4b69      	ldr	r3, [pc, #420]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800239c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239e:	220c      	movs	r2, #12
 80023a0:	4393      	bics	r3, r2
 80023a2:	0019      	movs	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	4b65      	ldr	r3, [pc, #404]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023aa:	430a      	orrs	r2, r1
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2210      	movs	r2, #16
 80023b4:	4013      	ands	r3, r2
 80023b6:	d009      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023b8:	4b61      	ldr	r3, [pc, #388]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023bc:	4a66      	ldr	r2, [pc, #408]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80023be:	4013      	ands	r3, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	4b5e      	ldr	r3, [pc, #376]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c8:	430a      	orrs	r2, r1
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4013      	ands	r3, r2
 80023d6:	d009      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023d8:	4b59      	ldr	r3, [pc, #356]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023dc:	4a5f      	ldr	r2, [pc, #380]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80023de:	4013      	ands	r3, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	4b56      	ldr	r3, [pc, #344]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023e8:	430a      	orrs	r2, r1
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4013      	ands	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023f8:	4b51      	ldr	r3, [pc, #324]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	4a58      	ldr	r2, [pc, #352]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023fe:	4013      	ands	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	4b4e      	ldr	r3, [pc, #312]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002408:	430a      	orrs	r2, r1
 800240a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2220      	movs	r2, #32
 8002412:	4013      	ands	r3, r2
 8002414:	d009      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002416:	4b4a      	ldr	r3, [pc, #296]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	4a52      	ldr	r2, [pc, #328]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800241c:	4013      	ands	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	4b46      	ldr	r3, [pc, #280]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002426:	430a      	orrs	r2, r1
 8002428:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	01db      	lsls	r3, r3, #7
 8002432:	4013      	ands	r3, r2
 8002434:	d015      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002436:	4b42      	ldr	r3, [pc, #264]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	0899      	lsrs	r1, r3, #2
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1a      	ldr	r2, [r3, #32]
 8002442:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002444:	430a      	orrs	r2, r1
 8002446:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1a      	ldr	r2, [r3, #32]
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	05db      	lsls	r3, r3, #23
 8002450:	429a      	cmp	r2, r3
 8002452:	d106      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002454:	4b3a      	ldr	r3, [pc, #232]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	4b39      	ldr	r3, [pc, #228]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800245a:	2180      	movs	r1, #128	; 0x80
 800245c:	0249      	lsls	r1, r1, #9
 800245e:	430a      	orrs	r2, r1
 8002460:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	031b      	lsls	r3, r3, #12
 800246a:	4013      	ands	r3, r2
 800246c:	d009      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800246e:	4b34      	ldr	r3, [pc, #208]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	2240      	movs	r2, #64	; 0x40
 8002474:	4393      	bics	r3, r2
 8002476:	0019      	movs	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800247c:	4b30      	ldr	r3, [pc, #192]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800247e:	430a      	orrs	r2, r1
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	039b      	lsls	r3, r3, #14
 800248a:	4013      	ands	r3, r2
 800248c:	d016      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800248e:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002492:	4a35      	ldr	r2, [pc, #212]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002494:	4013      	ands	r3, r2
 8002496:	0019      	movs	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800249c:	4b28      	ldr	r3, [pc, #160]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800249e:	430a      	orrs	r2, r1
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	03db      	lsls	r3, r3, #15
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d106      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80024ae:	4b24      	ldr	r3, [pc, #144]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	4b23      	ldr	r3, [pc, #140]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b4:	2180      	movs	r1, #128	; 0x80
 80024b6:	0449      	lsls	r1, r1, #17
 80024b8:	430a      	orrs	r2, r1
 80024ba:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	03db      	lsls	r3, r3, #15
 80024c4:	4013      	ands	r3, r2
 80024c6:	d016      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80024c8:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024cc:	4a27      	ldr	r2, [pc, #156]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	0019      	movs	r1, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d6:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024d8:	430a      	orrs	r2, r1
 80024da:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	045b      	lsls	r3, r3, #17
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d106      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80024e8:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	4b14      	ldr	r3, [pc, #80]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ee:	2180      	movs	r1, #128	; 0x80
 80024f0:	0449      	lsls	r1, r1, #17
 80024f2:	430a      	orrs	r2, r1
 80024f4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	4013      	ands	r3, r2
 8002500:	d016      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002502:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	4a1a      	ldr	r2, [pc, #104]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002508:	4013      	ands	r3, r2
 800250a:	0019      	movs	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695a      	ldr	r2, [r3, #20]
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002512:	430a      	orrs	r2, r1
 8002514:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	2380      	movs	r3, #128	; 0x80
 800251c:	01db      	lsls	r3, r3, #7
 800251e:	429a      	cmp	r2, r3
 8002520:	d106      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002522:	4b07      	ldr	r3, [pc, #28]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002528:	2180      	movs	r1, #128	; 0x80
 800252a:	0249      	lsls	r1, r1, #9
 800252c:	430a      	orrs	r2, r1
 800252e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002530:	2312      	movs	r3, #18
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	781b      	ldrb	r3, [r3, #0]
}
 8002536:	0018      	movs	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	b006      	add	sp, #24
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	40021000 	.word	0x40021000
 8002544:	40007000 	.word	0x40007000
 8002548:	fffffcff 	.word	0xfffffcff
 800254c:	fffeffff 	.word	0xfffeffff
 8002550:	00001388 	.word	0x00001388
 8002554:	efffffff 	.word	0xefffffff
 8002558:	fffff3ff 	.word	0xfffff3ff
 800255c:	fff3ffff 	.word	0xfff3ffff
 8002560:	ffcfffff 	.word	0xffcfffff
 8002564:	ffffcfff 	.word	0xffffcfff
 8002568:	ffbfffff 	.word	0xffbfffff
 800256c:	feffffff 	.word	0xfeffffff
 8002570:	ffff3fff 	.word	0xffff3fff

08002574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e04a      	b.n	800261c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	223d      	movs	r2, #61	; 0x3d
 800258a:	5c9b      	ldrb	r3, [r3, r2]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d107      	bne.n	80025a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	223c      	movs	r2, #60	; 0x3c
 8002596:	2100      	movs	r1, #0
 8002598:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	0018      	movs	r0, r3
 800259e:	f7fe fa1f 	bl	80009e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	223d      	movs	r2, #61	; 0x3d
 80025a6:	2102      	movs	r1, #2
 80025a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3304      	adds	r3, #4
 80025b2:	0019      	movs	r1, r3
 80025b4:	0010      	movs	r0, r2
 80025b6:	f000 fab9 	bl	8002b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2248      	movs	r2, #72	; 0x48
 80025be:	2101      	movs	r1, #1
 80025c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	223e      	movs	r2, #62	; 0x3e
 80025c6:	2101      	movs	r1, #1
 80025c8:	5499      	strb	r1, [r3, r2]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	223f      	movs	r2, #63	; 0x3f
 80025ce:	2101      	movs	r1, #1
 80025d0:	5499      	strb	r1, [r3, r2]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2240      	movs	r2, #64	; 0x40
 80025d6:	2101      	movs	r1, #1
 80025d8:	5499      	strb	r1, [r3, r2]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2241      	movs	r2, #65	; 0x41
 80025de:	2101      	movs	r1, #1
 80025e0:	5499      	strb	r1, [r3, r2]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2242      	movs	r2, #66	; 0x42
 80025e6:	2101      	movs	r1, #1
 80025e8:	5499      	strb	r1, [r3, r2]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2243      	movs	r2, #67	; 0x43
 80025ee:	2101      	movs	r1, #1
 80025f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2244      	movs	r2, #68	; 0x44
 80025f6:	2101      	movs	r1, #1
 80025f8:	5499      	strb	r1, [r3, r2]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2245      	movs	r2, #69	; 0x45
 80025fe:	2101      	movs	r1, #1
 8002600:	5499      	strb	r1, [r3, r2]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2246      	movs	r2, #70	; 0x46
 8002606:	2101      	movs	r1, #1
 8002608:	5499      	strb	r1, [r3, r2]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2247      	movs	r2, #71	; 0x47
 800260e:	2101      	movs	r1, #1
 8002610:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	223d      	movs	r2, #61	; 0x3d
 8002616:	2101      	movs	r1, #1
 8002618:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	0018      	movs	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	b002      	add	sp, #8
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	223d      	movs	r2, #61	; 0x3d
 8002630:	5c9b      	ldrb	r3, [r3, r2]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d001      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e042      	b.n	80026c2 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	223d      	movs	r2, #61	; 0x3d
 8002640:	2102      	movs	r1, #2
 8002642:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2101      	movs	r1, #1
 8002650:	430a      	orrs	r2, r1
 8002652:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1c      	ldr	r2, [pc, #112]	; (80026cc <HAL_TIM_Base_Start_IT+0xa8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00f      	beq.n	800267e <HAL_TIM_Base_Start_IT+0x5a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	05db      	lsls	r3, r3, #23
 8002666:	429a      	cmp	r2, r3
 8002668:	d009      	beq.n	800267e <HAL_TIM_Base_Start_IT+0x5a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a18      	ldr	r2, [pc, #96]	; (80026d0 <HAL_TIM_Base_Start_IT+0xac>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d004      	beq.n	800267e <HAL_TIM_Base_Start_IT+0x5a>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a16      	ldr	r2, [pc, #88]	; (80026d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d116      	bne.n	80026ac <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002686:	4013      	ands	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b06      	cmp	r3, #6
 800268e:	d016      	beq.n	80026be <HAL_TIM_Base_Start_IT+0x9a>
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	025b      	lsls	r3, r3, #9
 8002696:	429a      	cmp	r2, r3
 8002698:	d011      	beq.n	80026be <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2101      	movs	r1, #1
 80026a6:	430a      	orrs	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026aa:	e008      	b.n	80026be <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2101      	movs	r1, #1
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	e000      	b.n	80026c0 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026be:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	0018      	movs	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b004      	add	sp, #16
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	40012c00 	.word	0x40012c00
 80026d0:	40000400 	.word	0x40000400
 80026d4:	40014000 	.word	0x40014000
 80026d8:	00010007 	.word	0x00010007

080026dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2202      	movs	r2, #2
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d124      	bne.n	800273c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2202      	movs	r2, #2
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d11d      	bne.n	800273c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2203      	movs	r2, #3
 8002706:	4252      	negs	r2, r2
 8002708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	2203      	movs	r2, #3
 8002718:	4013      	ands	r3, r2
 800271a:	d004      	beq.n	8002726 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	0018      	movs	r0, r3
 8002720:	f000 f9ec 	bl	8002afc <HAL_TIM_IC_CaptureCallback>
 8002724:	e007      	b.n	8002736 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	0018      	movs	r0, r3
 800272a:	f000 f9df 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	0018      	movs	r0, r3
 8002732:	f000 f9eb 	bl	8002b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2204      	movs	r2, #4
 8002744:	4013      	ands	r3, r2
 8002746:	2b04      	cmp	r3, #4
 8002748:	d125      	bne.n	8002796 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2204      	movs	r2, #4
 8002752:	4013      	ands	r3, r2
 8002754:	2b04      	cmp	r3, #4
 8002756:	d11e      	bne.n	8002796 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2205      	movs	r2, #5
 800275e:	4252      	negs	r2, r2
 8002760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2202      	movs	r2, #2
 8002766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	23c0      	movs	r3, #192	; 0xc0
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4013      	ands	r3, r2
 8002774:	d004      	beq.n	8002780 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	0018      	movs	r0, r3
 800277a:	f000 f9bf 	bl	8002afc <HAL_TIM_IC_CaptureCallback>
 800277e:	e007      	b.n	8002790 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	0018      	movs	r0, r3
 8002784:	f000 f9b2 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	0018      	movs	r0, r3
 800278c:	f000 f9be 	bl	8002b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2208      	movs	r2, #8
 800279e:	4013      	ands	r3, r2
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d124      	bne.n	80027ee <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2208      	movs	r2, #8
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d11d      	bne.n	80027ee <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2209      	movs	r2, #9
 80027b8:	4252      	negs	r2, r2
 80027ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2204      	movs	r2, #4
 80027c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	2203      	movs	r2, #3
 80027ca:	4013      	ands	r3, r2
 80027cc:	d004      	beq.n	80027d8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	0018      	movs	r0, r3
 80027d2:	f000 f993 	bl	8002afc <HAL_TIM_IC_CaptureCallback>
 80027d6:	e007      	b.n	80027e8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	0018      	movs	r0, r3
 80027dc:	f000 f986 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	0018      	movs	r0, r3
 80027e4:	f000 f992 	bl	8002b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	2210      	movs	r2, #16
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b10      	cmp	r3, #16
 80027fa:	d125      	bne.n	8002848 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2210      	movs	r2, #16
 8002804:	4013      	ands	r3, r2
 8002806:	2b10      	cmp	r3, #16
 8002808:	d11e      	bne.n	8002848 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2211      	movs	r2, #17
 8002810:	4252      	negs	r2, r2
 8002812:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2208      	movs	r2, #8
 8002818:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	69da      	ldr	r2, [r3, #28]
 8002820:	23c0      	movs	r3, #192	; 0xc0
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4013      	ands	r3, r2
 8002826:	d004      	beq.n	8002832 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	0018      	movs	r0, r3
 800282c:	f000 f966 	bl	8002afc <HAL_TIM_IC_CaptureCallback>
 8002830:	e007      	b.n	8002842 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	0018      	movs	r0, r3
 8002836:	f000 f959 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f000 f965 	bl	8002b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2201      	movs	r2, #1
 8002850:	4013      	ands	r3, r2
 8002852:	2b01      	cmp	r3, #1
 8002854:	d10f      	bne.n	8002876 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	4013      	ands	r3, r2
 8002860:	2b01      	cmp	r3, #1
 8002862:	d108      	bne.n	8002876 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2202      	movs	r2, #2
 800286a:	4252      	negs	r2, r2
 800286c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0018      	movs	r0, r3
 8002872:	f7fd fefb 	bl	800066c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	2280      	movs	r2, #128	; 0x80
 800287e:	4013      	ands	r3, r2
 8002880:	2b80      	cmp	r3, #128	; 0x80
 8002882:	d10f      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2280      	movs	r2, #128	; 0x80
 800288c:	4013      	ands	r3, r2
 800288e:	2b80      	cmp	r3, #128	; 0x80
 8002890:	d108      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2281      	movs	r2, #129	; 0x81
 8002898:	4252      	negs	r2, r2
 800289a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0018      	movs	r0, r3
 80028a0:	f000 fad6 	bl	8002e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	401a      	ands	r2, r3
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d10e      	bne.n	80028d6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2280      	movs	r2, #128	; 0x80
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b80      	cmp	r3, #128	; 0x80
 80028c4:	d107      	bne.n	80028d6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a1c      	ldr	r2, [pc, #112]	; (800293c <HAL_TIM_IRQHandler+0x260>)
 80028cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f000 fac5 	bl	8002e60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	2240      	movs	r2, #64	; 0x40
 80028de:	4013      	ands	r3, r2
 80028e0:	2b40      	cmp	r3, #64	; 0x40
 80028e2:	d10f      	bne.n	8002904 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	2240      	movs	r2, #64	; 0x40
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b40      	cmp	r3, #64	; 0x40
 80028f0:	d108      	bne.n	8002904 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2241      	movs	r2, #65	; 0x41
 80028f8:	4252      	negs	r2, r2
 80028fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	0018      	movs	r0, r3
 8002900:	f000 f90c 	bl	8002b1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2220      	movs	r2, #32
 800290c:	4013      	ands	r3, r2
 800290e:	2b20      	cmp	r3, #32
 8002910:	d10f      	bne.n	8002932 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	4013      	ands	r3, r2
 800291c:	2b20      	cmp	r3, #32
 800291e:	d108      	bne.n	8002932 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2221      	movs	r2, #33	; 0x21
 8002926:	4252      	negs	r2, r2
 8002928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	0018      	movs	r0, r3
 800292e:	f000 fa87 	bl	8002e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	46bd      	mov	sp, r7
 8002936:	b002      	add	sp, #8
 8002938:	bd80      	pop	{r7, pc}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	fffffeff 	.word	0xfffffeff

08002940 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800294a:	230f      	movs	r3, #15
 800294c:	18fb      	adds	r3, r7, r3
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	223c      	movs	r2, #60	; 0x3c
 8002956:	5c9b      	ldrb	r3, [r3, r2]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_TIM_ConfigClockSource+0x20>
 800295c:	2302      	movs	r3, #2
 800295e:	e0bc      	b.n	8002ada <HAL_TIM_ConfigClockSource+0x19a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	223c      	movs	r2, #60	; 0x3c
 8002964:	2101      	movs	r1, #1
 8002966:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	223d      	movs	r2, #61	; 0x3d
 800296c:	2102      	movs	r1, #2
 800296e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4a5a      	ldr	r2, [pc, #360]	; (8002ae4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800297c:	4013      	ands	r3, r2
 800297e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4a59      	ldr	r2, [pc, #356]	; (8002ae8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002984:	4013      	ands	r3, r2
 8002986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	0192      	lsls	r2, r2, #6
 8002998:	4293      	cmp	r3, r2
 800299a:	d040      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0xde>
 800299c:	2280      	movs	r2, #128	; 0x80
 800299e:	0192      	lsls	r2, r2, #6
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d900      	bls.n	80029a6 <HAL_TIM_ConfigClockSource+0x66>
 80029a4:	e088      	b.n	8002ab8 <HAL_TIM_ConfigClockSource+0x178>
 80029a6:	2280      	movs	r2, #128	; 0x80
 80029a8:	0152      	lsls	r2, r2, #5
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d100      	bne.n	80029b0 <HAL_TIM_ConfigClockSource+0x70>
 80029ae:	e088      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x182>
 80029b0:	2280      	movs	r2, #128	; 0x80
 80029b2:	0152      	lsls	r2, r2, #5
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d900      	bls.n	80029ba <HAL_TIM_ConfigClockSource+0x7a>
 80029b8:	e07e      	b.n	8002ab8 <HAL_TIM_ConfigClockSource+0x178>
 80029ba:	2b70      	cmp	r3, #112	; 0x70
 80029bc:	d018      	beq.n	80029f0 <HAL_TIM_ConfigClockSource+0xb0>
 80029be:	d900      	bls.n	80029c2 <HAL_TIM_ConfigClockSource+0x82>
 80029c0:	e07a      	b.n	8002ab8 <HAL_TIM_ConfigClockSource+0x178>
 80029c2:	2b60      	cmp	r3, #96	; 0x60
 80029c4:	d04f      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0x126>
 80029c6:	d900      	bls.n	80029ca <HAL_TIM_ConfigClockSource+0x8a>
 80029c8:	e076      	b.n	8002ab8 <HAL_TIM_ConfigClockSource+0x178>
 80029ca:	2b50      	cmp	r3, #80	; 0x50
 80029cc:	d03b      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0x106>
 80029ce:	d900      	bls.n	80029d2 <HAL_TIM_ConfigClockSource+0x92>
 80029d0:	e072      	b.n	8002ab8 <HAL_TIM_ConfigClockSource+0x178>
 80029d2:	2b40      	cmp	r3, #64	; 0x40
 80029d4:	d057      	beq.n	8002a86 <HAL_TIM_ConfigClockSource+0x146>
 80029d6:	d900      	bls.n	80029da <HAL_TIM_ConfigClockSource+0x9a>
 80029d8:	e06e      	b.n	8002ab8 <HAL_TIM_ConfigClockSource+0x178>
 80029da:	2b30      	cmp	r3, #48	; 0x30
 80029dc:	d063      	beq.n	8002aa6 <HAL_TIM_ConfigClockSource+0x166>
 80029de:	d86b      	bhi.n	8002ab8 <HAL_TIM_ConfigClockSource+0x178>
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d060      	beq.n	8002aa6 <HAL_TIM_ConfigClockSource+0x166>
 80029e4:	d868      	bhi.n	8002ab8 <HAL_TIM_ConfigClockSource+0x178>
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d05d      	beq.n	8002aa6 <HAL_TIM_ConfigClockSource+0x166>
 80029ea:	2b10      	cmp	r3, #16
 80029ec:	d05b      	beq.n	8002aa6 <HAL_TIM_ConfigClockSource+0x166>
 80029ee:	e063      	b.n	8002ab8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	6899      	ldr	r1, [r3, #8]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f000 f990 	bl	8002d24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2277      	movs	r2, #119	; 0x77
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	609a      	str	r2, [r3, #8]
      break;
 8002a1c:	e052      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6899      	ldr	r1, [r3, #8]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f000 f979 	bl	8002d24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2180      	movs	r1, #128	; 0x80
 8002a3e:	01c9      	lsls	r1, r1, #7
 8002a40:	430a      	orrs	r2, r1
 8002a42:	609a      	str	r2, [r3, #8]
      break;
 8002a44:	e03e      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	6859      	ldr	r1, [r3, #4]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	001a      	movs	r2, r3
 8002a54:	f000 f8ea 	bl	8002c2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2150      	movs	r1, #80	; 0x50
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f000 f944 	bl	8002cec <TIM_ITRx_SetConfig>
      break;
 8002a64:	e02e      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	6859      	ldr	r1, [r3, #4]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	001a      	movs	r2, r3
 8002a74:	f000 f908 	bl	8002c88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2160      	movs	r1, #96	; 0x60
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f000 f934 	bl	8002cec <TIM_ITRx_SetConfig>
      break;
 8002a84:	e01e      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	6859      	ldr	r1, [r3, #4]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	001a      	movs	r2, r3
 8002a94:	f000 f8ca 	bl	8002c2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2140      	movs	r1, #64	; 0x40
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 f924 	bl	8002cec <TIM_ITRx_SetConfig>
      break;
 8002aa4:	e00e      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	0019      	movs	r1, r3
 8002ab0:	0010      	movs	r0, r2
 8002ab2:	f000 f91b 	bl	8002cec <TIM_ITRx_SetConfig>
      break;
 8002ab6:	e005      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002ab8:	230f      	movs	r3, #15
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
      break;
 8002ac0:	e000      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002ac2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	223d      	movs	r2, #61	; 0x3d
 8002ac8:	2101      	movs	r1, #1
 8002aca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	223c      	movs	r2, #60	; 0x3c
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	5499      	strb	r1, [r3, r2]

  return status;
 8002ad4:	230f      	movs	r3, #15
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	781b      	ldrb	r3, [r3, #0]
}
 8002ada:	0018      	movs	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b004      	add	sp, #16
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	ffceff88 	.word	0xffceff88
 8002ae8:	ffff00ff 	.word	0xffff00ff

08002aec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002af4:	46c0      	nop			; (mov r8, r8)
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b002      	add	sp, #8
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b002      	add	sp, #8
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b14:	46c0      	nop			; (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b24:	46c0      	nop			; (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b002      	add	sp, #8
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a34      	ldr	r2, [pc, #208]	; (8002c10 <TIM_Base_SetConfig+0xe4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d008      	beq.n	8002b56 <TIM_Base_SetConfig+0x2a>
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	05db      	lsls	r3, r3, #23
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d003      	beq.n	8002b56 <TIM_Base_SetConfig+0x2a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a30      	ldr	r2, [pc, #192]	; (8002c14 <TIM_Base_SetConfig+0xe8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d108      	bne.n	8002b68 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2270      	movs	r2, #112	; 0x70
 8002b5a:	4393      	bics	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a29      	ldr	r2, [pc, #164]	; (8002c10 <TIM_Base_SetConfig+0xe4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d018      	beq.n	8002ba2 <TIM_Base_SetConfig+0x76>
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	05db      	lsls	r3, r3, #23
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d013      	beq.n	8002ba2 <TIM_Base_SetConfig+0x76>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a25      	ldr	r2, [pc, #148]	; (8002c14 <TIM_Base_SetConfig+0xe8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00f      	beq.n	8002ba2 <TIM_Base_SetConfig+0x76>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a24      	ldr	r2, [pc, #144]	; (8002c18 <TIM_Base_SetConfig+0xec>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00b      	beq.n	8002ba2 <TIM_Base_SetConfig+0x76>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a23      	ldr	r2, [pc, #140]	; (8002c1c <TIM_Base_SetConfig+0xf0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d007      	beq.n	8002ba2 <TIM_Base_SetConfig+0x76>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a22      	ldr	r2, [pc, #136]	; (8002c20 <TIM_Base_SetConfig+0xf4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d003      	beq.n	8002ba2 <TIM_Base_SetConfig+0x76>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a21      	ldr	r2, [pc, #132]	; (8002c24 <TIM_Base_SetConfig+0xf8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d108      	bne.n	8002bb4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4a20      	ldr	r2, [pc, #128]	; (8002c28 <TIM_Base_SetConfig+0xfc>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2280      	movs	r2, #128	; 0x80
 8002bb8:	4393      	bics	r3, r2
 8002bba:	001a      	movs	r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a0c      	ldr	r2, [pc, #48]	; (8002c10 <TIM_Base_SetConfig+0xe4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00b      	beq.n	8002bfa <TIM_Base_SetConfig+0xce>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a0d      	ldr	r2, [pc, #52]	; (8002c1c <TIM_Base_SetConfig+0xf0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d007      	beq.n	8002bfa <TIM_Base_SetConfig+0xce>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a0c      	ldr	r2, [pc, #48]	; (8002c20 <TIM_Base_SetConfig+0xf4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d003      	beq.n	8002bfa <TIM_Base_SetConfig+0xce>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <TIM_Base_SetConfig+0xf8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d103      	bne.n	8002c02 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	615a      	str	r2, [r3, #20]
}
 8002c08:	46c0      	nop			; (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b004      	add	sp, #16
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40012c00 	.word	0x40012c00
 8002c14:	40000400 	.word	0x40000400
 8002c18:	40002000 	.word	0x40002000
 8002c1c:	40014000 	.word	0x40014000
 8002c20:	40014400 	.word	0x40014400
 8002c24:	40014800 	.word	0x40014800
 8002c28:	fffffcff 	.word	0xfffffcff

08002c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	2201      	movs	r2, #1
 8002c44:	4393      	bics	r3, r2
 8002c46:	001a      	movs	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	22f0      	movs	r2, #240	; 0xf0
 8002c56:	4393      	bics	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	220a      	movs	r2, #10
 8002c68:	4393      	bics	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	621a      	str	r2, [r3, #32]
}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b006      	add	sp, #24
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	2210      	movs	r2, #16
 8002c9a:	4393      	bics	r3, r2
 8002c9c:	001a      	movs	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	4a0d      	ldr	r2, [pc, #52]	; (8002ce8 <TIM_TI2_ConfigInputStage+0x60>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	031b      	lsls	r3, r3, #12
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	22a0      	movs	r2, #160	; 0xa0
 8002cc4:	4393      	bics	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	621a      	str	r2, [r3, #32]
}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b006      	add	sp, #24
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	ffff0fff 	.word	0xffff0fff

08002cec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <TIM_ITRx_SetConfig+0x34>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	2207      	movs	r2, #7
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	609a      	str	r2, [r3, #8]
}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b004      	add	sp, #16
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	ffcfff8f 	.word	0xffcfff8f

08002d24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	4a09      	ldr	r2, [pc, #36]	; (8002d60 <TIM_ETR_SetConfig+0x3c>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	021a      	lsls	r2, r3, #8
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	609a      	str	r2, [r3, #8]
}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b006      	add	sp, #24
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	ffff00ff 	.word	0xffff00ff

08002d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	223c      	movs	r2, #60	; 0x3c
 8002d72:	5c9b      	ldrb	r3, [r3, r2]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e055      	b.n	8002e28 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	223c      	movs	r2, #60	; 0x3c
 8002d80:	2101      	movs	r1, #1
 8002d82:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	223d      	movs	r2, #61	; 0x3d
 8002d88:	2102      	movs	r1, #2
 8002d8a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a23      	ldr	r2, [pc, #140]	; (8002e30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d108      	bne.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4a22      	ldr	r2, [pc, #136]	; (8002e34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2270      	movs	r2, #112	; 0x70
 8002dbc:	4393      	bics	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a16      	ldr	r2, [pc, #88]	; (8002e30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00f      	beq.n	8002dfc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	05db      	lsls	r3, r3, #23
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d009      	beq.n	8002dfc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a11      	ldr	r2, [pc, #68]	; (8002e3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d10c      	bne.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2280      	movs	r2, #128	; 0x80
 8002e00:	4393      	bics	r3, r2
 8002e02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	223d      	movs	r2, #61	; 0x3d
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	223c      	movs	r2, #60	; 0x3c
 8002e22:	2100      	movs	r1, #0
 8002e24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	0018      	movs	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b004      	add	sp, #16
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	ff0fffff 	.word	0xff0fffff
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40014000 	.word	0x40014000

08002e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b002      	add	sp, #8
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b002      	add	sp, #8
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e046      	b.n	8002f10 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2284      	movs	r2, #132	; 0x84
 8002e86:	589b      	ldr	r3, [r3, r2]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d107      	bne.n	8002e9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2280      	movs	r2, #128	; 0x80
 8002e90:	2100      	movs	r1, #0
 8002e92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	0018      	movs	r0, r3
 8002e98:	f7fd fdc6 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2284      	movs	r2, #132	; 0x84
 8002ea0:	2124      	movs	r1, #36	; 0x24
 8002ea2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2101      	movs	r1, #1
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f000 fc8c 	bl	80037d4 <UART_SetConfig>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e024      	b.n	8002f10 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f000 ff3d 	bl	8003d50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	490d      	ldr	r1, [pc, #52]	; (8002f18 <HAL_UART_Init+0xa8>)
 8002ee2:	400a      	ands	r2, r1
 8002ee4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	212a      	movs	r1, #42	; 0x2a
 8002ef2:	438a      	bics	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2101      	movs	r1, #1
 8002f02:	430a      	orrs	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f000 ffd5 	bl	8003eb8 <UART_CheckIdleState>
 8002f0e:	0003      	movs	r3, r0
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b002      	add	sp, #8
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	ffffb7ff 	.word	0xffffb7ff

08002f1c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08c      	sub	sp, #48	; 0x30
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	1dbb      	adds	r3, r7, #6
 8002f28:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2284      	movs	r2, #132	; 0x84
 8002f2e:	589b      	ldr	r3, [r3, r2]
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d000      	beq.n	8002f36 <HAL_UART_Transmit_IT+0x1a>
 8002f34:	e0a0      	b.n	8003078 <HAL_UART_Transmit_IT+0x15c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_UART_Transmit_IT+0x28>
 8002f3c:	1dbb      	adds	r3, r7, #6
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e098      	b.n	800307a <HAL_UART_Transmit_IT+0x15e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	015b      	lsls	r3, r3, #5
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d109      	bne.n	8002f68 <HAL_UART_Transmit_IT+0x4c>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d105      	bne.n	8002f68 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	4013      	ands	r3, r2
 8002f62:	d001      	beq.n	8002f68 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e088      	b.n	800307a <HAL_UART_Transmit_IT+0x15e>
      }
    }

    __HAL_LOCK(huart);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2280      	movs	r2, #128	; 0x80
 8002f6c:	5c9b      	ldrb	r3, [r3, r2]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_UART_Transmit_IT+0x5a>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e081      	b.n	800307a <HAL_UART_Transmit_IT+0x15e>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2280      	movs	r2, #128	; 0x80
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1dba      	adds	r2, r7, #6
 8002f88:	2154      	movs	r1, #84	; 0x54
 8002f8a:	8812      	ldrh	r2, [r2, #0]
 8002f8c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1dba      	adds	r2, r7, #6
 8002f92:	2156      	movs	r1, #86	; 0x56
 8002f94:	8812      	ldrh	r2, [r2, #0]
 8002f96:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	228c      	movs	r2, #140	; 0x8c
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2284      	movs	r2, #132	; 0x84
 8002faa:	2121      	movs	r1, #33	; 0x21
 8002fac:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	059b      	lsls	r3, r3, #22
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d12e      	bne.n	8003018 <HAL_UART_Transmit_IT+0xfc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	015b      	lsls	r3, r3, #5
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d107      	bne.n	8002fd6 <HAL_UART_Transmit_IT+0xba>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d103      	bne.n	8002fd6 <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4a2c      	ldr	r2, [pc, #176]	; (8003084 <HAL_UART_Transmit_IT+0x168>)
 8002fd2:	675a      	str	r2, [r3, #116]	; 0x74
 8002fd4:	e002      	b.n	8002fdc <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <HAL_UART_Transmit_IT+0x16c>)
 8002fda:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2280      	movs	r2, #128	; 0x80
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002fea:	69fb      	ldr	r3, [r7, #28]

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fee:	2301      	movs	r3, #1
 8002ff0:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	f383 8810 	msr	PRIMASK, r3
}
 8002ff8:	46c0      	nop			; (mov r8, r8)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2180      	movs	r1, #128	; 0x80
 8003006:	0409      	lsls	r1, r1, #16
 8003008:	430a      	orrs	r2, r1
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	f383 8810 	msr	PRIMASK, r3
}
 8003016:	e02d      	b.n	8003074 <HAL_UART_Transmit_IT+0x158>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	2380      	movs	r3, #128	; 0x80
 800301e:	015b      	lsls	r3, r3, #5
 8003020:	429a      	cmp	r2, r3
 8003022:	d107      	bne.n	8003034 <HAL_UART_Transmit_IT+0x118>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d103      	bne.n	8003034 <HAL_UART_Transmit_IT+0x118>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4a17      	ldr	r2, [pc, #92]	; (800308c <HAL_UART_Transmit_IT+0x170>)
 8003030:	675a      	str	r2, [r3, #116]	; 0x74
 8003032:	e002      	b.n	800303a <HAL_UART_Transmit_IT+0x11e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a16      	ldr	r2, [pc, #88]	; (8003090 <HAL_UART_Transmit_IT+0x174>)
 8003038:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2280      	movs	r2, #128	; 0x80
 800303e:	2100      	movs	r1, #0
 8003040:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003042:	f3ef 8310 	mrs	r3, PRIMASK
 8003046:	613b      	str	r3, [r7, #16]
  return(result);
 8003048:	693b      	ldr	r3, [r7, #16]

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800304c:	2301      	movs	r3, #1
 800304e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f383 8810 	msr	PRIMASK, r3
}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2180      	movs	r1, #128	; 0x80
 8003064:	430a      	orrs	r2, r1
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	f383 8810 	msr	PRIMASK, r3
}
 8003072:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	e000      	b.n	800307a <HAL_UART_Transmit_IT+0x15e>
  }
  else
  {
    return HAL_BUSY;
 8003078:	2302      	movs	r3, #2
  }
}
 800307a:	0018      	movs	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	b00c      	add	sp, #48	; 0x30
 8003080:	bd80      	pop	{r7, pc}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	0800468d 	.word	0x0800468d
 8003088:	080045a1 	.word	0x080045a1
 800308c:	080044e3 	.word	0x080044e3
 8003090:	0800442f 	.word	0x0800442f

08003094 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	1dbb      	adds	r3, r7, #6
 80030a0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2288      	movs	r2, #136	; 0x88
 80030a6:	589b      	ldr	r3, [r3, r2]
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d155      	bne.n	8003158 <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_UART_Receive_IT+0x26>
 80030b2:	1dbb      	adds	r3, r7, #6
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e04d      	b.n	800315a <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	015b      	lsls	r3, r3, #5
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d109      	bne.n	80030de <HAL_UART_Receive_IT+0x4a>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d105      	bne.n	80030de <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2201      	movs	r2, #1
 80030d6:	4013      	ands	r3, r2
 80030d8:	d001      	beq.n	80030de <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e03d      	b.n	800315a <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2280      	movs	r2, #128	; 0x80
 80030e2:	5c9b      	ldrb	r3, [r3, r2]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_UART_Receive_IT+0x58>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e036      	b.n	800315a <HAL_UART_Receive_IT+0xc6>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2280      	movs	r2, #128	; 0x80
 80030f0:	2101      	movs	r1, #1
 80030f2:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a19      	ldr	r2, [pc, #100]	; (8003164 <HAL_UART_Receive_IT+0xd0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d020      	beq.n	8003146 <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	041b      	lsls	r3, r3, #16
 800310e:	4013      	ands	r3, r2
 8003110:	d019      	beq.n	8003146 <HAL_UART_Receive_IT+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003112:	f3ef 8310 	mrs	r3, PRIMASK
 8003116:	613b      	str	r3, [r7, #16]
  return(result);
 8003118:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800311a:	61fb      	str	r3, [r7, #28]
 800311c:	2301      	movs	r3, #1
 800311e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f383 8810 	msr	PRIMASK, r3
}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2180      	movs	r1, #128	; 0x80
 8003134:	04c9      	lsls	r1, r1, #19
 8003136:	430a      	orrs	r2, r1
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f383 8810 	msr	PRIMASK, r3
}
 8003144:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003146:	1dbb      	adds	r3, r7, #6
 8003148:	881a      	ldrh	r2, [r3, #0]
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	0018      	movs	r0, r3
 8003150:	f000 ffc4 	bl	80040dc <UART_Start_Receive_IT>
 8003154:	0003      	movs	r3, r0
 8003156:	e000      	b.n	800315a <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003158:	2302      	movs	r3, #2
  }
}
 800315a:	0018      	movs	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	b008      	add	sp, #32
 8003160:	bd80      	pop	{r7, pc}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	40008000 	.word	0x40008000

08003168 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003168:	b5b0      	push	{r4, r5, r7, lr}
 800316a:	b0aa      	sub	sp, #168	; 0xa8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	22a4      	movs	r2, #164	; 0xa4
 8003178:	18b9      	adds	r1, r7, r2
 800317a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	20a0      	movs	r0, #160	; 0xa0
 8003184:	1839      	adds	r1, r7, r0
 8003186:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	249c      	movs	r4, #156	; 0x9c
 8003190:	1939      	adds	r1, r7, r4
 8003192:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003194:	0011      	movs	r1, r2
 8003196:	18bb      	adds	r3, r7, r2
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4aa0      	ldr	r2, [pc, #640]	; (800341c <HAL_UART_IRQHandler+0x2b4>)
 800319c:	4013      	ands	r3, r2
 800319e:	2298      	movs	r2, #152	; 0x98
 80031a0:	18bd      	adds	r5, r7, r2
 80031a2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80031a4:	18bb      	adds	r3, r7, r2
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d11a      	bne.n	80031e2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80031ac:	187b      	adds	r3, r7, r1
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2220      	movs	r2, #32
 80031b2:	4013      	ands	r3, r2
 80031b4:	d015      	beq.n	80031e2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80031b6:	183b      	adds	r3, r7, r0
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2220      	movs	r2, #32
 80031bc:	4013      	ands	r3, r2
 80031be:	d105      	bne.n	80031cc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80031c0:	193b      	adds	r3, r7, r4
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	055b      	lsls	r3, r3, #21
 80031c8:	4013      	ands	r3, r2
 80031ca:	d00a      	beq.n	80031e2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d100      	bne.n	80031d6 <HAL_UART_IRQHandler+0x6e>
 80031d4:	e2cf      	b.n	8003776 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	0010      	movs	r0, r2
 80031de:	4798      	blx	r3
      }
      return;
 80031e0:	e2c9      	b.n	8003776 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80031e2:	2398      	movs	r3, #152	; 0x98
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d100      	bne.n	80031ee <HAL_UART_IRQHandler+0x86>
 80031ec:	e11e      	b.n	800342c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80031ee:	239c      	movs	r3, #156	; 0x9c
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a8a      	ldr	r2, [pc, #552]	; (8003420 <HAL_UART_IRQHandler+0x2b8>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	d106      	bne.n	8003208 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80031fa:	23a0      	movs	r3, #160	; 0xa0
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a88      	ldr	r2, [pc, #544]	; (8003424 <HAL_UART_IRQHandler+0x2bc>)
 8003202:	4013      	ands	r3, r2
 8003204:	d100      	bne.n	8003208 <HAL_UART_IRQHandler+0xa0>
 8003206:	e111      	b.n	800342c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003208:	23a4      	movs	r3, #164	; 0xa4
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2201      	movs	r2, #1
 8003210:	4013      	ands	r3, r2
 8003212:	d012      	beq.n	800323a <HAL_UART_IRQHandler+0xd2>
 8003214:	23a0      	movs	r3, #160	; 0xa0
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4013      	ands	r3, r2
 8003220:	d00b      	beq.n	800323a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2201      	movs	r2, #1
 8003228:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	228c      	movs	r2, #140	; 0x8c
 800322e:	589b      	ldr	r3, [r3, r2]
 8003230:	2201      	movs	r2, #1
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	218c      	movs	r1, #140	; 0x8c
 8003238:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800323a:	23a4      	movs	r3, #164	; 0xa4
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2202      	movs	r2, #2
 8003242:	4013      	ands	r3, r2
 8003244:	d011      	beq.n	800326a <HAL_UART_IRQHandler+0x102>
 8003246:	239c      	movs	r3, #156	; 0x9c
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2201      	movs	r2, #1
 800324e:	4013      	ands	r3, r2
 8003250:	d00b      	beq.n	800326a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2202      	movs	r2, #2
 8003258:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	228c      	movs	r2, #140	; 0x8c
 800325e:	589b      	ldr	r3, [r3, r2]
 8003260:	2204      	movs	r2, #4
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	218c      	movs	r1, #140	; 0x8c
 8003268:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800326a:	23a4      	movs	r3, #164	; 0xa4
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2204      	movs	r2, #4
 8003272:	4013      	ands	r3, r2
 8003274:	d011      	beq.n	800329a <HAL_UART_IRQHandler+0x132>
 8003276:	239c      	movs	r3, #156	; 0x9c
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2201      	movs	r2, #1
 800327e:	4013      	ands	r3, r2
 8003280:	d00b      	beq.n	800329a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2204      	movs	r2, #4
 8003288:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	228c      	movs	r2, #140	; 0x8c
 800328e:	589b      	ldr	r3, [r3, r2]
 8003290:	2202      	movs	r2, #2
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	218c      	movs	r1, #140	; 0x8c
 8003298:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800329a:	23a4      	movs	r3, #164	; 0xa4
 800329c:	18fb      	adds	r3, r7, r3
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2208      	movs	r2, #8
 80032a2:	4013      	ands	r3, r2
 80032a4:	d017      	beq.n	80032d6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80032a6:	23a0      	movs	r3, #160	; 0xa0
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2220      	movs	r2, #32
 80032ae:	4013      	ands	r3, r2
 80032b0:	d105      	bne.n	80032be <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80032b2:	239c      	movs	r3, #156	; 0x9c
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a59      	ldr	r2, [pc, #356]	; (8003420 <HAL_UART_IRQHandler+0x2b8>)
 80032ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80032bc:	d00b      	beq.n	80032d6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2208      	movs	r2, #8
 80032c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	228c      	movs	r2, #140	; 0x8c
 80032ca:	589b      	ldr	r3, [r3, r2]
 80032cc:	2208      	movs	r2, #8
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	218c      	movs	r1, #140	; 0x8c
 80032d4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032d6:	23a4      	movs	r3, #164	; 0xa4
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	4013      	ands	r3, r2
 80032e2:	d013      	beq.n	800330c <HAL_UART_IRQHandler+0x1a4>
 80032e4:	23a0      	movs	r3, #160	; 0xa0
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	04db      	lsls	r3, r3, #19
 80032ee:	4013      	ands	r3, r2
 80032f0:	d00c      	beq.n	800330c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	0112      	lsls	r2, r2, #4
 80032fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	228c      	movs	r2, #140	; 0x8c
 8003300:	589b      	ldr	r3, [r3, r2]
 8003302:	2220      	movs	r2, #32
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	218c      	movs	r1, #140	; 0x8c
 800330a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	228c      	movs	r2, #140	; 0x8c
 8003310:	589b      	ldr	r3, [r3, r2]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d100      	bne.n	8003318 <HAL_UART_IRQHandler+0x1b0>
 8003316:	e230      	b.n	800377a <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003318:	23a4      	movs	r3, #164	; 0xa4
 800331a:	18fb      	adds	r3, r7, r3
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2220      	movs	r2, #32
 8003320:	4013      	ands	r3, r2
 8003322:	d015      	beq.n	8003350 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003324:	23a0      	movs	r3, #160	; 0xa0
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2220      	movs	r2, #32
 800332c:	4013      	ands	r3, r2
 800332e:	d106      	bne.n	800333e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003330:	239c      	movs	r3, #156	; 0x9c
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	055b      	lsls	r3, r3, #21
 800333a:	4013      	ands	r3, r2
 800333c:	d008      	beq.n	8003350 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	0010      	movs	r0, r2
 800334e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	228c      	movs	r2, #140	; 0x8c
 8003354:	589b      	ldr	r3, [r3, r2]
 8003356:	2194      	movs	r1, #148	; 0x94
 8003358:	187a      	adds	r2, r7, r1
 800335a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2240      	movs	r2, #64	; 0x40
 8003364:	4013      	ands	r3, r2
 8003366:	2b40      	cmp	r3, #64	; 0x40
 8003368:	d004      	beq.n	8003374 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800336a:	187b      	adds	r3, r7, r1
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2228      	movs	r2, #40	; 0x28
 8003370:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003372:	d047      	beq.n	8003404 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	0018      	movs	r0, r3
 8003378:	f000 ffdc 	bl	8004334 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2240      	movs	r2, #64	; 0x40
 8003384:	4013      	ands	r3, r2
 8003386:	2b40      	cmp	r3, #64	; 0x40
 8003388:	d137      	bne.n	80033fa <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800338a:	f3ef 8310 	mrs	r3, PRIMASK
 800338e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003392:	2090      	movs	r0, #144	; 0x90
 8003394:	183a      	adds	r2, r7, r0
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	2301      	movs	r3, #1
 800339a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800339e:	f383 8810 	msr	PRIMASK, r3
}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2140      	movs	r1, #64	; 0x40
 80033b0:	438a      	bics	r2, r1
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	183b      	adds	r3, r7, r0
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033bc:	f383 8810 	msr	PRIMASK, r3
}
 80033c0:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d012      	beq.n	80033f0 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ce:	4a16      	ldr	r2, [pc, #88]	; (8003428 <HAL_UART_IRQHandler+0x2c0>)
 80033d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033d6:	0018      	movs	r0, r3
 80033d8:	f7fe f818 	bl	800140c <HAL_DMA_Abort_IT>
 80033dc:	1e03      	subs	r3, r0, #0
 80033de:	d01a      	beq.n	8003416 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ea:	0018      	movs	r0, r3
 80033ec:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ee:	e012      	b.n	8003416 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	0018      	movs	r0, r3
 80033f4:	f000 f9da 	bl	80037ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f8:	e00d      	b.n	8003416 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	0018      	movs	r0, r3
 80033fe:	f000 f9d5 	bl	80037ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003402:	e008      	b.n	8003416 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	0018      	movs	r0, r3
 8003408:	f000 f9d0 	bl	80037ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	228c      	movs	r2, #140	; 0x8c
 8003410:	2100      	movs	r1, #0
 8003412:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003414:	e1b1      	b.n	800377a <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003416:	46c0      	nop			; (mov r8, r8)
    return;
 8003418:	e1af      	b.n	800377a <HAL_UART_IRQHandler+0x612>
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	0000080f 	.word	0x0000080f
 8003420:	10000001 	.word	0x10000001
 8003424:	04000120 	.word	0x04000120
 8003428:	08004401 	.word	0x08004401

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003430:	2b01      	cmp	r3, #1
 8003432:	d000      	beq.n	8003436 <HAL_UART_IRQHandler+0x2ce>
 8003434:	e135      	b.n	80036a2 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003436:	23a4      	movs	r3, #164	; 0xa4
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2210      	movs	r2, #16
 800343e:	4013      	ands	r3, r2
 8003440:	d100      	bne.n	8003444 <HAL_UART_IRQHandler+0x2dc>
 8003442:	e12e      	b.n	80036a2 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003444:	23a0      	movs	r3, #160	; 0xa0
 8003446:	18fb      	adds	r3, r7, r3
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2210      	movs	r2, #16
 800344c:	4013      	ands	r3, r2
 800344e:	d100      	bne.n	8003452 <HAL_UART_IRQHandler+0x2ea>
 8003450:	e127      	b.n	80036a2 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2210      	movs	r2, #16
 8003458:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2240      	movs	r2, #64	; 0x40
 8003462:	4013      	ands	r3, r2
 8003464:	2b40      	cmp	r3, #64	; 0x40
 8003466:	d000      	beq.n	800346a <HAL_UART_IRQHandler+0x302>
 8003468:	e09e      	b.n	80035a8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	217e      	movs	r1, #126	; 0x7e
 8003474:	187b      	adds	r3, r7, r1
 8003476:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003478:	187b      	adds	r3, r7, r1
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d100      	bne.n	8003482 <HAL_UART_IRQHandler+0x31a>
 8003480:	e17d      	b.n	800377e <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	225c      	movs	r2, #92	; 0x5c
 8003486:	5a9b      	ldrh	r3, [r3, r2]
 8003488:	187a      	adds	r2, r7, r1
 800348a:	8812      	ldrh	r2, [r2, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d300      	bcc.n	8003492 <HAL_UART_IRQHandler+0x32a>
 8003490:	e175      	b.n	800377e <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	187a      	adds	r2, r7, r1
 8003496:	215e      	movs	r1, #94	; 0x5e
 8003498:	8812      	ldrh	r2, [r2, #0]
 800349a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2220      	movs	r2, #32
 80034a6:	4013      	ands	r3, r2
 80034a8:	d16f      	bne.n	800358a <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034aa:	f3ef 8310 	mrs	r3, PRIMASK
 80034ae:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80034b4:	2301      	movs	r3, #1
 80034b6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ba:	f383 8810 	msr	PRIMASK, r3
}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	49b1      	ldr	r1, [pc, #708]	; (8003790 <HAL_UART_IRQHandler+0x628>)
 80034cc:	400a      	ands	r2, r1
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034d2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d6:	f383 8810 	msr	PRIMASK, r3
}
 80034da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034dc:	f3ef 8310 	mrs	r3, PRIMASK
 80034e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80034e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e4:	677b      	str	r3, [r7, #116]	; 0x74
 80034e6:	2301      	movs	r3, #1
 80034e8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ec:	f383 8810 	msr	PRIMASK, r3
}
 80034f0:	46c0      	nop			; (mov r8, r8)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2101      	movs	r1, #1
 80034fe:	438a      	bics	r2, r1
 8003500:	609a      	str	r2, [r3, #8]
 8003502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003504:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003508:	f383 8810 	msr	PRIMASK, r3
}
 800350c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350e:	f3ef 8310 	mrs	r3, PRIMASK
 8003512:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003514:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003516:	673b      	str	r3, [r7, #112]	; 0x70
 8003518:	2301      	movs	r3, #1
 800351a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800351e:	f383 8810 	msr	PRIMASK, r3
}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2140      	movs	r1, #64	; 0x40
 8003530:	438a      	bics	r2, r1
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003536:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800353a:	f383 8810 	msr	PRIMASK, r3
}
 800353e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2288      	movs	r2, #136	; 0x88
 8003544:	2120      	movs	r1, #32
 8003546:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800354e:	f3ef 8310 	mrs	r3, PRIMASK
 8003552:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003554:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003556:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003558:	2301      	movs	r3, #1
 800355a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800355e:	f383 8810 	msr	PRIMASK, r3
}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2110      	movs	r1, #16
 8003570:	438a      	bics	r2, r1
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003576:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800357a:	f383 8810 	msr	PRIMASK, r3
}
 800357e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003584:	0018      	movs	r0, r3
 8003586:	f7fd fedf 	bl	8001348 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	225c      	movs	r2, #92	; 0x5c
 800358e:	5a9a      	ldrh	r2, [r3, r2]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	215e      	movs	r1, #94	; 0x5e
 8003594:	5a5b      	ldrh	r3, [r3, r1]
 8003596:	b29b      	uxth	r3, r3
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	b29a      	uxth	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	0011      	movs	r1, r2
 80035a0:	0018      	movs	r0, r3
 80035a2:	f000 f90b 	bl	80037bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035a6:	e0ea      	b.n	800377e <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	225c      	movs	r2, #92	; 0x5c
 80035ac:	5a99      	ldrh	r1, [r3, r2]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	225e      	movs	r2, #94	; 0x5e
 80035b2:	5a9b      	ldrh	r3, [r3, r2]
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	208e      	movs	r0, #142	; 0x8e
 80035b8:	183b      	adds	r3, r7, r0
 80035ba:	1a8a      	subs	r2, r1, r2
 80035bc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	225e      	movs	r2, #94	; 0x5e
 80035c2:	5a9b      	ldrh	r3, [r3, r2]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d100      	bne.n	80035cc <HAL_UART_IRQHandler+0x464>
 80035ca:	e0da      	b.n	8003782 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 80035cc:	183b      	adds	r3, r7, r0
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d100      	bne.n	80035d6 <HAL_UART_IRQHandler+0x46e>
 80035d4:	e0d5      	b.n	8003782 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d6:	f3ef 8310 	mrs	r3, PRIMASK
 80035da:	60fb      	str	r3, [r7, #12]
  return(result);
 80035dc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035de:	2488      	movs	r4, #136	; 0x88
 80035e0:	193a      	adds	r2, r7, r4
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	2301      	movs	r3, #1
 80035e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f383 8810 	msr	PRIMASK, r3
}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4966      	ldr	r1, [pc, #408]	; (8003794 <HAL_UART_IRQHandler+0x62c>)
 80035fc:	400a      	ands	r2, r1
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	193b      	adds	r3, r7, r4
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f383 8810 	msr	PRIMASK, r3
}
 800360c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800360e:	f3ef 8310 	mrs	r3, PRIMASK
 8003612:	61bb      	str	r3, [r7, #24]
  return(result);
 8003614:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003616:	2484      	movs	r4, #132	; 0x84
 8003618:	193a      	adds	r2, r7, r4
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	2301      	movs	r3, #1
 800361e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f383 8810 	msr	PRIMASK, r3
}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4959      	ldr	r1, [pc, #356]	; (8003798 <HAL_UART_IRQHandler+0x630>)
 8003634:	400a      	ands	r2, r1
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	193b      	adds	r3, r7, r4
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	f383 8810 	msr	PRIMASK, r3
}
 8003644:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2288      	movs	r2, #136	; 0x88
 800364a:	2120      	movs	r1, #32
 800364c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800365a:	f3ef 8310 	mrs	r3, PRIMASK
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003662:	2480      	movs	r4, #128	; 0x80
 8003664:	193a      	adds	r2, r7, r4
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	2301      	movs	r3, #1
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	f383 8810 	msr	PRIMASK, r3
}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2110      	movs	r1, #16
 8003680:	438a      	bics	r2, r1
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	193b      	adds	r3, r7, r4
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368c:	f383 8810 	msr	PRIMASK, r3
}
 8003690:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003692:	183b      	adds	r3, r7, r0
 8003694:	881a      	ldrh	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	0011      	movs	r1, r2
 800369a:	0018      	movs	r0, r3
 800369c:	f000 f88e 	bl	80037bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036a0:	e06f      	b.n	8003782 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036a2:	23a4      	movs	r3, #164	; 0xa4
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	035b      	lsls	r3, r3, #13
 80036ac:	4013      	ands	r3, r2
 80036ae:	d010      	beq.n	80036d2 <HAL_UART_IRQHandler+0x56a>
 80036b0:	239c      	movs	r3, #156	; 0x9c
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	2380      	movs	r3, #128	; 0x80
 80036b8:	03db      	lsls	r3, r3, #15
 80036ba:	4013      	ands	r3, r2
 80036bc:	d009      	beq.n	80036d2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2280      	movs	r2, #128	; 0x80
 80036c4:	0352      	lsls	r2, r2, #13
 80036c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	0018      	movs	r0, r3
 80036cc:	f001 fcd4 	bl	8005078 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036d0:	e05a      	b.n	8003788 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80036d2:	23a4      	movs	r3, #164	; 0xa4
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2280      	movs	r2, #128	; 0x80
 80036da:	4013      	ands	r3, r2
 80036dc:	d016      	beq.n	800370c <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80036de:	23a0      	movs	r3, #160	; 0xa0
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2280      	movs	r2, #128	; 0x80
 80036e6:	4013      	ands	r3, r2
 80036e8:	d106      	bne.n	80036f8 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80036ea:	239c      	movs	r3, #156	; 0x9c
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	041b      	lsls	r3, r3, #16
 80036f4:	4013      	ands	r3, r2
 80036f6:	d009      	beq.n	800370c <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d042      	beq.n	8003786 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	0010      	movs	r0, r2
 8003708:	4798      	blx	r3
    }
    return;
 800370a:	e03c      	b.n	8003786 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800370c:	23a4      	movs	r3, #164	; 0xa4
 800370e:	18fb      	adds	r3, r7, r3
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2240      	movs	r2, #64	; 0x40
 8003714:	4013      	ands	r3, r2
 8003716:	d00a      	beq.n	800372e <HAL_UART_IRQHandler+0x5c6>
 8003718:	23a0      	movs	r3, #160	; 0xa0
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2240      	movs	r2, #64	; 0x40
 8003720:	4013      	ands	r3, r2
 8003722:	d004      	beq.n	800372e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	0018      	movs	r0, r3
 8003728:	f001 f82a 	bl	8004780 <UART_EndTransmit_IT>
    return;
 800372c:	e02c      	b.n	8003788 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800372e:	23a4      	movs	r3, #164	; 0xa4
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	041b      	lsls	r3, r3, #16
 8003738:	4013      	ands	r3, r2
 800373a:	d00b      	beq.n	8003754 <HAL_UART_IRQHandler+0x5ec>
 800373c:	23a0      	movs	r3, #160	; 0xa0
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	05db      	lsls	r3, r3, #23
 8003746:	4013      	ands	r3, r2
 8003748:	d004      	beq.n	8003754 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	0018      	movs	r0, r3
 800374e:	f001 fca3 	bl	8005098 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003752:	e019      	b.n	8003788 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003754:	23a4      	movs	r3, #164	; 0xa4
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	045b      	lsls	r3, r3, #17
 800375e:	4013      	ands	r3, r2
 8003760:	d012      	beq.n	8003788 <HAL_UART_IRQHandler+0x620>
 8003762:	23a0      	movs	r3, #160	; 0xa0
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	da0d      	bge.n	8003788 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	0018      	movs	r0, r3
 8003770:	f001 fc8a 	bl	8005088 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003774:	e008      	b.n	8003788 <HAL_UART_IRQHandler+0x620>
      return;
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	e006      	b.n	8003788 <HAL_UART_IRQHandler+0x620>
    return;
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	e004      	b.n	8003788 <HAL_UART_IRQHandler+0x620>
      return;
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	e002      	b.n	8003788 <HAL_UART_IRQHandler+0x620>
      return;
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	e000      	b.n	8003788 <HAL_UART_IRQHandler+0x620>
    return;
 8003786:	46c0      	nop			; (mov r8, r8)
  }
}
 8003788:	46bd      	mov	sp, r7
 800378a:	b02a      	add	sp, #168	; 0xa8
 800378c:	bdb0      	pop	{r4, r5, r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	fffffeff 	.word	0xfffffeff
 8003794:	fffffedf 	.word	0xfffffedf
 8003798:	effffffe 	.word	0xeffffffe

0800379c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b002      	add	sp, #8
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037b4:	46c0      	nop			; (mov r8, r8)
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b002      	add	sp, #8
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	000a      	movs	r2, r1
 80037c6:	1cbb      	adds	r3, r7, #2
 80037c8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b002      	add	sp, #8
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037d4:	b5b0      	push	{r4, r5, r7, lr}
 80037d6:	b090      	sub	sp, #64	; 0x40
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037dc:	231a      	movs	r3, #26
 80037de:	2220      	movs	r2, #32
 80037e0:	189b      	adds	r3, r3, r2
 80037e2:	19db      	adds	r3, r3, r7
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	431a      	orrs	r2, r3
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4aaf      	ldr	r2, [pc, #700]	; (8003ac4 <UART_SetConfig+0x2f0>)
 8003808:	4013      	ands	r3, r2
 800380a:	0019      	movs	r1, r3
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003812:	430b      	orrs	r3, r1
 8003814:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	4aaa      	ldr	r2, [pc, #680]	; (8003ac8 <UART_SetConfig+0x2f4>)
 800381e:	4013      	ands	r3, r2
 8003820:	0018      	movs	r0, r3
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	68d9      	ldr	r1, [r3, #12]
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	0003      	movs	r3, r0
 800382c:	430b      	orrs	r3, r1
 800382e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4aa4      	ldr	r2, [pc, #656]	; (8003acc <UART_SetConfig+0x2f8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d004      	beq.n	800384a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003846:	4313      	orrs	r3, r2
 8003848:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a9f      	ldr	r2, [pc, #636]	; (8003ad0 <UART_SetConfig+0x2fc>)
 8003852:	4013      	ands	r3, r2
 8003854:	0019      	movs	r1, r3
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385c:	430b      	orrs	r3, r1
 800385e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	220f      	movs	r2, #15
 8003868:	4393      	bics	r3, r2
 800386a:	0018      	movs	r0, r3
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	0003      	movs	r3, r0
 8003876:	430b      	orrs	r3, r1
 8003878:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a95      	ldr	r2, [pc, #596]	; (8003ad4 <UART_SetConfig+0x300>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d131      	bne.n	80038e8 <UART_SetConfig+0x114>
 8003884:	4b94      	ldr	r3, [pc, #592]	; (8003ad8 <UART_SetConfig+0x304>)
 8003886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003888:	2203      	movs	r2, #3
 800388a:	4013      	ands	r3, r2
 800388c:	2b03      	cmp	r3, #3
 800388e:	d01d      	beq.n	80038cc <UART_SetConfig+0xf8>
 8003890:	d823      	bhi.n	80038da <UART_SetConfig+0x106>
 8003892:	2b02      	cmp	r3, #2
 8003894:	d00c      	beq.n	80038b0 <UART_SetConfig+0xdc>
 8003896:	d820      	bhi.n	80038da <UART_SetConfig+0x106>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <UART_SetConfig+0xce>
 800389c:	2b01      	cmp	r3, #1
 800389e:	d00e      	beq.n	80038be <UART_SetConfig+0xea>
 80038a0:	e01b      	b.n	80038da <UART_SetConfig+0x106>
 80038a2:	231b      	movs	r3, #27
 80038a4:	2220      	movs	r2, #32
 80038a6:	189b      	adds	r3, r3, r2
 80038a8:	19db      	adds	r3, r3, r7
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	e0b4      	b.n	8003a1a <UART_SetConfig+0x246>
 80038b0:	231b      	movs	r3, #27
 80038b2:	2220      	movs	r2, #32
 80038b4:	189b      	adds	r3, r3, r2
 80038b6:	19db      	adds	r3, r3, r7
 80038b8:	2202      	movs	r2, #2
 80038ba:	701a      	strb	r2, [r3, #0]
 80038bc:	e0ad      	b.n	8003a1a <UART_SetConfig+0x246>
 80038be:	231b      	movs	r3, #27
 80038c0:	2220      	movs	r2, #32
 80038c2:	189b      	adds	r3, r3, r2
 80038c4:	19db      	adds	r3, r3, r7
 80038c6:	2204      	movs	r2, #4
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	e0a6      	b.n	8003a1a <UART_SetConfig+0x246>
 80038cc:	231b      	movs	r3, #27
 80038ce:	2220      	movs	r2, #32
 80038d0:	189b      	adds	r3, r3, r2
 80038d2:	19db      	adds	r3, r3, r7
 80038d4:	2208      	movs	r2, #8
 80038d6:	701a      	strb	r2, [r3, #0]
 80038d8:	e09f      	b.n	8003a1a <UART_SetConfig+0x246>
 80038da:	231b      	movs	r3, #27
 80038dc:	2220      	movs	r2, #32
 80038de:	189b      	adds	r3, r3, r2
 80038e0:	19db      	adds	r3, r3, r7
 80038e2:	2210      	movs	r2, #16
 80038e4:	701a      	strb	r2, [r3, #0]
 80038e6:	e098      	b.n	8003a1a <UART_SetConfig+0x246>
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a7b      	ldr	r2, [pc, #492]	; (8003adc <UART_SetConfig+0x308>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d131      	bne.n	8003956 <UART_SetConfig+0x182>
 80038f2:	4b79      	ldr	r3, [pc, #484]	; (8003ad8 <UART_SetConfig+0x304>)
 80038f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f6:	220c      	movs	r2, #12
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b0c      	cmp	r3, #12
 80038fc:	d01d      	beq.n	800393a <UART_SetConfig+0x166>
 80038fe:	d823      	bhi.n	8003948 <UART_SetConfig+0x174>
 8003900:	2b08      	cmp	r3, #8
 8003902:	d00c      	beq.n	800391e <UART_SetConfig+0x14a>
 8003904:	d820      	bhi.n	8003948 <UART_SetConfig+0x174>
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <UART_SetConfig+0x13c>
 800390a:	2b04      	cmp	r3, #4
 800390c:	d00e      	beq.n	800392c <UART_SetConfig+0x158>
 800390e:	e01b      	b.n	8003948 <UART_SetConfig+0x174>
 8003910:	231b      	movs	r3, #27
 8003912:	2220      	movs	r2, #32
 8003914:	189b      	adds	r3, r3, r2
 8003916:	19db      	adds	r3, r3, r7
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]
 800391c:	e07d      	b.n	8003a1a <UART_SetConfig+0x246>
 800391e:	231b      	movs	r3, #27
 8003920:	2220      	movs	r2, #32
 8003922:	189b      	adds	r3, r3, r2
 8003924:	19db      	adds	r3, r3, r7
 8003926:	2202      	movs	r2, #2
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e076      	b.n	8003a1a <UART_SetConfig+0x246>
 800392c:	231b      	movs	r3, #27
 800392e:	2220      	movs	r2, #32
 8003930:	189b      	adds	r3, r3, r2
 8003932:	19db      	adds	r3, r3, r7
 8003934:	2204      	movs	r2, #4
 8003936:	701a      	strb	r2, [r3, #0]
 8003938:	e06f      	b.n	8003a1a <UART_SetConfig+0x246>
 800393a:	231b      	movs	r3, #27
 800393c:	2220      	movs	r2, #32
 800393e:	189b      	adds	r3, r3, r2
 8003940:	19db      	adds	r3, r3, r7
 8003942:	2208      	movs	r2, #8
 8003944:	701a      	strb	r2, [r3, #0]
 8003946:	e068      	b.n	8003a1a <UART_SetConfig+0x246>
 8003948:	231b      	movs	r3, #27
 800394a:	2220      	movs	r2, #32
 800394c:	189b      	adds	r3, r3, r2
 800394e:	19db      	adds	r3, r3, r7
 8003950:	2210      	movs	r2, #16
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	e061      	b.n	8003a1a <UART_SetConfig+0x246>
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a61      	ldr	r2, [pc, #388]	; (8003ae0 <UART_SetConfig+0x30c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d106      	bne.n	800396e <UART_SetConfig+0x19a>
 8003960:	231b      	movs	r3, #27
 8003962:	2220      	movs	r2, #32
 8003964:	189b      	adds	r3, r3, r2
 8003966:	19db      	adds	r3, r3, r7
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
 800396c:	e055      	b.n	8003a1a <UART_SetConfig+0x246>
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a5c      	ldr	r2, [pc, #368]	; (8003ae4 <UART_SetConfig+0x310>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d106      	bne.n	8003986 <UART_SetConfig+0x1b2>
 8003978:	231b      	movs	r3, #27
 800397a:	2220      	movs	r2, #32
 800397c:	189b      	adds	r3, r3, r2
 800397e:	19db      	adds	r3, r3, r7
 8003980:	2200      	movs	r2, #0
 8003982:	701a      	strb	r2, [r3, #0]
 8003984:	e049      	b.n	8003a1a <UART_SetConfig+0x246>
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a50      	ldr	r2, [pc, #320]	; (8003acc <UART_SetConfig+0x2f8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d13e      	bne.n	8003a0e <UART_SetConfig+0x23a>
 8003990:	4b51      	ldr	r3, [pc, #324]	; (8003ad8 <UART_SetConfig+0x304>)
 8003992:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003994:	23c0      	movs	r3, #192	; 0xc0
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	4013      	ands	r3, r2
 800399a:	22c0      	movs	r2, #192	; 0xc0
 800399c:	0112      	lsls	r2, r2, #4
 800399e:	4293      	cmp	r3, r2
 80039a0:	d027      	beq.n	80039f2 <UART_SetConfig+0x21e>
 80039a2:	22c0      	movs	r2, #192	; 0xc0
 80039a4:	0112      	lsls	r2, r2, #4
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d82a      	bhi.n	8003a00 <UART_SetConfig+0x22c>
 80039aa:	2280      	movs	r2, #128	; 0x80
 80039ac:	0112      	lsls	r2, r2, #4
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d011      	beq.n	80039d6 <UART_SetConfig+0x202>
 80039b2:	2280      	movs	r2, #128	; 0x80
 80039b4:	0112      	lsls	r2, r2, #4
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d822      	bhi.n	8003a00 <UART_SetConfig+0x22c>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d004      	beq.n	80039c8 <UART_SetConfig+0x1f4>
 80039be:	2280      	movs	r2, #128	; 0x80
 80039c0:	00d2      	lsls	r2, r2, #3
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00e      	beq.n	80039e4 <UART_SetConfig+0x210>
 80039c6:	e01b      	b.n	8003a00 <UART_SetConfig+0x22c>
 80039c8:	231b      	movs	r3, #27
 80039ca:	2220      	movs	r2, #32
 80039cc:	189b      	adds	r3, r3, r2
 80039ce:	19db      	adds	r3, r3, r7
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
 80039d4:	e021      	b.n	8003a1a <UART_SetConfig+0x246>
 80039d6:	231b      	movs	r3, #27
 80039d8:	2220      	movs	r2, #32
 80039da:	189b      	adds	r3, r3, r2
 80039dc:	19db      	adds	r3, r3, r7
 80039de:	2202      	movs	r2, #2
 80039e0:	701a      	strb	r2, [r3, #0]
 80039e2:	e01a      	b.n	8003a1a <UART_SetConfig+0x246>
 80039e4:	231b      	movs	r3, #27
 80039e6:	2220      	movs	r2, #32
 80039e8:	189b      	adds	r3, r3, r2
 80039ea:	19db      	adds	r3, r3, r7
 80039ec:	2204      	movs	r2, #4
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	e013      	b.n	8003a1a <UART_SetConfig+0x246>
 80039f2:	231b      	movs	r3, #27
 80039f4:	2220      	movs	r2, #32
 80039f6:	189b      	adds	r3, r3, r2
 80039f8:	19db      	adds	r3, r3, r7
 80039fa:	2208      	movs	r2, #8
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	e00c      	b.n	8003a1a <UART_SetConfig+0x246>
 8003a00:	231b      	movs	r3, #27
 8003a02:	2220      	movs	r2, #32
 8003a04:	189b      	adds	r3, r3, r2
 8003a06:	19db      	adds	r3, r3, r7
 8003a08:	2210      	movs	r2, #16
 8003a0a:	701a      	strb	r2, [r3, #0]
 8003a0c:	e005      	b.n	8003a1a <UART_SetConfig+0x246>
 8003a0e:	231b      	movs	r3, #27
 8003a10:	2220      	movs	r2, #32
 8003a12:	189b      	adds	r3, r3, r2
 8003a14:	19db      	adds	r3, r3, r7
 8003a16:	2210      	movs	r2, #16
 8003a18:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a2b      	ldr	r2, [pc, #172]	; (8003acc <UART_SetConfig+0x2f8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d000      	beq.n	8003a26 <UART_SetConfig+0x252>
 8003a24:	e0a9      	b.n	8003b7a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a26:	231b      	movs	r3, #27
 8003a28:	2220      	movs	r2, #32
 8003a2a:	189b      	adds	r3, r3, r2
 8003a2c:	19db      	adds	r3, r3, r7
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d015      	beq.n	8003a60 <UART_SetConfig+0x28c>
 8003a34:	dc18      	bgt.n	8003a68 <UART_SetConfig+0x294>
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d00d      	beq.n	8003a56 <UART_SetConfig+0x282>
 8003a3a:	dc15      	bgt.n	8003a68 <UART_SetConfig+0x294>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <UART_SetConfig+0x272>
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d005      	beq.n	8003a50 <UART_SetConfig+0x27c>
 8003a44:	e010      	b.n	8003a68 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a46:	f7fe fbc7 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 8003a4a:	0003      	movs	r3, r0
 8003a4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a4e:	e014      	b.n	8003a7a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a50:	4b25      	ldr	r3, [pc, #148]	; (8003ae8 <UART_SetConfig+0x314>)
 8003a52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a54:	e011      	b.n	8003a7a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a56:	f7fe fb33 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a5e:	e00c      	b.n	8003a7a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a66:	e008      	b.n	8003a7a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003a6c:	231a      	movs	r3, #26
 8003a6e:	2220      	movs	r2, #32
 8003a70:	189b      	adds	r3, r3, r2
 8003a72:	19db      	adds	r3, r3, r7
 8003a74:	2201      	movs	r2, #1
 8003a76:	701a      	strb	r2, [r3, #0]
        break;
 8003a78:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d100      	bne.n	8003a82 <UART_SetConfig+0x2ae>
 8003a80:	e14b      	b.n	8003d1a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a86:	4b19      	ldr	r3, [pc, #100]	; (8003aec <UART_SetConfig+0x318>)
 8003a88:	0052      	lsls	r2, r2, #1
 8003a8a:	5ad3      	ldrh	r3, [r2, r3]
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a90:	f7fc fb38 	bl	8000104 <__udivsi3>
 8003a94:	0003      	movs	r3, r0
 8003a96:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	0013      	movs	r3, r2
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	189b      	adds	r3, r3, r2
 8003aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d305      	bcc.n	8003ab4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d91d      	bls.n	8003af0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003ab4:	231a      	movs	r3, #26
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	189b      	adds	r3, r3, r2
 8003aba:	19db      	adds	r3, r3, r7
 8003abc:	2201      	movs	r2, #1
 8003abe:	701a      	strb	r2, [r3, #0]
 8003ac0:	e12b      	b.n	8003d1a <UART_SetConfig+0x546>
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	cfff69f3 	.word	0xcfff69f3
 8003ac8:	ffffcfff 	.word	0xffffcfff
 8003acc:	40008000 	.word	0x40008000
 8003ad0:	11fff4ff 	.word	0x11fff4ff
 8003ad4:	40013800 	.word	0x40013800
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	40004400 	.word	0x40004400
 8003ae0:	40004800 	.word	0x40004800
 8003ae4:	40004c00 	.word	0x40004c00
 8003ae8:	00f42400 	.word	0x00f42400
 8003aec:	080053d0 	.word	0x080053d0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	2300      	movs	r3, #0
 8003af6:	61fb      	str	r3, [r7, #28]
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003afc:	4b92      	ldr	r3, [pc, #584]	; (8003d48 <UART_SetConfig+0x574>)
 8003afe:	0052      	lsls	r2, r2, #1
 8003b00:	5ad3      	ldrh	r3, [r2, r3]
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	69b8      	ldr	r0, [r7, #24]
 8003b0e:	69f9      	ldr	r1, [r7, #28]
 8003b10:	f7fc fc6e 	bl	80003f0 <__aeabi_uldivmod>
 8003b14:	0002      	movs	r2, r0
 8003b16:	000b      	movs	r3, r1
 8003b18:	0e11      	lsrs	r1, r2, #24
 8003b1a:	021d      	lsls	r5, r3, #8
 8003b1c:	430d      	orrs	r5, r1
 8003b1e:	0214      	lsls	r4, r2, #8
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	085b      	lsrs	r3, r3, #1
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	68b8      	ldr	r0, [r7, #8]
 8003b2e:	68f9      	ldr	r1, [r7, #12]
 8003b30:	1900      	adds	r0, r0, r4
 8003b32:	4169      	adcs	r1, r5
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	607b      	str	r3, [r7, #4]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f7fc fc55 	bl	80003f0 <__aeabi_uldivmod>
 8003b46:	0002      	movs	r2, r0
 8003b48:	000b      	movs	r3, r1
 8003b4a:	0013      	movs	r3, r2
 8003b4c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b50:	23c0      	movs	r3, #192	; 0xc0
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d309      	bcc.n	8003b6c <UART_SetConfig+0x398>
 8003b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5a:	2380      	movs	r3, #128	; 0x80
 8003b5c:	035b      	lsls	r3, r3, #13
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d204      	bcs.n	8003b6c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b68:	60da      	str	r2, [r3, #12]
 8003b6a:	e0d6      	b.n	8003d1a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003b6c:	231a      	movs	r3, #26
 8003b6e:	2220      	movs	r2, #32
 8003b70:	189b      	adds	r3, r3, r2
 8003b72:	19db      	adds	r3, r3, r7
 8003b74:	2201      	movs	r2, #1
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	e0cf      	b.n	8003d1a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	69da      	ldr	r2, [r3, #28]
 8003b7e:	2380      	movs	r3, #128	; 0x80
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d000      	beq.n	8003b88 <UART_SetConfig+0x3b4>
 8003b86:	e070      	b.n	8003c6a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003b88:	231b      	movs	r3, #27
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	189b      	adds	r3, r3, r2
 8003b8e:	19db      	adds	r3, r3, r7
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d015      	beq.n	8003bc2 <UART_SetConfig+0x3ee>
 8003b96:	dc18      	bgt.n	8003bca <UART_SetConfig+0x3f6>
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d00d      	beq.n	8003bb8 <UART_SetConfig+0x3e4>
 8003b9c:	dc15      	bgt.n	8003bca <UART_SetConfig+0x3f6>
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <UART_SetConfig+0x3d4>
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d005      	beq.n	8003bb2 <UART_SetConfig+0x3de>
 8003ba6:	e010      	b.n	8003bca <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ba8:	f7fe fb16 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 8003bac:	0003      	movs	r3, r0
 8003bae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bb0:	e014      	b.n	8003bdc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb2:	4b66      	ldr	r3, [pc, #408]	; (8003d4c <UART_SetConfig+0x578>)
 8003bb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bb6:	e011      	b.n	8003bdc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bb8:	f7fe fa82 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 8003bbc:	0003      	movs	r3, r0
 8003bbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bc0:	e00c      	b.n	8003bdc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bc8:	e008      	b.n	8003bdc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003bce:	231a      	movs	r3, #26
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	189b      	adds	r3, r3, r2
 8003bd4:	19db      	adds	r3, r3, r7
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
        break;
 8003bda:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d100      	bne.n	8003be4 <UART_SetConfig+0x410>
 8003be2:	e09a      	b.n	8003d1a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be8:	4b57      	ldr	r3, [pc, #348]	; (8003d48 <UART_SetConfig+0x574>)
 8003bea:	0052      	lsls	r2, r2, #1
 8003bec:	5ad3      	ldrh	r3, [r2, r3]
 8003bee:	0019      	movs	r1, r3
 8003bf0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003bf2:	f7fc fa87 	bl	8000104 <__udivsi3>
 8003bf6:	0003      	movs	r3, r0
 8003bf8:	005a      	lsls	r2, r3, #1
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	085b      	lsrs	r3, r3, #1
 8003c00:	18d2      	adds	r2, r2, r3
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	0019      	movs	r1, r3
 8003c08:	0010      	movs	r0, r2
 8003c0a:	f7fc fa7b 	bl	8000104 <__udivsi3>
 8003c0e:	0003      	movs	r3, r0
 8003c10:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c14:	2b0f      	cmp	r3, #15
 8003c16:	d921      	bls.n	8003c5c <UART_SetConfig+0x488>
 8003c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c1a:	2380      	movs	r3, #128	; 0x80
 8003c1c:	025b      	lsls	r3, r3, #9
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d21c      	bcs.n	8003c5c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	200e      	movs	r0, #14
 8003c28:	2420      	movs	r4, #32
 8003c2a:	1903      	adds	r3, r0, r4
 8003c2c:	19db      	adds	r3, r3, r7
 8003c2e:	210f      	movs	r1, #15
 8003c30:	438a      	bics	r2, r1
 8003c32:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	085b      	lsrs	r3, r3, #1
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2207      	movs	r2, #7
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	b299      	uxth	r1, r3
 8003c40:	1903      	adds	r3, r0, r4
 8003c42:	19db      	adds	r3, r3, r7
 8003c44:	1902      	adds	r2, r0, r4
 8003c46:	19d2      	adds	r2, r2, r7
 8003c48:	8812      	ldrh	r2, [r2, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	1902      	adds	r2, r0, r4
 8003c54:	19d2      	adds	r2, r2, r7
 8003c56:	8812      	ldrh	r2, [r2, #0]
 8003c58:	60da      	str	r2, [r3, #12]
 8003c5a:	e05e      	b.n	8003d1a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003c5c:	231a      	movs	r3, #26
 8003c5e:	2220      	movs	r2, #32
 8003c60:	189b      	adds	r3, r3, r2
 8003c62:	19db      	adds	r3, r3, r7
 8003c64:	2201      	movs	r2, #1
 8003c66:	701a      	strb	r2, [r3, #0]
 8003c68:	e057      	b.n	8003d1a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c6a:	231b      	movs	r3, #27
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	189b      	adds	r3, r3, r2
 8003c70:	19db      	adds	r3, r3, r7
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d015      	beq.n	8003ca4 <UART_SetConfig+0x4d0>
 8003c78:	dc18      	bgt.n	8003cac <UART_SetConfig+0x4d8>
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d00d      	beq.n	8003c9a <UART_SetConfig+0x4c6>
 8003c7e:	dc15      	bgt.n	8003cac <UART_SetConfig+0x4d8>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <UART_SetConfig+0x4b6>
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d005      	beq.n	8003c94 <UART_SetConfig+0x4c0>
 8003c88:	e010      	b.n	8003cac <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c8a:	f7fe faa5 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 8003c8e:	0003      	movs	r3, r0
 8003c90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c92:	e014      	b.n	8003cbe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c94:	4b2d      	ldr	r3, [pc, #180]	; (8003d4c <UART_SetConfig+0x578>)
 8003c96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c98:	e011      	b.n	8003cbe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c9a:	f7fe fa11 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 8003c9e:	0003      	movs	r3, r0
 8003ca0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ca2:	e00c      	b.n	8003cbe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003caa:	e008      	b.n	8003cbe <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003cb0:	231a      	movs	r3, #26
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	189b      	adds	r3, r3, r2
 8003cb6:	19db      	adds	r3, r3, r7
 8003cb8:	2201      	movs	r2, #1
 8003cba:	701a      	strb	r2, [r3, #0]
        break;
 8003cbc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d02a      	beq.n	8003d1a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cc8:	4b1f      	ldr	r3, [pc, #124]	; (8003d48 <UART_SetConfig+0x574>)
 8003cca:	0052      	lsls	r2, r2, #1
 8003ccc:	5ad3      	ldrh	r3, [r2, r3]
 8003cce:	0019      	movs	r1, r3
 8003cd0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003cd2:	f7fc fa17 	bl	8000104 <__udivsi3>
 8003cd6:	0003      	movs	r3, r0
 8003cd8:	001a      	movs	r2, r3
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	085b      	lsrs	r3, r3, #1
 8003ce0:	18d2      	adds	r2, r2, r3
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	0010      	movs	r0, r2
 8003cea:	f7fc fa0b 	bl	8000104 <__udivsi3>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	2b0f      	cmp	r3, #15
 8003cf6:	d90a      	bls.n	8003d0e <UART_SetConfig+0x53a>
 8003cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfa:	2380      	movs	r3, #128	; 0x80
 8003cfc:	025b      	lsls	r3, r3, #9
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d205      	bcs.n	8003d0e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60da      	str	r2, [r3, #12]
 8003d0c:	e005      	b.n	8003d1a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003d0e:	231a      	movs	r3, #26
 8003d10:	2220      	movs	r2, #32
 8003d12:	189b      	adds	r3, r3, r2
 8003d14:	19db      	adds	r3, r3, r7
 8003d16:	2201      	movs	r2, #1
 8003d18:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	226a      	movs	r2, #106	; 0x6a
 8003d1e:	2101      	movs	r1, #1
 8003d20:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	2268      	movs	r2, #104	; 0x68
 8003d26:	2101      	movs	r1, #1
 8003d28:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	2200      	movs	r2, #0
 8003d34:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003d36:	231a      	movs	r3, #26
 8003d38:	2220      	movs	r2, #32
 8003d3a:	189b      	adds	r3, r3, r2
 8003d3c:	19db      	adds	r3, r3, r7
 8003d3e:	781b      	ldrb	r3, [r3, #0]
}
 8003d40:	0018      	movs	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	b010      	add	sp, #64	; 0x40
 8003d46:	bdb0      	pop	{r4, r5, r7, pc}
 8003d48:	080053d0 	.word	0x080053d0
 8003d4c:	00f42400 	.word	0x00f42400

08003d50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d00b      	beq.n	8003d7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	4a4a      	ldr	r2, [pc, #296]	; (8003e94 <UART_AdvFeatureConfig+0x144>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	0019      	movs	r1, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	2202      	movs	r2, #2
 8003d80:	4013      	ands	r3, r2
 8003d82:	d00b      	beq.n	8003d9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4a43      	ldr	r2, [pc, #268]	; (8003e98 <UART_AdvFeatureConfig+0x148>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	0019      	movs	r1, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da0:	2204      	movs	r2, #4
 8003da2:	4013      	ands	r3, r2
 8003da4:	d00b      	beq.n	8003dbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	4a3b      	ldr	r2, [pc, #236]	; (8003e9c <UART_AdvFeatureConfig+0x14c>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	0019      	movs	r1, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	2208      	movs	r2, #8
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d00b      	beq.n	8003de0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4a34      	ldr	r2, [pc, #208]	; (8003ea0 <UART_AdvFeatureConfig+0x150>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	0019      	movs	r1, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	2210      	movs	r2, #16
 8003de6:	4013      	ands	r3, r2
 8003de8:	d00b      	beq.n	8003e02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	4a2c      	ldr	r2, [pc, #176]	; (8003ea4 <UART_AdvFeatureConfig+0x154>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	0019      	movs	r1, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	2220      	movs	r2, #32
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d00b      	beq.n	8003e24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	4a25      	ldr	r2, [pc, #148]	; (8003ea8 <UART_AdvFeatureConfig+0x158>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	0019      	movs	r1, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	2240      	movs	r2, #64	; 0x40
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d01d      	beq.n	8003e6a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4a1d      	ldr	r2, [pc, #116]	; (8003eac <UART_AdvFeatureConfig+0x15c>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	0019      	movs	r1, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	035b      	lsls	r3, r3, #13
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d10b      	bne.n	8003e6a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	4a15      	ldr	r2, [pc, #84]	; (8003eb0 <UART_AdvFeatureConfig+0x160>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	0019      	movs	r1, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	2280      	movs	r2, #128	; 0x80
 8003e70:	4013      	ands	r3, r2
 8003e72:	d00b      	beq.n	8003e8c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	4a0e      	ldr	r2, [pc, #56]	; (8003eb4 <UART_AdvFeatureConfig+0x164>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	0019      	movs	r1, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	605a      	str	r2, [r3, #4]
  }
}
 8003e8c:	46c0      	nop			; (mov r8, r8)
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b002      	add	sp, #8
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	fffdffff 	.word	0xfffdffff
 8003e98:	fffeffff 	.word	0xfffeffff
 8003e9c:	fffbffff 	.word	0xfffbffff
 8003ea0:	ffff7fff 	.word	0xffff7fff
 8003ea4:	ffffefff 	.word	0xffffefff
 8003ea8:	ffffdfff 	.word	0xffffdfff
 8003eac:	ffefffff 	.word	0xffefffff
 8003eb0:	ff9fffff 	.word	0xff9fffff
 8003eb4:	fff7ffff 	.word	0xfff7ffff

08003eb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	228c      	movs	r2, #140	; 0x8c
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ec8:	f7fd f940 	bl	800114c <HAL_GetTick>
 8003ecc:	0003      	movs	r3, r0
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2208      	movs	r2, #8
 8003ed8:	4013      	ands	r3, r2
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d10c      	bne.n	8003ef8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2280      	movs	r2, #128	; 0x80
 8003ee2:	0391      	lsls	r1, r2, #14
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	4a18      	ldr	r2, [pc, #96]	; (8003f48 <UART_CheckIdleState+0x90>)
 8003ee8:	9200      	str	r2, [sp, #0]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f000 f82e 	bl	8003f4c <UART_WaitOnFlagUntilTimeout>
 8003ef0:	1e03      	subs	r3, r0, #0
 8003ef2:	d001      	beq.n	8003ef8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e023      	b.n	8003f40 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2204      	movs	r2, #4
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d10c      	bne.n	8003f20 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2280      	movs	r2, #128	; 0x80
 8003f0a:	03d1      	lsls	r1, r2, #15
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	4a0e      	ldr	r2, [pc, #56]	; (8003f48 <UART_CheckIdleState+0x90>)
 8003f10:	9200      	str	r2, [sp, #0]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f000 f81a 	bl	8003f4c <UART_WaitOnFlagUntilTimeout>
 8003f18:	1e03      	subs	r3, r0, #0
 8003f1a:	d001      	beq.n	8003f20 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e00f      	b.n	8003f40 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2284      	movs	r2, #132	; 0x84
 8003f24:	2120      	movs	r1, #32
 8003f26:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2288      	movs	r2, #136	; 0x88
 8003f2c:	2120      	movs	r1, #32
 8003f2e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2280      	movs	r2, #128	; 0x80
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	0018      	movs	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b004      	add	sp, #16
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	01ffffff 	.word	0x01ffffff

08003f4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b094      	sub	sp, #80	; 0x50
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	1dfb      	adds	r3, r7, #7
 8003f5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5c:	e0a7      	b.n	80040ae <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f60:	3301      	adds	r3, #1
 8003f62:	d100      	bne.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003f64:	e0a3      	b.n	80040ae <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f66:	f7fd f8f1 	bl	800114c <HAL_GetTick>
 8003f6a:	0002      	movs	r2, r0
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d302      	bcc.n	8003f7c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d13f      	bne.n	8003ffc <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f80:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f84:	647b      	str	r3, [r7, #68]	; 0x44
 8003f86:	2301      	movs	r3, #1
 8003f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8c:	f383 8810 	msr	PRIMASK, r3
}
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	494e      	ldr	r1, [pc, #312]	; (80040d8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003f9e:	400a      	ands	r2, r1
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fa4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	f383 8810 	msr	PRIMASK, r3
}
 8003fac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fae:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb6:	643b      	str	r3, [r7, #64]	; 0x40
 8003fb8:	2301      	movs	r3, #1
 8003fba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbe:	f383 8810 	msr	PRIMASK, r3
}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2101      	movs	r1, #1
 8003fd0:	438a      	bics	r2, r1
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fda:	f383 8810 	msr	PRIMASK, r3
}
 8003fde:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2284      	movs	r2, #132	; 0x84
 8003fe4:	2120      	movs	r1, #32
 8003fe6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2288      	movs	r2, #136	; 0x88
 8003fec:	2120      	movs	r1, #32
 8003fee:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2280      	movs	r2, #128	; 0x80
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e069      	b.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2204      	movs	r2, #4
 8004004:	4013      	ands	r3, r2
 8004006:	d052      	beq.n	80040ae <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69da      	ldr	r2, [r3, #28]
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	401a      	ands	r2, r3
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	429a      	cmp	r2, r3
 800401a:	d148      	bne.n	80040ae <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2280      	movs	r2, #128	; 0x80
 8004022:	0112      	lsls	r2, r2, #4
 8004024:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004026:	f3ef 8310 	mrs	r3, PRIMASK
 800402a:	613b      	str	r3, [r7, #16]
  return(result);
 800402c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800402e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004030:	2301      	movs	r3, #1
 8004032:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f383 8810 	msr	PRIMASK, r3
}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4924      	ldr	r1, [pc, #144]	; (80040d8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004048:	400a      	ands	r2, r1
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800404e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	f383 8810 	msr	PRIMASK, r3
}
 8004056:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004058:	f3ef 8310 	mrs	r3, PRIMASK
 800405c:	61fb      	str	r3, [r7, #28]
  return(result);
 800405e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004060:	64bb      	str	r3, [r7, #72]	; 0x48
 8004062:	2301      	movs	r3, #1
 8004064:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	f383 8810 	msr	PRIMASK, r3
}
 800406c:	46c0      	nop			; (mov r8, r8)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2101      	movs	r1, #1
 800407a:	438a      	bics	r2, r1
 800407c:	609a      	str	r2, [r3, #8]
 800407e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	f383 8810 	msr	PRIMASK, r3
}
 8004088:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2284      	movs	r2, #132	; 0x84
 800408e:	2120      	movs	r1, #32
 8004090:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2288      	movs	r2, #136	; 0x88
 8004096:	2120      	movs	r1, #32
 8004098:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	228c      	movs	r2, #140	; 0x8c
 800409e:	2120      	movs	r1, #32
 80040a0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2280      	movs	r2, #128	; 0x80
 80040a6:	2100      	movs	r1, #0
 80040a8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e010      	b.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	4013      	ands	r3, r2
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	425a      	negs	r2, r3
 80040be:	4153      	adcs	r3, r2
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	001a      	movs	r2, r3
 80040c4:	1dfb      	adds	r3, r7, #7
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d100      	bne.n	80040ce <UART_WaitOnFlagUntilTimeout+0x182>
 80040cc:	e747      	b.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	0018      	movs	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b014      	add	sp, #80	; 0x50
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	fffffe5f 	.word	0xfffffe5f

080040dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b098      	sub	sp, #96	; 0x60
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	1dbb      	adds	r3, r7, #6
 80040e8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1dba      	adds	r2, r7, #6
 80040f4:	215c      	movs	r1, #92	; 0x5c
 80040f6:	8812      	ldrh	r2, [r2, #0]
 80040f8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1dba      	adds	r2, r7, #6
 80040fe:	215e      	movs	r1, #94	; 0x5e
 8004100:	8812      	ldrh	r2, [r2, #0]
 8004102:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	2380      	movs	r3, #128	; 0x80
 8004110:	015b      	lsls	r3, r3, #5
 8004112:	429a      	cmp	r2, r3
 8004114:	d10d      	bne.n	8004132 <UART_Start_Receive_IT+0x56>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d104      	bne.n	8004128 <UART_Start_Receive_IT+0x4c>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2260      	movs	r2, #96	; 0x60
 8004122:	497f      	ldr	r1, [pc, #508]	; (8004320 <UART_Start_Receive_IT+0x244>)
 8004124:	5299      	strh	r1, [r3, r2]
 8004126:	e02e      	b.n	8004186 <UART_Start_Receive_IT+0xaa>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2260      	movs	r2, #96	; 0x60
 800412c:	21ff      	movs	r1, #255	; 0xff
 800412e:	5299      	strh	r1, [r3, r2]
 8004130:	e029      	b.n	8004186 <UART_Start_Receive_IT+0xaa>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10d      	bne.n	8004156 <UART_Start_Receive_IT+0x7a>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d104      	bne.n	800414c <UART_Start_Receive_IT+0x70>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2260      	movs	r2, #96	; 0x60
 8004146:	21ff      	movs	r1, #255	; 0xff
 8004148:	5299      	strh	r1, [r3, r2]
 800414a:	e01c      	b.n	8004186 <UART_Start_Receive_IT+0xaa>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2260      	movs	r2, #96	; 0x60
 8004150:	217f      	movs	r1, #127	; 0x7f
 8004152:	5299      	strh	r1, [r3, r2]
 8004154:	e017      	b.n	8004186 <UART_Start_Receive_IT+0xaa>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689a      	ldr	r2, [r3, #8]
 800415a:	2380      	movs	r3, #128	; 0x80
 800415c:	055b      	lsls	r3, r3, #21
 800415e:	429a      	cmp	r2, r3
 8004160:	d10d      	bne.n	800417e <UART_Start_Receive_IT+0xa2>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d104      	bne.n	8004174 <UART_Start_Receive_IT+0x98>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2260      	movs	r2, #96	; 0x60
 800416e:	217f      	movs	r1, #127	; 0x7f
 8004170:	5299      	strh	r1, [r3, r2]
 8004172:	e008      	b.n	8004186 <UART_Start_Receive_IT+0xaa>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2260      	movs	r2, #96	; 0x60
 8004178:	213f      	movs	r1, #63	; 0x3f
 800417a:	5299      	strh	r1, [r3, r2]
 800417c:	e003      	b.n	8004186 <UART_Start_Receive_IT+0xaa>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2260      	movs	r2, #96	; 0x60
 8004182:	2100      	movs	r1, #0
 8004184:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	228c      	movs	r2, #140	; 0x8c
 800418a:	2100      	movs	r1, #0
 800418c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2288      	movs	r2, #136	; 0x88
 8004192:	2122      	movs	r1, #34	; 0x22
 8004194:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004196:	f3ef 8310 	mrs	r3, PRIMASK
 800419a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800419c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041a0:	2301      	movs	r3, #1
 80041a2:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a6:	f383 8810 	msr	PRIMASK, r3
}
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2101      	movs	r1, #1
 80041b8:	430a      	orrs	r2, r1
 80041ba:	609a      	str	r2, [r3, #8]
 80041bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041be:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c2:	f383 8810 	msr	PRIMASK, r3
}
 80041c6:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	059b      	lsls	r3, r3, #22
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d154      	bne.n	800427e <UART_Start_Receive_IT+0x1a2>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2268      	movs	r2, #104	; 0x68
 80041d8:	5a9b      	ldrh	r3, [r3, r2]
 80041da:	1dba      	adds	r2, r7, #6
 80041dc:	8812      	ldrh	r2, [r2, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d34d      	bcc.n	800427e <UART_Start_Receive_IT+0x1a2>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	2380      	movs	r3, #128	; 0x80
 80041e8:	015b      	lsls	r3, r3, #5
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d107      	bne.n	80041fe <UART_Start_Receive_IT+0x122>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d103      	bne.n	80041fe <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4a4a      	ldr	r2, [pc, #296]	; (8004324 <UART_Start_Receive_IT+0x248>)
 80041fa:	671a      	str	r2, [r3, #112]	; 0x70
 80041fc:	e002      	b.n	8004204 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4a49      	ldr	r2, [pc, #292]	; (8004328 <UART_Start_Receive_IT+0x24c>)
 8004202:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2280      	movs	r2, #128	; 0x80
 8004208:	2100      	movs	r1, #0
 800420a:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d019      	beq.n	8004248 <UART_Start_Receive_IT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004214:	f3ef 8310 	mrs	r3, PRIMASK
 8004218:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800421a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800421c:	65bb      	str	r3, [r7, #88]	; 0x58
 800421e:	2301      	movs	r3, #1
 8004220:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	f383 8810 	msr	PRIMASK, r3
}
 8004228:	46c0      	nop			; (mov r8, r8)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2180      	movs	r1, #128	; 0x80
 8004236:	0049      	lsls	r1, r1, #1
 8004238:	430a      	orrs	r2, r1
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800423e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004242:	f383 8810 	msr	PRIMASK, r3
}
 8004246:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004248:	f3ef 8310 	mrs	r3, PRIMASK
 800424c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800424e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004250:	657b      	str	r3, [r7, #84]	; 0x54
 8004252:	2301      	movs	r3, #1
 8004254:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004258:	f383 8810 	msr	PRIMASK, r3
}
 800425c:	46c0      	nop			; (mov r8, r8)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2180      	movs	r1, #128	; 0x80
 800426a:	0549      	lsls	r1, r1, #21
 800426c:	430a      	orrs	r2, r1
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004272:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	f383 8810 	msr	PRIMASK, r3
}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	e04b      	b.n	8004316 <UART_Start_Receive_IT+0x23a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	015b      	lsls	r3, r3, #5
 8004286:	429a      	cmp	r2, r3
 8004288:	d107      	bne.n	800429a <UART_Start_Receive_IT+0x1be>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d103      	bne.n	800429a <UART_Start_Receive_IT+0x1be>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4a25      	ldr	r2, [pc, #148]	; (800432c <UART_Start_Receive_IT+0x250>)
 8004296:	671a      	str	r2, [r3, #112]	; 0x70
 8004298:	e002      	b.n	80042a0 <UART_Start_Receive_IT+0x1c4>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4a24      	ldr	r2, [pc, #144]	; (8004330 <UART_Start_Receive_IT+0x254>)
 800429e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2280      	movs	r2, #128	; 0x80
 80042a4:	2100      	movs	r1, #0
 80042a6:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d019      	beq.n	80042e4 <UART_Start_Receive_IT+0x208>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042b0:	f3ef 8310 	mrs	r3, PRIMASK
 80042b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80042b6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80042b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ba:	2301      	movs	r3, #1
 80042bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	f383 8810 	msr	PRIMASK, r3
}
 80042c4:	46c0      	nop			; (mov r8, r8)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2190      	movs	r1, #144	; 0x90
 80042d2:	0049      	lsls	r1, r1, #1
 80042d4:	430a      	orrs	r2, r1
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	f383 8810 	msr	PRIMASK, r3
}
 80042e2:	e018      	b.n	8004316 <UART_Start_Receive_IT+0x23a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042e4:	f3ef 8310 	mrs	r3, PRIMASK
 80042e8:	613b      	str	r3, [r7, #16]
  return(result);
 80042ea:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80042ec:	653b      	str	r3, [r7, #80]	; 0x50
 80042ee:	2301      	movs	r3, #1
 80042f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f383 8810 	msr	PRIMASK, r3
}
 80042f8:	46c0      	nop			; (mov r8, r8)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2120      	movs	r1, #32
 8004306:	430a      	orrs	r2, r1
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800430c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	f383 8810 	msr	PRIMASK, r3
}
 8004314:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	0018      	movs	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	b018      	add	sp, #96	; 0x60
 800431e:	bd80      	pop	{r7, pc}
 8004320:	000001ff 	.word	0x000001ff
 8004324:	08004d95 	.word	0x08004d95
 8004328:	08004ab1 	.word	0x08004ab1
 800432c:	08004945 	.word	0x08004945
 8004330:	080047d9 	.word	0x080047d9

08004334 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08e      	sub	sp, #56	; 0x38
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800433c:	f3ef 8310 	mrs	r3, PRIMASK
 8004340:	617b      	str	r3, [r7, #20]
  return(result);
 8004342:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004344:	637b      	str	r3, [r7, #52]	; 0x34
 8004346:	2301      	movs	r3, #1
 8004348:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	f383 8810 	msr	PRIMASK, r3
}
 8004350:	46c0      	nop			; (mov r8, r8)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4926      	ldr	r1, [pc, #152]	; (80043f8 <UART_EndRxTransfer+0xc4>)
 800435e:	400a      	ands	r2, r1
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004364:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f383 8810 	msr	PRIMASK, r3
}
 800436c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800436e:	f3ef 8310 	mrs	r3, PRIMASK
 8004372:	623b      	str	r3, [r7, #32]
  return(result);
 8004374:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004376:	633b      	str	r3, [r7, #48]	; 0x30
 8004378:	2301      	movs	r3, #1
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	f383 8810 	msr	PRIMASK, r3
}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	491b      	ldr	r1, [pc, #108]	; (80043fc <UART_EndRxTransfer+0xc8>)
 8004390:	400a      	ands	r2, r1
 8004392:	609a      	str	r2, [r3, #8]
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	f383 8810 	msr	PRIMASK, r3
}
 800439e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d118      	bne.n	80043da <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a8:	f3ef 8310 	mrs	r3, PRIMASK
 80043ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80043ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b2:	2301      	movs	r3, #1
 80043b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f383 8810 	msr	PRIMASK, r3
}
 80043bc:	46c0      	nop			; (mov r8, r8)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2110      	movs	r1, #16
 80043ca:	438a      	bics	r2, r1
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f383 8810 	msr	PRIMASK, r3
}
 80043d8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2288      	movs	r2, #136	; 0x88
 80043de:	2120      	movs	r1, #32
 80043e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	671a      	str	r2, [r3, #112]	; 0x70
}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	46bd      	mov	sp, r7
 80043f2:	b00e      	add	sp, #56	; 0x38
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	fffffedf 	.word	0xfffffedf
 80043fc:	effffffe 	.word	0xeffffffe

08004400 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	225e      	movs	r2, #94	; 0x5e
 8004412:	2100      	movs	r1, #0
 8004414:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2256      	movs	r2, #86	; 0x56
 800441a:	2100      	movs	r1, #0
 800441c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	0018      	movs	r0, r3
 8004422:	f7ff f9c3 	bl	80037ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	46bd      	mov	sp, r7
 800442a:	b004      	add	sp, #16
 800442c:	bd80      	pop	{r7, pc}

0800442e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b08a      	sub	sp, #40	; 0x28
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2284      	movs	r2, #132	; 0x84
 800443a:	589b      	ldr	r3, [r3, r2]
 800443c:	2b21      	cmp	r3, #33	; 0x21
 800443e:	d14c      	bne.n	80044da <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2256      	movs	r2, #86	; 0x56
 8004444:	5a9b      	ldrh	r3, [r3, r2]
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d132      	bne.n	80044b2 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800444c:	f3ef 8310 	mrs	r3, PRIMASK
 8004450:	60bb      	str	r3, [r7, #8]
  return(result);
 8004452:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
 8004456:	2301      	movs	r3, #1
 8004458:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f383 8810 	msr	PRIMASK, r3
}
 8004460:	46c0      	nop			; (mov r8, r8)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2180      	movs	r1, #128	; 0x80
 800446e:	438a      	bics	r2, r1
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f383 8810 	msr	PRIMASK, r3
}
 800447c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800447e:	f3ef 8310 	mrs	r3, PRIMASK
 8004482:	617b      	str	r3, [r7, #20]
  return(result);
 8004484:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004486:	623b      	str	r3, [r7, #32]
 8004488:	2301      	movs	r3, #1
 800448a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	f383 8810 	msr	PRIMASK, r3
}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2140      	movs	r1, #64	; 0x40
 80044a0:	430a      	orrs	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f383 8810 	msr	PRIMASK, r3
}
 80044ae:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80044b0:	e013      	b.n	80044da <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b6:	781a      	ldrb	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2256      	movs	r2, #86	; 0x56
 80044cc:	5a9b      	ldrh	r3, [r3, r2]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b299      	uxth	r1, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2256      	movs	r2, #86	; 0x56
 80044d8:	5299      	strh	r1, [r3, r2]
}
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	46bd      	mov	sp, r7
 80044de:	b00a      	add	sp, #40	; 0x28
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b08c      	sub	sp, #48	; 0x30
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2284      	movs	r2, #132	; 0x84
 80044ee:	589b      	ldr	r3, [r3, r2]
 80044f0:	2b21      	cmp	r3, #33	; 0x21
 80044f2:	d151      	bne.n	8004598 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2256      	movs	r2, #86	; 0x56
 80044f8:	5a9b      	ldrh	r3, [r3, r2]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d132      	bne.n	8004566 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004500:	f3ef 8310 	mrs	r3, PRIMASK
 8004504:	60fb      	str	r3, [r7, #12]
  return(result);
 8004506:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004508:	62bb      	str	r3, [r7, #40]	; 0x28
 800450a:	2301      	movs	r3, #1
 800450c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f383 8810 	msr	PRIMASK, r3
}
 8004514:	46c0      	nop			; (mov r8, r8)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2180      	movs	r1, #128	; 0x80
 8004522:	438a      	bics	r2, r1
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f383 8810 	msr	PRIMASK, r3
}
 8004530:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004532:	f3ef 8310 	mrs	r3, PRIMASK
 8004536:	61bb      	str	r3, [r7, #24]
  return(result);
 8004538:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
 800453c:	2301      	movs	r3, #1
 800453e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f383 8810 	msr	PRIMASK, r3
}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2140      	movs	r1, #64	; 0x40
 8004554:	430a      	orrs	r2, r1
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	f383 8810 	msr	PRIMASK, r3
}
 8004562:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004564:	e018      	b.n	8004598 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456a:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800456c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	001a      	movs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	05d2      	lsls	r2, r2, #23
 8004578:	0dd2      	lsrs	r2, r2, #23
 800457a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004580:	1c9a      	adds	r2, r3, #2
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2256      	movs	r2, #86	; 0x56
 800458a:	5a9b      	ldrh	r3, [r3, r2]
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b299      	uxth	r1, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2256      	movs	r2, #86	; 0x56
 8004596:	5299      	strh	r1, [r3, r2]
}
 8004598:	46c0      	nop			; (mov r8, r8)
 800459a:	46bd      	mov	sp, r7
 800459c:	b00c      	add	sp, #48	; 0x30
 800459e:	bd80      	pop	{r7, pc}

080045a0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08c      	sub	sp, #48	; 0x30
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2284      	movs	r2, #132	; 0x84
 80045ac:	589b      	ldr	r3, [r3, r2]
 80045ae:	2b21      	cmp	r3, #33	; 0x21
 80045b0:	d165      	bne.n	800467e <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80045b2:	232e      	movs	r3, #46	; 0x2e
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	216a      	movs	r1, #106	; 0x6a
 80045ba:	5a52      	ldrh	r2, [r2, r1]
 80045bc:	801a      	strh	r2, [r3, #0]
 80045be:	e059      	b.n	8004674 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2256      	movs	r2, #86	; 0x56
 80045c4:	5a9b      	ldrh	r3, [r3, r2]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d133      	bne.n	8004634 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045cc:	f3ef 8310 	mrs	r3, PRIMASK
 80045d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80045d2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80045d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80045d6:	2301      	movs	r3, #1
 80045d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f383 8810 	msr	PRIMASK, r3
}
 80045e0:	46c0      	nop			; (mov r8, r8)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4926      	ldr	r1, [pc, #152]	; (8004688 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 80045ee:	400a      	ands	r2, r1
 80045f0:	609a      	str	r2, [r3, #8]
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f383 8810 	msr	PRIMASK, r3
}
 80045fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004602:	61bb      	str	r3, [r7, #24]
  return(result);
 8004604:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
 8004608:	2301      	movs	r3, #1
 800460a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f383 8810 	msr	PRIMASK, r3
}
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2140      	movs	r1, #64	; 0x40
 8004620:	430a      	orrs	r2, r1
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	f383 8810 	msr	PRIMASK, r3
}
 800462e:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8004630:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8004632:	e024      	b.n	800467e <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	2280      	movs	r2, #128	; 0x80
 800463c:	4013      	ands	r3, r2
 800463e:	d013      	beq.n	8004668 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2256      	movs	r2, #86	; 0x56
 800465a:	5a9b      	ldrh	r3, [r3, r2]
 800465c:	b29b      	uxth	r3, r3
 800465e:	3b01      	subs	r3, #1
 8004660:	b299      	uxth	r1, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2256      	movs	r2, #86	; 0x56
 8004666:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004668:	212e      	movs	r1, #46	; 0x2e
 800466a:	187b      	adds	r3, r7, r1
 800466c:	881a      	ldrh	r2, [r3, #0]
 800466e:	187b      	adds	r3, r7, r1
 8004670:	3a01      	subs	r2, #1
 8004672:	801a      	strh	r2, [r3, #0]
 8004674:	232e      	movs	r3, #46	; 0x2e
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1a0      	bne.n	80045c0 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	46bd      	mov	sp, r7
 8004682:	b00c      	add	sp, #48	; 0x30
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	ff7fffff 	.word	0xff7fffff

0800468c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08c      	sub	sp, #48	; 0x30
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2284      	movs	r2, #132	; 0x84
 8004698:	589b      	ldr	r3, [r3, r2]
 800469a:	2b21      	cmp	r3, #33	; 0x21
 800469c:	d16a      	bne.n	8004774 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800469e:	232e      	movs	r3, #46	; 0x2e
 80046a0:	18fb      	adds	r3, r7, r3
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	216a      	movs	r1, #106	; 0x6a
 80046a6:	5a52      	ldrh	r2, [r2, r1]
 80046a8:	801a      	strh	r2, [r3, #0]
 80046aa:	e05e      	b.n	800476a <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2256      	movs	r2, #86	; 0x56
 80046b0:	5a9b      	ldrh	r3, [r3, r2]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d133      	bne.n	8004720 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b8:	f3ef 8310 	mrs	r3, PRIMASK
 80046bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80046be:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
 80046c2:	2301      	movs	r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f383 8810 	msr	PRIMASK, r3
}
 80046cc:	46c0      	nop			; (mov r8, r8)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4928      	ldr	r1, [pc, #160]	; (800477c <UART_TxISR_16BIT_FIFOEN+0xf0>)
 80046da:	400a      	ands	r2, r1
 80046dc:	609a      	str	r2, [r3, #8]
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f383 8810 	msr	PRIMASK, r3
}
 80046e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ea:	f3ef 8310 	mrs	r3, PRIMASK
 80046ee:	617b      	str	r3, [r7, #20]
  return(result);
 80046f0:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046f2:	623b      	str	r3, [r7, #32]
 80046f4:	2301      	movs	r3, #1
 80046f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	f383 8810 	msr	PRIMASK, r3
}
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2140      	movs	r1, #64	; 0x40
 800470c:	430a      	orrs	r2, r1
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f383 8810 	msr	PRIMASK, r3
}
 800471a:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800471c:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800471e:	e029      	b.n	8004774 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	2280      	movs	r2, #128	; 0x80
 8004728:	4013      	ands	r3, r2
 800472a:	d018      	beq.n	800475e <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004730:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	001a      	movs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	05d2      	lsls	r2, r2, #23
 800473e:	0dd2      	lsrs	r2, r2, #23
 8004740:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004746:	1c9a      	adds	r2, r3, #2
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2256      	movs	r2, #86	; 0x56
 8004750:	5a9b      	ldrh	r3, [r3, r2]
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b299      	uxth	r1, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2256      	movs	r2, #86	; 0x56
 800475c:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800475e:	212e      	movs	r1, #46	; 0x2e
 8004760:	187b      	adds	r3, r7, r1
 8004762:	881a      	ldrh	r2, [r3, #0]
 8004764:	187b      	adds	r3, r7, r1
 8004766:	3a01      	subs	r2, #1
 8004768:	801a      	strh	r2, [r3, #0]
 800476a:	232e      	movs	r3, #46	; 0x2e
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d19b      	bne.n	80046ac <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8004774:	46c0      	nop			; (mov r8, r8)
 8004776:	46bd      	mov	sp, r7
 8004778:	b00c      	add	sp, #48	; 0x30
 800477a:	bd80      	pop	{r7, pc}
 800477c:	ff7fffff 	.word	0xff7fffff

08004780 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004788:	f3ef 8310 	mrs	r3, PRIMASK
 800478c:	60bb      	str	r3, [r7, #8]
  return(result);
 800478e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	2301      	movs	r3, #1
 8004794:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f383 8810 	msr	PRIMASK, r3
}
 800479c:	46c0      	nop			; (mov r8, r8)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2140      	movs	r1, #64	; 0x40
 80047aa:	438a      	bics	r2, r1
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f383 8810 	msr	PRIMASK, r3
}
 80047b8:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2284      	movs	r2, #132	; 0x84
 80047be:	2120      	movs	r1, #32
 80047c0:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	0018      	movs	r0, r3
 80047cc:	f7fe ffe6 	bl	800379c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047d0:	46c0      	nop			; (mov r8, r8)
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b006      	add	sp, #24
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b090      	sub	sp, #64	; 0x40
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80047e0:	203e      	movs	r0, #62	; 0x3e
 80047e2:	183b      	adds	r3, r7, r0
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	2160      	movs	r1, #96	; 0x60
 80047e8:	5a52      	ldrh	r2, [r2, r1]
 80047ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2288      	movs	r2, #136	; 0x88
 80047f0:	589b      	ldr	r3, [r3, r2]
 80047f2:	2b22      	cmp	r3, #34	; 0x22
 80047f4:	d000      	beq.n	80047f8 <UART_RxISR_8BIT+0x20>
 80047f6:	e097      	b.n	8004928 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047fe:	213c      	movs	r1, #60	; 0x3c
 8004800:	187b      	adds	r3, r7, r1
 8004802:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004804:	187b      	adds	r3, r7, r1
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b2da      	uxtb	r2, r3
 800480a:	183b      	adds	r3, r7, r0
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	b2d9      	uxtb	r1, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004814:	400a      	ands	r2, r1
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	225e      	movs	r2, #94	; 0x5e
 8004828:	5a9b      	ldrh	r3, [r3, r2]
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b299      	uxth	r1, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	225e      	movs	r2, #94	; 0x5e
 8004834:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	225e      	movs	r2, #94	; 0x5e
 800483a:	5a9b      	ldrh	r3, [r3, r2]
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d000      	beq.n	8004844 <UART_RxISR_8BIT+0x6c>
 8004842:	e079      	b.n	8004938 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004844:	f3ef 8310 	mrs	r3, PRIMASK
 8004848:	61bb      	str	r3, [r7, #24]
  return(result);
 800484a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800484c:	63bb      	str	r3, [r7, #56]	; 0x38
 800484e:	2301      	movs	r3, #1
 8004850:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f383 8810 	msr	PRIMASK, r3
}
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4936      	ldr	r1, [pc, #216]	; (8004940 <UART_RxISR_8BIT+0x168>)
 8004866:	400a      	ands	r2, r1
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	f383 8810 	msr	PRIMASK, r3
}
 8004874:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004876:	f3ef 8310 	mrs	r3, PRIMASK
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487e:	637b      	str	r3, [r7, #52]	; 0x34
 8004880:	2301      	movs	r3, #1
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	f383 8810 	msr	PRIMASK, r3
}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2101      	movs	r1, #1
 8004898:	438a      	bics	r2, r1
 800489a:	609a      	str	r2, [r3, #8]
 800489c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a2:	f383 8810 	msr	PRIMASK, r3
}
 80048a6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2288      	movs	r2, #136	; 0x88
 80048ac:	2120      	movs	r1, #32
 80048ae:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d12f      	bne.n	800491e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c4:	f3ef 8310 	mrs	r3, PRIMASK
 80048c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80048ca:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048cc:	633b      	str	r3, [r7, #48]	; 0x30
 80048ce:	2301      	movs	r3, #1
 80048d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f383 8810 	msr	PRIMASK, r3
}
 80048d8:	46c0      	nop			; (mov r8, r8)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2110      	movs	r1, #16
 80048e6:	438a      	bics	r2, r1
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f383 8810 	msr	PRIMASK, r3
}
 80048f4:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	2210      	movs	r2, #16
 80048fe:	4013      	ands	r3, r2
 8004900:	2b10      	cmp	r3, #16
 8004902:	d103      	bne.n	800490c <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2210      	movs	r2, #16
 800490a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	225c      	movs	r2, #92	; 0x5c
 8004910:	5a9a      	ldrh	r2, [r3, r2]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	0011      	movs	r1, r2
 8004916:	0018      	movs	r0, r3
 8004918:	f7fe ff50 	bl	80037bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800491c:	e00c      	b.n	8004938 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	0018      	movs	r0, r3
 8004922:	f7fb fead 	bl	8000680 <HAL_UART_RxCpltCallback>
}
 8004926:	e007      	b.n	8004938 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2108      	movs	r1, #8
 8004934:	430a      	orrs	r2, r1
 8004936:	619a      	str	r2, [r3, #24]
}
 8004938:	46c0      	nop			; (mov r8, r8)
 800493a:	46bd      	mov	sp, r7
 800493c:	b010      	add	sp, #64	; 0x40
 800493e:	bd80      	pop	{r7, pc}
 8004940:	fffffedf 	.word	0xfffffedf

08004944 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b090      	sub	sp, #64	; 0x40
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800494c:	203e      	movs	r0, #62	; 0x3e
 800494e:	183b      	adds	r3, r7, r0
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	2160      	movs	r1, #96	; 0x60
 8004954:	5a52      	ldrh	r2, [r2, r1]
 8004956:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2288      	movs	r2, #136	; 0x88
 800495c:	589b      	ldr	r3, [r3, r2]
 800495e:	2b22      	cmp	r3, #34	; 0x22
 8004960:	d000      	beq.n	8004964 <UART_RxISR_16BIT+0x20>
 8004962:	e097      	b.n	8004a94 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800496a:	213c      	movs	r1, #60	; 0x3c
 800496c:	187b      	adds	r3, r7, r1
 800496e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004974:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004976:	187b      	adds	r3, r7, r1
 8004978:	183a      	adds	r2, r7, r0
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	8812      	ldrh	r2, [r2, #0]
 800497e:	4013      	ands	r3, r2
 8004980:	b29a      	uxth	r2, r3
 8004982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004984:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498a:	1c9a      	adds	r2, r3, #2
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	225e      	movs	r2, #94	; 0x5e
 8004994:	5a9b      	ldrh	r3, [r3, r2]
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b299      	uxth	r1, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	225e      	movs	r2, #94	; 0x5e
 80049a0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	225e      	movs	r2, #94	; 0x5e
 80049a6:	5a9b      	ldrh	r3, [r3, r2]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d000      	beq.n	80049b0 <UART_RxISR_16BIT+0x6c>
 80049ae:	e079      	b.n	8004aa4 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049b0:	f3ef 8310 	mrs	r3, PRIMASK
 80049b4:	617b      	str	r3, [r7, #20]
  return(result);
 80049b6:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049b8:	637b      	str	r3, [r7, #52]	; 0x34
 80049ba:	2301      	movs	r3, #1
 80049bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	f383 8810 	msr	PRIMASK, r3
}
 80049c4:	46c0      	nop			; (mov r8, r8)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4936      	ldr	r1, [pc, #216]	; (8004aac <UART_RxISR_16BIT+0x168>)
 80049d2:	400a      	ands	r2, r1
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	f383 8810 	msr	PRIMASK, r3
}
 80049e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e2:	f3ef 8310 	mrs	r3, PRIMASK
 80049e6:	623b      	str	r3, [r7, #32]
  return(result);
 80049e8:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ea:	633b      	str	r3, [r7, #48]	; 0x30
 80049ec:	2301      	movs	r3, #1
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	f383 8810 	msr	PRIMASK, r3
}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2101      	movs	r1, #1
 8004a04:	438a      	bics	r2, r1
 8004a06:	609a      	str	r2, [r3, #8]
 8004a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	f383 8810 	msr	PRIMASK, r3
}
 8004a12:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2288      	movs	r2, #136	; 0x88
 8004a18:	2120      	movs	r1, #32
 8004a1a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d12f      	bne.n	8004a8a <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a30:	f3ef 8310 	mrs	r3, PRIMASK
 8004a34:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a36:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f383 8810 	msr	PRIMASK, r3
}
 8004a44:	46c0      	nop			; (mov r8, r8)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2110      	movs	r1, #16
 8004a52:	438a      	bics	r2, r1
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f383 8810 	msr	PRIMASK, r3
}
 8004a60:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	2210      	movs	r2, #16
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b10      	cmp	r3, #16
 8004a6e:	d103      	bne.n	8004a78 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2210      	movs	r2, #16
 8004a76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	225c      	movs	r2, #92	; 0x5c
 8004a7c:	5a9a      	ldrh	r2, [r3, r2]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	0011      	movs	r1, r2
 8004a82:	0018      	movs	r0, r3
 8004a84:	f7fe fe9a 	bl	80037bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a88:	e00c      	b.n	8004aa4 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f7fb fdf7 	bl	8000680 <HAL_UART_RxCpltCallback>
}
 8004a92:	e007      	b.n	8004aa4 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2108      	movs	r1, #8
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	619a      	str	r2, [r3, #24]
}
 8004aa4:	46c0      	nop			; (mov r8, r8)
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b010      	add	sp, #64	; 0x40
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	fffffedf 	.word	0xfffffedf

08004ab0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b09c      	sub	sp, #112	; 0x70
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004ab8:	236a      	movs	r3, #106	; 0x6a
 8004aba:	18fb      	adds	r3, r7, r3
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	2160      	movs	r1, #96	; 0x60
 8004ac0:	5a52      	ldrh	r2, [r2, r1]
 8004ac2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2288      	movs	r2, #136	; 0x88
 8004ae0:	589b      	ldr	r3, [r3, r2]
 8004ae2:	2b22      	cmp	r3, #34	; 0x22
 8004ae4:	d000      	beq.n	8004ae8 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004ae6:	e141      	b.n	8004d6c <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004ae8:	235e      	movs	r3, #94	; 0x5e
 8004aea:	18fb      	adds	r3, r7, r3
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	2168      	movs	r1, #104	; 0x68
 8004af0:	5a52      	ldrh	r2, [r2, r1]
 8004af2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004af4:	e0e8      	b.n	8004cc8 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004afc:	215c      	movs	r1, #92	; 0x5c
 8004afe:	187b      	adds	r3, r7, r1
 8004b00:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b02:	187b      	adds	r3, r7, r1
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	236a      	movs	r3, #106	; 0x6a
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	b2d9      	uxtb	r1, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b14:	400a      	ands	r2, r1
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	225e      	movs	r2, #94	; 0x5e
 8004b28:	5a9b      	ldrh	r3, [r3, r2]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b299      	uxth	r1, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	225e      	movs	r2, #94	; 0x5e
 8004b34:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b40:	2207      	movs	r2, #7
 8004b42:	4013      	ands	r3, r2
 8004b44:	d049      	beq.n	8004bda <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b48:	2201      	movs	r2, #1
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d010      	beq.n	8004b70 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004b4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b50:	2380      	movs	r3, #128	; 0x80
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	4013      	ands	r3, r2
 8004b56:	d00b      	beq.n	8004b70 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	228c      	movs	r2, #140	; 0x8c
 8004b64:	589b      	ldr	r3, [r3, r2]
 8004b66:	2201      	movs	r2, #1
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	218c      	movs	r1, #140	; 0x8c
 8004b6e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b72:	2202      	movs	r2, #2
 8004b74:	4013      	ands	r3, r2
 8004b76:	d00f      	beq.n	8004b98 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004b78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d00b      	beq.n	8004b98 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2202      	movs	r2, #2
 8004b86:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	228c      	movs	r2, #140	; 0x8c
 8004b8c:	589b      	ldr	r3, [r3, r2]
 8004b8e:	2204      	movs	r2, #4
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	218c      	movs	r1, #140	; 0x8c
 8004b96:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9a:	2204      	movs	r2, #4
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d00f      	beq.n	8004bc0 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004ba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d00b      	beq.n	8004bc0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2204      	movs	r2, #4
 8004bae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	228c      	movs	r2, #140	; 0x8c
 8004bb4:	589b      	ldr	r3, [r3, r2]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	218c      	movs	r1, #140	; 0x8c
 8004bbe:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	228c      	movs	r2, #140	; 0x8c
 8004bc4:	589b      	ldr	r3, [r3, r2]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d007      	beq.n	8004bda <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f7fe fded 	bl	80037ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	228c      	movs	r2, #140	; 0x8c
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	225e      	movs	r2, #94	; 0x5e
 8004bde:	5a9b      	ldrh	r3, [r3, r2]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d170      	bne.n	8004cc8 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bee:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	f383 8810 	msr	PRIMASK, r3
}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	495f      	ldr	r1, [pc, #380]	; (8004d84 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8004c08:	400a      	ands	r2, r1
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c0e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c12:	f383 8810 	msr	PRIMASK, r3
}
 8004c16:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c18:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c20:	657b      	str	r3, [r7, #84]	; 0x54
 8004c22:	2301      	movs	r3, #1
 8004c24:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c28:	f383 8810 	msr	PRIMASK, r3
}
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4953      	ldr	r1, [pc, #332]	; (8004d88 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8004c3a:	400a      	ands	r2, r1
 8004c3c:	609a      	str	r2, [r3, #8]
 8004c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c40:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c44:	f383 8810 	msr	PRIMASK, r3
}
 8004c48:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2288      	movs	r2, #136	; 0x88
 8004c4e:	2120      	movs	r1, #32
 8004c50:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d12f      	bne.n	8004cc0 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c66:	f3ef 8310 	mrs	r3, PRIMASK
 8004c6a:	623b      	str	r3, [r7, #32]
  return(result);
 8004c6c:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c6e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c70:	2301      	movs	r3, #1
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	f383 8810 	msr	PRIMASK, r3
}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2110      	movs	r1, #16
 8004c88:	438a      	bics	r2, r1
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	f383 8810 	msr	PRIMASK, r3
}
 8004c96:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	2210      	movs	r2, #16
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b10      	cmp	r3, #16
 8004ca4:	d103      	bne.n	8004cae <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2210      	movs	r2, #16
 8004cac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	225c      	movs	r2, #92	; 0x5c
 8004cb2:	5a9a      	ldrh	r2, [r3, r2]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	0011      	movs	r1, r2
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f7fe fd7f 	bl	80037bc <HAL_UARTEx_RxEventCallback>
 8004cbe:	e003      	b.n	8004cc8 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	f7fb fcdc 	bl	8000680 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004cc8:	235e      	movs	r3, #94	; 0x5e
 8004cca:	18fb      	adds	r3, r7, r3
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d004      	beq.n	8004cdc <UART_RxISR_8BIT_FIFOEN+0x22c>
 8004cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	d000      	beq.n	8004cdc <UART_RxISR_8BIT_FIFOEN+0x22c>
 8004cda:	e70c      	b.n	8004af6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004cdc:	204e      	movs	r0, #78	; 0x4e
 8004cde:	183b      	adds	r3, r7, r0
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	215e      	movs	r1, #94	; 0x5e
 8004ce4:	5a52      	ldrh	r2, [r2, r1]
 8004ce6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004ce8:	0001      	movs	r1, r0
 8004cea:	187b      	adds	r3, r7, r1
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d044      	beq.n	8004d7c <UART_RxISR_8BIT_FIFOEN+0x2cc>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2268      	movs	r2, #104	; 0x68
 8004cf6:	5a9b      	ldrh	r3, [r3, r2]
 8004cf8:	187a      	adds	r2, r7, r1
 8004cfa:	8812      	ldrh	r2, [r2, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d23d      	bcs.n	8004d7c <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d00:	f3ef 8310 	mrs	r3, PRIMASK
 8004d04:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d06:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004d08:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f383 8810 	msr	PRIMASK, r3
}
 8004d14:	46c0      	nop			; (mov r8, r8)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	491a      	ldr	r1, [pc, #104]	; (8004d8c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8004d22:	400a      	ands	r2, r1
 8004d24:	609a      	str	r2, [r3, #8]
 8004d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f383 8810 	msr	PRIMASK, r3
}
 8004d30:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a16      	ldr	r2, [pc, #88]	; (8004d90 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8004d36:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d38:	f3ef 8310 	mrs	r3, PRIMASK
 8004d3c:	617b      	str	r3, [r7, #20]
  return(result);
 8004d3e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004d40:	647b      	str	r3, [r7, #68]	; 0x44
 8004d42:	2301      	movs	r3, #1
 8004d44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	f383 8810 	msr	PRIMASK, r3
}
 8004d4c:	46c0      	nop			; (mov r8, r8)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2120      	movs	r1, #32
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f383 8810 	msr	PRIMASK, r3
}
 8004d68:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d6a:	e007      	b.n	8004d7c <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2108      	movs	r1, #8
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	619a      	str	r2, [r3, #24]
}
 8004d7c:	46c0      	nop			; (mov r8, r8)
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	b01c      	add	sp, #112	; 0x70
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	fffffeff 	.word	0xfffffeff
 8004d88:	effffffe 	.word	0xeffffffe
 8004d8c:	efffffff 	.word	0xefffffff
 8004d90:	080047d9 	.word	0x080047d9

08004d94 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b09e      	sub	sp, #120	; 0x78
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004d9c:	2372      	movs	r3, #114	; 0x72
 8004d9e:	18fb      	adds	r3, r7, r3
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	2160      	movs	r1, #96	; 0x60
 8004da4:	5a52      	ldrh	r2, [r2, r1]
 8004da6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2288      	movs	r2, #136	; 0x88
 8004dc4:	589b      	ldr	r3, [r3, r2]
 8004dc6:	2b22      	cmp	r3, #34	; 0x22
 8004dc8:	d000      	beq.n	8004dcc <UART_RxISR_16BIT_FIFOEN+0x38>
 8004dca:	e141      	b.n	8005050 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004dcc:	2366      	movs	r3, #102	; 0x66
 8004dce:	18fb      	adds	r3, r7, r3
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	2168      	movs	r1, #104	; 0x68
 8004dd4:	5a52      	ldrh	r2, [r2, r1]
 8004dd6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004dd8:	e0e8      	b.n	8004fac <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004de0:	2164      	movs	r1, #100	; 0x64
 8004de2:	187b      	adds	r3, r7, r1
 8004de4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dea:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8004dec:	187b      	adds	r3, r7, r1
 8004dee:	2272      	movs	r2, #114	; 0x72
 8004df0:	18ba      	adds	r2, r7, r2
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	8812      	ldrh	r2, [r2, #0]
 8004df6:	4013      	ands	r3, r2
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dfc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e02:	1c9a      	adds	r2, r3, #2
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	225e      	movs	r2, #94	; 0x5e
 8004e0c:	5a9b      	ldrh	r3, [r3, r2]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b299      	uxth	r1, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	225e      	movs	r2, #94	; 0x5e
 8004e18:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e24:	2207      	movs	r2, #7
 8004e26:	4013      	ands	r3, r2
 8004e28:	d049      	beq.n	8004ebe <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d010      	beq.n	8004e54 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8004e32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e34:	2380      	movs	r3, #128	; 0x80
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d00b      	beq.n	8004e54 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2201      	movs	r2, #1
 8004e42:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	228c      	movs	r2, #140	; 0x8c
 8004e48:	589b      	ldr	r3, [r3, r2]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	218c      	movs	r1, #140	; 0x8c
 8004e52:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e56:	2202      	movs	r2, #2
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d00f      	beq.n	8004e7c <UART_RxISR_16BIT_FIFOEN+0xe8>
 8004e5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e5e:	2201      	movs	r2, #1
 8004e60:	4013      	ands	r3, r2
 8004e62:	d00b      	beq.n	8004e7c <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	228c      	movs	r2, #140	; 0x8c
 8004e70:	589b      	ldr	r3, [r3, r2]
 8004e72:	2204      	movs	r2, #4
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	218c      	movs	r1, #140	; 0x8c
 8004e7a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e7e:	2204      	movs	r2, #4
 8004e80:	4013      	ands	r3, r2
 8004e82:	d00f      	beq.n	8004ea4 <UART_RxISR_16BIT_FIFOEN+0x110>
 8004e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e86:	2201      	movs	r2, #1
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d00b      	beq.n	8004ea4 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2204      	movs	r2, #4
 8004e92:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	228c      	movs	r2, #140	; 0x8c
 8004e98:	589b      	ldr	r3, [r3, r2]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	218c      	movs	r1, #140	; 0x8c
 8004ea2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	228c      	movs	r2, #140	; 0x8c
 8004ea8:	589b      	ldr	r3, [r3, r2]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	f7fe fc7b 	bl	80037ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	228c      	movs	r2, #140	; 0x8c
 8004eba:	2100      	movs	r1, #0
 8004ebc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	225e      	movs	r2, #94	; 0x5e
 8004ec2:	5a9b      	ldrh	r3, [r3, r2]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d170      	bne.n	8004fac <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eca:	f3ef 8310 	mrs	r3, PRIMASK
 8004ece:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eda:	f383 8810 	msr	PRIMASK, r3
}
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	495f      	ldr	r1, [pc, #380]	; (8005068 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8004eec:	400a      	ands	r2, r1
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ef2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef6:	f383 8810 	msr	PRIMASK, r3
}
 8004efa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004efc:	f3ef 8310 	mrs	r3, PRIMASK
 8004f00:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f04:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f06:	2301      	movs	r3, #1
 8004f08:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f0c:	f383 8810 	msr	PRIMASK, r3
}
 8004f10:	46c0      	nop			; (mov r8, r8)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4953      	ldr	r1, [pc, #332]	; (800506c <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8004f1e:	400a      	ands	r2, r1
 8004f20:	609a      	str	r2, [r3, #8]
 8004f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f24:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f28:	f383 8810 	msr	PRIMASK, r3
}
 8004f2c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2288      	movs	r2, #136	; 0x88
 8004f32:	2120      	movs	r1, #32
 8004f34:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d12f      	bne.n	8004fa4 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f52:	657b      	str	r3, [r7, #84]	; 0x54
 8004f54:	2301      	movs	r3, #1
 8004f56:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	f383 8810 	msr	PRIMASK, r3
}
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2110      	movs	r1, #16
 8004f6c:	438a      	bics	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f76:	f383 8810 	msr	PRIMASK, r3
}
 8004f7a:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	2210      	movs	r2, #16
 8004f84:	4013      	ands	r3, r2
 8004f86:	2b10      	cmp	r3, #16
 8004f88:	d103      	bne.n	8004f92 <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2210      	movs	r2, #16
 8004f90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	225c      	movs	r2, #92	; 0x5c
 8004f96:	5a9a      	ldrh	r2, [r3, r2]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	0011      	movs	r1, r2
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f7fe fc0d 	bl	80037bc <HAL_UARTEx_RxEventCallback>
 8004fa2:	e003      	b.n	8004fac <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f7fb fb6a 	bl	8000680 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004fac:	2366      	movs	r3, #102	; 0x66
 8004fae:	18fb      	adds	r3, r7, r3
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d004      	beq.n	8004fc0 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fb8:	2220      	movs	r2, #32
 8004fba:	4013      	ands	r3, r2
 8004fbc:	d000      	beq.n	8004fc0 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004fbe:	e70c      	b.n	8004dda <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004fc0:	2052      	movs	r0, #82	; 0x52
 8004fc2:	183b      	adds	r3, r7, r0
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	215e      	movs	r1, #94	; 0x5e
 8004fc8:	5a52      	ldrh	r2, [r2, r1]
 8004fca:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004fcc:	0001      	movs	r1, r0
 8004fce:	187b      	adds	r3, r7, r1
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d044      	beq.n	8005060 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2268      	movs	r2, #104	; 0x68
 8004fda:	5a9b      	ldrh	r3, [r3, r2]
 8004fdc:	187a      	adds	r2, r7, r1
 8004fde:	8812      	ldrh	r2, [r2, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d23d      	bcs.n	8005060 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8004fe8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fea:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004fec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fee:	2301      	movs	r3, #1
 8004ff0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f383 8810 	msr	PRIMASK, r3
}
 8004ff8:	46c0      	nop			; (mov r8, r8)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	491a      	ldr	r1, [pc, #104]	; (8005070 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8005006:	400a      	ands	r2, r1
 8005008:	609a      	str	r2, [r3, #8]
 800500a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800500c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f383 8810 	msr	PRIMASK, r3
}
 8005014:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a16      	ldr	r2, [pc, #88]	; (8005074 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800501a:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800501c:	f3ef 8310 	mrs	r3, PRIMASK
 8005020:	61bb      	str	r3, [r7, #24]
  return(result);
 8005022:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005024:	64bb      	str	r3, [r7, #72]	; 0x48
 8005026:	2301      	movs	r3, #1
 8005028:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	f383 8810 	msr	PRIMASK, r3
}
 8005030:	46c0      	nop			; (mov r8, r8)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2120      	movs	r1, #32
 800503e:	430a      	orrs	r2, r1
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005044:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	f383 8810 	msr	PRIMASK, r3
}
 800504c:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800504e:	e007      	b.n	8005060 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2108      	movs	r1, #8
 800505c:	430a      	orrs	r2, r1
 800505e:	619a      	str	r2, [r3, #24]
}
 8005060:	46c0      	nop			; (mov r8, r8)
 8005062:	46bd      	mov	sp, r7
 8005064:	b01e      	add	sp, #120	; 0x78
 8005066:	bd80      	pop	{r7, pc}
 8005068:	fffffeff 	.word	0xfffffeff
 800506c:	effffffe 	.word	0xeffffffe
 8005070:	efffffff 	.word	0xefffffff
 8005074:	08004945 	.word	0x08004945

08005078 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005080:	46c0      	nop			; (mov r8, r8)
 8005082:	46bd      	mov	sp, r7
 8005084:	b002      	add	sp, #8
 8005086:	bd80      	pop	{r7, pc}

08005088 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005090:	46c0      	nop			; (mov r8, r8)
 8005092:	46bd      	mov	sp, r7
 8005094:	b002      	add	sp, #8
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80050a0:	46c0      	nop			; (mov r8, r8)
 80050a2:	46bd      	mov	sp, r7
 80050a4:	b002      	add	sp, #8
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2280      	movs	r2, #128	; 0x80
 80050b4:	5c9b      	ldrb	r3, [r3, r2]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d101      	bne.n	80050be <HAL_UARTEx_DisableFifoMode+0x16>
 80050ba:	2302      	movs	r3, #2
 80050bc:	e027      	b.n	800510e <HAL_UARTEx_DisableFifoMode+0x66>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2280      	movs	r2, #128	; 0x80
 80050c2:	2101      	movs	r1, #1
 80050c4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2284      	movs	r2, #132	; 0x84
 80050ca:	2124      	movs	r1, #36	; 0x24
 80050cc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2101      	movs	r1, #1
 80050e2:	438a      	bics	r2, r1
 80050e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4a0b      	ldr	r2, [pc, #44]	; (8005118 <HAL_UARTEx_DisableFifoMode+0x70>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2284      	movs	r2, #132	; 0x84
 8005100:	2120      	movs	r1, #32
 8005102:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2280      	movs	r2, #128	; 0x80
 8005108:	2100      	movs	r1, #0
 800510a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	0018      	movs	r0, r3
 8005110:	46bd      	mov	sp, r7
 8005112:	b004      	add	sp, #16
 8005114:	bd80      	pop	{r7, pc}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	dfffffff 	.word	0xdfffffff

0800511c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2280      	movs	r2, #128	; 0x80
 800512a:	5c9b      	ldrb	r3, [r3, r2]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005130:	2302      	movs	r3, #2
 8005132:	e02e      	b.n	8005192 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2280      	movs	r2, #128	; 0x80
 8005138:	2101      	movs	r1, #1
 800513a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2284      	movs	r2, #132	; 0x84
 8005140:	2124      	movs	r1, #36	; 0x24
 8005142:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2101      	movs	r1, #1
 8005158:	438a      	bics	r2, r1
 800515a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	08d9      	lsrs	r1, r3, #3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	0018      	movs	r0, r3
 8005174:	f000 f854 	bl	8005220 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2284      	movs	r2, #132	; 0x84
 8005184:	2120      	movs	r1, #32
 8005186:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2280      	movs	r2, #128	; 0x80
 800518c:	2100      	movs	r1, #0
 800518e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	0018      	movs	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	b004      	add	sp, #16
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2280      	movs	r2, #128	; 0x80
 80051aa:	5c9b      	ldrb	r3, [r3, r2]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e02f      	b.n	8005214 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2280      	movs	r2, #128	; 0x80
 80051b8:	2101      	movs	r1, #1
 80051ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2284      	movs	r2, #132	; 0x84
 80051c0:	2124      	movs	r1, #36	; 0x24
 80051c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2101      	movs	r1, #1
 80051d8:	438a      	bics	r2, r1
 80051da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	4a0e      	ldr	r2, [pc, #56]	; (800521c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	0019      	movs	r1, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	0018      	movs	r0, r3
 80051f6:	f000 f813 	bl	8005220 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2284      	movs	r2, #132	; 0x84
 8005206:	2120      	movs	r1, #32
 8005208:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2280      	movs	r2, #128	; 0x80
 800520e:	2100      	movs	r1, #0
 8005210:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	0018      	movs	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	b004      	add	sp, #16
 800521a:	bd80      	pop	{r7, pc}
 800521c:	f1ffffff 	.word	0xf1ffffff

08005220 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800522c:	2b00      	cmp	r3, #0
 800522e:	d108      	bne.n	8005242 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	226a      	movs	r2, #106	; 0x6a
 8005234:	2101      	movs	r1, #1
 8005236:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2268      	movs	r2, #104	; 0x68
 800523c:	2101      	movs	r1, #1
 800523e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005240:	e043      	b.n	80052ca <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005242:	260f      	movs	r6, #15
 8005244:	19bb      	adds	r3, r7, r6
 8005246:	2208      	movs	r2, #8
 8005248:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800524a:	200e      	movs	r0, #14
 800524c:	183b      	adds	r3, r7, r0
 800524e:	2208      	movs	r2, #8
 8005250:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	0e5b      	lsrs	r3, r3, #25
 800525a:	b2da      	uxtb	r2, r3
 800525c:	240d      	movs	r4, #13
 800525e:	193b      	adds	r3, r7, r4
 8005260:	2107      	movs	r1, #7
 8005262:	400a      	ands	r2, r1
 8005264:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	0f5b      	lsrs	r3, r3, #29
 800526e:	b2da      	uxtb	r2, r3
 8005270:	250c      	movs	r5, #12
 8005272:	197b      	adds	r3, r7, r5
 8005274:	2107      	movs	r1, #7
 8005276:	400a      	ands	r2, r1
 8005278:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800527a:	183b      	adds	r3, r7, r0
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	197a      	adds	r2, r7, r5
 8005280:	7812      	ldrb	r2, [r2, #0]
 8005282:	4914      	ldr	r1, [pc, #80]	; (80052d4 <UARTEx_SetNbDataToProcess+0xb4>)
 8005284:	5c8a      	ldrb	r2, [r1, r2]
 8005286:	435a      	muls	r2, r3
 8005288:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800528a:	197b      	adds	r3, r7, r5
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	4a12      	ldr	r2, [pc, #72]	; (80052d8 <UARTEx_SetNbDataToProcess+0xb8>)
 8005290:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005292:	0019      	movs	r1, r3
 8005294:	f7fa ffc0 	bl	8000218 <__divsi3>
 8005298:	0003      	movs	r3, r0
 800529a:	b299      	uxth	r1, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	226a      	movs	r2, #106	; 0x6a
 80052a0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052a2:	19bb      	adds	r3, r7, r6
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	193a      	adds	r2, r7, r4
 80052a8:	7812      	ldrb	r2, [r2, #0]
 80052aa:	490a      	ldr	r1, [pc, #40]	; (80052d4 <UARTEx_SetNbDataToProcess+0xb4>)
 80052ac:	5c8a      	ldrb	r2, [r1, r2]
 80052ae:	435a      	muls	r2, r3
 80052b0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80052b2:	193b      	adds	r3, r7, r4
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	4a08      	ldr	r2, [pc, #32]	; (80052d8 <UARTEx_SetNbDataToProcess+0xb8>)
 80052b8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052ba:	0019      	movs	r1, r3
 80052bc:	f7fa ffac 	bl	8000218 <__divsi3>
 80052c0:	0003      	movs	r3, r0
 80052c2:	b299      	uxth	r1, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2268      	movs	r2, #104	; 0x68
 80052c8:	5299      	strh	r1, [r3, r2]
}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	46bd      	mov	sp, r7
 80052ce:	b005      	add	sp, #20
 80052d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	080053e8 	.word	0x080053e8
 80052d8:	080053f0 	.word	0x080053f0

080052dc <__libc_init_array>:
 80052dc:	b570      	push	{r4, r5, r6, lr}
 80052de:	2600      	movs	r6, #0
 80052e0:	4d0c      	ldr	r5, [pc, #48]	; (8005314 <__libc_init_array+0x38>)
 80052e2:	4c0d      	ldr	r4, [pc, #52]	; (8005318 <__libc_init_array+0x3c>)
 80052e4:	1b64      	subs	r4, r4, r5
 80052e6:	10a4      	asrs	r4, r4, #2
 80052e8:	42a6      	cmp	r6, r4
 80052ea:	d109      	bne.n	8005300 <__libc_init_array+0x24>
 80052ec:	2600      	movs	r6, #0
 80052ee:	f000 f821 	bl	8005334 <_init>
 80052f2:	4d0a      	ldr	r5, [pc, #40]	; (800531c <__libc_init_array+0x40>)
 80052f4:	4c0a      	ldr	r4, [pc, #40]	; (8005320 <__libc_init_array+0x44>)
 80052f6:	1b64      	subs	r4, r4, r5
 80052f8:	10a4      	asrs	r4, r4, #2
 80052fa:	42a6      	cmp	r6, r4
 80052fc:	d105      	bne.n	800530a <__libc_init_array+0x2e>
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
 8005300:	00b3      	lsls	r3, r6, #2
 8005302:	58eb      	ldr	r3, [r5, r3]
 8005304:	4798      	blx	r3
 8005306:	3601      	adds	r6, #1
 8005308:	e7ee      	b.n	80052e8 <__libc_init_array+0xc>
 800530a:	00b3      	lsls	r3, r6, #2
 800530c:	58eb      	ldr	r3, [r5, r3]
 800530e:	4798      	blx	r3
 8005310:	3601      	adds	r6, #1
 8005312:	e7f2      	b.n	80052fa <__libc_init_array+0x1e>
 8005314:	08005400 	.word	0x08005400
 8005318:	08005400 	.word	0x08005400
 800531c:	08005400 	.word	0x08005400
 8005320:	08005404 	.word	0x08005404

08005324 <memset>:
 8005324:	0003      	movs	r3, r0
 8005326:	1882      	adds	r2, r0, r2
 8005328:	4293      	cmp	r3, r2
 800532a:	d100      	bne.n	800532e <memset+0xa>
 800532c:	4770      	bx	lr
 800532e:	7019      	strb	r1, [r3, #0]
 8005330:	3301      	adds	r3, #1
 8005332:	e7f9      	b.n	8005328 <memset+0x4>

08005334 <_init>:
 8005334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533a:	bc08      	pop	{r3}
 800533c:	469e      	mov	lr, r3
 800533e:	4770      	bx	lr

08005340 <_fini>:
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005346:	bc08      	pop	{r3}
 8005348:	469e      	mov	lr, r3
 800534a:	4770      	bx	lr
