
Nucleo_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005220  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080052dc  080052dc  000152dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005388  08005388  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005388  08005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005390  08005390  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005390  08005390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005394  08005394  00015394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000908  20000010  080053a8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000918  080053a8  00020918  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c79  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e7  00000000  00000000  00031cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00034298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  000351e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a40  00000000  00000000  00036040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f64  00000000  00000000  0004ea80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a032b  00000000  00000000  000609e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100d0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003714  00000000  00000000  00100d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080052c4 	.word	0x080052c4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	080052c4 	.word	0x080052c4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <mdbus_send_packet_it>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void mdbus_send_packet_it(uint8_t *data, uint16_t size)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	000a      	movs	r2, r1
 8000626:	1cbb      	adds	r3, r7, #2
 8000628:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart2, data, size);
 800062a:	1cbb      	adds	r3, r7, #2
 800062c:	881a      	ldrh	r2, [r3, #0]
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <mdbus_send_packet_it+0x24>)
 8000632:	0018      	movs	r0, r3
 8000634:	f002 fc3a 	bl	8002eac <HAL_UART_Transmit_IT>
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b002      	add	sp, #8
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000078 	.word	0x20000078

08000644 <mdbus_read_packet_it>:

void mdbus_read_packet_it(uint8_t *data, uint16_t size)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	000a      	movs	r2, r1
 800064e:	1cbb      	adds	r3, r7, #2
 8000650:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, data, size);
 8000652:	1cbb      	adds	r3, r7, #2
 8000654:	881a      	ldrh	r2, [r3, #0]
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <mdbus_read_packet_it+0x24>)
 800065a:	0018      	movs	r0, r3
 800065c:	f002 fce2 	bl	8003024 <HAL_UART_Receive_IT>
}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b002      	add	sp, #8
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000078 	.word	0x20000078

0800066c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

//send callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	mdbus_on_packet_send();
 8000674:	f000 fb70 	bl	8000d58 <mdbus_on_packet_send>
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	b002      	add	sp, #8
 800067e:	bd80      	pop	{r7, pc}

08000680 <HAL_UART_RxCpltCallback>:

//receive callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	mdbus_on_packet_receive(receivedData, PACKETSIZE);
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <HAL_UART_RxCpltCallback+0x1c>)
 800068a:	2101      	movs	r1, #1
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fb7f 	bl	8000d90 <mdbus_on_packet_receive>
}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	b002      	add	sp, #8
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	20000108 	.word	0x20000108

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f000 fc9e 	bl	8000fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f81a 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f000 f91c 	bl	80008e8 <MX_GPIO_Init>
  //stat listening sanding callback
  MX_USART2_UART_Init();
 80006b0:	f000 f8cc 	bl	800084c <MX_USART2_UART_Init>
  //start timer
  MX_TIM2_Init();
 80006b4:	f000 f874 	bl	80007a0 <MX_TIM2_Init>
  //start listening receiving callback
  mdbus_read_packet_it(&receivedData, PACKETSIZE);
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <main+0x38>)
 80006ba:	2101      	movs	r1, #1
 80006bc:	0018      	movs	r0, r3
 80006be:	f7ff ffc1 	bl	8000644 <mdbus_read_packet_it>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <main+0x3c>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 ff75 	bl	80025b4 <HAL_TIM_Base_Start_IT>

  mdbus_slave_configure('1');
 80006ca:	2031      	movs	r0, #49	; 0x31
 80006cc:	f000 fba8 	bl	8000e20 <mdbus_slave_configure>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mdbus_slave_run();
 80006d0:	f000 fb78 	bl	8000dc4 <mdbus_slave_run>
 80006d4:	e7fc      	b.n	80006d0 <main+0x30>
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	20000108 	.word	0x20000108
 80006dc:	2000002c 	.word	0x2000002c

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b093      	sub	sp, #76	; 0x4c
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	2410      	movs	r4, #16
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	0018      	movs	r0, r3
 80006ec:	2338      	movs	r3, #56	; 0x38
 80006ee:	001a      	movs	r2, r3
 80006f0:	2100      	movs	r1, #0
 80006f2:	f004 fddf 	bl	80052b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f6:	003b      	movs	r3, r7
 80006f8:	0018      	movs	r0, r3
 80006fa:	2310      	movs	r3, #16
 80006fc:	001a      	movs	r2, r3
 80006fe:	2100      	movs	r1, #0
 8000700:	f004 fdd8 	bl	80052b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	0018      	movs	r0, r3
 800070a:	f001 f833 	bl	8001774 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2202      	movs	r2, #2
 8000712:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	0052      	lsls	r2, r2, #1
 800071a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800071c:	0021      	movs	r1, r4
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2240      	movs	r2, #64	; 0x40
 8000728:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2202      	movs	r2, #2
 800072e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2202      	movs	r2, #2
 8000734:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2208      	movs	r2, #8
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0292      	lsls	r2, r2, #10
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	0492      	lsls	r2, r2, #18
 8000750:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	0592      	lsls	r2, r2, #22
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	187b      	adds	r3, r7, r1
 800075c:	0018      	movs	r0, r3
 800075e:	f001 f855 	bl	800180c <HAL_RCC_OscConfig>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000766:	f000 f90f 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	003b      	movs	r3, r7
 800076c:	2207      	movs	r2, #7
 800076e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	003b      	movs	r3, r7
 8000772:	2202      	movs	r2, #2
 8000774:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000776:	003b      	movs	r3, r7
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	0112      	lsls	r2, r2, #4
 800077c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077e:	003b      	movs	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000784:	003b      	movs	r3, r7
 8000786:	2101      	movs	r1, #1
 8000788:	0018      	movs	r0, r3
 800078a:	f001 fb59 	bl	8001e40 <HAL_RCC_ClockConfig>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000792:	f000 f8f9 	bl	8000988 <Error_Handler>
  }
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b013      	add	sp, #76	; 0x4c
 800079c:	bd90      	pop	{r4, r7, pc}
	...

080007a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	2310      	movs	r3, #16
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	0018      	movs	r0, r3
 80007ac:	2310      	movs	r3, #16
 80007ae:	001a      	movs	r2, r3
 80007b0:	2100      	movs	r1, #0
 80007b2:	f004 fd7f 	bl	80052b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	0018      	movs	r0, r3
 80007ba:	230c      	movs	r3, #12
 80007bc:	001a      	movs	r2, r3
 80007be:	2100      	movs	r1, #0
 80007c0:	f004 fd78 	bl	80052b4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_TIM2_Init+0xa4>)
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	05d2      	lsls	r2, r2, #23
 80007ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_TIM2_Init+0xa4>)
 80007ce:	22fa      	movs	r2, #250	; 0xfa
 80007d0:	0092      	lsls	r2, r2, #2
 80007d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_TIM2_Init+0xa4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000;
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_TIM2_Init+0xa4>)
 80007dc:	4a1a      	ldr	r2, [pc, #104]	; (8000848 <MX_TIM2_Init+0xa8>)
 80007de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_TIM2_Init+0xa4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_TIM2_Init+0xa4>)
 80007e8:	2280      	movs	r2, #128	; 0x80
 80007ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_TIM2_Init+0xa4>)
 80007ee:	0018      	movs	r0, r3
 80007f0:	f001 fe88 	bl	8002504 <HAL_TIM_Base_Init>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80007f8:	f000 f8c6 	bl	8000988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fc:	2110      	movs	r1, #16
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	0152      	lsls	r2, r2, #5
 8000804:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000806:	187a      	adds	r2, r7, r1
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_TIM2_Init+0xa4>)
 800080a:	0011      	movs	r1, r2
 800080c:	0018      	movs	r0, r3
 800080e:	f002 f85f 	bl	80028d0 <HAL_TIM_ConfigClockSource>
 8000812:	1e03      	subs	r3, r0, #0
 8000814:	d001      	beq.n	800081a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000816:	f000 f8b7 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000826:	1d3a      	adds	r2, r7, #4
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_TIM2_Init+0xa4>)
 800082a:	0011      	movs	r1, r2
 800082c:	0018      	movs	r0, r3
 800082e:	f002 fa61 	bl	8002cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000836:	f000 f8a7 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b008      	add	sp, #32
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	2000002c 	.word	0x2000002c
 8000848:	00008ca0 	.word	0x00008ca0

0800084c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000850:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <MX_USART2_UART_Init+0x94>)
 8000852:	4a24      	ldr	r2, [pc, #144]	; (80008e4 <MX_USART2_UART_Init+0x98>)
 8000854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000856:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <MX_USART2_UART_Init+0x94>)
 8000858:	22e1      	movs	r2, #225	; 0xe1
 800085a:	0252      	lsls	r2, r2, #9
 800085c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <MX_USART2_UART_Init+0x94>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <MX_USART2_UART_Init+0x94>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_USART2_UART_Init+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_USART2_UART_Init+0x94>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_USART2_UART_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_USART2_UART_Init+0x94>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_USART2_UART_Init+0x94>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_USART2_UART_Init+0x94>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USART2_UART_Init+0x94>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_USART2_UART_Init+0x94>)
 8000896:	0018      	movs	r0, r3
 8000898:	f002 fab2 	bl	8002e00 <HAL_UART_Init>
 800089c:	1e03      	subs	r3, r0, #0
 800089e:	d001      	beq.n	80008a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008a0:	f000 f872 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART2_UART_Init+0x94>)
 80008a6:	2100      	movs	r1, #0
 80008a8:	0018      	movs	r0, r3
 80008aa:	f004 fbff 	bl	80050ac <HAL_UARTEx_SetTxFifoThreshold>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008b2:	f000 f869 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b6:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_USART2_UART_Init+0x94>)
 80008b8:	2100      	movs	r1, #0
 80008ba:	0018      	movs	r0, r3
 80008bc:	f004 fc36 	bl	800512c <HAL_UARTEx_SetRxFifoThreshold>
 80008c0:	1e03      	subs	r3, r0, #0
 80008c2:	d001      	beq.n	80008c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008c4:	f000 f860 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <MX_USART2_UART_Init+0x94>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f004 fbb4 	bl	8005038 <HAL_UARTEx_DisableFifoMode>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008d4:	f000 f858 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	20000078 	.word	0x20000078
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	240c      	movs	r4, #12
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	0018      	movs	r0, r3
 80008f4:	2314      	movs	r3, #20
 80008f6:	001a      	movs	r2, r3
 80008f8:	2100      	movs	r1, #0
 80008fa:	f004 fcdb 	bl	80052b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b21      	ldr	r3, [pc, #132]	; (8000984 <MX_GPIO_Init+0x9c>)
 8000900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000902:	4b20      	ldr	r3, [pc, #128]	; (8000984 <MX_GPIO_Init+0x9c>)
 8000904:	2104      	movs	r1, #4
 8000906:	430a      	orrs	r2, r1
 8000908:	635a      	str	r2, [r3, #52]	; 0x34
 800090a:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <MX_GPIO_Init+0x9c>)
 800090c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800090e:	2204      	movs	r2, #4
 8000910:	4013      	ands	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000916:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <MX_GPIO_Init+0x9c>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_GPIO_Init+0x9c>)
 800091c:	2120      	movs	r1, #32
 800091e:	430a      	orrs	r2, r1
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_GPIO_Init+0x9c>)
 8000924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000926:	2220      	movs	r2, #32
 8000928:	4013      	ands	r3, r2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_GPIO_Init+0x9c>)
 8000930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_GPIO_Init+0x9c>)
 8000934:	2101      	movs	r1, #1
 8000936:	430a      	orrs	r2, r1
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_GPIO_Init+0x9c>)
 800093c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800093e:	2201      	movs	r2, #1
 8000940:	4013      	ands	r3, r2
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000946:	23a0      	movs	r3, #160	; 0xa0
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	2200      	movs	r2, #0
 800094c:	2120      	movs	r1, #32
 800094e:	0018      	movs	r0, r3
 8000950:	f000 fef2 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000954:	0021      	movs	r1, r4
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2220      	movs	r2, #32
 800095a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2201      	movs	r2, #1
 8000960:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2202      	movs	r2, #2
 800096c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800096e:	187a      	adds	r2, r7, r1
 8000970:	23a0      	movs	r3, #160	; 0xa0
 8000972:	05db      	lsls	r3, r3, #23
 8000974:	0011      	movs	r1, r2
 8000976:	0018      	movs	r0, r3
 8000978:	f000 fd7a 	bl	8001470 <HAL_GPIO_Init>

}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b009      	add	sp, #36	; 0x24
 8000982:	bd90      	pop	{r4, r7, pc}
 8000984:	40021000 	.word	0x40021000

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <HAL_MspInit+0x4c>)
 800099c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a0:	2101      	movs	r1, #1
 80009a2:	430a      	orrs	r2, r1
 80009a4:	641a      	str	r2, [r3, #64]	; 0x40
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	2201      	movs	r2, #1
 80009ac:	4013      	ands	r3, r2
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_MspInit+0x4c>)
 80009b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <HAL_MspInit+0x4c>)
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	0549      	lsls	r1, r1, #21
 80009bc:	430a      	orrs	r2, r1
 80009be:	63da      	str	r2, [r3, #60]	; 0x3c
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009c4:	2380      	movs	r3, #128	; 0x80
 80009c6:	055b      	lsls	r3, r3, #21
 80009c8:	4013      	ands	r3, r2
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80009ce:	23c0      	movs	r3, #192	; 0xc0
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 fb8c 	bl	80010f0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	b002      	add	sp, #8
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d113      	bne.n	8000a20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_TIM_Base_MspInit+0x44>)
 80009fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_TIM_Base_MspInit+0x44>)
 80009fe:	2101      	movs	r1, #1
 8000a00:	430a      	orrs	r2, r1
 8000a02:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_TIM_Base_MspInit+0x44>)
 8000a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2100      	movs	r1, #0
 8000a14:	200f      	movs	r0, #15
 8000a16:	f000 fc2d 	bl	8001274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a1a:	200f      	movs	r0, #15
 8000a1c:	f000 fc3f 	bl	800129e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b004      	add	sp, #16
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b097      	sub	sp, #92	; 0x5c
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	2344      	movs	r3, #68	; 0x44
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	0018      	movs	r0, r3
 8000a3a:	2314      	movs	r3, #20
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f004 fc38 	bl	80052b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a44:	2410      	movs	r4, #16
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	0018      	movs	r0, r3
 8000a4a:	2334      	movs	r3, #52	; 0x34
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	2100      	movs	r1, #0
 8000a50:	f004 fc30 	bl	80052b4 <memset>
  if(huart->Instance==USART2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a26      	ldr	r2, [pc, #152]	; (8000af4 <HAL_UART_MspInit+0xc8>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d146      	bne.n	8000aec <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	2202      	movs	r2, #2
 8000a62:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f001 fb91 	bl	8002194 <HAL_RCCEx_PeriphCLKConfig>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a76:	f7ff ff87 	bl	8000988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <HAL_UART_MspInit+0xcc>)
 8000a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <HAL_UART_MspInit+0xcc>)
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	0289      	lsls	r1, r1, #10
 8000a84:	430a      	orrs	r2, r1
 8000a86:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <HAL_UART_MspInit+0xcc>)
 8000a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a8c:	2380      	movs	r3, #128	; 0x80
 8000a8e:	029b      	lsls	r3, r3, #10
 8000a90:	4013      	ands	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_UART_MspInit+0xcc>)
 8000a98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <HAL_UART_MspInit+0xcc>)
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	635a      	str	r2, [r3, #52]	; 0x34
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_UART_MspInit+0xcc>)
 8000aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000aae:	2144      	movs	r1, #68	; 0x44
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2202      	movs	r2, #2
 8000aba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2201      	movs	r2, #1
 8000ac0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2201      	movs	r2, #1
 8000acc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	187a      	adds	r2, r7, r1
 8000ad0:	23a0      	movs	r3, #160	; 0xa0
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	0011      	movs	r1, r2
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 fcca 	bl	8001470 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	201c      	movs	r0, #28
 8000ae2:	f000 fbc7 	bl	8001274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ae6:	201c      	movs	r0, #28
 8000ae8:	f000 fbd9 	bl	800129e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b017      	add	sp, #92	; 0x5c
 8000af2:	bd90      	pop	{r4, r7, pc}
 8000af4:	40004400 	.word	0x40004400
 8000af8:	40021000 	.word	0x40021000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b20:	f000 faca 	bl	80010b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <TIM2_IRQHandler+0x14>)
 8000b32:	0018      	movs	r0, r3
 8000b34:	f001 fd9a 	bl	800266c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	2000002c 	.word	0x2000002c

08000b44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <USART2_IRQHandler+0x14>)
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f002 fad4 	bl	80030f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	20000078 	.word	0x20000078

08000b5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <ring_buffer_is_empty+0x28>)
 8000b74:	5c9a      	ldrb	r2, [r3, r2]
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	00db      	lsls	r3, r3, #3
 8000b7c:	5ccb      	ldrb	r3, [r1, r3]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	425a      	negs	r2, r3
 8000b82:	4153      	adcs	r3, r2
 8000b84:	b2db      	uxtb	r3, r3
}
 8000b86:	0018      	movs	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	00000401 	.word	0x00000401

08000b94 <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <ring_buffer_is_full+0x34>)
 8000ba0:	5c9b      	ldrb	r3, [r3, r2]
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	5cd3      	ldrb	r3, [r2, r3]
 8000bac:	1acb      	subs	r3, r1, r3
 8000bae:	059b      	lsls	r3, r3, #22
 8000bb0:	0d9b      	lsrs	r3, r3, #22
 8000bb2:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <ring_buffer_is_full+0x38>)
 8000bb4:	4694      	mov	ip, r2
 8000bb6:	4463      	add	r3, ip
 8000bb8:	425a      	negs	r2, r3
 8000bba:	4153      	adcs	r3, r2
 8000bbc:	b2db      	uxtb	r3, r3
}
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	00000401 	.word	0x00000401
 8000bcc:	fffffc01 	.word	0xfffffc01

08000bd0 <ring_buffer_init>:
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	2100      	movs	r1, #0
 8000be0:	54d1      	strb	r1, [r2, r3]
  buffer->head_index = 0;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a03      	ldr	r2, [pc, #12]	; (8000bf4 <ring_buffer_init+0x24>)
 8000be6:	2100      	movs	r1, #0
 8000be8:	5499      	strb	r1, [r3, r2]
}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b002      	add	sp, #8
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	00000401 	.word	0x00000401

08000bf8 <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, char data)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	000a      	movs	r2, r1
 8000c02:	1cfb      	adds	r3, r7, #3
 8000c04:	701a      	strb	r2, [r3, #0]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff ffc3 	bl	8000b94 <ring_buffer_is_full>
 8000c0e:	1e03      	subs	r3, r0, #0
 8000c10:	d009      	beq.n	8000c26 <ring_buffer_queue+0x2e>
  {
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	5cd3      	ldrb	r3, [r2, r3]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	b2d9      	uxtb	r1, r3
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	54d1      	strb	r1, [r2, r3]
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <ring_buffer_queue+0x58>)
 8000c2a:	5c9b      	ldrb	r3, [r3, r2]
 8000c2c:	0019      	movs	r1, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	1cfa      	adds	r2, r7, #3
 8000c32:	7812      	ldrb	r2, [r2, #0]
 8000c34:	545a      	strb	r2, [r3, r1]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <ring_buffer_queue+0x58>)
 8000c3a:	5c9b      	ldrb	r3, [r3, r2]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	b2d9      	uxtb	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a03      	ldr	r2, [pc, #12]	; (8000c50 <ring_buffer_queue+0x58>)
 8000c44:	5499      	strb	r1, [r3, r2]
}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	00000401 	.word	0x00000401

08000c54 <ring_buffer_queue_arr>:

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b087      	sub	sp, #28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	701a      	strb	r2, [r3, #0]
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++)
 8000c62:	2317      	movs	r3, #23
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
 8000c6a:	e00f      	b.n	8000c8c <ring_buffer_queue_arr+0x38>
  {
    ring_buffer_queue(buffer, data[i]);
 8000c6c:	2417      	movs	r4, #23
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	18d3      	adds	r3, r2, r3
 8000c76:	781a      	ldrb	r2, [r3, #0]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff ffbb 	bl	8000bf8 <ring_buffer_queue>
  for(i = 0; i < size; i++)
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	781a      	ldrb	r2, [r3, #0]
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	3201      	adds	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	2317      	movs	r3, #23
 8000c8e:	18fa      	adds	r2, r7, r3
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	7812      	ldrb	r2, [r2, #0]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d3e8      	bcc.n	8000c6c <ring_buffer_queue_arr+0x18>
  }
}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b007      	add	sp, #28
 8000ca2:	bd90      	pop	{r4, r7, pc}

08000ca4 <ring_buffer_dequeue>:

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f7ff ff59 	bl	8000b68 <ring_buffer_is_empty>
 8000cb6:	1e03      	subs	r3, r0, #0
 8000cb8:	d001      	beq.n	8000cbe <ring_buffer_dequeue+0x1a>
  {
    /* No items */
    return 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e013      	b.n	8000ce6 <ring_buffer_dequeue+0x42>
  }

  *data = buffer->buffer[buffer->tail_index];
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	5cd3      	ldrb	r3, [r2, r3]
 8000cc6:	001a      	movs	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	5c9a      	ldrb	r2, [r3, r2]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	5cd3      	ldrb	r3, [r2, r3]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	b2d9      	uxtb	r1, r3
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	54d1      	strb	r1, [r2, r3]
  return 1;
 8000ce4:	2301      	movs	r3, #1
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}

08000cee <ring_buffer_dequeue_arr>:

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b086      	sub	sp, #24
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	60f8      	str	r0, [r7, #12]
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	1dfb      	adds	r3, r7, #7
 8000cfa:	701a      	strb	r2, [r3, #0]
  if(ring_buffer_is_empty(buffer))
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f7ff ff32 	bl	8000b68 <ring_buffer_is_empty>
 8000d04:	1e03      	subs	r3, r0, #0
 8000d06:	d001      	beq.n	8000d0c <ring_buffer_dequeue_arr+0x1e>
  {
    /* No items */
    return 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	e021      	b.n	8000d50 <ring_buffer_dequeue_arr+0x62>
  }

  char *data_ptr = data;
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	617b      	str	r3, [r7, #20]
  ring_buffer_size_t cnt = 0;
 8000d10:	2313      	movs	r3, #19
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr))
 8000d18:	e008      	b.n	8000d2c <ring_buffer_dequeue_arr+0x3e>
  {
    cnt++;
 8000d1a:	2113      	movs	r1, #19
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	781a      	ldrb	r2, [r3, #0]
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	3201      	adds	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
    data_ptr++;
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr))
 8000d2c:	2313      	movs	r3, #19
 8000d2e:	18fa      	adds	r2, r7, r3
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	7812      	ldrb	r2, [r2, #0]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d207      	bcs.n	8000d4a <ring_buffer_dequeue_arr+0x5c>
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	0011      	movs	r1, r2
 8000d40:	0018      	movs	r0, r3
 8000d42:	f7ff ffaf 	bl	8000ca4 <ring_buffer_dequeue>
 8000d46:	1e03      	subs	r3, r0, #0
 8000d48:	d1e7      	bne.n	8000d1a <ring_buffer_dequeue_arr+0x2c>
  }
  return cnt;
 8000d4a:	2313      	movs	r3, #19
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	781b      	ldrb	r3, [r3, #0]
}
 8000d50:	0018      	movs	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b006      	add	sp, #24
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <mdbus_on_packet_send>:
ring_buffer_t m_message_queue_receive;
mdbus_State m_mdbus_state = IDLE;
uint8_t m_slave = '0';

void mdbus_on_packet_send()
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
	if(ring_buffer_is_empty(&m_message_queue_send)) return;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <mdbus_on_packet_send+0x34>)
 8000d60:	0018      	movs	r0, r3
 8000d62:	f7ff ff01 	bl	8000b68 <ring_buffer_is_empty>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d10b      	bne.n	8000d82 <mdbus_on_packet_send+0x2a>

	uint8_t data[PACKETSIZE];
	//read data from buffer
	ring_buffer_dequeue_arr(&m_message_queue_send, data, PACKETSIZE);
 8000d6a:	1d39      	adds	r1, r7, #4
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <mdbus_on_packet_send+0x34>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	0018      	movs	r0, r3
 8000d72:	f7ff ffbc 	bl	8000cee <ring_buffer_dequeue_arr>
	//send queued package
	mdbus_send_packet_it(data, PACKETSIZE);
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2101      	movs	r1, #1
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f7ff fc4e 	bl	800061c <mdbus_send_packet_it>
 8000d80:	e000      	b.n	8000d84 <mdbus_on_packet_send+0x2c>
	if(ring_buffer_is_empty(&m_message_queue_send)) return;
 8000d82:	46c0      	nop			; (mov r8, r8)

}
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b002      	add	sp, #8
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	2000010c 	.word	0x2000010c

08000d90 <mdbus_on_packet_receive>:

void mdbus_on_packet_receive(uint8_t *data, uint16_t size)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	000a      	movs	r2, r1
 8000d9a:	1cbb      	adds	r3, r7, #2
 8000d9c:	801a      	strh	r2, [r3, #0]
	ring_buffer_queue_arr(&m_message_queue_receive, data, PACKETSIZE);
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <mdbus_on_packet_receive+0x30>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff ff55 	bl	8000c54 <ring_buffer_queue_arr>
	mdbus_read_packet_it(data, size);
 8000daa:	1cbb      	adds	r3, r7, #2
 8000dac:	881a      	ldrh	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	0011      	movs	r1, r2
 8000db2:	0018      	movs	r0, r3
 8000db4:	f7ff fc46 	bl	8000644 <mdbus_read_packet_it>
}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b002      	add	sp, #8
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000510 	.word	0x20000510

08000dc4 <mdbus_slave_run>:

void mdbus_slave_run()
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	switch(m_mdbus_state)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <mdbus_slave_run+0x54>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b08      	cmp	r3, #8
 8000dce:	d81f      	bhi.n	8000e10 <mdbus_slave_run+0x4c>
 8000dd0:	009a      	lsls	r2, r3, #2
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <mdbus_slave_run+0x58>)
 8000dd4:	18d3      	adds	r3, r2, r3
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	469f      	mov	pc, r3
	{
	case IDLE:
		idle();
 8000dda:	f000 f843 	bl	8000e64 <idle>
		break;
 8000dde:	e018      	b.n	8000e12 <mdbus_slave_run+0x4e>

	case WAIT:
		wait();
 8000de0:	f000 f868 	bl	8000eb4 <wait>
		break;
 8000de4:	e015      	b.n	8000e12 <mdbus_slave_run+0x4e>

	case FUNC_ADRESS:
		func_adress();
 8000de6:	f000 f873 	bl	8000ed0 <func_adress>
		break;
 8000dea:	e012      	b.n	8000e12 <mdbus_slave_run+0x4e>

	case ERROR_UNKNOWN:
		error_unknown();
 8000dec:	f000 f886 	bl	8000efc <error_unknown>
		break;
 8000df0:	e00f      	b.n	8000e12 <mdbus_slave_run+0x4e>

	case OK:
		ok();
 8000df2:	f000 f891 	bl	8000f18 <ok>
		break;
 8000df6:	e00c      	b.n	8000e12 <mdbus_slave_run+0x4e>

	case FAIL:
		fail();
 8000df8:	f000 f89c 	bl	8000f34 <fail>
		break;
 8000dfc:	e009      	b.n	8000e12 <mdbus_slave_run+0x4e>

	case CHECK_FRAME:
		check_frame();
 8000dfe:	f000 f8a7 	bl	8000f50 <check_frame>
		break;
 8000e02:	e006      	b.n	8000e12 <mdbus_slave_run+0x4e>

	case FUNC1:
		func1();
 8000e04:	f000 f8aa 	bl	8000f5c <func1>
		break;
 8000e08:	e003      	b.n	8000e12 <mdbus_slave_run+0x4e>

	case FUNC2:
		func2();
 8000e0a:	f000 f8b1 	bl	8000f70 <func2>
		break;
 8000e0e:	e000      	b.n	8000e12 <mdbus_slave_run+0x4e>

	default:
		break;
 8000e10:	46c0      	nop			; (mov r8, r8)
	}
}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000912 	.word	0x20000912
 8000e1c:	0800533c 	.word	0x0800533c

08000e20 <mdbus_slave_configure>:

void mdbus_slave_configure(uint8_t adress)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	0002      	movs	r2, r0
 8000e28:	1dfb      	adds	r3, r7, #7
 8000e2a:	701a      	strb	r2, [r3, #0]
	m_mdbus_state = IDLE;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <mdbus_slave_configure+0x34>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
	ring_buffer_init(&m_message_queue_send);
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <mdbus_slave_configure+0x38>)
 8000e34:	0018      	movs	r0, r3
 8000e36:	f7ff fecb 	bl	8000bd0 <ring_buffer_init>
	ring_buffer_init(&m_message_queue_receive);
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <mdbus_slave_configure+0x3c>)
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff fec7 	bl	8000bd0 <ring_buffer_init>
	m_slave = adress;
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <mdbus_slave_configure+0x40>)
 8000e44:	1dfa      	adds	r2, r7, #7
 8000e46:	7812      	ldrb	r2, [r2, #0]
 8000e48:	701a      	strb	r2, [r3, #0]
}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b002      	add	sp, #8
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	20000912 	.word	0x20000912
 8000e58:	2000010c 	.word	0x2000010c
 8000e5c:	20000510 	.word	0x20000510
 8000e60:	20000004 	.word	0x20000004

08000e64 <idle>:

void idle()
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
	if(ring_buffer_is_empty(&m_message_queue_receive)) return;
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <idle+0x44>)
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff fe7b 	bl	8000b68 <ring_buffer_is_empty>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d113      	bne.n	8000e9e <idle+0x3a>

	uint8_t data[PACKETSIZE];
	ring_buffer_dequeue_arr(&m_message_queue_receive, data, PACKETSIZE);
 8000e76:	1d39      	adds	r1, r7, #4
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <idle+0x44>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f7ff ff36 	bl	8000cee <ring_buffer_dequeue_arr>

	//if the first bite is the adress of our mashine, if not, wait for end of package
	if(m_slave == data[0])
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	781a      	ldrb	r2, [r3, #0]
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <idle+0x48>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d103      	bne.n	8000e96 <idle+0x32>
	{
		m_mdbus_state = FUNC_ADRESS;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <idle+0x4c>)
 8000e90:	2202      	movs	r2, #2
 8000e92:	701a      	strb	r2, [r3, #0]
 8000e94:	e004      	b.n	8000ea0 <idle+0x3c>
	}else
	{
		m_mdbus_state = WAIT;
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <idle+0x4c>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
 8000e9c:	e000      	b.n	8000ea0 <idle+0x3c>
	if(ring_buffer_is_empty(&m_message_queue_receive)) return;
 8000e9e:	46c0      	nop			; (mov r8, r8)
	}

}
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b002      	add	sp, #8
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	20000510 	.word	0x20000510
 8000eac:	20000004 	.word	0x20000004
 8000eb0:	20000912 	.word	0x20000912

08000eb4 <wait>:

void wait()
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	if(isEof())
 8000eb8:	f000 f864 	bl	8000f84 <isEof>
 8000ebc:	1e03      	subs	r3, r0, #0
 8000ebe:	d002      	beq.n	8000ec6 <wait+0x12>
	{
		m_mdbus_state = IDLE;
 8000ec0:	4b02      	ldr	r3, [pc, #8]	; (8000ecc <wait+0x18>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
	}
}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000912 	.word	0x20000912

08000ed0 <func_adress>:

void func_adress()
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
	//read function adress from input
	if(ring_buffer_is_empty(&m_message_queue_receive)) return;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <func_adress+0x28>)
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff fe45 	bl	8000b68 <ring_buffer_is_empty>
 8000ede:	1e03      	subs	r3, r0, #0
 8000ee0:	d106      	bne.n	8000ef0 <func_adress+0x20>

	uint8_t data[PACKETSIZE];
	ring_buffer_dequeue_arr(&m_message_queue_receive, data, PACKETSIZE);
 8000ee2:	1d39      	adds	r1, r7, #4
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <func_adress+0x28>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f7ff ff00 	bl	8000cee <ring_buffer_dequeue_arr>
 8000eee:	e000      	b.n	8000ef2 <func_adress+0x22>
	if(ring_buffer_is_empty(&m_message_queue_receive)) return;
 8000ef0:	46c0      	nop			; (mov r8, r8)

	//when we have data select right funciton to do

}
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b002      	add	sp, #8
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000510 	.word	0x20000510

08000efc <error_unknown>:

void error_unknown()
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	if(isEof())
 8000f00:	f000 f840 	bl	8000f84 <isEof>
 8000f04:	1e03      	subs	r3, r0, #0
 8000f06:	d002      	beq.n	8000f0e <error_unknown+0x12>
	{
		m_mdbus_state = IDLE;
 8000f08:	4b02      	ldr	r3, [pc, #8]	; (8000f14 <error_unknown+0x18>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
	}
}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000912 	.word	0x20000912

08000f18 <ok>:

void ok()
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	// wait for end of frame and go to idle state
	if(isEof())	m_mdbus_state = IDLE;
 8000f1c:	f000 f832 	bl	8000f84 <isEof>
 8000f20:	1e03      	subs	r3, r0, #0
 8000f22:	d002      	beq.n	8000f2a <ok+0x12>
 8000f24:	4b02      	ldr	r3, [pc, #8]	; (8000f30 <ok+0x18>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000912 	.word	0x20000912

08000f34 <fail>:

void fail()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	// wait for end of frame and go to idle state
	if(isEof())	m_mdbus_state = IDLE;
 8000f38:	f000 f824 	bl	8000f84 <isEof>
 8000f3c:	1e03      	subs	r3, r0, #0
 8000f3e:	d002      	beq.n	8000f46 <fail+0x12>
 8000f40:	4b02      	ldr	r3, [pc, #8]	; (8000f4c <fail+0x18>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000912 	.word	0x20000912

08000f50 <check_frame>:

void check_frame()
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0

}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <func1>:

void func1()
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	//at the end check if frame is ok
	m_mdbus_state = CHECK_FRAME;
 8000f60:	4b02      	ldr	r3, [pc, #8]	; (8000f6c <func1+0x10>)
 8000f62:	2206      	movs	r2, #6
 8000f64:	701a      	strb	r2, [r3, #0]
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000912 	.word	0x20000912

08000f70 <func2>:

void func2()
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	//at the end check if frame is ok
	m_mdbus_state = CHECK_FRAME;
 8000f74:	4b02      	ldr	r3, [pc, #8]	; (8000f80 <func2+0x10>)
 8000f76:	2206      	movs	r2, #6
 8000f78:	701a      	strb	r2, [r3, #0]
}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000912 	.word	0x20000912

08000f84 <isEof>:

bool isEof()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	return true;
 8000f88:	2301      	movs	r3, #1
}
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f94:	f7ff fde2 	bl	8000b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f98:	480c      	ldr	r0, [pc, #48]	; (8000fcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9a:	490d      	ldr	r1, [pc, #52]	; (8000fd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <LoopForever+0xe>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb0:	4c0a      	ldr	r4, [pc, #40]	; (8000fdc <LoopForever+0x16>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fbe:	f004 f955 	bl	800526c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fc2:	f7ff fb6d 	bl	80006a0 <main>

08000fc6 <LoopForever>:

LoopForever:
  b LoopForever
 8000fc6:	e7fe      	b.n	8000fc6 <LoopForever>
  ldr   r0, =_estack
 8000fc8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fd4:	08005398 	.word	0x08005398
  ldr r2, =_sbss
 8000fd8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000fdc:	20000918 	.word	0x20000918

08000fe0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC1_COMP_IRQHandler>
	...

08000fe4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <HAL_Init+0x3c>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_Init+0x3c>)
 8000ff6:	2180      	movs	r1, #128	; 0x80
 8000ff8:	0049      	lsls	r1, r1, #1
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 f810 	bl	8001024 <HAL_InitTick>
 8001004:	1e03      	subs	r3, r0, #0
 8001006:	d003      	beq.n	8001010 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]
 800100e:	e001      	b.n	8001014 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001010:	f7ff fcc0 	bl	8000994 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001014:	1dfb      	adds	r3, r7, #7
 8001016:	781b      	ldrb	r3, [r3, #0]
}
 8001018:	0018      	movs	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	b002      	add	sp, #8
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40022000 	.word	0x40022000

08001024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800102c:	230f      	movs	r3, #15
 800102e:	18fb      	adds	r3, r7, r3
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <HAL_InitTick+0x88>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d02b      	beq.n	8001094 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800103c:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <HAL_InitTick+0x8c>)
 800103e:	681c      	ldr	r4, [r3, #0]
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <HAL_InitTick+0x88>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	0019      	movs	r1, r3
 8001046:	23fa      	movs	r3, #250	; 0xfa
 8001048:	0098      	lsls	r0, r3, #2
 800104a:	f7ff f85b 	bl	8000104 <__udivsi3>
 800104e:	0003      	movs	r3, r0
 8001050:	0019      	movs	r1, r3
 8001052:	0020      	movs	r0, r4
 8001054:	f7ff f856 	bl	8000104 <__udivsi3>
 8001058:	0003      	movs	r3, r0
 800105a:	0018      	movs	r0, r3
 800105c:	f000 f92f 	bl	80012be <HAL_SYSTICK_Config>
 8001060:	1e03      	subs	r3, r0, #0
 8001062:	d112      	bne.n	800108a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b03      	cmp	r3, #3
 8001068:	d80a      	bhi.n	8001080 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	2301      	movs	r3, #1
 800106e:	425b      	negs	r3, r3
 8001070:	2200      	movs	r2, #0
 8001072:	0018      	movs	r0, r3
 8001074:	f000 f8fe 	bl	8001274 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_InitTick+0x90>)
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	e00d      	b.n	800109c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001080:	230f      	movs	r3, #15
 8001082:	18fb      	adds	r3, r7, r3
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e008      	b.n	800109c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800108a:	230f      	movs	r3, #15
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	2201      	movs	r2, #1
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	e003      	b.n	800109c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001094:	230f      	movs	r3, #15
 8001096:	18fb      	adds	r3, r7, r3
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800109c:	230f      	movs	r3, #15
 800109e:	18fb      	adds	r3, r7, r3
 80010a0:	781b      	ldrb	r3, [r3, #0]
}
 80010a2:	0018      	movs	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b005      	add	sp, #20
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	2000000c 	.word	0x2000000c
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000008 	.word	0x20000008

080010b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_IncTick+0x1c>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	001a      	movs	r2, r3
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_IncTick+0x20>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	18d2      	adds	r2, r2, r3
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_IncTick+0x20>)
 80010ca:	601a      	str	r2, [r3, #0]
}
 80010cc:	46c0      	nop			; (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	2000000c 	.word	0x2000000c
 80010d8:	20000914 	.word	0x20000914

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b02      	ldr	r3, [pc, #8]	; (80010ec <HAL_GetTick+0x10>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	0018      	movs	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	20000914 	.word	0x20000914

080010f0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a06      	ldr	r2, [pc, #24]	; (8001118 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80010fe:	4013      	ands	r3, r2
 8001100:	0019      	movs	r1, r3
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	430a      	orrs	r2, r1
 8001108:	601a      	str	r2, [r3, #0]
}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	b002      	add	sp, #8
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	40010000 	.word	0x40010000
 8001118:	fffff9ff 	.word	0xfffff9ff

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	0002      	movs	r2, r0
 8001124:	1dfb      	adds	r3, r7, #7
 8001126:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b7f      	cmp	r3, #127	; 0x7f
 800112e:	d809      	bhi.n	8001144 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001130:	1dfb      	adds	r3, r7, #7
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	001a      	movs	r2, r3
 8001136:	231f      	movs	r3, #31
 8001138:	401a      	ands	r2, r3
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <__NVIC_EnableIRQ+0x30>)
 800113c:	2101      	movs	r1, #1
 800113e:	4091      	lsls	r1, r2
 8001140:	000a      	movs	r2, r1
 8001142:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b002      	add	sp, #8
 800114a:	bd80      	pop	{r7, pc}
 800114c:	e000e100 	.word	0xe000e100

08001150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	0002      	movs	r2, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b7f      	cmp	r3, #127	; 0x7f
 8001164:	d828      	bhi.n	80011b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001166:	4a2f      	ldr	r2, [pc, #188]	; (8001224 <__NVIC_SetPriority+0xd4>)
 8001168:	1dfb      	adds	r3, r7, #7
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b25b      	sxtb	r3, r3
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	33c0      	adds	r3, #192	; 0xc0
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	589b      	ldr	r3, [r3, r2]
 8001176:	1dfa      	adds	r2, r7, #7
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	0011      	movs	r1, r2
 800117c:	2203      	movs	r2, #3
 800117e:	400a      	ands	r2, r1
 8001180:	00d2      	lsls	r2, r2, #3
 8001182:	21ff      	movs	r1, #255	; 0xff
 8001184:	4091      	lsls	r1, r2
 8001186:	000a      	movs	r2, r1
 8001188:	43d2      	mvns	r2, r2
 800118a:	401a      	ands	r2, r3
 800118c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	019b      	lsls	r3, r3, #6
 8001192:	22ff      	movs	r2, #255	; 0xff
 8001194:	401a      	ands	r2, r3
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	0018      	movs	r0, r3
 800119c:	2303      	movs	r3, #3
 800119e:	4003      	ands	r3, r0
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a4:	481f      	ldr	r0, [pc, #124]	; (8001224 <__NVIC_SetPriority+0xd4>)
 80011a6:	1dfb      	adds	r3, r7, #7
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	430a      	orrs	r2, r1
 80011b0:	33c0      	adds	r3, #192	; 0xc0
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011b6:	e031      	b.n	800121c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011b8:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <__NVIC_SetPriority+0xd8>)
 80011ba:	1dfb      	adds	r3, r7, #7
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	0019      	movs	r1, r3
 80011c0:	230f      	movs	r3, #15
 80011c2:	400b      	ands	r3, r1
 80011c4:	3b08      	subs	r3, #8
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	3306      	adds	r3, #6
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	18d3      	adds	r3, r2, r3
 80011ce:	3304      	adds	r3, #4
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	1dfa      	adds	r2, r7, #7
 80011d4:	7812      	ldrb	r2, [r2, #0]
 80011d6:	0011      	movs	r1, r2
 80011d8:	2203      	movs	r2, #3
 80011da:	400a      	ands	r2, r1
 80011dc:	00d2      	lsls	r2, r2, #3
 80011de:	21ff      	movs	r1, #255	; 0xff
 80011e0:	4091      	lsls	r1, r2
 80011e2:	000a      	movs	r2, r1
 80011e4:	43d2      	mvns	r2, r2
 80011e6:	401a      	ands	r2, r3
 80011e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	019b      	lsls	r3, r3, #6
 80011ee:	22ff      	movs	r2, #255	; 0xff
 80011f0:	401a      	ands	r2, r3
 80011f2:	1dfb      	adds	r3, r7, #7
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	0018      	movs	r0, r3
 80011f8:	2303      	movs	r3, #3
 80011fa:	4003      	ands	r3, r0
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001200:	4809      	ldr	r0, [pc, #36]	; (8001228 <__NVIC_SetPriority+0xd8>)
 8001202:	1dfb      	adds	r3, r7, #7
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	001c      	movs	r4, r3
 8001208:	230f      	movs	r3, #15
 800120a:	4023      	ands	r3, r4
 800120c:	3b08      	subs	r3, #8
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	430a      	orrs	r2, r1
 8001212:	3306      	adds	r3, #6
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	18c3      	adds	r3, r0, r3
 8001218:	3304      	adds	r3, #4
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b003      	add	sp, #12
 8001222:	bd90      	pop	{r4, r7, pc}
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	1e5a      	subs	r2, r3, #1
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	045b      	lsls	r3, r3, #17
 800123c:	429a      	cmp	r2, r3
 800123e:	d301      	bcc.n	8001244 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001240:	2301      	movs	r3, #1
 8001242:	e010      	b.n	8001266 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <SysTick_Config+0x44>)
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	3a01      	subs	r2, #1
 800124a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124c:	2301      	movs	r3, #1
 800124e:	425b      	negs	r3, r3
 8001250:	2103      	movs	r1, #3
 8001252:	0018      	movs	r0, r3
 8001254:	f7ff ff7c 	bl	8001150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <SysTick_Config+0x44>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <SysTick_Config+0x44>)
 8001260:	2207      	movs	r2, #7
 8001262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001264:	2300      	movs	r3, #0
}
 8001266:	0018      	movs	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	e000e010 	.word	0xe000e010

08001274 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	210f      	movs	r1, #15
 8001280:	187b      	adds	r3, r7, r1
 8001282:	1c02      	adds	r2, r0, #0
 8001284:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	187b      	adds	r3, r7, r1
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b25b      	sxtb	r3, r3
 800128e:	0011      	movs	r1, r2
 8001290:	0018      	movs	r0, r3
 8001292:	f7ff ff5d 	bl	8001150 <__NVIC_SetPriority>
}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b004      	add	sp, #16
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	0002      	movs	r2, r0
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	0018      	movs	r0, r3
 80012b2:	f7ff ff33 	bl	800111c <__NVIC_EnableIRQ>
}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b002      	add	sp, #8
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	0018      	movs	r0, r3
 80012ca:	f7ff ffaf 	bl	800122c <SysTick_Config>
 80012ce:	0003      	movs	r3, r0
}
 80012d0:	0018      	movs	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b002      	add	sp, #8
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e050      	b.n	800138c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2225      	movs	r2, #37	; 0x25
 80012ee:	5c9b      	ldrb	r3, [r3, r2]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d008      	beq.n	8001308 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2204      	movs	r2, #4
 80012fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2224      	movs	r2, #36	; 0x24
 8001300:	2100      	movs	r1, #0
 8001302:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e041      	b.n	800138c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	210e      	movs	r1, #14
 8001314:	438a      	bics	r2, r1
 8001316:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	491c      	ldr	r1, [pc, #112]	; (8001394 <HAL_DMA_Abort+0xbc>)
 8001324:	400a      	ands	r2, r1
 8001326:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2101      	movs	r1, #1
 8001334:	438a      	bics	r2, r1
 8001336:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <HAL_DMA_Abort+0xc0>)
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	221c      	movs	r2, #28
 8001342:	4013      	ands	r3, r2
 8001344:	2201      	movs	r2, #1
 8001346:	409a      	lsls	r2, r3
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <HAL_DMA_Abort+0xc0>)
 800134a:	430a      	orrs	r2, r1
 800134c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001356:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00c      	beq.n	800137a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800136a:	490a      	ldr	r1, [pc, #40]	; (8001394 <HAL_DMA_Abort+0xbc>)
 800136c:	400a      	ands	r2, r1
 800136e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001378:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2225      	movs	r2, #37	; 0x25
 800137e:	2101      	movs	r1, #1
 8001380:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2224      	movs	r2, #36	; 0x24
 8001386:	2100      	movs	r1, #0
 8001388:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	b002      	add	sp, #8
 8001392:	bd80      	pop	{r7, pc}
 8001394:	fffffeff 	.word	0xfffffeff
 8001398:	40020000 	.word	0x40020000

0800139c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013a4:	210f      	movs	r1, #15
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2225      	movs	r2, #37	; 0x25
 80013b0:	5c9b      	ldrb	r3, [r3, r2]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d006      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2204      	movs	r2, #4
 80013bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
 80013c4:	e049      	b.n	800145a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	210e      	movs	r1, #14
 80013d2:	438a      	bics	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2101      	movs	r1, #1
 80013e2:	438a      	bics	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f0:	491d      	ldr	r1, [pc, #116]	; (8001468 <HAL_DMA_Abort_IT+0xcc>)
 80013f2:	400a      	ands	r2, r1
 80013f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <HAL_DMA_Abort_IT+0xd0>)
 80013f8:	6859      	ldr	r1, [r3, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	221c      	movs	r2, #28
 8001400:	4013      	ands	r3, r2
 8001402:	2201      	movs	r2, #1
 8001404:	409a      	lsls	r2, r3
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <HAL_DMA_Abort_IT+0xd0>)
 8001408:	430a      	orrs	r2, r1
 800140a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001414:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00c      	beq.n	8001438 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001428:	490f      	ldr	r1, [pc, #60]	; (8001468 <HAL_DMA_Abort_IT+0xcc>)
 800142a:	400a      	ands	r2, r1
 800142c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001436:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2225      	movs	r2, #37	; 0x25
 800143c:	2101      	movs	r1, #1
 800143e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2224      	movs	r2, #36	; 0x24
 8001444:	2100      	movs	r1, #0
 8001446:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144c:	2b00      	cmp	r3, #0
 800144e:	d004      	beq.n	800145a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	0010      	movs	r0, r2
 8001458:	4798      	blx	r3
    }
  }
  return status;
 800145a:	230f      	movs	r3, #15
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	781b      	ldrb	r3, [r3, #0]
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b004      	add	sp, #16
 8001466:	bd80      	pop	{r7, pc}
 8001468:	fffffeff 	.word	0xfffffeff
 800146c:	40020000 	.word	0x40020000

08001470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147e:	e147      	b.n	8001710 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4091      	lsls	r1, r2
 800148a:	000a      	movs	r2, r1
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d100      	bne.n	8001498 <HAL_GPIO_Init+0x28>
 8001496:	e138      	b.n	800170a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2203      	movs	r2, #3
 800149e:	4013      	ands	r3, r2
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d005      	beq.n	80014b0 <HAL_GPIO_Init+0x40>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2203      	movs	r2, #3
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d130      	bne.n	8001512 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	409a      	lsls	r2, r3
 80014be:	0013      	movs	r3, r2
 80014c0:	43da      	mvns	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	409a      	lsls	r2, r3
 80014d2:	0013      	movs	r3, r2
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014e6:	2201      	movs	r2, #1
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
 80014ec:	0013      	movs	r3, r2
 80014ee:	43da      	mvns	r2, r3
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	2201      	movs	r2, #1
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2203      	movs	r2, #3
 8001518:	4013      	ands	r3, r2
 800151a:	2b03      	cmp	r3, #3
 800151c:	d017      	beq.n	800154e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	2203      	movs	r2, #3
 800152a:	409a      	lsls	r2, r3
 800152c:	0013      	movs	r3, r2
 800152e:	43da      	mvns	r2, r3
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	409a      	lsls	r2, r3
 8001540:	0013      	movs	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2203      	movs	r2, #3
 8001554:	4013      	ands	r3, r2
 8001556:	2b02      	cmp	r3, #2
 8001558:	d123      	bne.n	80015a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	08da      	lsrs	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3208      	adds	r2, #8
 8001562:	0092      	lsls	r2, r2, #2
 8001564:	58d3      	ldr	r3, [r2, r3]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2207      	movs	r2, #7
 800156c:	4013      	ands	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	409a      	lsls	r2, r3
 8001574:	0013      	movs	r3, r2
 8001576:	43da      	mvns	r2, r3
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	2107      	movs	r1, #7
 8001586:	400b      	ands	r3, r1
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	409a      	lsls	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	08da      	lsrs	r2, r3, #3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3208      	adds	r2, #8
 800159c:	0092      	lsls	r2, r2, #2
 800159e:	6939      	ldr	r1, [r7, #16]
 80015a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	409a      	lsls	r2, r3
 80015b0:	0013      	movs	r3, r2
 80015b2:	43da      	mvns	r2, r3
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2203      	movs	r2, #3
 80015c0:	401a      	ands	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	409a      	lsls	r2, r3
 80015c8:	0013      	movs	r3, r2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	23c0      	movs	r3, #192	; 0xc0
 80015dc:	029b      	lsls	r3, r3, #10
 80015de:	4013      	ands	r3, r2
 80015e0:	d100      	bne.n	80015e4 <HAL_GPIO_Init+0x174>
 80015e2:	e092      	b.n	800170a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80015e4:	4a50      	ldr	r2, [pc, #320]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3318      	adds	r3, #24
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	589b      	ldr	r3, [r3, r2]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2203      	movs	r2, #3
 80015f6:	4013      	ands	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	220f      	movs	r2, #15
 80015fc:	409a      	lsls	r2, r3
 80015fe:	0013      	movs	r3, r2
 8001600:	43da      	mvns	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	23a0      	movs	r3, #160	; 0xa0
 800160c:	05db      	lsls	r3, r3, #23
 800160e:	429a      	cmp	r2, r3
 8001610:	d013      	beq.n	800163a <HAL_GPIO_Init+0x1ca>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a45      	ldr	r2, [pc, #276]	; (800172c <HAL_GPIO_Init+0x2bc>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d00d      	beq.n	8001636 <HAL_GPIO_Init+0x1c6>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a44      	ldr	r2, [pc, #272]	; (8001730 <HAL_GPIO_Init+0x2c0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d007      	beq.n	8001632 <HAL_GPIO_Init+0x1c2>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a43      	ldr	r2, [pc, #268]	; (8001734 <HAL_GPIO_Init+0x2c4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d101      	bne.n	800162e <HAL_GPIO_Init+0x1be>
 800162a:	2303      	movs	r3, #3
 800162c:	e006      	b.n	800163c <HAL_GPIO_Init+0x1cc>
 800162e:	2305      	movs	r3, #5
 8001630:	e004      	b.n	800163c <HAL_GPIO_Init+0x1cc>
 8001632:	2302      	movs	r3, #2
 8001634:	e002      	b.n	800163c <HAL_GPIO_Init+0x1cc>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_GPIO_Init+0x1cc>
 800163a:	2300      	movs	r3, #0
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	2103      	movs	r1, #3
 8001640:	400a      	ands	r2, r1
 8001642:	00d2      	lsls	r2, r2, #3
 8001644:	4093      	lsls	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800164c:	4936      	ldr	r1, [pc, #216]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	3318      	adds	r3, #24
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800165a:	4b33      	ldr	r3, [pc, #204]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	43da      	mvns	r2, r3
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	035b      	lsls	r3, r3, #13
 8001672:	4013      	ands	r3, r2
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800167e:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001684:	4b28      	ldr	r3, [pc, #160]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	43da      	mvns	r2, r3
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	039b      	lsls	r3, r3, #14
 800169c:	4013      	ands	r3, r2
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016ae:	4a1e      	ldr	r2, [pc, #120]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 80016b0:	2384      	movs	r3, #132	; 0x84
 80016b2:	58d3      	ldr	r3, [r2, r3]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	43da      	mvns	r2, r3
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	029b      	lsls	r3, r3, #10
 80016c8:	4013      	ands	r3, r2
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016d4:	4914      	ldr	r1, [pc, #80]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 80016d6:	2284      	movs	r2, #132	; 0x84
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80016dc:	4a12      	ldr	r2, [pc, #72]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	58d3      	ldr	r3, [r2, r3]
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	43da      	mvns	r2, r3
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	4013      	ands	r3, r2
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001702:	4909      	ldr	r1, [pc, #36]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 8001704:	2280      	movs	r2, #128	; 0x80
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	40da      	lsrs	r2, r3
 8001718:	1e13      	subs	r3, r2, #0
 800171a:	d000      	beq.n	800171e <HAL_GPIO_Init+0x2ae>
 800171c:	e6b0      	b.n	8001480 <HAL_GPIO_Init+0x10>
  }
}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	46c0      	nop			; (mov r8, r8)
 8001722:	46bd      	mov	sp, r7
 8001724:	b006      	add	sp, #24
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021800 	.word	0x40021800
 800172c:	50000400 	.word	0x50000400
 8001730:	50000800 	.word	0x50000800
 8001734:	50000c00 	.word	0x50000c00

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	0008      	movs	r0, r1
 8001742:	0011      	movs	r1, r2
 8001744:	1cbb      	adds	r3, r7, #2
 8001746:	1c02      	adds	r2, r0, #0
 8001748:	801a      	strh	r2, [r3, #0]
 800174a:	1c7b      	adds	r3, r7, #1
 800174c:	1c0a      	adds	r2, r1, #0
 800174e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001750:	1c7b      	adds	r3, r7, #1
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d004      	beq.n	8001762 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001758:	1cbb      	adds	r3, r7, #2
 800175a:	881a      	ldrh	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001760:	e003      	b.n	800176a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001762:	1cbb      	adds	r3, r7, #2
 8001764:	881a      	ldrh	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	629a      	str	r2, [r3, #40]	; 0x28
}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	b002      	add	sp, #8
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a19      	ldr	r2, [pc, #100]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001782:	4013      	ands	r3, r2
 8001784:	0019      	movs	r1, r3
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	430a      	orrs	r2, r1
 800178c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	429a      	cmp	r2, r3
 8001796:	d11f      	bne.n	80017d8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <HAL_PWREx_ControlVoltageScaling+0x78>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	0013      	movs	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	189b      	adds	r3, r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4912      	ldr	r1, [pc, #72]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80017a6:	0018      	movs	r0, r3
 80017a8:	f7fe fcac 	bl	8000104 <__udivsi3>
 80017ac:	0003      	movs	r3, r0
 80017ae:	3301      	adds	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017b2:	e008      	b.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	3b01      	subs	r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	e001      	b.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e009      	b.n	80017da <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	401a      	ands	r2, r3
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d0ed      	beq.n	80017b4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	0018      	movs	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	b004      	add	sp, #16
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	40007000 	.word	0x40007000
 80017e8:	fffff9ff 	.word	0xfffff9ff
 80017ec:	20000000 	.word	0x20000000
 80017f0:	000f4240 	.word	0x000f4240

080017f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <LL_RCC_GetAPB1Prescaler+0x14>)
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	23e0      	movs	r3, #224	; 0xe0
 80017fe:	01db      	lsls	r3, r3, #7
 8001800:	4013      	ands	r3, r2
}
 8001802:	0018      	movs	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40021000 	.word	0x40021000

0800180c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e2fe      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2201      	movs	r2, #1
 8001824:	4013      	ands	r3, r2
 8001826:	d100      	bne.n	800182a <HAL_RCC_OscConfig+0x1e>
 8001828:	e07c      	b.n	8001924 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182a:	4bc3      	ldr	r3, [pc, #780]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2238      	movs	r2, #56	; 0x38
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001834:	4bc0      	ldr	r3, [pc, #768]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2203      	movs	r2, #3
 800183a:	4013      	ands	r3, r2
 800183c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	2b10      	cmp	r3, #16
 8001842:	d102      	bne.n	800184a <HAL_RCC_OscConfig+0x3e>
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2b03      	cmp	r3, #3
 8001848:	d002      	beq.n	8001850 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	2b08      	cmp	r3, #8
 800184e:	d10b      	bne.n	8001868 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	4bb9      	ldr	r3, [pc, #740]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	029b      	lsls	r3, r3, #10
 8001858:	4013      	ands	r3, r2
 800185a:	d062      	beq.n	8001922 <HAL_RCC_OscConfig+0x116>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d15e      	bne.n	8001922 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e2d9      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	025b      	lsls	r3, r3, #9
 8001870:	429a      	cmp	r2, r3
 8001872:	d107      	bne.n	8001884 <HAL_RCC_OscConfig+0x78>
 8001874:	4bb0      	ldr	r3, [pc, #704]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4baf      	ldr	r3, [pc, #700]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 800187a:	2180      	movs	r1, #128	; 0x80
 800187c:	0249      	lsls	r1, r1, #9
 800187e:	430a      	orrs	r2, r1
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e020      	b.n	80018c6 <HAL_RCC_OscConfig+0xba>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	23a0      	movs	r3, #160	; 0xa0
 800188a:	02db      	lsls	r3, r3, #11
 800188c:	429a      	cmp	r2, r3
 800188e:	d10e      	bne.n	80018ae <HAL_RCC_OscConfig+0xa2>
 8001890:	4ba9      	ldr	r3, [pc, #676]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4ba8      	ldr	r3, [pc, #672]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	02c9      	lsls	r1, r1, #11
 800189a:	430a      	orrs	r2, r1
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	4ba6      	ldr	r3, [pc, #664]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4ba5      	ldr	r3, [pc, #660]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 80018a4:	2180      	movs	r1, #128	; 0x80
 80018a6:	0249      	lsls	r1, r1, #9
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	e00b      	b.n	80018c6 <HAL_RCC_OscConfig+0xba>
 80018ae:	4ba2      	ldr	r3, [pc, #648]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4ba1      	ldr	r3, [pc, #644]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 80018b4:	49a1      	ldr	r1, [pc, #644]	; (8001b3c <HAL_RCC_OscConfig+0x330>)
 80018b6:	400a      	ands	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	4b9f      	ldr	r3, [pc, #636]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	4b9e      	ldr	r3, [pc, #632]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 80018c0:	499f      	ldr	r1, [pc, #636]	; (8001b40 <HAL_RCC_OscConfig+0x334>)
 80018c2:	400a      	ands	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d014      	beq.n	80018f8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ce:	f7ff fc05 	bl	80010dc <HAL_GetTick>
 80018d2:	0003      	movs	r3, r0
 80018d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff fc00 	bl	80010dc <HAL_GetTick>
 80018dc:	0002      	movs	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	; 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e298      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ea:	4b93      	ldr	r3, [pc, #588]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	029b      	lsls	r3, r3, #10
 80018f2:	4013      	ands	r3, r2
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0xcc>
 80018f6:	e015      	b.n	8001924 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fbf0 	bl	80010dc <HAL_GetTick>
 80018fc:	0003      	movs	r3, r0
 80018fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001902:	f7ff fbeb 	bl	80010dc <HAL_GetTick>
 8001906:	0002      	movs	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b64      	cmp	r3, #100	; 0x64
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e283      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001914:	4b88      	ldr	r3, [pc, #544]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	029b      	lsls	r3, r3, #10
 800191c:	4013      	ands	r3, r2
 800191e:	d1f0      	bne.n	8001902 <HAL_RCC_OscConfig+0xf6>
 8001920:	e000      	b.n	8001924 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001922:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2202      	movs	r2, #2
 800192a:	4013      	ands	r3, r2
 800192c:	d100      	bne.n	8001930 <HAL_RCC_OscConfig+0x124>
 800192e:	e099      	b.n	8001a64 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001930:	4b81      	ldr	r3, [pc, #516]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2238      	movs	r2, #56	; 0x38
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800193a:	4b7f      	ldr	r3, [pc, #508]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	2203      	movs	r2, #3
 8001940:	4013      	ands	r3, r2
 8001942:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b10      	cmp	r3, #16
 8001948:	d102      	bne.n	8001950 <HAL_RCC_OscConfig+0x144>
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d002      	beq.n	8001956 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d135      	bne.n	80019c2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001956:	4b78      	ldr	r3, [pc, #480]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4013      	ands	r3, r2
 8001960:	d005      	beq.n	800196e <HAL_RCC_OscConfig+0x162>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e256      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	4b72      	ldr	r3, [pc, #456]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4a74      	ldr	r2, [pc, #464]	; (8001b44 <HAL_RCC_OscConfig+0x338>)
 8001974:	4013      	ands	r3, r2
 8001976:	0019      	movs	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	4b6e      	ldr	r3, [pc, #440]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001980:	430a      	orrs	r2, r1
 8001982:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d112      	bne.n	80019b0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800198a:	4b6b      	ldr	r3, [pc, #428]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a6e      	ldr	r2, [pc, #440]	; (8001b48 <HAL_RCC_OscConfig+0x33c>)
 8001990:	4013      	ands	r3, r2
 8001992:	0019      	movs	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	4b67      	ldr	r3, [pc, #412]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800199e:	4b66      	ldr	r3, [pc, #408]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	0adb      	lsrs	r3, r3, #11
 80019a4:	2207      	movs	r2, #7
 80019a6:	4013      	ands	r3, r2
 80019a8:	4a68      	ldr	r2, [pc, #416]	; (8001b4c <HAL_RCC_OscConfig+0x340>)
 80019aa:	40da      	lsrs	r2, r3
 80019ac:	4b68      	ldr	r3, [pc, #416]	; (8001b50 <HAL_RCC_OscConfig+0x344>)
 80019ae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019b0:	4b68      	ldr	r3, [pc, #416]	; (8001b54 <HAL_RCC_OscConfig+0x348>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	0018      	movs	r0, r3
 80019b6:	f7ff fb35 	bl	8001024 <HAL_InitTick>
 80019ba:	1e03      	subs	r3, r0, #0
 80019bc:	d051      	beq.n	8001a62 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e22c      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d030      	beq.n	8001a2c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019ca:	4b5b      	ldr	r3, [pc, #364]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a5e      	ldr	r2, [pc, #376]	; (8001b48 <HAL_RCC_OscConfig+0x33c>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	0019      	movs	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	4b57      	ldr	r3, [pc, #348]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 80019da:	430a      	orrs	r2, r1
 80019dc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80019de:	4b56      	ldr	r3, [pc, #344]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	4b55      	ldr	r3, [pc, #340]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 80019e4:	2180      	movs	r1, #128	; 0x80
 80019e6:	0049      	lsls	r1, r1, #1
 80019e8:	430a      	orrs	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff fb76 	bl	80010dc <HAL_GetTick>
 80019f0:	0003      	movs	r3, r0
 80019f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff fb71 	bl	80010dc <HAL_GetTick>
 80019fa:	0002      	movs	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e209      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a08:	4b4b      	ldr	r3, [pc, #300]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4013      	ands	r3, r2
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4b48      	ldr	r3, [pc, #288]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	4a4a      	ldr	r2, [pc, #296]	; (8001b44 <HAL_RCC_OscConfig+0x338>)
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	021a      	lsls	r2, r3, #8
 8001a24:	4b44      	ldr	r3, [pc, #272]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001a26:	430a      	orrs	r2, r1
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	e01b      	b.n	8001a64 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001a2c:	4b42      	ldr	r3, [pc, #264]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001a32:	4949      	ldr	r1, [pc, #292]	; (8001b58 <HAL_RCC_OscConfig+0x34c>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff fb50 	bl	80010dc <HAL_GetTick>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a42:	f7ff fb4b 	bl	80010dc <HAL_GetTick>
 8001a46:	0002      	movs	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e1e3      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a54:	4b38      	ldr	r3, [pc, #224]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d1f0      	bne.n	8001a42 <HAL_RCC_OscConfig+0x236>
 8001a60:	e000      	b.n	8001a64 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a62:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2208      	movs	r2, #8
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d047      	beq.n	8001afe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a6e:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2238      	movs	r2, #56	; 0x38
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b18      	cmp	r3, #24
 8001a78:	d10a      	bne.n	8001a90 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a7a:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7e:	2202      	movs	r2, #2
 8001a80:	4013      	ands	r3, r2
 8001a82:	d03c      	beq.n	8001afe <HAL_RCC_OscConfig+0x2f2>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d138      	bne.n	8001afe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e1c5      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d019      	beq.n	8001acc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a98:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001a9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a9c:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fb1a 	bl	80010dc <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aae:	f7ff fb15 	bl	80010dc <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e1ad      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d0f1      	beq.n	8001aae <HAL_RCC_OscConfig+0x2a2>
 8001aca:	e018      	b.n	8001afe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001ace:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fb00 	bl	80010dc <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae2:	f7ff fafb 	bl	80010dc <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e193      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001af4:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af8:	2202      	movs	r2, #2
 8001afa:	4013      	ands	r3, r2
 8001afc:	d1f1      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2204      	movs	r2, #4
 8001b04:	4013      	ands	r3, r2
 8001b06:	d100      	bne.n	8001b0a <HAL_RCC_OscConfig+0x2fe>
 8001b08:	e0c6      	b.n	8001c98 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b0a:	231f      	movs	r3, #31
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2238      	movs	r2, #56	; 0x38
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b20      	cmp	r3, #32
 8001b1c:	d11e      	bne.n	8001b5c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_RCC_OscConfig+0x32c>)
 8001b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b22:	2202      	movs	r2, #2
 8001b24:	4013      	ands	r3, r2
 8001b26:	d100      	bne.n	8001b2a <HAL_RCC_OscConfig+0x31e>
 8001b28:	e0b6      	b.n	8001c98 <HAL_RCC_OscConfig+0x48c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d000      	beq.n	8001b34 <HAL_RCC_OscConfig+0x328>
 8001b32:	e0b1      	b.n	8001c98 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e171      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	fffeffff 	.word	0xfffeffff
 8001b40:	fffbffff 	.word	0xfffbffff
 8001b44:	ffff80ff 	.word	0xffff80ff
 8001b48:	ffffc7ff 	.word	0xffffc7ff
 8001b4c:	00f42400 	.word	0x00f42400
 8001b50:	20000000 	.word	0x20000000
 8001b54:	20000008 	.word	0x20000008
 8001b58:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b5c:	4bb1      	ldr	r3, [pc, #708]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	055b      	lsls	r3, r3, #21
 8001b64:	4013      	ands	r3, r2
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_OscConfig+0x360>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <HAL_RCC_OscConfig+0x362>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d011      	beq.n	8001b96 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	4bac      	ldr	r3, [pc, #688]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001b74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b76:	4bab      	ldr	r3, [pc, #684]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001b78:	2180      	movs	r1, #128	; 0x80
 8001b7a:	0549      	lsls	r1, r1, #21
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b80:	4ba8      	ldr	r3, [pc, #672]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	055b      	lsls	r3, r3, #21
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b8e:	231f      	movs	r3, #31
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	2201      	movs	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b96:	4ba4      	ldr	r3, [pc, #656]	; (8001e28 <HAL_RCC_OscConfig+0x61c>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d11a      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ba2:	4ba1      	ldr	r3, [pc, #644]	; (8001e28 <HAL_RCC_OscConfig+0x61c>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4ba0      	ldr	r3, [pc, #640]	; (8001e28 <HAL_RCC_OscConfig+0x61c>)
 8001ba8:	2180      	movs	r1, #128	; 0x80
 8001baa:	0049      	lsls	r1, r1, #1
 8001bac:	430a      	orrs	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fa94 	bl	80010dc <HAL_GetTick>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bba:	f7ff fa8f 	bl	80010dc <HAL_GetTick>
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e127      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bcc:	4b96      	ldr	r3, [pc, #600]	; (8001e28 <HAL_RCC_OscConfig+0x61c>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d106      	bne.n	8001bee <HAL_RCC_OscConfig+0x3e2>
 8001be0:	4b90      	ldr	r3, [pc, #576]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001be2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001be4:	4b8f      	ldr	r3, [pc, #572]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	430a      	orrs	r2, r1
 8001bea:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bec:	e01c      	b.n	8001c28 <HAL_RCC_OscConfig+0x41c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b05      	cmp	r3, #5
 8001bf4:	d10c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x404>
 8001bf6:	4b8b      	ldr	r3, [pc, #556]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001bf8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bfa:	4b8a      	ldr	r3, [pc, #552]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001bfc:	2104      	movs	r1, #4
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c02:	4b88      	ldr	r3, [pc, #544]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001c04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c06:	4b87      	ldr	r3, [pc, #540]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001c08:	2101      	movs	r1, #1
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c0e:	e00b      	b.n	8001c28 <HAL_RCC_OscConfig+0x41c>
 8001c10:	4b84      	ldr	r3, [pc, #528]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001c12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c14:	4b83      	ldr	r3, [pc, #524]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001c16:	2101      	movs	r1, #1
 8001c18:	438a      	bics	r2, r1
 8001c1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c1c:	4b81      	ldr	r3, [pc, #516]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001c1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c20:	4b80      	ldr	r3, [pc, #512]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001c22:	2104      	movs	r1, #4
 8001c24:	438a      	bics	r2, r1
 8001c26:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d014      	beq.n	8001c5a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff fa54 	bl	80010dc <HAL_GetTick>
 8001c34:	0003      	movs	r3, r0
 8001c36:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c38:	e009      	b.n	8001c4e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3a:	f7ff fa4f 	bl	80010dc <HAL_GetTick>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	4a79      	ldr	r2, [pc, #484]	; (8001e2c <HAL_RCC_OscConfig+0x620>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e0e6      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c4e:	4b75      	ldr	r3, [pc, #468]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c52:	2202      	movs	r2, #2
 8001c54:	4013      	ands	r3, r2
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0x42e>
 8001c58:	e013      	b.n	8001c82 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fa3f 	bl	80010dc <HAL_GetTick>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c62:	e009      	b.n	8001c78 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c64:	f7ff fa3a 	bl	80010dc <HAL_GetTick>
 8001c68:	0002      	movs	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	4a6f      	ldr	r2, [pc, #444]	; (8001e2c <HAL_RCC_OscConfig+0x620>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e0d1      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c78:	4b6a      	ldr	r3, [pc, #424]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c82:	231f      	movs	r3, #31
 8001c84:	18fb      	adds	r3, r7, r3
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d105      	bne.n	8001c98 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c8c:	4b65      	ldr	r3, [pc, #404]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c90:	4b64      	ldr	r3, [pc, #400]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001c92:	4967      	ldr	r1, [pc, #412]	; (8001e30 <HAL_RCC_OscConfig+0x624>)
 8001c94:	400a      	ands	r2, r1
 8001c96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d100      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x496>
 8001ca0:	e0bb      	b.n	8001e1a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca2:	4b60      	ldr	r3, [pc, #384]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2238      	movs	r2, #56	; 0x38
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b10      	cmp	r3, #16
 8001cac:	d100      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x4a4>
 8001cae:	e07b      	b.n	8001da8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d156      	bne.n	8001d66 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb8:	4b5a      	ldr	r3, [pc, #360]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b59      	ldr	r3, [pc, #356]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001cbe:	495d      	ldr	r1, [pc, #372]	; (8001e34 <HAL_RCC_OscConfig+0x628>)
 8001cc0:	400a      	ands	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fa0a 	bl	80010dc <HAL_GetTick>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cce:	f7ff fa05 	bl	80010dc <HAL_GetTick>
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e09d      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce0:	4b50      	ldr	r3, [pc, #320]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	049b      	lsls	r3, r3, #18
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d1f0      	bne.n	8001cce <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cec:	4b4d      	ldr	r3, [pc, #308]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	4a51      	ldr	r2, [pc, #324]	; (8001e38 <HAL_RCC_OscConfig+0x62c>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1a      	ldr	r2, [r3, #32]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d20:	4b40      	ldr	r3, [pc, #256]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b3f      	ldr	r3, [pc, #252]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	0449      	lsls	r1, r1, #17
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001d2e:	4b3d      	ldr	r3, [pc, #244]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	4b3c      	ldr	r3, [pc, #240]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001d34:	2180      	movs	r1, #128	; 0x80
 8001d36:	0549      	lsls	r1, r1, #21
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f9ce 	bl	80010dc <HAL_GetTick>
 8001d40:	0003      	movs	r3, r0
 8001d42:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d46:	f7ff f9c9 	bl	80010dc <HAL_GetTick>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e061      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d58:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	049b      	lsls	r3, r3, #18
 8001d60:	4013      	ands	r3, r2
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x53a>
 8001d64:	e059      	b.n	8001e1a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d66:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001d6c:	4931      	ldr	r1, [pc, #196]	; (8001e34 <HAL_RCC_OscConfig+0x628>)
 8001d6e:	400a      	ands	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7ff f9b3 	bl	80010dc <HAL_GetTick>
 8001d76:	0003      	movs	r3, r0
 8001d78:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7c:	f7ff f9ae 	bl	80010dc <HAL_GetTick>
 8001d80:	0002      	movs	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e046      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8e:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	049b      	lsls	r3, r3, #18
 8001d96:	4013      	ands	r3, r2
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001d9a:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001da0:	4926      	ldr	r1, [pc, #152]	; (8001e3c <HAL_RCC_OscConfig+0x630>)
 8001da2:	400a      	ands	r2, r1
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	e038      	b.n	8001e1a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e033      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_RCC_OscConfig+0x618>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d126      	bne.n	8001e16 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2270      	movs	r2, #112	; 0x70
 8001dcc:	401a      	ands	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d11f      	bne.n	8001e16 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	23fe      	movs	r3, #254	; 0xfe
 8001dda:	01db      	lsls	r3, r3, #7
 8001ddc:	401a      	ands	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d116      	bne.n	8001e16 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	23f8      	movs	r3, #248	; 0xf8
 8001dec:	039b      	lsls	r3, r3, #14
 8001dee:	401a      	ands	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d10e      	bne.n	8001e16 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	23e0      	movs	r3, #224	; 0xe0
 8001dfc:	051b      	lsls	r3, r3, #20
 8001dfe:	401a      	ands	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	0f5b      	lsrs	r3, r3, #29
 8001e0c:	075a      	lsls	r2, r3, #29
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d001      	beq.n	8001e1a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b008      	add	sp, #32
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	00001388 	.word	0x00001388
 8001e30:	efffffff 	.word	0xefffffff
 8001e34:	feffffff 	.word	0xfeffffff
 8001e38:	11c1808c 	.word	0x11c1808c
 8001e3c:	eefefffc 	.word	0xeefefffc

08001e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0e9      	b.n	8002028 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e54:	4b76      	ldr	r3, [pc, #472]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2207      	movs	r2, #7
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d91e      	bls.n	8001ea0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e62:	4b73      	ldr	r3, [pc, #460]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2207      	movs	r2, #7
 8001e68:	4393      	bics	r3, r2
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	4b70      	ldr	r3, [pc, #448]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e74:	f7ff f932 	bl	80010dc <HAL_GetTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e7c:	e009      	b.n	8001e92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7e:	f7ff f92d 	bl	80010dc <HAL_GetTick>
 8001e82:	0002      	movs	r2, r0
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	4a6a      	ldr	r2, [pc, #424]	; (8002034 <HAL_RCC_ClockConfig+0x1f4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e0ca      	b.n	8002028 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e92:	4b67      	ldr	r3, [pc, #412]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2207      	movs	r2, #7
 8001e98:	4013      	ands	r3, r2
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d1ee      	bne.n	8001e7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d015      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2204      	movs	r2, #4
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d006      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001eb4:	4b60      	ldr	r3, [pc, #384]	; (8002038 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	4b5f      	ldr	r3, [pc, #380]	; (8002038 <HAL_RCC_ClockConfig+0x1f8>)
 8001eba:	21e0      	movs	r1, #224	; 0xe0
 8001ebc:	01c9      	lsls	r1, r1, #7
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec2:	4b5d      	ldr	r3, [pc, #372]	; (8002038 <HAL_RCC_ClockConfig+0x1f8>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	4a5d      	ldr	r2, [pc, #372]	; (800203c <HAL_RCC_ClockConfig+0x1fc>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	0019      	movs	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	4b59      	ldr	r3, [pc, #356]	; (8002038 <HAL_RCC_ClockConfig+0x1f8>)
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2201      	movs	r2, #1
 8001edc:	4013      	ands	r3, r2
 8001ede:	d057      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d107      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee8:	4b53      	ldr	r3, [pc, #332]	; (8002038 <HAL_RCC_ClockConfig+0x1f8>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	029b      	lsls	r3, r3, #10
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d12b      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e097      	b.n	8002028 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d107      	bne.n	8001f10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f00:	4b4d      	ldr	r3, [pc, #308]	; (8002038 <HAL_RCC_ClockConfig+0x1f8>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	049b      	lsls	r3, r3, #18
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d11f      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e08b      	b.n	8002028 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d107      	bne.n	8001f28 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f18:	4b47      	ldr	r3, [pc, #284]	; (8002038 <HAL_RCC_ClockConfig+0x1f8>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4013      	ands	r3, r2
 8001f22:	d113      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e07f      	b.n	8002028 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f30:	4b41      	ldr	r3, [pc, #260]	; (8002038 <HAL_RCC_ClockConfig+0x1f8>)
 8001f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f34:	2202      	movs	r2, #2
 8001f36:	4013      	ands	r3, r2
 8001f38:	d108      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e074      	b.n	8002028 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f3e:	4b3e      	ldr	r3, [pc, #248]	; (8002038 <HAL_RCC_ClockConfig+0x1f8>)
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	2202      	movs	r2, #2
 8001f44:	4013      	ands	r3, r2
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e06d      	b.n	8002028 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f4c:	4b3a      	ldr	r3, [pc, #232]	; (8002038 <HAL_RCC_ClockConfig+0x1f8>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2207      	movs	r2, #7
 8001f52:	4393      	bics	r3, r2
 8001f54:	0019      	movs	r1, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	4b37      	ldr	r3, [pc, #220]	; (8002038 <HAL_RCC_ClockConfig+0x1f8>)
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f60:	f7ff f8bc 	bl	80010dc <HAL_GetTick>
 8001f64:	0003      	movs	r3, r0
 8001f66:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f68:	e009      	b.n	8001f7e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f6a:	f7ff f8b7 	bl	80010dc <HAL_GetTick>
 8001f6e:	0002      	movs	r2, r0
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	4a2f      	ldr	r2, [pc, #188]	; (8002034 <HAL_RCC_ClockConfig+0x1f4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e054      	b.n	8002028 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	4b2e      	ldr	r3, [pc, #184]	; (8002038 <HAL_RCC_ClockConfig+0x1f8>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2238      	movs	r2, #56	; 0x38
 8001f84:	401a      	ands	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d1ec      	bne.n	8001f6a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2207      	movs	r2, #7
 8001f96:	4013      	ands	r3, r2
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d21e      	bcs.n	8001fdc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2207      	movs	r2, #7
 8001fa4:	4393      	bics	r3, r2
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	4b21      	ldr	r3, [pc, #132]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fb0:	f7ff f894 	bl	80010dc <HAL_GetTick>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fb8:	e009      	b.n	8001fce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fba:	f7ff f88f 	bl	80010dc <HAL_GetTick>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	4a1b      	ldr	r2, [pc, #108]	; (8002034 <HAL_RCC_ClockConfig+0x1f4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e02c      	b.n	8002028 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fce:	4b18      	ldr	r3, [pc, #96]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2207      	movs	r2, #7
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d1ee      	bne.n	8001fba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d009      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe6:	4b14      	ldr	r3, [pc, #80]	; (8002038 <HAL_RCC_ClockConfig+0x1f8>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	4a15      	ldr	r2, [pc, #84]	; (8002040 <HAL_RCC_ClockConfig+0x200>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	0019      	movs	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	4b10      	ldr	r3, [pc, #64]	; (8002038 <HAL_RCC_ClockConfig+0x1f8>)
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ffa:	f000 f829 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 8001ffe:	0001      	movs	r1, r0
 8002000:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <HAL_RCC_ClockConfig+0x1f8>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	220f      	movs	r2, #15
 8002008:	401a      	ands	r2, r3
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <HAL_RCC_ClockConfig+0x204>)
 800200c:	0092      	lsls	r2, r2, #2
 800200e:	58d3      	ldr	r3, [r2, r3]
 8002010:	221f      	movs	r2, #31
 8002012:	4013      	ands	r3, r2
 8002014:	000a      	movs	r2, r1
 8002016:	40da      	lsrs	r2, r3
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_RCC_ClockConfig+0x208>)
 800201a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_ClockConfig+0x20c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	0018      	movs	r0, r3
 8002022:	f7fe ffff 	bl	8001024 <HAL_InitTick>
 8002026:	0003      	movs	r3, r0
}
 8002028:	0018      	movs	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	b004      	add	sp, #16
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40022000 	.word	0x40022000
 8002034:	00001388 	.word	0x00001388
 8002038:	40021000 	.word	0x40021000
 800203c:	fffff0ff 	.word	0xfffff0ff
 8002040:	ffff8fff 	.word	0xffff8fff
 8002044:	080052dc 	.word	0x080052dc
 8002048:	20000000 	.word	0x20000000
 800204c:	20000008 	.word	0x20000008

08002050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002056:	4b3c      	ldr	r3, [pc, #240]	; (8002148 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2238      	movs	r2, #56	; 0x38
 800205c:	4013      	ands	r3, r2
 800205e:	d10f      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002060:	4b39      	ldr	r3, [pc, #228]	; (8002148 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	0adb      	lsrs	r3, r3, #11
 8002066:	2207      	movs	r2, #7
 8002068:	4013      	ands	r3, r2
 800206a:	2201      	movs	r2, #1
 800206c:	409a      	lsls	r2, r3
 800206e:	0013      	movs	r3, r2
 8002070:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002072:	6839      	ldr	r1, [r7, #0]
 8002074:	4835      	ldr	r0, [pc, #212]	; (800214c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002076:	f7fe f845 	bl	8000104 <__udivsi3>
 800207a:	0003      	movs	r3, r0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	e05d      	b.n	800213c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002080:	4b31      	ldr	r3, [pc, #196]	; (8002148 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2238      	movs	r2, #56	; 0x38
 8002086:	4013      	ands	r3, r2
 8002088:	2b08      	cmp	r3, #8
 800208a:	d102      	bne.n	8002092 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800208c:	4b30      	ldr	r3, [pc, #192]	; (8002150 <HAL_RCC_GetSysClockFreq+0x100>)
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	e054      	b.n	800213c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002092:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2238      	movs	r2, #56	; 0x38
 8002098:	4013      	ands	r3, r2
 800209a:	2b10      	cmp	r3, #16
 800209c:	d138      	bne.n	8002110 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800209e:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2203      	movs	r2, #3
 80020a4:	4013      	ands	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a8:	4b27      	ldr	r3, [pc, #156]	; (8002148 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	2207      	movs	r2, #7
 80020b0:	4013      	ands	r3, r2
 80020b2:	3301      	adds	r3, #1
 80020b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d10d      	bne.n	80020d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	4824      	ldr	r0, [pc, #144]	; (8002150 <HAL_RCC_GetSysClockFreq+0x100>)
 80020c0:	f7fe f820 	bl	8000104 <__udivsi3>
 80020c4:	0003      	movs	r3, r0
 80020c6:	0019      	movs	r1, r3
 80020c8:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	0a1b      	lsrs	r3, r3, #8
 80020ce:	227f      	movs	r2, #127	; 0x7f
 80020d0:	4013      	ands	r3, r2
 80020d2:	434b      	muls	r3, r1
 80020d4:	617b      	str	r3, [r7, #20]
        break;
 80020d6:	e00d      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	481c      	ldr	r0, [pc, #112]	; (800214c <HAL_RCC_GetSysClockFreq+0xfc>)
 80020dc:	f7fe f812 	bl	8000104 <__udivsi3>
 80020e0:	0003      	movs	r3, r0
 80020e2:	0019      	movs	r1, r3
 80020e4:	4b18      	ldr	r3, [pc, #96]	; (8002148 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0a1b      	lsrs	r3, r3, #8
 80020ea:	227f      	movs	r2, #127	; 0x7f
 80020ec:	4013      	ands	r3, r2
 80020ee:	434b      	muls	r3, r1
 80020f0:	617b      	str	r3, [r7, #20]
        break;
 80020f2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	0f5b      	lsrs	r3, r3, #29
 80020fa:	2207      	movs	r2, #7
 80020fc:	4013      	ands	r3, r2
 80020fe:	3301      	adds	r3, #1
 8002100:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	6978      	ldr	r0, [r7, #20]
 8002106:	f7fd fffd 	bl	8000104 <__udivsi3>
 800210a:	0003      	movs	r3, r0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	e015      	b.n	800213c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002110:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2238      	movs	r2, #56	; 0x38
 8002116:	4013      	ands	r3, r2
 8002118:	2b20      	cmp	r3, #32
 800211a:	d103      	bne.n	8002124 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	e00b      	b.n	800213c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2238      	movs	r2, #56	; 0x38
 800212a:	4013      	ands	r3, r2
 800212c:	2b18      	cmp	r3, #24
 800212e:	d103      	bne.n	8002138 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002130:	23fa      	movs	r3, #250	; 0xfa
 8002132:	01db      	lsls	r3, r3, #7
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	e001      	b.n	800213c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800213c:	693b      	ldr	r3, [r7, #16]
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b006      	add	sp, #24
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	40021000 	.word	0x40021000
 800214c:	00f42400 	.word	0x00f42400
 8002150:	007a1200 	.word	0x007a1200

08002154 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002158:	4b02      	ldr	r3, [pc, #8]	; (8002164 <HAL_RCC_GetHCLKFreq+0x10>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	0018      	movs	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	20000000 	.word	0x20000000

08002168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002168:	b5b0      	push	{r4, r5, r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800216c:	f7ff fff2 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 8002170:	0004      	movs	r4, r0
 8002172:	f7ff fb3f 	bl	80017f4 <LL_RCC_GetAPB1Prescaler>
 8002176:	0003      	movs	r3, r0
 8002178:	0b1a      	lsrs	r2, r3, #12
 800217a:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_RCC_GetPCLK1Freq+0x28>)
 800217c:	0092      	lsls	r2, r2, #2
 800217e:	58d3      	ldr	r3, [r2, r3]
 8002180:	221f      	movs	r2, #31
 8002182:	4013      	ands	r3, r2
 8002184:	40dc      	lsrs	r4, r3
 8002186:	0023      	movs	r3, r4
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	bdb0      	pop	{r4, r5, r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	0800531c 	.word	0x0800531c

08002194 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800219c:	2313      	movs	r3, #19
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021a4:	2312      	movs	r3, #18
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	029b      	lsls	r3, r3, #10
 80021b4:	4013      	ands	r3, r2
 80021b6:	d100      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x26>
 80021b8:	e0a3      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ba:	2011      	movs	r0, #17
 80021bc:	183b      	adds	r3, r7, r0
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c2:	4bc3      	ldr	r3, [pc, #780]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	055b      	lsls	r3, r3, #21
 80021ca:	4013      	ands	r3, r2
 80021cc:	d110      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ce:	4bc0      	ldr	r3, [pc, #768]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021d2:	4bbf      	ldr	r3, [pc, #764]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d4:	2180      	movs	r1, #128	; 0x80
 80021d6:	0549      	lsls	r1, r1, #21
 80021d8:	430a      	orrs	r2, r1
 80021da:	63da      	str	r2, [r3, #60]	; 0x3c
 80021dc:	4bbc      	ldr	r3, [pc, #752]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	055b      	lsls	r3, r3, #21
 80021e4:	4013      	ands	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ea:	183b      	adds	r3, r7, r0
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021f0:	4bb8      	ldr	r3, [pc, #736]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4bb7      	ldr	r3, [pc, #732]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021f6:	2180      	movs	r1, #128	; 0x80
 80021f8:	0049      	lsls	r1, r1, #1
 80021fa:	430a      	orrs	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021fe:	f7fe ff6d 	bl	80010dc <HAL_GetTick>
 8002202:	0003      	movs	r3, r0
 8002204:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002206:	e00b      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002208:	f7fe ff68 	bl	80010dc <HAL_GetTick>
 800220c:	0002      	movs	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d904      	bls.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002216:	2313      	movs	r3, #19
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	2203      	movs	r2, #3
 800221c:	701a      	strb	r2, [r3, #0]
        break;
 800221e:	e005      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002220:	4bac      	ldr	r3, [pc, #688]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4013      	ands	r3, r2
 800222a:	d0ed      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800222c:	2313      	movs	r3, #19
 800222e:	18fb      	adds	r3, r7, r3
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d154      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002236:	4ba6      	ldr	r3, [pc, #664]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002238:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800223a:	23c0      	movs	r3, #192	; 0xc0
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4013      	ands	r3, r2
 8002240:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d019      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	429a      	cmp	r2, r3
 8002250:	d014      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002252:	4b9f      	ldr	r3, [pc, #636]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	4aa0      	ldr	r2, [pc, #640]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002258:	4013      	ands	r3, r2
 800225a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800225c:	4b9c      	ldr	r3, [pc, #624]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800225e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002260:	4b9b      	ldr	r3, [pc, #620]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002262:	2180      	movs	r1, #128	; 0x80
 8002264:	0249      	lsls	r1, r1, #9
 8002266:	430a      	orrs	r2, r1
 8002268:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800226a:	4b99      	ldr	r3, [pc, #612]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800226c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800226e:	4b98      	ldr	r3, [pc, #608]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002270:	499a      	ldr	r1, [pc, #616]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002272:	400a      	ands	r2, r1
 8002274:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002276:	4b96      	ldr	r3, [pc, #600]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2201      	movs	r2, #1
 8002280:	4013      	ands	r3, r2
 8002282:	d016      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7fe ff2a 	bl	80010dc <HAL_GetTick>
 8002288:	0003      	movs	r3, r0
 800228a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800228c:	e00c      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228e:	f7fe ff25 	bl	80010dc <HAL_GetTick>
 8002292:	0002      	movs	r2, r0
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	4a91      	ldr	r2, [pc, #580]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d904      	bls.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800229e:	2313      	movs	r3, #19
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	2203      	movs	r2, #3
 80022a4:	701a      	strb	r2, [r3, #0]
            break;
 80022a6:	e004      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022a8:	4b89      	ldr	r3, [pc, #548]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ac:	2202      	movs	r2, #2
 80022ae:	4013      	ands	r3, r2
 80022b0:	d0ed      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80022b2:	2313      	movs	r3, #19
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10a      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022bc:	4b84      	ldr	r3, [pc, #528]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c0:	4a85      	ldr	r2, [pc, #532]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	0019      	movs	r1, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ca:	4b81      	ldr	r3, [pc, #516]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022cc:	430a      	orrs	r2, r1
 80022ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80022d0:	e00c      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022d2:	2312      	movs	r3, #18
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	2213      	movs	r2, #19
 80022d8:	18ba      	adds	r2, r7, r2
 80022da:	7812      	ldrb	r2, [r2, #0]
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	e005      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e0:	2312      	movs	r3, #18
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	2213      	movs	r2, #19
 80022e6:	18ba      	adds	r2, r7, r2
 80022e8:	7812      	ldrb	r2, [r2, #0]
 80022ea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022ec:	2311      	movs	r3, #17
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d105      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f6:	4b76      	ldr	r3, [pc, #472]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022fa:	4b75      	ldr	r3, [pc, #468]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022fc:	4979      	ldr	r1, [pc, #484]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80022fe:	400a      	ands	r2, r1
 8002300:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2201      	movs	r2, #1
 8002308:	4013      	ands	r3, r2
 800230a:	d009      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800230c:	4b70      	ldr	r3, [pc, #448]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800230e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002310:	2203      	movs	r2, #3
 8002312:	4393      	bics	r3, r2
 8002314:	0019      	movs	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	4b6d      	ldr	r3, [pc, #436]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800231c:	430a      	orrs	r2, r1
 800231e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2202      	movs	r2, #2
 8002326:	4013      	ands	r3, r2
 8002328:	d009      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800232a:	4b69      	ldr	r3, [pc, #420]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232e:	220c      	movs	r2, #12
 8002330:	4393      	bics	r3, r2
 8002332:	0019      	movs	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	4b65      	ldr	r3, [pc, #404]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800233a:	430a      	orrs	r2, r1
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2210      	movs	r2, #16
 8002344:	4013      	ands	r3, r2
 8002346:	d009      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002348:	4b61      	ldr	r3, [pc, #388]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800234a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234c:	4a66      	ldr	r2, [pc, #408]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800234e:	4013      	ands	r3, r2
 8002350:	0019      	movs	r1, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	4b5e      	ldr	r3, [pc, #376]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002358:	430a      	orrs	r2, r1
 800235a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4013      	ands	r3, r2
 8002366:	d009      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002368:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800236a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236c:	4a5f      	ldr	r2, [pc, #380]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800236e:	4013      	ands	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699a      	ldr	r2, [r3, #24]
 8002376:	4b56      	ldr	r3, [pc, #344]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002378:	430a      	orrs	r2, r1
 800237a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4013      	ands	r3, r2
 8002386:	d009      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002388:	4b51      	ldr	r3, [pc, #324]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238c:	4a58      	ldr	r2, [pc, #352]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800238e:	4013      	ands	r3, r2
 8002390:	0019      	movs	r1, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69da      	ldr	r2, [r3, #28]
 8002396:	4b4e      	ldr	r3, [pc, #312]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002398:	430a      	orrs	r2, r1
 800239a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2220      	movs	r2, #32
 80023a2:	4013      	ands	r3, r2
 80023a4:	d009      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023a6:	4b4a      	ldr	r3, [pc, #296]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023aa:	4a52      	ldr	r2, [pc, #328]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	0019      	movs	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	4b46      	ldr	r3, [pc, #280]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b6:	430a      	orrs	r2, r1
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	01db      	lsls	r3, r3, #7
 80023c2:	4013      	ands	r3, r2
 80023c4:	d015      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023c6:	4b42      	ldr	r3, [pc, #264]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	0899      	lsrs	r1, r3, #2
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1a      	ldr	r2, [r3, #32]
 80023d2:	4b3f      	ldr	r3, [pc, #252]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023d4:	430a      	orrs	r2, r1
 80023d6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1a      	ldr	r2, [r3, #32]
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	05db      	lsls	r3, r3, #23
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d106      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023e4:	4b3a      	ldr	r3, [pc, #232]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ea:	2180      	movs	r1, #128	; 0x80
 80023ec:	0249      	lsls	r1, r1, #9
 80023ee:	430a      	orrs	r2, r1
 80023f0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	031b      	lsls	r3, r3, #12
 80023fa:	4013      	ands	r3, r2
 80023fc:	d009      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023fe:	4b34      	ldr	r3, [pc, #208]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002402:	2240      	movs	r2, #64	; 0x40
 8002404:	4393      	bics	r3, r2
 8002406:	0019      	movs	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800240c:	4b30      	ldr	r3, [pc, #192]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800240e:	430a      	orrs	r2, r1
 8002410:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	039b      	lsls	r3, r3, #14
 800241a:	4013      	ands	r3, r2
 800241c:	d016      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800241e:	4b2c      	ldr	r3, [pc, #176]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002422:	4a35      	ldr	r2, [pc, #212]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002424:	4013      	ands	r3, r2
 8002426:	0019      	movs	r1, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800242c:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800242e:	430a      	orrs	r2, r1
 8002430:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	03db      	lsls	r3, r3, #15
 800243a:	429a      	cmp	r2, r3
 800243c:	d106      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	0449      	lsls	r1, r1, #17
 8002448:	430a      	orrs	r2, r1
 800244a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	03db      	lsls	r3, r3, #15
 8002454:	4013      	ands	r3, r2
 8002456:	d016      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002458:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800245a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245c:	4a27      	ldr	r2, [pc, #156]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800245e:	4013      	ands	r3, r2
 8002460:	0019      	movs	r1, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002466:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002468:	430a      	orrs	r2, r1
 800246a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	045b      	lsls	r3, r3, #17
 8002474:	429a      	cmp	r2, r3
 8002476:	d106      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002478:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800247e:	2180      	movs	r1, #128	; 0x80
 8002480:	0449      	lsls	r1, r1, #17
 8002482:	430a      	orrs	r2, r1
 8002484:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	4013      	ands	r3, r2
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	4a1a      	ldr	r2, [pc, #104]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002498:	4013      	ands	r3, r2
 800249a:	0019      	movs	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a2:	430a      	orrs	r2, r1
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	01db      	lsls	r3, r3, #7
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d106      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024b2:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b8:	2180      	movs	r1, #128	; 0x80
 80024ba:	0249      	lsls	r1, r1, #9
 80024bc:	430a      	orrs	r2, r1
 80024be:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80024c0:	2312      	movs	r3, #18
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	781b      	ldrb	r3, [r3, #0]
}
 80024c6:	0018      	movs	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b006      	add	sp, #24
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40007000 	.word	0x40007000
 80024d8:	fffffcff 	.word	0xfffffcff
 80024dc:	fffeffff 	.word	0xfffeffff
 80024e0:	00001388 	.word	0x00001388
 80024e4:	efffffff 	.word	0xefffffff
 80024e8:	fffff3ff 	.word	0xfffff3ff
 80024ec:	fff3ffff 	.word	0xfff3ffff
 80024f0:	ffcfffff 	.word	0xffcfffff
 80024f4:	ffffcfff 	.word	0xffffcfff
 80024f8:	ffbfffff 	.word	0xffbfffff
 80024fc:	feffffff 	.word	0xfeffffff
 8002500:	ffff3fff 	.word	0xffff3fff

08002504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e04a      	b.n	80025ac <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	223d      	movs	r2, #61	; 0x3d
 800251a:	5c9b      	ldrb	r3, [r3, r2]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d107      	bne.n	8002532 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	223c      	movs	r2, #60	; 0x3c
 8002526:	2100      	movs	r1, #0
 8002528:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	0018      	movs	r0, r3
 800252e:	f7fe fa59 	bl	80009e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	223d      	movs	r2, #61	; 0x3d
 8002536:	2102      	movs	r1, #2
 8002538:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3304      	adds	r3, #4
 8002542:	0019      	movs	r1, r3
 8002544:	0010      	movs	r0, r2
 8002546:	f000 fab9 	bl	8002abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2248      	movs	r2, #72	; 0x48
 800254e:	2101      	movs	r1, #1
 8002550:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	223e      	movs	r2, #62	; 0x3e
 8002556:	2101      	movs	r1, #1
 8002558:	5499      	strb	r1, [r3, r2]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	223f      	movs	r2, #63	; 0x3f
 800255e:	2101      	movs	r1, #1
 8002560:	5499      	strb	r1, [r3, r2]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2240      	movs	r2, #64	; 0x40
 8002566:	2101      	movs	r1, #1
 8002568:	5499      	strb	r1, [r3, r2]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2241      	movs	r2, #65	; 0x41
 800256e:	2101      	movs	r1, #1
 8002570:	5499      	strb	r1, [r3, r2]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2242      	movs	r2, #66	; 0x42
 8002576:	2101      	movs	r1, #1
 8002578:	5499      	strb	r1, [r3, r2]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2243      	movs	r2, #67	; 0x43
 800257e:	2101      	movs	r1, #1
 8002580:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2244      	movs	r2, #68	; 0x44
 8002586:	2101      	movs	r1, #1
 8002588:	5499      	strb	r1, [r3, r2]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2245      	movs	r2, #69	; 0x45
 800258e:	2101      	movs	r1, #1
 8002590:	5499      	strb	r1, [r3, r2]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2246      	movs	r2, #70	; 0x46
 8002596:	2101      	movs	r1, #1
 8002598:	5499      	strb	r1, [r3, r2]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2247      	movs	r2, #71	; 0x47
 800259e:	2101      	movs	r1, #1
 80025a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	223d      	movs	r2, #61	; 0x3d
 80025a6:	2101      	movs	r1, #1
 80025a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b002      	add	sp, #8
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	223d      	movs	r2, #61	; 0x3d
 80025c0:	5c9b      	ldrb	r3, [r3, r2]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d001      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e042      	b.n	8002652 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	223d      	movs	r2, #61	; 0x3d
 80025d0:	2102      	movs	r1, #2
 80025d2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2101      	movs	r1, #1
 80025e0:	430a      	orrs	r2, r1
 80025e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a1c      	ldr	r2, [pc, #112]	; (800265c <HAL_TIM_Base_Start_IT+0xa8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00f      	beq.n	800260e <HAL_TIM_Base_Start_IT+0x5a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	05db      	lsls	r3, r3, #23
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d009      	beq.n	800260e <HAL_TIM_Base_Start_IT+0x5a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a18      	ldr	r2, [pc, #96]	; (8002660 <HAL_TIM_Base_Start_IT+0xac>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d004      	beq.n	800260e <HAL_TIM_Base_Start_IT+0x5a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a16      	ldr	r2, [pc, #88]	; (8002664 <HAL_TIM_Base_Start_IT+0xb0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d116      	bne.n	800263c <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4a14      	ldr	r2, [pc, #80]	; (8002668 <HAL_TIM_Base_Start_IT+0xb4>)
 8002616:	4013      	ands	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b06      	cmp	r3, #6
 800261e:	d016      	beq.n	800264e <HAL_TIM_Base_Start_IT+0x9a>
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	025b      	lsls	r3, r3, #9
 8002626:	429a      	cmp	r2, r3
 8002628:	d011      	beq.n	800264e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2101      	movs	r1, #1
 8002636:	430a      	orrs	r2, r1
 8002638:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263a:	e008      	b.n	800264e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2101      	movs	r1, #1
 8002648:	430a      	orrs	r2, r1
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e000      	b.n	8002650 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	0018      	movs	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	b004      	add	sp, #16
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	40012c00 	.word	0x40012c00
 8002660:	40000400 	.word	0x40000400
 8002664:	40014000 	.word	0x40014000
 8002668:	00010007 	.word	0x00010007

0800266c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2202      	movs	r2, #2
 800267c:	4013      	ands	r3, r2
 800267e:	2b02      	cmp	r3, #2
 8002680:	d124      	bne.n	80026cc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2202      	movs	r2, #2
 800268a:	4013      	ands	r3, r2
 800268c:	2b02      	cmp	r3, #2
 800268e:	d11d      	bne.n	80026cc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2203      	movs	r2, #3
 8002696:	4252      	negs	r2, r2
 8002698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	2203      	movs	r2, #3
 80026a8:	4013      	ands	r3, r2
 80026aa:	d004      	beq.n	80026b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	0018      	movs	r0, r3
 80026b0:	f000 f9ec 	bl	8002a8c <HAL_TIM_IC_CaptureCallback>
 80026b4:	e007      	b.n	80026c6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 f9df 	bl	8002a7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	0018      	movs	r0, r3
 80026c2:	f000 f9eb 	bl	8002a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2204      	movs	r2, #4
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d125      	bne.n	8002726 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2204      	movs	r2, #4
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d11e      	bne.n	8002726 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2205      	movs	r2, #5
 80026ee:	4252      	negs	r2, r2
 80026f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2202      	movs	r2, #2
 80026f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	23c0      	movs	r3, #192	; 0xc0
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4013      	ands	r3, r2
 8002704:	d004      	beq.n	8002710 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	0018      	movs	r0, r3
 800270a:	f000 f9bf 	bl	8002a8c <HAL_TIM_IC_CaptureCallback>
 800270e:	e007      	b.n	8002720 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	0018      	movs	r0, r3
 8002714:	f000 f9b2 	bl	8002a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	0018      	movs	r0, r3
 800271c:	f000 f9be 	bl	8002a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2208      	movs	r2, #8
 800272e:	4013      	ands	r3, r2
 8002730:	2b08      	cmp	r3, #8
 8002732:	d124      	bne.n	800277e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2208      	movs	r2, #8
 800273c:	4013      	ands	r3, r2
 800273e:	2b08      	cmp	r3, #8
 8002740:	d11d      	bne.n	800277e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2209      	movs	r2, #9
 8002748:	4252      	negs	r2, r2
 800274a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2204      	movs	r2, #4
 8002750:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	2203      	movs	r2, #3
 800275a:	4013      	ands	r3, r2
 800275c:	d004      	beq.n	8002768 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	0018      	movs	r0, r3
 8002762:	f000 f993 	bl	8002a8c <HAL_TIM_IC_CaptureCallback>
 8002766:	e007      	b.n	8002778 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	0018      	movs	r0, r3
 800276c:	f000 f986 	bl	8002a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	0018      	movs	r0, r3
 8002774:	f000 f992 	bl	8002a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	2210      	movs	r2, #16
 8002786:	4013      	ands	r3, r2
 8002788:	2b10      	cmp	r3, #16
 800278a:	d125      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2210      	movs	r2, #16
 8002794:	4013      	ands	r3, r2
 8002796:	2b10      	cmp	r3, #16
 8002798:	d11e      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2211      	movs	r2, #17
 80027a0:	4252      	negs	r2, r2
 80027a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2208      	movs	r2, #8
 80027a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69da      	ldr	r2, [r3, #28]
 80027b0:	23c0      	movs	r3, #192	; 0xc0
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4013      	ands	r3, r2
 80027b6:	d004      	beq.n	80027c2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	0018      	movs	r0, r3
 80027bc:	f000 f966 	bl	8002a8c <HAL_TIM_IC_CaptureCallback>
 80027c0:	e007      	b.n	80027d2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f000 f959 	bl	8002a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f000 f965 	bl	8002a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2201      	movs	r2, #1
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d10f      	bne.n	8002806 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d108      	bne.n	8002806 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2202      	movs	r2, #2
 80027fa:	4252      	negs	r2, r2
 80027fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	0018      	movs	r0, r3
 8002802:	f7fd ff33 	bl	800066c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	2280      	movs	r2, #128	; 0x80
 800280e:	4013      	ands	r3, r2
 8002810:	2b80      	cmp	r3, #128	; 0x80
 8002812:	d10f      	bne.n	8002834 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2280      	movs	r2, #128	; 0x80
 800281c:	4013      	ands	r3, r2
 800281e:	2b80      	cmp	r3, #128	; 0x80
 8002820:	d108      	bne.n	8002834 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2281      	movs	r2, #129	; 0x81
 8002828:	4252      	negs	r2, r2
 800282a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	0018      	movs	r0, r3
 8002830:	f000 fad6 	bl	8002de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	401a      	ands	r2, r3
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	429a      	cmp	r2, r3
 8002846:	d10e      	bne.n	8002866 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2280      	movs	r2, #128	; 0x80
 8002850:	4013      	ands	r3, r2
 8002852:	2b80      	cmp	r3, #128	; 0x80
 8002854:	d107      	bne.n	8002866 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1c      	ldr	r2, [pc, #112]	; (80028cc <HAL_TIM_IRQHandler+0x260>)
 800285c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	0018      	movs	r0, r3
 8002862:	f000 fac5 	bl	8002df0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2240      	movs	r2, #64	; 0x40
 800286e:	4013      	ands	r3, r2
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	d10f      	bne.n	8002894 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2240      	movs	r2, #64	; 0x40
 800287c:	4013      	ands	r3, r2
 800287e:	2b40      	cmp	r3, #64	; 0x40
 8002880:	d108      	bne.n	8002894 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2241      	movs	r2, #65	; 0x41
 8002888:	4252      	negs	r2, r2
 800288a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	0018      	movs	r0, r3
 8002890:	f000 f90c 	bl	8002aac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2220      	movs	r2, #32
 800289c:	4013      	ands	r3, r2
 800289e:	2b20      	cmp	r3, #32
 80028a0:	d10f      	bne.n	80028c2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	d108      	bne.n	80028c2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2221      	movs	r2, #33	; 0x21
 80028b6:	4252      	negs	r2, r2
 80028b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	0018      	movs	r0, r3
 80028be:	f000 fa87 	bl	8002dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b002      	add	sp, #8
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	fffffeff 	.word	0xfffffeff

080028d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028da:	230f      	movs	r3, #15
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	223c      	movs	r2, #60	; 0x3c
 80028e6:	5c9b      	ldrb	r3, [r3, r2]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_TIM_ConfigClockSource+0x20>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e0bc      	b.n	8002a6a <HAL_TIM_ConfigClockSource+0x19a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	223c      	movs	r2, #60	; 0x3c
 80028f4:	2101      	movs	r1, #1
 80028f6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	223d      	movs	r2, #61	; 0x3d
 80028fc:	2102      	movs	r1, #2
 80028fe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4a5a      	ldr	r2, [pc, #360]	; (8002a74 <HAL_TIM_ConfigClockSource+0x1a4>)
 800290c:	4013      	ands	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4a59      	ldr	r2, [pc, #356]	; (8002a78 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002914:	4013      	ands	r3, r2
 8002916:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2280      	movs	r2, #128	; 0x80
 8002926:	0192      	lsls	r2, r2, #6
 8002928:	4293      	cmp	r3, r2
 800292a:	d040      	beq.n	80029ae <HAL_TIM_ConfigClockSource+0xde>
 800292c:	2280      	movs	r2, #128	; 0x80
 800292e:	0192      	lsls	r2, r2, #6
 8002930:	4293      	cmp	r3, r2
 8002932:	d900      	bls.n	8002936 <HAL_TIM_ConfigClockSource+0x66>
 8002934:	e088      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 8002936:	2280      	movs	r2, #128	; 0x80
 8002938:	0152      	lsls	r2, r2, #5
 800293a:	4293      	cmp	r3, r2
 800293c:	d100      	bne.n	8002940 <HAL_TIM_ConfigClockSource+0x70>
 800293e:	e088      	b.n	8002a52 <HAL_TIM_ConfigClockSource+0x182>
 8002940:	2280      	movs	r2, #128	; 0x80
 8002942:	0152      	lsls	r2, r2, #5
 8002944:	4293      	cmp	r3, r2
 8002946:	d900      	bls.n	800294a <HAL_TIM_ConfigClockSource+0x7a>
 8002948:	e07e      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 800294a:	2b70      	cmp	r3, #112	; 0x70
 800294c:	d018      	beq.n	8002980 <HAL_TIM_ConfigClockSource+0xb0>
 800294e:	d900      	bls.n	8002952 <HAL_TIM_ConfigClockSource+0x82>
 8002950:	e07a      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 8002952:	2b60      	cmp	r3, #96	; 0x60
 8002954:	d04f      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0x126>
 8002956:	d900      	bls.n	800295a <HAL_TIM_ConfigClockSource+0x8a>
 8002958:	e076      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 800295a:	2b50      	cmp	r3, #80	; 0x50
 800295c:	d03b      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x106>
 800295e:	d900      	bls.n	8002962 <HAL_TIM_ConfigClockSource+0x92>
 8002960:	e072      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 8002962:	2b40      	cmp	r3, #64	; 0x40
 8002964:	d057      	beq.n	8002a16 <HAL_TIM_ConfigClockSource+0x146>
 8002966:	d900      	bls.n	800296a <HAL_TIM_ConfigClockSource+0x9a>
 8002968:	e06e      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 800296a:	2b30      	cmp	r3, #48	; 0x30
 800296c:	d063      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x166>
 800296e:	d86b      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 8002970:	2b20      	cmp	r3, #32
 8002972:	d060      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x166>
 8002974:	d868      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 8002976:	2b00      	cmp	r3, #0
 8002978:	d05d      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x166>
 800297a:	2b10      	cmp	r3, #16
 800297c:	d05b      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x166>
 800297e:	e063      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	6899      	ldr	r1, [r3, #8]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f000 f990 	bl	8002cb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2277      	movs	r2, #119	; 0x77
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	609a      	str	r2, [r3, #8]
      break;
 80029ac:	e052      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6899      	ldr	r1, [r3, #8]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f000 f979 	bl	8002cb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2180      	movs	r1, #128	; 0x80
 80029ce:	01c9      	lsls	r1, r1, #7
 80029d0:	430a      	orrs	r2, r1
 80029d2:	609a      	str	r2, [r3, #8]
      break;
 80029d4:	e03e      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6859      	ldr	r1, [r3, #4]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	001a      	movs	r2, r3
 80029e4:	f000 f8ea 	bl	8002bbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2150      	movs	r1, #80	; 0x50
 80029ee:	0018      	movs	r0, r3
 80029f0:	f000 f944 	bl	8002c7c <TIM_ITRx_SetConfig>
      break;
 80029f4:	e02e      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6859      	ldr	r1, [r3, #4]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	001a      	movs	r2, r3
 8002a04:	f000 f908 	bl	8002c18 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2160      	movs	r1, #96	; 0x60
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f000 f934 	bl	8002c7c <TIM_ITRx_SetConfig>
      break;
 8002a14:	e01e      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6859      	ldr	r1, [r3, #4]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	001a      	movs	r2, r3
 8002a24:	f000 f8ca 	bl	8002bbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2140      	movs	r1, #64	; 0x40
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 f924 	bl	8002c7c <TIM_ITRx_SetConfig>
      break;
 8002a34:	e00e      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	0019      	movs	r1, r3
 8002a40:	0010      	movs	r0, r2
 8002a42:	f000 f91b 	bl	8002c7c <TIM_ITRx_SetConfig>
      break;
 8002a46:	e005      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002a48:	230f      	movs	r3, #15
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
      break;
 8002a50:	e000      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002a52:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	223d      	movs	r2, #61	; 0x3d
 8002a58:	2101      	movs	r1, #1
 8002a5a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	223c      	movs	r2, #60	; 0x3c
 8002a60:	2100      	movs	r1, #0
 8002a62:	5499      	strb	r1, [r3, r2]

  return status;
 8002a64:	230f      	movs	r3, #15
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	781b      	ldrb	r3, [r3, #0]
}
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b004      	add	sp, #16
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	ffceff88 	.word	0xffceff88
 8002a78:	ffff00ff 	.word	0xffff00ff

08002a7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a94:	46c0      	nop			; (mov r8, r8)
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b002      	add	sp, #8
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002aa4:	46c0      	nop			; (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ab4:	46c0      	nop			; (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b002      	add	sp, #8
 8002aba:	bd80      	pop	{r7, pc}

08002abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a34      	ldr	r2, [pc, #208]	; (8002ba0 <TIM_Base_SetConfig+0xe4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d008      	beq.n	8002ae6 <TIM_Base_SetConfig+0x2a>
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	05db      	lsls	r3, r3, #23
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d003      	beq.n	8002ae6 <TIM_Base_SetConfig+0x2a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a30      	ldr	r2, [pc, #192]	; (8002ba4 <TIM_Base_SetConfig+0xe8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d108      	bne.n	8002af8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2270      	movs	r2, #112	; 0x70
 8002aea:	4393      	bics	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a29      	ldr	r2, [pc, #164]	; (8002ba0 <TIM_Base_SetConfig+0xe4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d018      	beq.n	8002b32 <TIM_Base_SetConfig+0x76>
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	05db      	lsls	r3, r3, #23
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d013      	beq.n	8002b32 <TIM_Base_SetConfig+0x76>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a25      	ldr	r2, [pc, #148]	; (8002ba4 <TIM_Base_SetConfig+0xe8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00f      	beq.n	8002b32 <TIM_Base_SetConfig+0x76>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a24      	ldr	r2, [pc, #144]	; (8002ba8 <TIM_Base_SetConfig+0xec>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00b      	beq.n	8002b32 <TIM_Base_SetConfig+0x76>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a23      	ldr	r2, [pc, #140]	; (8002bac <TIM_Base_SetConfig+0xf0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d007      	beq.n	8002b32 <TIM_Base_SetConfig+0x76>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <TIM_Base_SetConfig+0xf4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d003      	beq.n	8002b32 <TIM_Base_SetConfig+0x76>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a21      	ldr	r2, [pc, #132]	; (8002bb4 <TIM_Base_SetConfig+0xf8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d108      	bne.n	8002b44 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4a20      	ldr	r2, [pc, #128]	; (8002bb8 <TIM_Base_SetConfig+0xfc>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2280      	movs	r2, #128	; 0x80
 8002b48:	4393      	bics	r3, r2
 8002b4a:	001a      	movs	r2, r3
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a0c      	ldr	r2, [pc, #48]	; (8002ba0 <TIM_Base_SetConfig+0xe4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d00b      	beq.n	8002b8a <TIM_Base_SetConfig+0xce>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a0d      	ldr	r2, [pc, #52]	; (8002bac <TIM_Base_SetConfig+0xf0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d007      	beq.n	8002b8a <TIM_Base_SetConfig+0xce>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a0c      	ldr	r2, [pc, #48]	; (8002bb0 <TIM_Base_SetConfig+0xf4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d003      	beq.n	8002b8a <TIM_Base_SetConfig+0xce>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a0b      	ldr	r2, [pc, #44]	; (8002bb4 <TIM_Base_SetConfig+0xf8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d103      	bne.n	8002b92 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	615a      	str	r2, [r3, #20]
}
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b004      	add	sp, #16
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40012c00 	.word	0x40012c00
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	40002000 	.word	0x40002000
 8002bac:	40014000 	.word	0x40014000
 8002bb0:	40014400 	.word	0x40014400
 8002bb4:	40014800 	.word	0x40014800
 8002bb8:	fffffcff 	.word	0xfffffcff

08002bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	4393      	bics	r3, r2
 8002bd6:	001a      	movs	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	22f0      	movs	r2, #240	; 0xf0
 8002be6:	4393      	bics	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	220a      	movs	r2, #10
 8002bf8:	4393      	bics	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	621a      	str	r2, [r3, #32]
}
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b006      	add	sp, #24
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	2210      	movs	r2, #16
 8002c2a:	4393      	bics	r3, r2
 8002c2c:	001a      	movs	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	4a0d      	ldr	r2, [pc, #52]	; (8002c78 <TIM_TI2_ConfigInputStage+0x60>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	031b      	lsls	r3, r3, #12
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	22a0      	movs	r2, #160	; 0xa0
 8002c54:	4393      	bics	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	621a      	str	r2, [r3, #32]
}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b006      	add	sp, #24
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	ffff0fff 	.word	0xffff0fff

08002c7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4a08      	ldr	r2, [pc, #32]	; (8002cb0 <TIM_ITRx_SetConfig+0x34>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	2207      	movs	r2, #7
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	609a      	str	r2, [r3, #8]
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b004      	add	sp, #16
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	ffcfff8f 	.word	0xffcfff8f

08002cb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <TIM_ETR_SetConfig+0x3c>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	021a      	lsls	r2, r3, #8
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	609a      	str	r2, [r3, #8]
}
 8002ce8:	46c0      	nop			; (mov r8, r8)
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b006      	add	sp, #24
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	ffff00ff 	.word	0xffff00ff

08002cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	223c      	movs	r2, #60	; 0x3c
 8002d02:	5c9b      	ldrb	r3, [r3, r2]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e055      	b.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	223c      	movs	r2, #60	; 0x3c
 8002d10:	2101      	movs	r1, #1
 8002d12:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	223d      	movs	r2, #61	; 0x3d
 8002d18:	2102      	movs	r1, #2
 8002d1a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a23      	ldr	r2, [pc, #140]	; (8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d108      	bne.n	8002d48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2270      	movs	r2, #112	; 0x70
 8002d4c:	4393      	bics	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a16      	ldr	r2, [pc, #88]	; (8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00f      	beq.n	8002d8c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	05db      	lsls	r3, r3, #23
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d009      	beq.n	8002d8c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d004      	beq.n	8002d8c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a11      	ldr	r2, [pc, #68]	; (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d10c      	bne.n	8002da6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2280      	movs	r2, #128	; 0x80
 8002d90:	4393      	bics	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	223d      	movs	r2, #61	; 0x3d
 8002daa:	2101      	movs	r1, #1
 8002dac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	223c      	movs	r2, #60	; 0x3c
 8002db2:	2100      	movs	r1, #0
 8002db4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b004      	add	sp, #16
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	ff0fffff 	.word	0xff0fffff
 8002dc8:	40000400 	.word	0x40000400
 8002dcc:	40014000 	.word	0x40014000

08002dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dd8:	46c0      	nop			; (mov r8, r8)
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b002      	add	sp, #8
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b002      	add	sp, #8
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b002      	add	sp, #8
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e046      	b.n	8002ea0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2284      	movs	r2, #132	; 0x84
 8002e16:	589b      	ldr	r3, [r3, r2]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d107      	bne.n	8002e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2280      	movs	r2, #128	; 0x80
 8002e20:	2100      	movs	r1, #0
 8002e22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	0018      	movs	r0, r3
 8002e28:	f7fd fe00 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2284      	movs	r2, #132	; 0x84
 8002e30:	2124      	movs	r1, #36	; 0x24
 8002e32:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2101      	movs	r1, #1
 8002e40:	438a      	bics	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 fc8c 	bl	8003764 <UART_SetConfig>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e024      	b.n	8002ea0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	0018      	movs	r0, r3
 8002e62:	f000 ff3d 	bl	8003ce0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	490d      	ldr	r1, [pc, #52]	; (8002ea8 <HAL_UART_Init+0xa8>)
 8002e72:	400a      	ands	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	212a      	movs	r1, #42	; 0x2a
 8002e82:	438a      	bics	r2, r1
 8002e84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2101      	movs	r1, #1
 8002e92:	430a      	orrs	r2, r1
 8002e94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f000 ffd5 	bl	8003e48 <UART_CheckIdleState>
 8002e9e:	0003      	movs	r3, r0
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	ffffb7ff 	.word	0xffffb7ff

08002eac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08c      	sub	sp, #48	; 0x30
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	1dbb      	adds	r3, r7, #6
 8002eb8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2284      	movs	r2, #132	; 0x84
 8002ebe:	589b      	ldr	r3, [r3, r2]
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	d000      	beq.n	8002ec6 <HAL_UART_Transmit_IT+0x1a>
 8002ec4:	e0a0      	b.n	8003008 <HAL_UART_Transmit_IT+0x15c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_UART_Transmit_IT+0x28>
 8002ecc:	1dbb      	adds	r3, r7, #6
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e098      	b.n	800300a <HAL_UART_Transmit_IT+0x15e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	015b      	lsls	r3, r3, #5
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d109      	bne.n	8002ef8 <HAL_UART_Transmit_IT+0x4c>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d105      	bne.n	8002ef8 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d001      	beq.n	8002ef8 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e088      	b.n	800300a <HAL_UART_Transmit_IT+0x15e>
      }
    }

    __HAL_LOCK(huart);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2280      	movs	r2, #128	; 0x80
 8002efc:	5c9b      	ldrb	r3, [r3, r2]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_UART_Transmit_IT+0x5a>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e081      	b.n	800300a <HAL_UART_Transmit_IT+0x15e>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2280      	movs	r2, #128	; 0x80
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1dba      	adds	r2, r7, #6
 8002f18:	2154      	movs	r1, #84	; 0x54
 8002f1a:	8812      	ldrh	r2, [r2, #0]
 8002f1c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1dba      	adds	r2, r7, #6
 8002f22:	2156      	movs	r1, #86	; 0x56
 8002f24:	8812      	ldrh	r2, [r2, #0]
 8002f26:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	228c      	movs	r2, #140	; 0x8c
 8002f32:	2100      	movs	r1, #0
 8002f34:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2284      	movs	r2, #132	; 0x84
 8002f3a:	2121      	movs	r1, #33	; 0x21
 8002f3c:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	059b      	lsls	r3, r3, #22
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d12e      	bne.n	8002fa8 <HAL_UART_Transmit_IT+0xfc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	015b      	lsls	r3, r3, #5
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d107      	bne.n	8002f66 <HAL_UART_Transmit_IT+0xba>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d103      	bne.n	8002f66 <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4a2c      	ldr	r2, [pc, #176]	; (8003014 <HAL_UART_Transmit_IT+0x168>)
 8002f62:	675a      	str	r2, [r3, #116]	; 0x74
 8002f64:	e002      	b.n	8002f6c <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4a2b      	ldr	r2, [pc, #172]	; (8003018 <HAL_UART_Transmit_IT+0x16c>)
 8002f6a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2280      	movs	r2, #128	; 0x80
 8002f70:	2100      	movs	r1, #0
 8002f72:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f74:	f3ef 8310 	mrs	r3, PRIMASK
 8002f78:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f7a:	69fb      	ldr	r3, [r7, #28]

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f7e:	2301      	movs	r3, #1
 8002f80:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	f383 8810 	msr	PRIMASK, r3
}
 8002f88:	46c0      	nop			; (mov r8, r8)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2180      	movs	r1, #128	; 0x80
 8002f96:	0409      	lsls	r1, r1, #16
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	f383 8810 	msr	PRIMASK, r3
}
 8002fa6:	e02d      	b.n	8003004 <HAL_UART_Transmit_IT+0x158>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	015b      	lsls	r3, r3, #5
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d107      	bne.n	8002fc4 <HAL_UART_Transmit_IT+0x118>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d103      	bne.n	8002fc4 <HAL_UART_Transmit_IT+0x118>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4a17      	ldr	r2, [pc, #92]	; (800301c <HAL_UART_Transmit_IT+0x170>)
 8002fc0:	675a      	str	r2, [r3, #116]	; 0x74
 8002fc2:	e002      	b.n	8002fca <HAL_UART_Transmit_IT+0x11e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4a16      	ldr	r2, [pc, #88]	; (8003020 <HAL_UART_Transmit_IT+0x174>)
 8002fc8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2280      	movs	r2, #128	; 0x80
 8002fce:	2100      	movs	r1, #0
 8002fd0:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd6:	613b      	str	r3, [r7, #16]
  return(result);
 8002fd8:	693b      	ldr	r3, [r7, #16]

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fdc:	2301      	movs	r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f383 8810 	msr	PRIMASK, r3
}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2180      	movs	r1, #128	; 0x80
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	f383 8810 	msr	PRIMASK, r3
}
 8003002:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	e000      	b.n	800300a <HAL_UART_Transmit_IT+0x15e>
  }
  else
  {
    return HAL_BUSY;
 8003008:	2302      	movs	r3, #2
  }
}
 800300a:	0018      	movs	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	b00c      	add	sp, #48	; 0x30
 8003010:	bd80      	pop	{r7, pc}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	0800461d 	.word	0x0800461d
 8003018:	08004531 	.word	0x08004531
 800301c:	08004473 	.word	0x08004473
 8003020:	080043bf 	.word	0x080043bf

08003024 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	1dbb      	adds	r3, r7, #6
 8003030:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2288      	movs	r2, #136	; 0x88
 8003036:	589b      	ldr	r3, [r3, r2]
 8003038:	2b20      	cmp	r3, #32
 800303a:	d155      	bne.n	80030e8 <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_UART_Receive_IT+0x26>
 8003042:	1dbb      	adds	r3, r7, #6
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e04d      	b.n	80030ea <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	015b      	lsls	r3, r3, #5
 8003056:	429a      	cmp	r2, r3
 8003058:	d109      	bne.n	800306e <HAL_UART_Receive_IT+0x4a>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d105      	bne.n	800306e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2201      	movs	r2, #1
 8003066:	4013      	ands	r3, r2
 8003068:	d001      	beq.n	800306e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e03d      	b.n	80030ea <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2280      	movs	r2, #128	; 0x80
 8003072:	5c9b      	ldrb	r3, [r3, r2]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_UART_Receive_IT+0x58>
 8003078:	2302      	movs	r3, #2
 800307a:	e036      	b.n	80030ea <HAL_UART_Receive_IT+0xc6>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2280      	movs	r2, #128	; 0x80
 8003080:	2101      	movs	r1, #1
 8003082:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <HAL_UART_Receive_IT+0xd0>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d020      	beq.n	80030d6 <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	041b      	lsls	r3, r3, #16
 800309e:	4013      	ands	r3, r2
 80030a0:	d019      	beq.n	80030d6 <HAL_UART_Receive_IT+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a2:	f3ef 8310 	mrs	r3, PRIMASK
 80030a6:	613b      	str	r3, [r7, #16]
  return(result);
 80030a8:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	2301      	movs	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f383 8810 	msr	PRIMASK, r3
}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2180      	movs	r1, #128	; 0x80
 80030c4:	04c9      	lsls	r1, r1, #19
 80030c6:	430a      	orrs	r2, r1
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	f383 8810 	msr	PRIMASK, r3
}
 80030d4:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030d6:	1dbb      	adds	r3, r7, #6
 80030d8:	881a      	ldrh	r2, [r3, #0]
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	0018      	movs	r0, r3
 80030e0:	f000 ffc4 	bl	800406c <UART_Start_Receive_IT>
 80030e4:	0003      	movs	r3, r0
 80030e6:	e000      	b.n	80030ea <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
  }
}
 80030ea:	0018      	movs	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b008      	add	sp, #32
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	40008000 	.word	0x40008000

080030f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030f8:	b5b0      	push	{r4, r5, r7, lr}
 80030fa:	b0aa      	sub	sp, #168	; 0xa8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	22a4      	movs	r2, #164	; 0xa4
 8003108:	18b9      	adds	r1, r7, r2
 800310a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	20a0      	movs	r0, #160	; 0xa0
 8003114:	1839      	adds	r1, r7, r0
 8003116:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	249c      	movs	r4, #156	; 0x9c
 8003120:	1939      	adds	r1, r7, r4
 8003122:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003124:	0011      	movs	r1, r2
 8003126:	18bb      	adds	r3, r7, r2
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4aa0      	ldr	r2, [pc, #640]	; (80033ac <HAL_UART_IRQHandler+0x2b4>)
 800312c:	4013      	ands	r3, r2
 800312e:	2298      	movs	r2, #152	; 0x98
 8003130:	18bd      	adds	r5, r7, r2
 8003132:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003134:	18bb      	adds	r3, r7, r2
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d11a      	bne.n	8003172 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800313c:	187b      	adds	r3, r7, r1
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2220      	movs	r2, #32
 8003142:	4013      	ands	r3, r2
 8003144:	d015      	beq.n	8003172 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003146:	183b      	adds	r3, r7, r0
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2220      	movs	r2, #32
 800314c:	4013      	ands	r3, r2
 800314e:	d105      	bne.n	800315c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003150:	193b      	adds	r3, r7, r4
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	055b      	lsls	r3, r3, #21
 8003158:	4013      	ands	r3, r2
 800315a:	d00a      	beq.n	8003172 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003160:	2b00      	cmp	r3, #0
 8003162:	d100      	bne.n	8003166 <HAL_UART_IRQHandler+0x6e>
 8003164:	e2cf      	b.n	8003706 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	0010      	movs	r0, r2
 800316e:	4798      	blx	r3
      }
      return;
 8003170:	e2c9      	b.n	8003706 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003172:	2398      	movs	r3, #152	; 0x98
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d100      	bne.n	800317e <HAL_UART_IRQHandler+0x86>
 800317c:	e11e      	b.n	80033bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800317e:	239c      	movs	r3, #156	; 0x9c
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a8a      	ldr	r2, [pc, #552]	; (80033b0 <HAL_UART_IRQHandler+0x2b8>)
 8003186:	4013      	ands	r3, r2
 8003188:	d106      	bne.n	8003198 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800318a:	23a0      	movs	r3, #160	; 0xa0
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a88      	ldr	r2, [pc, #544]	; (80033b4 <HAL_UART_IRQHandler+0x2bc>)
 8003192:	4013      	ands	r3, r2
 8003194:	d100      	bne.n	8003198 <HAL_UART_IRQHandler+0xa0>
 8003196:	e111      	b.n	80033bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003198:	23a4      	movs	r3, #164	; 0xa4
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2201      	movs	r2, #1
 80031a0:	4013      	ands	r3, r2
 80031a2:	d012      	beq.n	80031ca <HAL_UART_IRQHandler+0xd2>
 80031a4:	23a0      	movs	r3, #160	; 0xa0
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	2380      	movs	r3, #128	; 0x80
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4013      	ands	r3, r2
 80031b0:	d00b      	beq.n	80031ca <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2201      	movs	r2, #1
 80031b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	228c      	movs	r2, #140	; 0x8c
 80031be:	589b      	ldr	r3, [r3, r2]
 80031c0:	2201      	movs	r2, #1
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	218c      	movs	r1, #140	; 0x8c
 80031c8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031ca:	23a4      	movs	r3, #164	; 0xa4
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2202      	movs	r2, #2
 80031d2:	4013      	ands	r3, r2
 80031d4:	d011      	beq.n	80031fa <HAL_UART_IRQHandler+0x102>
 80031d6:	239c      	movs	r3, #156	; 0x9c
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2201      	movs	r2, #1
 80031de:	4013      	ands	r3, r2
 80031e0:	d00b      	beq.n	80031fa <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2202      	movs	r2, #2
 80031e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	228c      	movs	r2, #140	; 0x8c
 80031ee:	589b      	ldr	r3, [r3, r2]
 80031f0:	2204      	movs	r2, #4
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	218c      	movs	r1, #140	; 0x8c
 80031f8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031fa:	23a4      	movs	r3, #164	; 0xa4
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2204      	movs	r2, #4
 8003202:	4013      	ands	r3, r2
 8003204:	d011      	beq.n	800322a <HAL_UART_IRQHandler+0x132>
 8003206:	239c      	movs	r3, #156	; 0x9c
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2201      	movs	r2, #1
 800320e:	4013      	ands	r3, r2
 8003210:	d00b      	beq.n	800322a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2204      	movs	r2, #4
 8003218:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	228c      	movs	r2, #140	; 0x8c
 800321e:	589b      	ldr	r3, [r3, r2]
 8003220:	2202      	movs	r2, #2
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	218c      	movs	r1, #140	; 0x8c
 8003228:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800322a:	23a4      	movs	r3, #164	; 0xa4
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2208      	movs	r2, #8
 8003232:	4013      	ands	r3, r2
 8003234:	d017      	beq.n	8003266 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003236:	23a0      	movs	r3, #160	; 0xa0
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2220      	movs	r2, #32
 800323e:	4013      	ands	r3, r2
 8003240:	d105      	bne.n	800324e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003242:	239c      	movs	r3, #156	; 0x9c
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a59      	ldr	r2, [pc, #356]	; (80033b0 <HAL_UART_IRQHandler+0x2b8>)
 800324a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800324c:	d00b      	beq.n	8003266 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2208      	movs	r2, #8
 8003254:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	228c      	movs	r2, #140	; 0x8c
 800325a:	589b      	ldr	r3, [r3, r2]
 800325c:	2208      	movs	r2, #8
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	218c      	movs	r1, #140	; 0x8c
 8003264:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003266:	23a4      	movs	r3, #164	; 0xa4
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	4013      	ands	r3, r2
 8003272:	d013      	beq.n	800329c <HAL_UART_IRQHandler+0x1a4>
 8003274:	23a0      	movs	r3, #160	; 0xa0
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	04db      	lsls	r3, r3, #19
 800327e:	4013      	ands	r3, r2
 8003280:	d00c      	beq.n	800329c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2280      	movs	r2, #128	; 0x80
 8003288:	0112      	lsls	r2, r2, #4
 800328a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	228c      	movs	r2, #140	; 0x8c
 8003290:	589b      	ldr	r3, [r3, r2]
 8003292:	2220      	movs	r2, #32
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	218c      	movs	r1, #140	; 0x8c
 800329a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	228c      	movs	r2, #140	; 0x8c
 80032a0:	589b      	ldr	r3, [r3, r2]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d100      	bne.n	80032a8 <HAL_UART_IRQHandler+0x1b0>
 80032a6:	e230      	b.n	800370a <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80032a8:	23a4      	movs	r3, #164	; 0xa4
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2220      	movs	r2, #32
 80032b0:	4013      	ands	r3, r2
 80032b2:	d015      	beq.n	80032e0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80032b4:	23a0      	movs	r3, #160	; 0xa0
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2220      	movs	r2, #32
 80032bc:	4013      	ands	r3, r2
 80032be:	d106      	bne.n	80032ce <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80032c0:	239c      	movs	r3, #156	; 0x9c
 80032c2:	18fb      	adds	r3, r7, r3
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	055b      	lsls	r3, r3, #21
 80032ca:	4013      	ands	r3, r2
 80032cc:	d008      	beq.n	80032e0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d004      	beq.n	80032e0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	0010      	movs	r0, r2
 80032de:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	228c      	movs	r2, #140	; 0x8c
 80032e4:	589b      	ldr	r3, [r3, r2]
 80032e6:	2194      	movs	r1, #148	; 0x94
 80032e8:	187a      	adds	r2, r7, r1
 80032ea:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2240      	movs	r2, #64	; 0x40
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b40      	cmp	r3, #64	; 0x40
 80032f8:	d004      	beq.n	8003304 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80032fa:	187b      	adds	r3, r7, r1
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2228      	movs	r2, #40	; 0x28
 8003300:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003302:	d047      	beq.n	8003394 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	0018      	movs	r0, r3
 8003308:	f000 ffdc 	bl	80042c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2240      	movs	r2, #64	; 0x40
 8003314:	4013      	ands	r3, r2
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	d137      	bne.n	800338a <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800331a:	f3ef 8310 	mrs	r3, PRIMASK
 800331e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003320:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003322:	2090      	movs	r0, #144	; 0x90
 8003324:	183a      	adds	r2, r7, r0
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	2301      	movs	r3, #1
 800332a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800332e:	f383 8810 	msr	PRIMASK, r3
}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2140      	movs	r1, #64	; 0x40
 8003340:	438a      	bics	r2, r1
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	183b      	adds	r3, r7, r0
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800334c:	f383 8810 	msr	PRIMASK, r3
}
 8003350:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d012      	beq.n	8003380 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800335e:	4a16      	ldr	r2, [pc, #88]	; (80033b8 <HAL_UART_IRQHandler+0x2c0>)
 8003360:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003366:	0018      	movs	r0, r3
 8003368:	f7fe f818 	bl	800139c <HAL_DMA_Abort_IT>
 800336c:	1e03      	subs	r3, r0, #0
 800336e:	d01a      	beq.n	80033a6 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800337a:	0018      	movs	r0, r3
 800337c:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337e:	e012      	b.n	80033a6 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	0018      	movs	r0, r3
 8003384:	f000 f9da 	bl	800373c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003388:	e00d      	b.n	80033a6 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	0018      	movs	r0, r3
 800338e:	f000 f9d5 	bl	800373c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003392:	e008      	b.n	80033a6 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	0018      	movs	r0, r3
 8003398:	f000 f9d0 	bl	800373c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	228c      	movs	r2, #140	; 0x8c
 80033a0:	2100      	movs	r1, #0
 80033a2:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80033a4:	e1b1      	b.n	800370a <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a6:	46c0      	nop			; (mov r8, r8)
    return;
 80033a8:	e1af      	b.n	800370a <HAL_UART_IRQHandler+0x612>
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	0000080f 	.word	0x0000080f
 80033b0:	10000001 	.word	0x10000001
 80033b4:	04000120 	.word	0x04000120
 80033b8:	08004391 	.word	0x08004391

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d000      	beq.n	80033c6 <HAL_UART_IRQHandler+0x2ce>
 80033c4:	e135      	b.n	8003632 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033c6:	23a4      	movs	r3, #164	; 0xa4
 80033c8:	18fb      	adds	r3, r7, r3
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2210      	movs	r2, #16
 80033ce:	4013      	ands	r3, r2
 80033d0:	d100      	bne.n	80033d4 <HAL_UART_IRQHandler+0x2dc>
 80033d2:	e12e      	b.n	8003632 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033d4:	23a0      	movs	r3, #160	; 0xa0
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2210      	movs	r2, #16
 80033dc:	4013      	ands	r3, r2
 80033de:	d100      	bne.n	80033e2 <HAL_UART_IRQHandler+0x2ea>
 80033e0:	e127      	b.n	8003632 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2210      	movs	r2, #16
 80033e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2240      	movs	r2, #64	; 0x40
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	d000      	beq.n	80033fa <HAL_UART_IRQHandler+0x302>
 80033f8:	e09e      	b.n	8003538 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	217e      	movs	r1, #126	; 0x7e
 8003404:	187b      	adds	r3, r7, r1
 8003406:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003408:	187b      	adds	r3, r7, r1
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d100      	bne.n	8003412 <HAL_UART_IRQHandler+0x31a>
 8003410:	e17d      	b.n	800370e <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	225c      	movs	r2, #92	; 0x5c
 8003416:	5a9b      	ldrh	r3, [r3, r2]
 8003418:	187a      	adds	r2, r7, r1
 800341a:	8812      	ldrh	r2, [r2, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d300      	bcc.n	8003422 <HAL_UART_IRQHandler+0x32a>
 8003420:	e175      	b.n	800370e <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	187a      	adds	r2, r7, r1
 8003426:	215e      	movs	r1, #94	; 0x5e
 8003428:	8812      	ldrh	r2, [r2, #0]
 800342a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2220      	movs	r2, #32
 8003436:	4013      	ands	r3, r2
 8003438:	d16f      	bne.n	800351a <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800343a:	f3ef 8310 	mrs	r3, PRIMASK
 800343e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003442:	67bb      	str	r3, [r7, #120]	; 0x78
 8003444:	2301      	movs	r3, #1
 8003446:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344a:	f383 8810 	msr	PRIMASK, r3
}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	49b1      	ldr	r1, [pc, #708]	; (8003720 <HAL_UART_IRQHandler+0x628>)
 800345c:	400a      	ands	r2, r1
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003462:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003466:	f383 8810 	msr	PRIMASK, r3
}
 800346a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800346c:	f3ef 8310 	mrs	r3, PRIMASK
 8003470:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003474:	677b      	str	r3, [r7, #116]	; 0x74
 8003476:	2301      	movs	r3, #1
 8003478:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800347c:	f383 8810 	msr	PRIMASK, r3
}
 8003480:	46c0      	nop			; (mov r8, r8)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2101      	movs	r1, #1
 800348e:	438a      	bics	r2, r1
 8003490:	609a      	str	r2, [r3, #8]
 8003492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003494:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003498:	f383 8810 	msr	PRIMASK, r3
}
 800349c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349e:	f3ef 8310 	mrs	r3, PRIMASK
 80034a2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80034a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034a6:	673b      	str	r3, [r7, #112]	; 0x70
 80034a8:	2301      	movs	r3, #1
 80034aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ae:	f383 8810 	msr	PRIMASK, r3
}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2140      	movs	r1, #64	; 0x40
 80034c0:	438a      	bics	r2, r1
 80034c2:	609a      	str	r2, [r3, #8]
 80034c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034c6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ca:	f383 8810 	msr	PRIMASK, r3
}
 80034ce:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2288      	movs	r2, #136	; 0x88
 80034d4:	2120      	movs	r1, #32
 80034d6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034de:	f3ef 8310 	mrs	r3, PRIMASK
 80034e2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80034e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034e8:	2301      	movs	r3, #1
 80034ea:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034ee:	f383 8810 	msr	PRIMASK, r3
}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2110      	movs	r1, #16
 8003500:	438a      	bics	r2, r1
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003506:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800350a:	f383 8810 	msr	PRIMASK, r3
}
 800350e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003514:	0018      	movs	r0, r3
 8003516:	f7fd fedf 	bl	80012d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	225c      	movs	r2, #92	; 0x5c
 800351e:	5a9a      	ldrh	r2, [r3, r2]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	215e      	movs	r1, #94	; 0x5e
 8003524:	5a5b      	ldrh	r3, [r3, r1]
 8003526:	b29b      	uxth	r3, r3
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	b29a      	uxth	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	0011      	movs	r1, r2
 8003530:	0018      	movs	r0, r3
 8003532:	f000 f90b 	bl	800374c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003536:	e0ea      	b.n	800370e <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	225c      	movs	r2, #92	; 0x5c
 800353c:	5a99      	ldrh	r1, [r3, r2]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	225e      	movs	r2, #94	; 0x5e
 8003542:	5a9b      	ldrh	r3, [r3, r2]
 8003544:	b29a      	uxth	r2, r3
 8003546:	208e      	movs	r0, #142	; 0x8e
 8003548:	183b      	adds	r3, r7, r0
 800354a:	1a8a      	subs	r2, r1, r2
 800354c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	225e      	movs	r2, #94	; 0x5e
 8003552:	5a9b      	ldrh	r3, [r3, r2]
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d100      	bne.n	800355c <HAL_UART_IRQHandler+0x464>
 800355a:	e0da      	b.n	8003712 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 800355c:	183b      	adds	r3, r7, r0
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d100      	bne.n	8003566 <HAL_UART_IRQHandler+0x46e>
 8003564:	e0d5      	b.n	8003712 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003566:	f3ef 8310 	mrs	r3, PRIMASK
 800356a:	60fb      	str	r3, [r7, #12]
  return(result);
 800356c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800356e:	2488      	movs	r4, #136	; 0x88
 8003570:	193a      	adds	r2, r7, r4
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	2301      	movs	r3, #1
 8003576:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f383 8810 	msr	PRIMASK, r3
}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4966      	ldr	r1, [pc, #408]	; (8003724 <HAL_UART_IRQHandler+0x62c>)
 800358c:	400a      	ands	r2, r1
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	193b      	adds	r3, r7, r4
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f383 8810 	msr	PRIMASK, r3
}
 800359c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800359e:	f3ef 8310 	mrs	r3, PRIMASK
 80035a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80035a4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80035a6:	2484      	movs	r4, #132	; 0x84
 80035a8:	193a      	adds	r2, r7, r4
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	2301      	movs	r3, #1
 80035ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f383 8810 	msr	PRIMASK, r3
}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4959      	ldr	r1, [pc, #356]	; (8003728 <HAL_UART_IRQHandler+0x630>)
 80035c4:	400a      	ands	r2, r1
 80035c6:	609a      	str	r2, [r3, #8]
 80035c8:	193b      	adds	r3, r7, r4
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	f383 8810 	msr	PRIMASK, r3
}
 80035d4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2288      	movs	r2, #136	; 0x88
 80035da:	2120      	movs	r1, #32
 80035dc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ea:	f3ef 8310 	mrs	r3, PRIMASK
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f2:	2480      	movs	r4, #128	; 0x80
 80035f4:	193a      	adds	r2, r7, r4
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	2301      	movs	r3, #1
 80035fa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fe:	f383 8810 	msr	PRIMASK, r3
}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2110      	movs	r1, #16
 8003610:	438a      	bics	r2, r1
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	193b      	adds	r3, r7, r4
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361c:	f383 8810 	msr	PRIMASK, r3
}
 8003620:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003622:	183b      	adds	r3, r7, r0
 8003624:	881a      	ldrh	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	0011      	movs	r1, r2
 800362a:	0018      	movs	r0, r3
 800362c:	f000 f88e 	bl	800374c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003630:	e06f      	b.n	8003712 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003632:	23a4      	movs	r3, #164	; 0xa4
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	2380      	movs	r3, #128	; 0x80
 800363a:	035b      	lsls	r3, r3, #13
 800363c:	4013      	ands	r3, r2
 800363e:	d010      	beq.n	8003662 <HAL_UART_IRQHandler+0x56a>
 8003640:	239c      	movs	r3, #156	; 0x9c
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	03db      	lsls	r3, r3, #15
 800364a:	4013      	ands	r3, r2
 800364c:	d009      	beq.n	8003662 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2280      	movs	r2, #128	; 0x80
 8003654:	0352      	lsls	r2, r2, #13
 8003656:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	0018      	movs	r0, r3
 800365c:	f001 fcd4 	bl	8005008 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003660:	e05a      	b.n	8003718 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003662:	23a4      	movs	r3, #164	; 0xa4
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2280      	movs	r2, #128	; 0x80
 800366a:	4013      	ands	r3, r2
 800366c:	d016      	beq.n	800369c <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800366e:	23a0      	movs	r3, #160	; 0xa0
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2280      	movs	r2, #128	; 0x80
 8003676:	4013      	ands	r3, r2
 8003678:	d106      	bne.n	8003688 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800367a:	239c      	movs	r3, #156	; 0x9c
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	2380      	movs	r3, #128	; 0x80
 8003682:	041b      	lsls	r3, r3, #16
 8003684:	4013      	ands	r3, r2
 8003686:	d009      	beq.n	800369c <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800368c:	2b00      	cmp	r3, #0
 800368e:	d042      	beq.n	8003716 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	0010      	movs	r0, r2
 8003698:	4798      	blx	r3
    }
    return;
 800369a:	e03c      	b.n	8003716 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800369c:	23a4      	movs	r3, #164	; 0xa4
 800369e:	18fb      	adds	r3, r7, r3
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2240      	movs	r2, #64	; 0x40
 80036a4:	4013      	ands	r3, r2
 80036a6:	d00a      	beq.n	80036be <HAL_UART_IRQHandler+0x5c6>
 80036a8:	23a0      	movs	r3, #160	; 0xa0
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2240      	movs	r2, #64	; 0x40
 80036b0:	4013      	ands	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	0018      	movs	r0, r3
 80036b8:	f001 f82a 	bl	8004710 <UART_EndTransmit_IT>
    return;
 80036bc:	e02c      	b.n	8003718 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80036be:	23a4      	movs	r3, #164	; 0xa4
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	2380      	movs	r3, #128	; 0x80
 80036c6:	041b      	lsls	r3, r3, #16
 80036c8:	4013      	ands	r3, r2
 80036ca:	d00b      	beq.n	80036e4 <HAL_UART_IRQHandler+0x5ec>
 80036cc:	23a0      	movs	r3, #160	; 0xa0
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	2380      	movs	r3, #128	; 0x80
 80036d4:	05db      	lsls	r3, r3, #23
 80036d6:	4013      	ands	r3, r2
 80036d8:	d004      	beq.n	80036e4 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	0018      	movs	r0, r3
 80036de:	f001 fca3 	bl	8005028 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036e2:	e019      	b.n	8003718 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80036e4:	23a4      	movs	r3, #164	; 0xa4
 80036e6:	18fb      	adds	r3, r7, r3
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	2380      	movs	r3, #128	; 0x80
 80036ec:	045b      	lsls	r3, r3, #17
 80036ee:	4013      	ands	r3, r2
 80036f0:	d012      	beq.n	8003718 <HAL_UART_IRQHandler+0x620>
 80036f2:	23a0      	movs	r3, #160	; 0xa0
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	da0d      	bge.n	8003718 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	0018      	movs	r0, r3
 8003700:	f001 fc8a 	bl	8005018 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003704:	e008      	b.n	8003718 <HAL_UART_IRQHandler+0x620>
      return;
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	e006      	b.n	8003718 <HAL_UART_IRQHandler+0x620>
    return;
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	e004      	b.n	8003718 <HAL_UART_IRQHandler+0x620>
      return;
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	e002      	b.n	8003718 <HAL_UART_IRQHandler+0x620>
      return;
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	e000      	b.n	8003718 <HAL_UART_IRQHandler+0x620>
    return;
 8003716:	46c0      	nop			; (mov r8, r8)
  }
}
 8003718:	46bd      	mov	sp, r7
 800371a:	b02a      	add	sp, #168	; 0xa8
 800371c:	bdb0      	pop	{r4, r5, r7, pc}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	fffffeff 	.word	0xfffffeff
 8003724:	fffffedf 	.word	0xfffffedf
 8003728:	effffffe 	.word	0xeffffffe

0800372c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003734:	46c0      	nop			; (mov r8, r8)
 8003736:	46bd      	mov	sp, r7
 8003738:	b002      	add	sp, #8
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003744:	46c0      	nop			; (mov r8, r8)
 8003746:	46bd      	mov	sp, r7
 8003748:	b002      	add	sp, #8
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	000a      	movs	r2, r1
 8003756:	1cbb      	adds	r3, r7, #2
 8003758:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	46bd      	mov	sp, r7
 800375e:	b002      	add	sp, #8
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003764:	b5b0      	push	{r4, r5, r7, lr}
 8003766:	b090      	sub	sp, #64	; 0x40
 8003768:	af00      	add	r7, sp, #0
 800376a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800376c:	231a      	movs	r3, #26
 800376e:	2220      	movs	r2, #32
 8003770:	189b      	adds	r3, r3, r2
 8003772:	19db      	adds	r3, r3, r7
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	431a      	orrs	r2, r3
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	431a      	orrs	r2, r3
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	4313      	orrs	r3, r2
 800378e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4aaf      	ldr	r2, [pc, #700]	; (8003a54 <UART_SetConfig+0x2f0>)
 8003798:	4013      	ands	r3, r2
 800379a:	0019      	movs	r1, r3
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a2:	430b      	orrs	r3, r1
 80037a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	4aaa      	ldr	r2, [pc, #680]	; (8003a58 <UART_SetConfig+0x2f4>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	0018      	movs	r0, r3
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	68d9      	ldr	r1, [r3, #12]
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	0003      	movs	r3, r0
 80037bc:	430b      	orrs	r3, r1
 80037be:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4aa4      	ldr	r2, [pc, #656]	; (8003a5c <UART_SetConfig+0x2f8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d004      	beq.n	80037da <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037d6:	4313      	orrs	r3, r2
 80037d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	4a9f      	ldr	r2, [pc, #636]	; (8003a60 <UART_SetConfig+0x2fc>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	0019      	movs	r1, r3
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ec:	430b      	orrs	r3, r1
 80037ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	220f      	movs	r2, #15
 80037f8:	4393      	bics	r3, r2
 80037fa:	0018      	movs	r0, r3
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	0003      	movs	r3, r0
 8003806:	430b      	orrs	r3, r1
 8003808:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a95      	ldr	r2, [pc, #596]	; (8003a64 <UART_SetConfig+0x300>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d131      	bne.n	8003878 <UART_SetConfig+0x114>
 8003814:	4b94      	ldr	r3, [pc, #592]	; (8003a68 <UART_SetConfig+0x304>)
 8003816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003818:	2203      	movs	r2, #3
 800381a:	4013      	ands	r3, r2
 800381c:	2b03      	cmp	r3, #3
 800381e:	d01d      	beq.n	800385c <UART_SetConfig+0xf8>
 8003820:	d823      	bhi.n	800386a <UART_SetConfig+0x106>
 8003822:	2b02      	cmp	r3, #2
 8003824:	d00c      	beq.n	8003840 <UART_SetConfig+0xdc>
 8003826:	d820      	bhi.n	800386a <UART_SetConfig+0x106>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <UART_SetConfig+0xce>
 800382c:	2b01      	cmp	r3, #1
 800382e:	d00e      	beq.n	800384e <UART_SetConfig+0xea>
 8003830:	e01b      	b.n	800386a <UART_SetConfig+0x106>
 8003832:	231b      	movs	r3, #27
 8003834:	2220      	movs	r2, #32
 8003836:	189b      	adds	r3, r3, r2
 8003838:	19db      	adds	r3, r3, r7
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	e0b4      	b.n	80039aa <UART_SetConfig+0x246>
 8003840:	231b      	movs	r3, #27
 8003842:	2220      	movs	r2, #32
 8003844:	189b      	adds	r3, r3, r2
 8003846:	19db      	adds	r3, r3, r7
 8003848:	2202      	movs	r2, #2
 800384a:	701a      	strb	r2, [r3, #0]
 800384c:	e0ad      	b.n	80039aa <UART_SetConfig+0x246>
 800384e:	231b      	movs	r3, #27
 8003850:	2220      	movs	r2, #32
 8003852:	189b      	adds	r3, r3, r2
 8003854:	19db      	adds	r3, r3, r7
 8003856:	2204      	movs	r2, #4
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	e0a6      	b.n	80039aa <UART_SetConfig+0x246>
 800385c:	231b      	movs	r3, #27
 800385e:	2220      	movs	r2, #32
 8003860:	189b      	adds	r3, r3, r2
 8003862:	19db      	adds	r3, r3, r7
 8003864:	2208      	movs	r2, #8
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	e09f      	b.n	80039aa <UART_SetConfig+0x246>
 800386a:	231b      	movs	r3, #27
 800386c:	2220      	movs	r2, #32
 800386e:	189b      	adds	r3, r3, r2
 8003870:	19db      	adds	r3, r3, r7
 8003872:	2210      	movs	r2, #16
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	e098      	b.n	80039aa <UART_SetConfig+0x246>
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a7b      	ldr	r2, [pc, #492]	; (8003a6c <UART_SetConfig+0x308>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d131      	bne.n	80038e6 <UART_SetConfig+0x182>
 8003882:	4b79      	ldr	r3, [pc, #484]	; (8003a68 <UART_SetConfig+0x304>)
 8003884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003886:	220c      	movs	r2, #12
 8003888:	4013      	ands	r3, r2
 800388a:	2b0c      	cmp	r3, #12
 800388c:	d01d      	beq.n	80038ca <UART_SetConfig+0x166>
 800388e:	d823      	bhi.n	80038d8 <UART_SetConfig+0x174>
 8003890:	2b08      	cmp	r3, #8
 8003892:	d00c      	beq.n	80038ae <UART_SetConfig+0x14a>
 8003894:	d820      	bhi.n	80038d8 <UART_SetConfig+0x174>
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <UART_SetConfig+0x13c>
 800389a:	2b04      	cmp	r3, #4
 800389c:	d00e      	beq.n	80038bc <UART_SetConfig+0x158>
 800389e:	e01b      	b.n	80038d8 <UART_SetConfig+0x174>
 80038a0:	231b      	movs	r3, #27
 80038a2:	2220      	movs	r2, #32
 80038a4:	189b      	adds	r3, r3, r2
 80038a6:	19db      	adds	r3, r3, r7
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	e07d      	b.n	80039aa <UART_SetConfig+0x246>
 80038ae:	231b      	movs	r3, #27
 80038b0:	2220      	movs	r2, #32
 80038b2:	189b      	adds	r3, r3, r2
 80038b4:	19db      	adds	r3, r3, r7
 80038b6:	2202      	movs	r2, #2
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	e076      	b.n	80039aa <UART_SetConfig+0x246>
 80038bc:	231b      	movs	r3, #27
 80038be:	2220      	movs	r2, #32
 80038c0:	189b      	adds	r3, r3, r2
 80038c2:	19db      	adds	r3, r3, r7
 80038c4:	2204      	movs	r2, #4
 80038c6:	701a      	strb	r2, [r3, #0]
 80038c8:	e06f      	b.n	80039aa <UART_SetConfig+0x246>
 80038ca:	231b      	movs	r3, #27
 80038cc:	2220      	movs	r2, #32
 80038ce:	189b      	adds	r3, r3, r2
 80038d0:	19db      	adds	r3, r3, r7
 80038d2:	2208      	movs	r2, #8
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	e068      	b.n	80039aa <UART_SetConfig+0x246>
 80038d8:	231b      	movs	r3, #27
 80038da:	2220      	movs	r2, #32
 80038dc:	189b      	adds	r3, r3, r2
 80038de:	19db      	adds	r3, r3, r7
 80038e0:	2210      	movs	r2, #16
 80038e2:	701a      	strb	r2, [r3, #0]
 80038e4:	e061      	b.n	80039aa <UART_SetConfig+0x246>
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a61      	ldr	r2, [pc, #388]	; (8003a70 <UART_SetConfig+0x30c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d106      	bne.n	80038fe <UART_SetConfig+0x19a>
 80038f0:	231b      	movs	r3, #27
 80038f2:	2220      	movs	r2, #32
 80038f4:	189b      	adds	r3, r3, r2
 80038f6:	19db      	adds	r3, r3, r7
 80038f8:	2200      	movs	r2, #0
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	e055      	b.n	80039aa <UART_SetConfig+0x246>
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a5c      	ldr	r2, [pc, #368]	; (8003a74 <UART_SetConfig+0x310>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d106      	bne.n	8003916 <UART_SetConfig+0x1b2>
 8003908:	231b      	movs	r3, #27
 800390a:	2220      	movs	r2, #32
 800390c:	189b      	adds	r3, r3, r2
 800390e:	19db      	adds	r3, r3, r7
 8003910:	2200      	movs	r2, #0
 8003912:	701a      	strb	r2, [r3, #0]
 8003914:	e049      	b.n	80039aa <UART_SetConfig+0x246>
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a50      	ldr	r2, [pc, #320]	; (8003a5c <UART_SetConfig+0x2f8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d13e      	bne.n	800399e <UART_SetConfig+0x23a>
 8003920:	4b51      	ldr	r3, [pc, #324]	; (8003a68 <UART_SetConfig+0x304>)
 8003922:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003924:	23c0      	movs	r3, #192	; 0xc0
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	4013      	ands	r3, r2
 800392a:	22c0      	movs	r2, #192	; 0xc0
 800392c:	0112      	lsls	r2, r2, #4
 800392e:	4293      	cmp	r3, r2
 8003930:	d027      	beq.n	8003982 <UART_SetConfig+0x21e>
 8003932:	22c0      	movs	r2, #192	; 0xc0
 8003934:	0112      	lsls	r2, r2, #4
 8003936:	4293      	cmp	r3, r2
 8003938:	d82a      	bhi.n	8003990 <UART_SetConfig+0x22c>
 800393a:	2280      	movs	r2, #128	; 0x80
 800393c:	0112      	lsls	r2, r2, #4
 800393e:	4293      	cmp	r3, r2
 8003940:	d011      	beq.n	8003966 <UART_SetConfig+0x202>
 8003942:	2280      	movs	r2, #128	; 0x80
 8003944:	0112      	lsls	r2, r2, #4
 8003946:	4293      	cmp	r3, r2
 8003948:	d822      	bhi.n	8003990 <UART_SetConfig+0x22c>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d004      	beq.n	8003958 <UART_SetConfig+0x1f4>
 800394e:	2280      	movs	r2, #128	; 0x80
 8003950:	00d2      	lsls	r2, r2, #3
 8003952:	4293      	cmp	r3, r2
 8003954:	d00e      	beq.n	8003974 <UART_SetConfig+0x210>
 8003956:	e01b      	b.n	8003990 <UART_SetConfig+0x22c>
 8003958:	231b      	movs	r3, #27
 800395a:	2220      	movs	r2, #32
 800395c:	189b      	adds	r3, r3, r2
 800395e:	19db      	adds	r3, r3, r7
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	e021      	b.n	80039aa <UART_SetConfig+0x246>
 8003966:	231b      	movs	r3, #27
 8003968:	2220      	movs	r2, #32
 800396a:	189b      	adds	r3, r3, r2
 800396c:	19db      	adds	r3, r3, r7
 800396e:	2202      	movs	r2, #2
 8003970:	701a      	strb	r2, [r3, #0]
 8003972:	e01a      	b.n	80039aa <UART_SetConfig+0x246>
 8003974:	231b      	movs	r3, #27
 8003976:	2220      	movs	r2, #32
 8003978:	189b      	adds	r3, r3, r2
 800397a:	19db      	adds	r3, r3, r7
 800397c:	2204      	movs	r2, #4
 800397e:	701a      	strb	r2, [r3, #0]
 8003980:	e013      	b.n	80039aa <UART_SetConfig+0x246>
 8003982:	231b      	movs	r3, #27
 8003984:	2220      	movs	r2, #32
 8003986:	189b      	adds	r3, r3, r2
 8003988:	19db      	adds	r3, r3, r7
 800398a:	2208      	movs	r2, #8
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	e00c      	b.n	80039aa <UART_SetConfig+0x246>
 8003990:	231b      	movs	r3, #27
 8003992:	2220      	movs	r2, #32
 8003994:	189b      	adds	r3, r3, r2
 8003996:	19db      	adds	r3, r3, r7
 8003998:	2210      	movs	r2, #16
 800399a:	701a      	strb	r2, [r3, #0]
 800399c:	e005      	b.n	80039aa <UART_SetConfig+0x246>
 800399e:	231b      	movs	r3, #27
 80039a0:	2220      	movs	r2, #32
 80039a2:	189b      	adds	r3, r3, r2
 80039a4:	19db      	adds	r3, r3, r7
 80039a6:	2210      	movs	r2, #16
 80039a8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a2b      	ldr	r2, [pc, #172]	; (8003a5c <UART_SetConfig+0x2f8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d000      	beq.n	80039b6 <UART_SetConfig+0x252>
 80039b4:	e0a9      	b.n	8003b0a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039b6:	231b      	movs	r3, #27
 80039b8:	2220      	movs	r2, #32
 80039ba:	189b      	adds	r3, r3, r2
 80039bc:	19db      	adds	r3, r3, r7
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d015      	beq.n	80039f0 <UART_SetConfig+0x28c>
 80039c4:	dc18      	bgt.n	80039f8 <UART_SetConfig+0x294>
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d00d      	beq.n	80039e6 <UART_SetConfig+0x282>
 80039ca:	dc15      	bgt.n	80039f8 <UART_SetConfig+0x294>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <UART_SetConfig+0x272>
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d005      	beq.n	80039e0 <UART_SetConfig+0x27c>
 80039d4:	e010      	b.n	80039f8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d6:	f7fe fbc7 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 80039da:	0003      	movs	r3, r0
 80039dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039de:	e014      	b.n	8003a0a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e0:	4b25      	ldr	r3, [pc, #148]	; (8003a78 <UART_SetConfig+0x314>)
 80039e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039e4:	e011      	b.n	8003a0a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039e6:	f7fe fb33 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 80039ea:	0003      	movs	r3, r0
 80039ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039ee:	e00c      	b.n	8003a0a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f0:	2380      	movs	r3, #128	; 0x80
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039f6:	e008      	b.n	8003a0a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80039fc:	231a      	movs	r3, #26
 80039fe:	2220      	movs	r2, #32
 8003a00:	189b      	adds	r3, r3, r2
 8003a02:	19db      	adds	r3, r3, r7
 8003a04:	2201      	movs	r2, #1
 8003a06:	701a      	strb	r2, [r3, #0]
        break;
 8003a08:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d100      	bne.n	8003a12 <UART_SetConfig+0x2ae>
 8003a10:	e14b      	b.n	8003caa <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a16:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <UART_SetConfig+0x318>)
 8003a18:	0052      	lsls	r2, r2, #1
 8003a1a:	5ad3      	ldrh	r3, [r2, r3]
 8003a1c:	0019      	movs	r1, r3
 8003a1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a20:	f7fc fb70 	bl	8000104 <__udivsi3>
 8003a24:	0003      	movs	r3, r0
 8003a26:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	0013      	movs	r3, r2
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	189b      	adds	r3, r3, r2
 8003a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d305      	bcc.n	8003a44 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d91d      	bls.n	8003a80 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003a44:	231a      	movs	r3, #26
 8003a46:	2220      	movs	r2, #32
 8003a48:	189b      	adds	r3, r3, r2
 8003a4a:	19db      	adds	r3, r3, r7
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	701a      	strb	r2, [r3, #0]
 8003a50:	e12b      	b.n	8003caa <UART_SetConfig+0x546>
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	cfff69f3 	.word	0xcfff69f3
 8003a58:	ffffcfff 	.word	0xffffcfff
 8003a5c:	40008000 	.word	0x40008000
 8003a60:	11fff4ff 	.word	0x11fff4ff
 8003a64:	40013800 	.word	0x40013800
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	40004400 	.word	0x40004400
 8003a70:	40004800 	.word	0x40004800
 8003a74:	40004c00 	.word	0x40004c00
 8003a78:	00f42400 	.word	0x00f42400
 8003a7c:	08005360 	.word	0x08005360
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a82:	61bb      	str	r3, [r7, #24]
 8003a84:	2300      	movs	r3, #0
 8003a86:	61fb      	str	r3, [r7, #28]
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a8c:	4b92      	ldr	r3, [pc, #584]	; (8003cd8 <UART_SetConfig+0x574>)
 8003a8e:	0052      	lsls	r2, r2, #1
 8003a90:	5ad3      	ldrh	r3, [r2, r3]
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	69b8      	ldr	r0, [r7, #24]
 8003a9e:	69f9      	ldr	r1, [r7, #28]
 8003aa0:	f7fc fca6 	bl	80003f0 <__aeabi_uldivmod>
 8003aa4:	0002      	movs	r2, r0
 8003aa6:	000b      	movs	r3, r1
 8003aa8:	0e11      	lsrs	r1, r2, #24
 8003aaa:	021d      	lsls	r5, r3, #8
 8003aac:	430d      	orrs	r5, r1
 8003aae:	0214      	lsls	r4, r2, #8
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	68b8      	ldr	r0, [r7, #8]
 8003abe:	68f9      	ldr	r1, [r7, #12]
 8003ac0:	1900      	adds	r0, r0, r4
 8003ac2:	4169      	adcs	r1, r5
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
 8003aca:	2300      	movs	r3, #0
 8003acc:	607b      	str	r3, [r7, #4]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f7fc fc8d 	bl	80003f0 <__aeabi_uldivmod>
 8003ad6:	0002      	movs	r2, r0
 8003ad8:	000b      	movs	r3, r1
 8003ada:	0013      	movs	r3, r2
 8003adc:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ae0:	23c0      	movs	r3, #192	; 0xc0
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d309      	bcc.n	8003afc <UART_SetConfig+0x398>
 8003ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	035b      	lsls	r3, r3, #13
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d204      	bcs.n	8003afc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af8:	60da      	str	r2, [r3, #12]
 8003afa:	e0d6      	b.n	8003caa <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003afc:	231a      	movs	r3, #26
 8003afe:	2220      	movs	r2, #32
 8003b00:	189b      	adds	r3, r3, r2
 8003b02:	19db      	adds	r3, r3, r7
 8003b04:	2201      	movs	r2, #1
 8003b06:	701a      	strb	r2, [r3, #0]
 8003b08:	e0cf      	b.n	8003caa <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	69da      	ldr	r2, [r3, #28]
 8003b0e:	2380      	movs	r3, #128	; 0x80
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d000      	beq.n	8003b18 <UART_SetConfig+0x3b4>
 8003b16:	e070      	b.n	8003bfa <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003b18:	231b      	movs	r3, #27
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	189b      	adds	r3, r3, r2
 8003b1e:	19db      	adds	r3, r3, r7
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d015      	beq.n	8003b52 <UART_SetConfig+0x3ee>
 8003b26:	dc18      	bgt.n	8003b5a <UART_SetConfig+0x3f6>
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d00d      	beq.n	8003b48 <UART_SetConfig+0x3e4>
 8003b2c:	dc15      	bgt.n	8003b5a <UART_SetConfig+0x3f6>
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <UART_SetConfig+0x3d4>
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d005      	beq.n	8003b42 <UART_SetConfig+0x3de>
 8003b36:	e010      	b.n	8003b5a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b38:	f7fe fb16 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b40:	e014      	b.n	8003b6c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b42:	4b66      	ldr	r3, [pc, #408]	; (8003cdc <UART_SetConfig+0x578>)
 8003b44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b46:	e011      	b.n	8003b6c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b48:	f7fe fa82 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 8003b4c:	0003      	movs	r3, r0
 8003b4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b50:	e00c      	b.n	8003b6c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b58:	e008      	b.n	8003b6c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003b5e:	231a      	movs	r3, #26
 8003b60:	2220      	movs	r2, #32
 8003b62:	189b      	adds	r3, r3, r2
 8003b64:	19db      	adds	r3, r3, r7
 8003b66:	2201      	movs	r2, #1
 8003b68:	701a      	strb	r2, [r3, #0]
        break;
 8003b6a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d100      	bne.n	8003b74 <UART_SetConfig+0x410>
 8003b72:	e09a      	b.n	8003caa <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b78:	4b57      	ldr	r3, [pc, #348]	; (8003cd8 <UART_SetConfig+0x574>)
 8003b7a:	0052      	lsls	r2, r2, #1
 8003b7c:	5ad3      	ldrh	r3, [r2, r3]
 8003b7e:	0019      	movs	r1, r3
 8003b80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003b82:	f7fc fabf 	bl	8000104 <__udivsi3>
 8003b86:	0003      	movs	r3, r0
 8003b88:	005a      	lsls	r2, r3, #1
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	085b      	lsrs	r3, r3, #1
 8003b90:	18d2      	adds	r2, r2, r3
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	0019      	movs	r1, r3
 8003b98:	0010      	movs	r0, r2
 8003b9a:	f7fc fab3 	bl	8000104 <__udivsi3>
 8003b9e:	0003      	movs	r3, r0
 8003ba0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba4:	2b0f      	cmp	r3, #15
 8003ba6:	d921      	bls.n	8003bec <UART_SetConfig+0x488>
 8003ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003baa:	2380      	movs	r3, #128	; 0x80
 8003bac:	025b      	lsls	r3, r3, #9
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d21c      	bcs.n	8003bec <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	200e      	movs	r0, #14
 8003bb8:	2420      	movs	r4, #32
 8003bba:	1903      	adds	r3, r0, r4
 8003bbc:	19db      	adds	r3, r3, r7
 8003bbe:	210f      	movs	r1, #15
 8003bc0:	438a      	bics	r2, r1
 8003bc2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2207      	movs	r2, #7
 8003bcc:	4013      	ands	r3, r2
 8003bce:	b299      	uxth	r1, r3
 8003bd0:	1903      	adds	r3, r0, r4
 8003bd2:	19db      	adds	r3, r3, r7
 8003bd4:	1902      	adds	r2, r0, r4
 8003bd6:	19d2      	adds	r2, r2, r7
 8003bd8:	8812      	ldrh	r2, [r2, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	1902      	adds	r2, r0, r4
 8003be4:	19d2      	adds	r2, r2, r7
 8003be6:	8812      	ldrh	r2, [r2, #0]
 8003be8:	60da      	str	r2, [r3, #12]
 8003bea:	e05e      	b.n	8003caa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003bec:	231a      	movs	r3, #26
 8003bee:	2220      	movs	r2, #32
 8003bf0:	189b      	adds	r3, r3, r2
 8003bf2:	19db      	adds	r3, r3, r7
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	701a      	strb	r2, [r3, #0]
 8003bf8:	e057      	b.n	8003caa <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bfa:	231b      	movs	r3, #27
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	189b      	adds	r3, r3, r2
 8003c00:	19db      	adds	r3, r3, r7
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d015      	beq.n	8003c34 <UART_SetConfig+0x4d0>
 8003c08:	dc18      	bgt.n	8003c3c <UART_SetConfig+0x4d8>
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d00d      	beq.n	8003c2a <UART_SetConfig+0x4c6>
 8003c0e:	dc15      	bgt.n	8003c3c <UART_SetConfig+0x4d8>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <UART_SetConfig+0x4b6>
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d005      	beq.n	8003c24 <UART_SetConfig+0x4c0>
 8003c18:	e010      	b.n	8003c3c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c1a:	f7fe faa5 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8003c1e:	0003      	movs	r3, r0
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c22:	e014      	b.n	8003c4e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c24:	4b2d      	ldr	r3, [pc, #180]	; (8003cdc <UART_SetConfig+0x578>)
 8003c26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c28:	e011      	b.n	8003c4e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c2a:	f7fe fa11 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c32:	e00c      	b.n	8003c4e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c3a:	e008      	b.n	8003c4e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003c40:	231a      	movs	r3, #26
 8003c42:	2220      	movs	r2, #32
 8003c44:	189b      	adds	r3, r3, r2
 8003c46:	19db      	adds	r3, r3, r7
 8003c48:	2201      	movs	r2, #1
 8003c4a:	701a      	strb	r2, [r3, #0]
        break;
 8003c4c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d02a      	beq.n	8003caa <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c58:	4b1f      	ldr	r3, [pc, #124]	; (8003cd8 <UART_SetConfig+0x574>)
 8003c5a:	0052      	lsls	r2, r2, #1
 8003c5c:	5ad3      	ldrh	r3, [r2, r3]
 8003c5e:	0019      	movs	r1, r3
 8003c60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c62:	f7fc fa4f 	bl	8000104 <__udivsi3>
 8003c66:	0003      	movs	r3, r0
 8003c68:	001a      	movs	r2, r3
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	18d2      	adds	r2, r2, r3
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	0019      	movs	r1, r3
 8003c78:	0010      	movs	r0, r2
 8003c7a:	f7fc fa43 	bl	8000104 <__udivsi3>
 8003c7e:	0003      	movs	r3, r0
 8003c80:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	2b0f      	cmp	r3, #15
 8003c86:	d90a      	bls.n	8003c9e <UART_SetConfig+0x53a>
 8003c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	025b      	lsls	r3, r3, #9
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d205      	bcs.n	8003c9e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60da      	str	r2, [r3, #12]
 8003c9c:	e005      	b.n	8003caa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003c9e:	231a      	movs	r3, #26
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	189b      	adds	r3, r3, r2
 8003ca4:	19db      	adds	r3, r3, r7
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	226a      	movs	r2, #106	; 0x6a
 8003cae:	2101      	movs	r1, #1
 8003cb0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	2268      	movs	r2, #104	; 0x68
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003cc6:	231a      	movs	r3, #26
 8003cc8:	2220      	movs	r2, #32
 8003cca:	189b      	adds	r3, r3, r2
 8003ccc:	19db      	adds	r3, r3, r7
 8003cce:	781b      	ldrb	r3, [r3, #0]
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b010      	add	sp, #64	; 0x40
 8003cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8003cd8:	08005360 	.word	0x08005360
 8003cdc:	00f42400 	.word	0x00f42400

08003ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	2201      	movs	r2, #1
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d00b      	beq.n	8003d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4a4a      	ldr	r2, [pc, #296]	; (8003e24 <UART_AdvFeatureConfig+0x144>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	2202      	movs	r2, #2
 8003d10:	4013      	ands	r3, r2
 8003d12:	d00b      	beq.n	8003d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4a43      	ldr	r2, [pc, #268]	; (8003e28 <UART_AdvFeatureConfig+0x148>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	0019      	movs	r1, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	2204      	movs	r2, #4
 8003d32:	4013      	ands	r3, r2
 8003d34:	d00b      	beq.n	8003d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	4a3b      	ldr	r2, [pc, #236]	; (8003e2c <UART_AdvFeatureConfig+0x14c>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	0019      	movs	r1, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	2208      	movs	r2, #8
 8003d54:	4013      	ands	r3, r2
 8003d56:	d00b      	beq.n	8003d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4a34      	ldr	r2, [pc, #208]	; (8003e30 <UART_AdvFeatureConfig+0x150>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	0019      	movs	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	2210      	movs	r2, #16
 8003d76:	4013      	ands	r3, r2
 8003d78:	d00b      	beq.n	8003d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	4a2c      	ldr	r2, [pc, #176]	; (8003e34 <UART_AdvFeatureConfig+0x154>)
 8003d82:	4013      	ands	r3, r2
 8003d84:	0019      	movs	r1, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	2220      	movs	r2, #32
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d00b      	beq.n	8003db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	4a25      	ldr	r2, [pc, #148]	; (8003e38 <UART_AdvFeatureConfig+0x158>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	0019      	movs	r1, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db8:	2240      	movs	r2, #64	; 0x40
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d01d      	beq.n	8003dfa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	4a1d      	ldr	r2, [pc, #116]	; (8003e3c <UART_AdvFeatureConfig+0x15c>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	0019      	movs	r1, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dda:	2380      	movs	r3, #128	; 0x80
 8003ddc:	035b      	lsls	r3, r3, #13
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d10b      	bne.n	8003dfa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	4a15      	ldr	r2, [pc, #84]	; (8003e40 <UART_AdvFeatureConfig+0x160>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	0019      	movs	r1, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	2280      	movs	r2, #128	; 0x80
 8003e00:	4013      	ands	r3, r2
 8003e02:	d00b      	beq.n	8003e1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	4a0e      	ldr	r2, [pc, #56]	; (8003e44 <UART_AdvFeatureConfig+0x164>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	0019      	movs	r1, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	605a      	str	r2, [r3, #4]
  }
}
 8003e1c:	46c0      	nop			; (mov r8, r8)
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b002      	add	sp, #8
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	fffdffff 	.word	0xfffdffff
 8003e28:	fffeffff 	.word	0xfffeffff
 8003e2c:	fffbffff 	.word	0xfffbffff
 8003e30:	ffff7fff 	.word	0xffff7fff
 8003e34:	ffffefff 	.word	0xffffefff
 8003e38:	ffffdfff 	.word	0xffffdfff
 8003e3c:	ffefffff 	.word	0xffefffff
 8003e40:	ff9fffff 	.word	0xff9fffff
 8003e44:	fff7ffff 	.word	0xfff7ffff

08003e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	228c      	movs	r2, #140	; 0x8c
 8003e54:	2100      	movs	r1, #0
 8003e56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e58:	f7fd f940 	bl	80010dc <HAL_GetTick>
 8003e5c:	0003      	movs	r3, r0
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2208      	movs	r2, #8
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d10c      	bne.n	8003e88 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2280      	movs	r2, #128	; 0x80
 8003e72:	0391      	lsls	r1, r2, #14
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <UART_CheckIdleState+0x90>)
 8003e78:	9200      	str	r2, [sp, #0]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f000 f82e 	bl	8003edc <UART_WaitOnFlagUntilTimeout>
 8003e80:	1e03      	subs	r3, r0, #0
 8003e82:	d001      	beq.n	8003e88 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e023      	b.n	8003ed0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2204      	movs	r2, #4
 8003e90:	4013      	ands	r3, r2
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d10c      	bne.n	8003eb0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2280      	movs	r2, #128	; 0x80
 8003e9a:	03d1      	lsls	r1, r2, #15
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	4a0e      	ldr	r2, [pc, #56]	; (8003ed8 <UART_CheckIdleState+0x90>)
 8003ea0:	9200      	str	r2, [sp, #0]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f000 f81a 	bl	8003edc <UART_WaitOnFlagUntilTimeout>
 8003ea8:	1e03      	subs	r3, r0, #0
 8003eaa:	d001      	beq.n	8003eb0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e00f      	b.n	8003ed0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2284      	movs	r2, #132	; 0x84
 8003eb4:	2120      	movs	r1, #32
 8003eb6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2288      	movs	r2, #136	; 0x88
 8003ebc:	2120      	movs	r1, #32
 8003ebe:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2280      	movs	r2, #128	; 0x80
 8003eca:	2100      	movs	r1, #0
 8003ecc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b004      	add	sp, #16
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	01ffffff 	.word	0x01ffffff

08003edc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b094      	sub	sp, #80	; 0x50
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	1dfb      	adds	r3, r7, #7
 8003eea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eec:	e0a7      	b.n	800403e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	d100      	bne.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003ef4:	e0a3      	b.n	800403e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef6:	f7fd f8f1 	bl	80010dc <HAL_GetTick>
 8003efa:	0002      	movs	r2, r0
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d302      	bcc.n	8003f0c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d13f      	bne.n	8003f8c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f14:	647b      	str	r3, [r7, #68]	; 0x44
 8003f16:	2301      	movs	r3, #1
 8003f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1c:	f383 8810 	msr	PRIMASK, r3
}
 8003f20:	46c0      	nop			; (mov r8, r8)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	494e      	ldr	r1, [pc, #312]	; (8004068 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003f2e:	400a      	ands	r2, r1
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f34:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f38:	f383 8810 	msr	PRIMASK, r3
}
 8003f3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f42:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f46:	643b      	str	r3, [r7, #64]	; 0x40
 8003f48:	2301      	movs	r3, #1
 8003f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4e:	f383 8810 	msr	PRIMASK, r3
}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2101      	movs	r1, #1
 8003f60:	438a      	bics	r2, r1
 8003f62:	609a      	str	r2, [r3, #8]
 8003f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f66:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f6a:	f383 8810 	msr	PRIMASK, r3
}
 8003f6e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2284      	movs	r2, #132	; 0x84
 8003f74:	2120      	movs	r1, #32
 8003f76:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2288      	movs	r2, #136	; 0x88
 8003f7c:	2120      	movs	r1, #32
 8003f7e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2280      	movs	r2, #128	; 0x80
 8003f84:	2100      	movs	r1, #0
 8003f86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e069      	b.n	8004060 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2204      	movs	r2, #4
 8003f94:	4013      	ands	r3, r2
 8003f96:	d052      	beq.n	800403e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	69da      	ldr	r2, [r3, #28]
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	401a      	ands	r2, r3
 8003fa4:	2380      	movs	r3, #128	; 0x80
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d148      	bne.n	800403e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2280      	movs	r2, #128	; 0x80
 8003fb2:	0112      	lsls	r2, r2, #4
 8003fb4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8003fba:	613b      	str	r3, [r7, #16]
  return(result);
 8003fbc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f383 8810 	msr	PRIMASK, r3
}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4924      	ldr	r1, [pc, #144]	; (8004068 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003fd8:	400a      	ands	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	f383 8810 	msr	PRIMASK, r3
}
 8003fe6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fec:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fee:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	f383 8810 	msr	PRIMASK, r3
}
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2101      	movs	r1, #1
 800400a:	438a      	bics	r2, r1
 800400c:	609a      	str	r2, [r3, #8]
 800400e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	f383 8810 	msr	PRIMASK, r3
}
 8004018:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2284      	movs	r2, #132	; 0x84
 800401e:	2120      	movs	r1, #32
 8004020:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2288      	movs	r2, #136	; 0x88
 8004026:	2120      	movs	r1, #32
 8004028:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	228c      	movs	r2, #140	; 0x8c
 800402e:	2120      	movs	r1, #32
 8004030:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2280      	movs	r2, #128	; 0x80
 8004036:	2100      	movs	r1, #0
 8004038:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e010      	b.n	8004060 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	4013      	ands	r3, r2
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	425a      	negs	r2, r3
 800404e:	4153      	adcs	r3, r2
 8004050:	b2db      	uxtb	r3, r3
 8004052:	001a      	movs	r2, r3
 8004054:	1dfb      	adds	r3, r7, #7
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d100      	bne.n	800405e <UART_WaitOnFlagUntilTimeout+0x182>
 800405c:	e747      	b.n	8003eee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	0018      	movs	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	b014      	add	sp, #80	; 0x50
 8004066:	bd80      	pop	{r7, pc}
 8004068:	fffffe5f 	.word	0xfffffe5f

0800406c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b098      	sub	sp, #96	; 0x60
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	1dbb      	adds	r3, r7, #6
 8004078:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	1dba      	adds	r2, r7, #6
 8004084:	215c      	movs	r1, #92	; 0x5c
 8004086:	8812      	ldrh	r2, [r2, #0]
 8004088:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1dba      	adds	r2, r7, #6
 800408e:	215e      	movs	r1, #94	; 0x5e
 8004090:	8812      	ldrh	r2, [r2, #0]
 8004092:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	2380      	movs	r3, #128	; 0x80
 80040a0:	015b      	lsls	r3, r3, #5
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d10d      	bne.n	80040c2 <UART_Start_Receive_IT+0x56>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <UART_Start_Receive_IT+0x4c>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2260      	movs	r2, #96	; 0x60
 80040b2:	497f      	ldr	r1, [pc, #508]	; (80042b0 <UART_Start_Receive_IT+0x244>)
 80040b4:	5299      	strh	r1, [r3, r2]
 80040b6:	e02e      	b.n	8004116 <UART_Start_Receive_IT+0xaa>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2260      	movs	r2, #96	; 0x60
 80040bc:	21ff      	movs	r1, #255	; 0xff
 80040be:	5299      	strh	r1, [r3, r2]
 80040c0:	e029      	b.n	8004116 <UART_Start_Receive_IT+0xaa>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10d      	bne.n	80040e6 <UART_Start_Receive_IT+0x7a>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d104      	bne.n	80040dc <UART_Start_Receive_IT+0x70>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2260      	movs	r2, #96	; 0x60
 80040d6:	21ff      	movs	r1, #255	; 0xff
 80040d8:	5299      	strh	r1, [r3, r2]
 80040da:	e01c      	b.n	8004116 <UART_Start_Receive_IT+0xaa>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2260      	movs	r2, #96	; 0x60
 80040e0:	217f      	movs	r1, #127	; 0x7f
 80040e2:	5299      	strh	r1, [r3, r2]
 80040e4:	e017      	b.n	8004116 <UART_Start_Receive_IT+0xaa>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	2380      	movs	r3, #128	; 0x80
 80040ec:	055b      	lsls	r3, r3, #21
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d10d      	bne.n	800410e <UART_Start_Receive_IT+0xa2>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d104      	bne.n	8004104 <UART_Start_Receive_IT+0x98>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2260      	movs	r2, #96	; 0x60
 80040fe:	217f      	movs	r1, #127	; 0x7f
 8004100:	5299      	strh	r1, [r3, r2]
 8004102:	e008      	b.n	8004116 <UART_Start_Receive_IT+0xaa>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2260      	movs	r2, #96	; 0x60
 8004108:	213f      	movs	r1, #63	; 0x3f
 800410a:	5299      	strh	r1, [r3, r2]
 800410c:	e003      	b.n	8004116 <UART_Start_Receive_IT+0xaa>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2260      	movs	r2, #96	; 0x60
 8004112:	2100      	movs	r1, #0
 8004114:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	228c      	movs	r2, #140	; 0x8c
 800411a:	2100      	movs	r1, #0
 800411c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2288      	movs	r2, #136	; 0x88
 8004122:	2122      	movs	r1, #34	; 0x22
 8004124:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004126:	f3ef 8310 	mrs	r3, PRIMASK
 800412a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800412c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004130:	2301      	movs	r3, #1
 8004132:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004136:	f383 8810 	msr	PRIMASK, r3
}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2101      	movs	r1, #1
 8004148:	430a      	orrs	r2, r1
 800414a:	609a      	str	r2, [r3, #8]
 800414c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800414e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004152:	f383 8810 	msr	PRIMASK, r3
}
 8004156:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800415c:	2380      	movs	r3, #128	; 0x80
 800415e:	059b      	lsls	r3, r3, #22
 8004160:	429a      	cmp	r2, r3
 8004162:	d154      	bne.n	800420e <UART_Start_Receive_IT+0x1a2>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2268      	movs	r2, #104	; 0x68
 8004168:	5a9b      	ldrh	r3, [r3, r2]
 800416a:	1dba      	adds	r2, r7, #6
 800416c:	8812      	ldrh	r2, [r2, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d34d      	bcc.n	800420e <UART_Start_Receive_IT+0x1a2>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	2380      	movs	r3, #128	; 0x80
 8004178:	015b      	lsls	r3, r3, #5
 800417a:	429a      	cmp	r2, r3
 800417c:	d107      	bne.n	800418e <UART_Start_Receive_IT+0x122>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d103      	bne.n	800418e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4a4a      	ldr	r2, [pc, #296]	; (80042b4 <UART_Start_Receive_IT+0x248>)
 800418a:	671a      	str	r2, [r3, #112]	; 0x70
 800418c:	e002      	b.n	8004194 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4a49      	ldr	r2, [pc, #292]	; (80042b8 <UART_Start_Receive_IT+0x24c>)
 8004192:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2280      	movs	r2, #128	; 0x80
 8004198:	2100      	movs	r1, #0
 800419a:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d019      	beq.n	80041d8 <UART_Start_Receive_IT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a4:	f3ef 8310 	mrs	r3, PRIMASK
 80041a8:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80041aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80041ae:	2301      	movs	r3, #1
 80041b0:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b4:	f383 8810 	msr	PRIMASK, r3
}
 80041b8:	46c0      	nop			; (mov r8, r8)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2180      	movs	r1, #128	; 0x80
 80041c6:	0049      	lsls	r1, r1, #1
 80041c8:	430a      	orrs	r2, r1
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d2:	f383 8810 	msr	PRIMASK, r3
}
 80041d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041d8:	f3ef 8310 	mrs	r3, PRIMASK
 80041dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80041e0:	657b      	str	r3, [r7, #84]	; 0x54
 80041e2:	2301      	movs	r3, #1
 80041e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e8:	f383 8810 	msr	PRIMASK, r3
}
 80041ec:	46c0      	nop			; (mov r8, r8)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2180      	movs	r1, #128	; 0x80
 80041fa:	0549      	lsls	r1, r1, #21
 80041fc:	430a      	orrs	r2, r1
 80041fe:	609a      	str	r2, [r3, #8]
 8004200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004202:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	f383 8810 	msr	PRIMASK, r3
}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	e04b      	b.n	80042a6 <UART_Start_Receive_IT+0x23a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	015b      	lsls	r3, r3, #5
 8004216:	429a      	cmp	r2, r3
 8004218:	d107      	bne.n	800422a <UART_Start_Receive_IT+0x1be>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d103      	bne.n	800422a <UART_Start_Receive_IT+0x1be>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4a25      	ldr	r2, [pc, #148]	; (80042bc <UART_Start_Receive_IT+0x250>)
 8004226:	671a      	str	r2, [r3, #112]	; 0x70
 8004228:	e002      	b.n	8004230 <UART_Start_Receive_IT+0x1c4>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4a24      	ldr	r2, [pc, #144]	; (80042c0 <UART_Start_Receive_IT+0x254>)
 800422e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2280      	movs	r2, #128	; 0x80
 8004234:	2100      	movs	r1, #0
 8004236:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d019      	beq.n	8004274 <UART_Start_Receive_IT+0x208>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004240:	f3ef 8310 	mrs	r3, PRIMASK
 8004244:	61fb      	str	r3, [r7, #28]
  return(result);
 8004246:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004248:	64fb      	str	r3, [r7, #76]	; 0x4c
 800424a:	2301      	movs	r3, #1
 800424c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	f383 8810 	msr	PRIMASK, r3
}
 8004254:	46c0      	nop			; (mov r8, r8)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2190      	movs	r1, #144	; 0x90
 8004262:	0049      	lsls	r1, r1, #1
 8004264:	430a      	orrs	r2, r1
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	f383 8810 	msr	PRIMASK, r3
}
 8004272:	e018      	b.n	80042a6 <UART_Start_Receive_IT+0x23a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004274:	f3ef 8310 	mrs	r3, PRIMASK
 8004278:	613b      	str	r3, [r7, #16]
  return(result);
 800427a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800427c:	653b      	str	r3, [r7, #80]	; 0x50
 800427e:	2301      	movs	r3, #1
 8004280:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f383 8810 	msr	PRIMASK, r3
}
 8004288:	46c0      	nop			; (mov r8, r8)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2120      	movs	r1, #32
 8004296:	430a      	orrs	r2, r1
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800429c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	f383 8810 	msr	PRIMASK, r3
}
 80042a4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	0018      	movs	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b018      	add	sp, #96	; 0x60
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	000001ff 	.word	0x000001ff
 80042b4:	08004d25 	.word	0x08004d25
 80042b8:	08004a41 	.word	0x08004a41
 80042bc:	080048d5 	.word	0x080048d5
 80042c0:	08004769 	.word	0x08004769

080042c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08e      	sub	sp, #56	; 0x38
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042cc:	f3ef 8310 	mrs	r3, PRIMASK
 80042d0:	617b      	str	r3, [r7, #20]
  return(result);
 80042d2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042d4:	637b      	str	r3, [r7, #52]	; 0x34
 80042d6:	2301      	movs	r3, #1
 80042d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	f383 8810 	msr	PRIMASK, r3
}
 80042e0:	46c0      	nop			; (mov r8, r8)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4926      	ldr	r1, [pc, #152]	; (8004388 <UART_EndRxTransfer+0xc4>)
 80042ee:	400a      	ands	r2, r1
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	f383 8810 	msr	PRIMASK, r3
}
 80042fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004302:	623b      	str	r3, [r7, #32]
  return(result);
 8004304:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004306:	633b      	str	r3, [r7, #48]	; 0x30
 8004308:	2301      	movs	r3, #1
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	f383 8810 	msr	PRIMASK, r3
}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	491b      	ldr	r1, [pc, #108]	; (800438c <UART_EndRxTransfer+0xc8>)
 8004320:	400a      	ands	r2, r1
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432a:	f383 8810 	msr	PRIMASK, r3
}
 800432e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d118      	bne.n	800436a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004338:	f3ef 8310 	mrs	r3, PRIMASK
 800433c:	60bb      	str	r3, [r7, #8]
  return(result);
 800433e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004342:	2301      	movs	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f383 8810 	msr	PRIMASK, r3
}
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2110      	movs	r1, #16
 800435a:	438a      	bics	r2, r1
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004360:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f383 8810 	msr	PRIMASK, r3
}
 8004368:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2288      	movs	r2, #136	; 0x88
 800436e:	2120      	movs	r1, #32
 8004370:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	46bd      	mov	sp, r7
 8004382:	b00e      	add	sp, #56	; 0x38
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	fffffedf 	.word	0xfffffedf
 800438c:	effffffe 	.word	0xeffffffe

08004390 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	225e      	movs	r2, #94	; 0x5e
 80043a2:	2100      	movs	r1, #0
 80043a4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2256      	movs	r2, #86	; 0x56
 80043aa:	2100      	movs	r1, #0
 80043ac:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	0018      	movs	r0, r3
 80043b2:	f7ff f9c3 	bl	800373c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	46bd      	mov	sp, r7
 80043ba:	b004      	add	sp, #16
 80043bc:	bd80      	pop	{r7, pc}

080043be <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b08a      	sub	sp, #40	; 0x28
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2284      	movs	r2, #132	; 0x84
 80043ca:	589b      	ldr	r3, [r3, r2]
 80043cc:	2b21      	cmp	r3, #33	; 0x21
 80043ce:	d14c      	bne.n	800446a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2256      	movs	r2, #86	; 0x56
 80043d4:	5a9b      	ldrh	r3, [r3, r2]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d132      	bne.n	8004442 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043dc:	f3ef 8310 	mrs	r3, PRIMASK
 80043e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80043e2:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80043e4:	627b      	str	r3, [r7, #36]	; 0x24
 80043e6:	2301      	movs	r3, #1
 80043e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f383 8810 	msr	PRIMASK, r3
}
 80043f0:	46c0      	nop			; (mov r8, r8)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2180      	movs	r1, #128	; 0x80
 80043fe:	438a      	bics	r2, r1
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f383 8810 	msr	PRIMASK, r3
}
 800440c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800440e:	f3ef 8310 	mrs	r3, PRIMASK
 8004412:	617b      	str	r3, [r7, #20]
  return(result);
 8004414:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004416:	623b      	str	r3, [r7, #32]
 8004418:	2301      	movs	r3, #1
 800441a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	f383 8810 	msr	PRIMASK, r3
}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2140      	movs	r1, #64	; 0x40
 8004430:	430a      	orrs	r2, r1
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f383 8810 	msr	PRIMASK, r3
}
 800443e:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004440:	e013      	b.n	800446a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004446:	781a      	ldrb	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2256      	movs	r2, #86	; 0x56
 800445c:	5a9b      	ldrh	r3, [r3, r2]
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b299      	uxth	r1, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2256      	movs	r2, #86	; 0x56
 8004468:	5299      	strh	r1, [r3, r2]
}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	46bd      	mov	sp, r7
 800446e:	b00a      	add	sp, #40	; 0x28
 8004470:	bd80      	pop	{r7, pc}

08004472 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b08c      	sub	sp, #48	; 0x30
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2284      	movs	r2, #132	; 0x84
 800447e:	589b      	ldr	r3, [r3, r2]
 8004480:	2b21      	cmp	r3, #33	; 0x21
 8004482:	d151      	bne.n	8004528 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2256      	movs	r2, #86	; 0x56
 8004488:	5a9b      	ldrh	r3, [r3, r2]
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d132      	bne.n	80044f6 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004490:	f3ef 8310 	mrs	r3, PRIMASK
 8004494:	60fb      	str	r3, [r7, #12]
  return(result);
 8004496:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004498:	62bb      	str	r3, [r7, #40]	; 0x28
 800449a:	2301      	movs	r3, #1
 800449c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f383 8810 	msr	PRIMASK, r3
}
 80044a4:	46c0      	nop			; (mov r8, r8)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2180      	movs	r1, #128	; 0x80
 80044b2:	438a      	bics	r2, r1
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f383 8810 	msr	PRIMASK, r3
}
 80044c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044c2:	f3ef 8310 	mrs	r3, PRIMASK
 80044c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80044c8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
 80044cc:	2301      	movs	r3, #1
 80044ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f383 8810 	msr	PRIMASK, r3
}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2140      	movs	r1, #64	; 0x40
 80044e4:	430a      	orrs	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	f383 8810 	msr	PRIMASK, r3
}
 80044f2:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80044f4:	e018      	b.n	8004528 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80044fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	001a      	movs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	05d2      	lsls	r2, r2, #23
 8004508:	0dd2      	lsrs	r2, r2, #23
 800450a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004510:	1c9a      	adds	r2, r3, #2
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2256      	movs	r2, #86	; 0x56
 800451a:	5a9b      	ldrh	r3, [r3, r2]
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	b299      	uxth	r1, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2256      	movs	r2, #86	; 0x56
 8004526:	5299      	strh	r1, [r3, r2]
}
 8004528:	46c0      	nop			; (mov r8, r8)
 800452a:	46bd      	mov	sp, r7
 800452c:	b00c      	add	sp, #48	; 0x30
 800452e:	bd80      	pop	{r7, pc}

08004530 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08c      	sub	sp, #48	; 0x30
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2284      	movs	r2, #132	; 0x84
 800453c:	589b      	ldr	r3, [r3, r2]
 800453e:	2b21      	cmp	r3, #33	; 0x21
 8004540:	d165      	bne.n	800460e <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004542:	232e      	movs	r3, #46	; 0x2e
 8004544:	18fb      	adds	r3, r7, r3
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	216a      	movs	r1, #106	; 0x6a
 800454a:	5a52      	ldrh	r2, [r2, r1]
 800454c:	801a      	strh	r2, [r3, #0]
 800454e:	e059      	b.n	8004604 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2256      	movs	r2, #86	; 0x56
 8004554:	5a9b      	ldrh	r3, [r3, r2]
 8004556:	b29b      	uxth	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d133      	bne.n	80045c4 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800455c:	f3ef 8310 	mrs	r3, PRIMASK
 8004560:	60fb      	str	r3, [r7, #12]
  return(result);
 8004562:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004564:	62bb      	str	r3, [r7, #40]	; 0x28
 8004566:	2301      	movs	r3, #1
 8004568:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f383 8810 	msr	PRIMASK, r3
}
 8004570:	46c0      	nop			; (mov r8, r8)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4926      	ldr	r1, [pc, #152]	; (8004618 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800457e:	400a      	ands	r2, r1
 8004580:	609a      	str	r2, [r3, #8]
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f383 8810 	msr	PRIMASK, r3
}
 800458c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800458e:	f3ef 8310 	mrs	r3, PRIMASK
 8004592:	61bb      	str	r3, [r7, #24]
  return(result);
 8004594:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
 8004598:	2301      	movs	r3, #1
 800459a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f383 8810 	msr	PRIMASK, r3
}
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2140      	movs	r1, #64	; 0x40
 80045b0:	430a      	orrs	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	f383 8810 	msr	PRIMASK, r3
}
 80045be:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 80045c0:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80045c2:	e024      	b.n	800460e <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	2280      	movs	r2, #128	; 0x80
 80045cc:	4013      	ands	r3, r2
 80045ce:	d013      	beq.n	80045f8 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2256      	movs	r2, #86	; 0x56
 80045ea:	5a9b      	ldrh	r3, [r3, r2]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b299      	uxth	r1, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2256      	movs	r2, #86	; 0x56
 80045f6:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80045f8:	212e      	movs	r1, #46	; 0x2e
 80045fa:	187b      	adds	r3, r7, r1
 80045fc:	881a      	ldrh	r2, [r3, #0]
 80045fe:	187b      	adds	r3, r7, r1
 8004600:	3a01      	subs	r2, #1
 8004602:	801a      	strh	r2, [r3, #0]
 8004604:	232e      	movs	r3, #46	; 0x2e
 8004606:	18fb      	adds	r3, r7, r3
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1a0      	bne.n	8004550 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	46bd      	mov	sp, r7
 8004612:	b00c      	add	sp, #48	; 0x30
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	ff7fffff 	.word	0xff7fffff

0800461c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08c      	sub	sp, #48	; 0x30
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2284      	movs	r2, #132	; 0x84
 8004628:	589b      	ldr	r3, [r3, r2]
 800462a:	2b21      	cmp	r3, #33	; 0x21
 800462c:	d16a      	bne.n	8004704 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800462e:	232e      	movs	r3, #46	; 0x2e
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	216a      	movs	r1, #106	; 0x6a
 8004636:	5a52      	ldrh	r2, [r2, r1]
 8004638:	801a      	strh	r2, [r3, #0]
 800463a:	e05e      	b.n	80046fa <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2256      	movs	r2, #86	; 0x56
 8004640:	5a9b      	ldrh	r3, [r3, r2]
 8004642:	b29b      	uxth	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d133      	bne.n	80046b0 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004648:	f3ef 8310 	mrs	r3, PRIMASK
 800464c:	60bb      	str	r3, [r7, #8]
  return(result);
 800464e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
 8004652:	2301      	movs	r3, #1
 8004654:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f383 8810 	msr	PRIMASK, r3
}
 800465c:	46c0      	nop			; (mov r8, r8)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4928      	ldr	r1, [pc, #160]	; (800470c <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800466a:	400a      	ands	r2, r1
 800466c:	609a      	str	r2, [r3, #8]
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f383 8810 	msr	PRIMASK, r3
}
 8004678:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800467a:	f3ef 8310 	mrs	r3, PRIMASK
 800467e:	617b      	str	r3, [r7, #20]
  return(result);
 8004680:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004682:	623b      	str	r3, [r7, #32]
 8004684:	2301      	movs	r3, #1
 8004686:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	f383 8810 	msr	PRIMASK, r3
}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2140      	movs	r1, #64	; 0x40
 800469c:	430a      	orrs	r2, r1
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f383 8810 	msr	PRIMASK, r3
}
 80046aa:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 80046ac:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80046ae:	e029      	b.n	8004704 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	2280      	movs	r2, #128	; 0x80
 80046b8:	4013      	ands	r3, r2
 80046ba:	d018      	beq.n	80046ee <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c0:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	001a      	movs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	05d2      	lsls	r2, r2, #23
 80046ce:	0dd2      	lsrs	r2, r2, #23
 80046d0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d6:	1c9a      	adds	r2, r3, #2
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2256      	movs	r2, #86	; 0x56
 80046e0:	5a9b      	ldrh	r3, [r3, r2]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b299      	uxth	r1, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2256      	movs	r2, #86	; 0x56
 80046ec:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80046ee:	212e      	movs	r1, #46	; 0x2e
 80046f0:	187b      	adds	r3, r7, r1
 80046f2:	881a      	ldrh	r2, [r3, #0]
 80046f4:	187b      	adds	r3, r7, r1
 80046f6:	3a01      	subs	r2, #1
 80046f8:	801a      	strh	r2, [r3, #0]
 80046fa:	232e      	movs	r3, #46	; 0x2e
 80046fc:	18fb      	adds	r3, r7, r3
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d19b      	bne.n	800463c <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8004704:	46c0      	nop			; (mov r8, r8)
 8004706:	46bd      	mov	sp, r7
 8004708:	b00c      	add	sp, #48	; 0x30
 800470a:	bd80      	pop	{r7, pc}
 800470c:	ff7fffff 	.word	0xff7fffff

08004710 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004718:	f3ef 8310 	mrs	r3, PRIMASK
 800471c:	60bb      	str	r3, [r7, #8]
  return(result);
 800471e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	2301      	movs	r3, #1
 8004724:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f383 8810 	msr	PRIMASK, r3
}
 800472c:	46c0      	nop			; (mov r8, r8)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2140      	movs	r1, #64	; 0x40
 800473a:	438a      	bics	r2, r1
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f383 8810 	msr	PRIMASK, r3
}
 8004748:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2284      	movs	r2, #132	; 0x84
 800474e:	2120      	movs	r1, #32
 8004750:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	0018      	movs	r0, r3
 800475c:	f7fe ffe6 	bl	800372c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004760:	46c0      	nop			; (mov r8, r8)
 8004762:	46bd      	mov	sp, r7
 8004764:	b006      	add	sp, #24
 8004766:	bd80      	pop	{r7, pc}

08004768 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b090      	sub	sp, #64	; 0x40
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004770:	203e      	movs	r0, #62	; 0x3e
 8004772:	183b      	adds	r3, r7, r0
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	2160      	movs	r1, #96	; 0x60
 8004778:	5a52      	ldrh	r2, [r2, r1]
 800477a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2288      	movs	r2, #136	; 0x88
 8004780:	589b      	ldr	r3, [r3, r2]
 8004782:	2b22      	cmp	r3, #34	; 0x22
 8004784:	d000      	beq.n	8004788 <UART_RxISR_8BIT+0x20>
 8004786:	e097      	b.n	80048b8 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800478e:	213c      	movs	r1, #60	; 0x3c
 8004790:	187b      	adds	r3, r7, r1
 8004792:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004794:	187b      	adds	r3, r7, r1
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	b2da      	uxtb	r2, r3
 800479a:	183b      	adds	r3, r7, r0
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b2d9      	uxtb	r1, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a4:	400a      	ands	r2, r1
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	225e      	movs	r2, #94	; 0x5e
 80047b8:	5a9b      	ldrh	r3, [r3, r2]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b299      	uxth	r1, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	225e      	movs	r2, #94	; 0x5e
 80047c4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	225e      	movs	r2, #94	; 0x5e
 80047ca:	5a9b      	ldrh	r3, [r3, r2]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d000      	beq.n	80047d4 <UART_RxISR_8BIT+0x6c>
 80047d2:	e079      	b.n	80048c8 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d4:	f3ef 8310 	mrs	r3, PRIMASK
 80047d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80047da:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80047de:	2301      	movs	r3, #1
 80047e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f383 8810 	msr	PRIMASK, r3
}
 80047e8:	46c0      	nop			; (mov r8, r8)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4936      	ldr	r1, [pc, #216]	; (80048d0 <UART_RxISR_8BIT+0x168>)
 80047f6:	400a      	ands	r2, r1
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	f383 8810 	msr	PRIMASK, r3
}
 8004804:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004806:	f3ef 8310 	mrs	r3, PRIMASK
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	637b      	str	r3, [r7, #52]	; 0x34
 8004810:	2301      	movs	r3, #1
 8004812:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	f383 8810 	msr	PRIMASK, r3
}
 800481a:	46c0      	nop			; (mov r8, r8)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2101      	movs	r1, #1
 8004828:	438a      	bics	r2, r1
 800482a:	609a      	str	r2, [r3, #8]
 800482c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004832:	f383 8810 	msr	PRIMASK, r3
}
 8004836:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2288      	movs	r2, #136	; 0x88
 800483c:	2120      	movs	r1, #32
 800483e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800484a:	2b01      	cmp	r3, #1
 800484c:	d12f      	bne.n	80048ae <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004854:	f3ef 8310 	mrs	r3, PRIMASK
 8004858:	60fb      	str	r3, [r7, #12]
  return(result);
 800485a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800485c:	633b      	str	r3, [r7, #48]	; 0x30
 800485e:	2301      	movs	r3, #1
 8004860:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f383 8810 	msr	PRIMASK, r3
}
 8004868:	46c0      	nop			; (mov r8, r8)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2110      	movs	r1, #16
 8004876:	438a      	bics	r2, r1
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f383 8810 	msr	PRIMASK, r3
}
 8004884:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	2210      	movs	r2, #16
 800488e:	4013      	ands	r3, r2
 8004890:	2b10      	cmp	r3, #16
 8004892:	d103      	bne.n	800489c <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2210      	movs	r2, #16
 800489a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	225c      	movs	r2, #92	; 0x5c
 80048a0:	5a9a      	ldrh	r2, [r3, r2]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	0011      	movs	r1, r2
 80048a6:	0018      	movs	r0, r3
 80048a8:	f7fe ff50 	bl	800374c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048ac:	e00c      	b.n	80048c8 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7fb fee5 	bl	8000680 <HAL_UART_RxCpltCallback>
}
 80048b6:	e007      	b.n	80048c8 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699a      	ldr	r2, [r3, #24]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2108      	movs	r1, #8
 80048c4:	430a      	orrs	r2, r1
 80048c6:	619a      	str	r2, [r3, #24]
}
 80048c8:	46c0      	nop			; (mov r8, r8)
 80048ca:	46bd      	mov	sp, r7
 80048cc:	b010      	add	sp, #64	; 0x40
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	fffffedf 	.word	0xfffffedf

080048d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b090      	sub	sp, #64	; 0x40
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80048dc:	203e      	movs	r0, #62	; 0x3e
 80048de:	183b      	adds	r3, r7, r0
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	2160      	movs	r1, #96	; 0x60
 80048e4:	5a52      	ldrh	r2, [r2, r1]
 80048e6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2288      	movs	r2, #136	; 0x88
 80048ec:	589b      	ldr	r3, [r3, r2]
 80048ee:	2b22      	cmp	r3, #34	; 0x22
 80048f0:	d000      	beq.n	80048f4 <UART_RxISR_16BIT+0x20>
 80048f2:	e097      	b.n	8004a24 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048fa:	213c      	movs	r1, #60	; 0x3c
 80048fc:	187b      	adds	r3, r7, r1
 80048fe:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004904:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004906:	187b      	adds	r3, r7, r1
 8004908:	183a      	adds	r2, r7, r0
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	8812      	ldrh	r2, [r2, #0]
 800490e:	4013      	ands	r3, r2
 8004910:	b29a      	uxth	r2, r3
 8004912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004914:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491a:	1c9a      	adds	r2, r3, #2
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	225e      	movs	r2, #94	; 0x5e
 8004924:	5a9b      	ldrh	r3, [r3, r2]
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b299      	uxth	r1, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	225e      	movs	r2, #94	; 0x5e
 8004930:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	225e      	movs	r2, #94	; 0x5e
 8004936:	5a9b      	ldrh	r3, [r3, r2]
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d000      	beq.n	8004940 <UART_RxISR_16BIT+0x6c>
 800493e:	e079      	b.n	8004a34 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004940:	f3ef 8310 	mrs	r3, PRIMASK
 8004944:	617b      	str	r3, [r7, #20]
  return(result);
 8004946:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004948:	637b      	str	r3, [r7, #52]	; 0x34
 800494a:	2301      	movs	r3, #1
 800494c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	f383 8810 	msr	PRIMASK, r3
}
 8004954:	46c0      	nop			; (mov r8, r8)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4936      	ldr	r1, [pc, #216]	; (8004a3c <UART_RxISR_16BIT+0x168>)
 8004962:	400a      	ands	r2, r1
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004968:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	f383 8810 	msr	PRIMASK, r3
}
 8004970:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004972:	f3ef 8310 	mrs	r3, PRIMASK
 8004976:	623b      	str	r3, [r7, #32]
  return(result);
 8004978:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497a:	633b      	str	r3, [r7, #48]	; 0x30
 800497c:	2301      	movs	r3, #1
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	f383 8810 	msr	PRIMASK, r3
}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2101      	movs	r1, #1
 8004994:	438a      	bics	r2, r1
 8004996:	609a      	str	r2, [r3, #8]
 8004998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	f383 8810 	msr	PRIMASK, r3
}
 80049a2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2288      	movs	r2, #136	; 0x88
 80049a8:	2120      	movs	r1, #32
 80049aa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d12f      	bne.n	8004a1a <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049c0:	f3ef 8310 	mrs	r3, PRIMASK
 80049c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80049c6:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ca:	2301      	movs	r3, #1
 80049cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f383 8810 	msr	PRIMASK, r3
}
 80049d4:	46c0      	nop			; (mov r8, r8)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2110      	movs	r1, #16
 80049e2:	438a      	bics	r2, r1
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f383 8810 	msr	PRIMASK, r3
}
 80049f0:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	2210      	movs	r2, #16
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d103      	bne.n	8004a08 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2210      	movs	r2, #16
 8004a06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	225c      	movs	r2, #92	; 0x5c
 8004a0c:	5a9a      	ldrh	r2, [r3, r2]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	0011      	movs	r1, r2
 8004a12:	0018      	movs	r0, r3
 8004a14:	f7fe fe9a 	bl	800374c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a18:	e00c      	b.n	8004a34 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f7fb fe2f 	bl	8000680 <HAL_UART_RxCpltCallback>
}
 8004a22:	e007      	b.n	8004a34 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699a      	ldr	r2, [r3, #24]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2108      	movs	r1, #8
 8004a30:	430a      	orrs	r2, r1
 8004a32:	619a      	str	r2, [r3, #24]
}
 8004a34:	46c0      	nop			; (mov r8, r8)
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b010      	add	sp, #64	; 0x40
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	fffffedf 	.word	0xfffffedf

08004a40 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b09c      	sub	sp, #112	; 0x70
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004a48:	236a      	movs	r3, #106	; 0x6a
 8004a4a:	18fb      	adds	r3, r7, r3
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	2160      	movs	r1, #96	; 0x60
 8004a50:	5a52      	ldrh	r2, [r2, r1]
 8004a52:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2288      	movs	r2, #136	; 0x88
 8004a70:	589b      	ldr	r3, [r3, r2]
 8004a72:	2b22      	cmp	r3, #34	; 0x22
 8004a74:	d000      	beq.n	8004a78 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004a76:	e141      	b.n	8004cfc <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004a78:	235e      	movs	r3, #94	; 0x5e
 8004a7a:	18fb      	adds	r3, r7, r3
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	2168      	movs	r1, #104	; 0x68
 8004a80:	5a52      	ldrh	r2, [r2, r1]
 8004a82:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004a84:	e0e8      	b.n	8004c58 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a8c:	215c      	movs	r1, #92	; 0x5c
 8004a8e:	187b      	adds	r3, r7, r1
 8004a90:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a92:	187b      	adds	r3, r7, r1
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	236a      	movs	r3, #106	; 0x6a
 8004a9a:	18fb      	adds	r3, r7, r3
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	b2d9      	uxtb	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa4:	400a      	ands	r2, r1
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	225e      	movs	r2, #94	; 0x5e
 8004ab8:	5a9b      	ldrh	r3, [r3, r2]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b299      	uxth	r1, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	225e      	movs	r2, #94	; 0x5e
 8004ac4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad0:	2207      	movs	r2, #7
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d049      	beq.n	8004b6a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad8:	2201      	movs	r2, #1
 8004ada:	4013      	ands	r3, r2
 8004adc:	d010      	beq.n	8004b00 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004ade:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ae0:	2380      	movs	r3, #128	; 0x80
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	d00b      	beq.n	8004b00 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2201      	movs	r2, #1
 8004aee:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	228c      	movs	r2, #140	; 0x8c
 8004af4:	589b      	ldr	r3, [r3, r2]
 8004af6:	2201      	movs	r2, #1
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	218c      	movs	r1, #140	; 0x8c
 8004afe:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b02:	2202      	movs	r2, #2
 8004b04:	4013      	ands	r3, r2
 8004b06:	d00f      	beq.n	8004b28 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004b08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d00b      	beq.n	8004b28 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2202      	movs	r2, #2
 8004b16:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	228c      	movs	r2, #140	; 0x8c
 8004b1c:	589b      	ldr	r3, [r3, r2]
 8004b1e:	2204      	movs	r2, #4
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	218c      	movs	r1, #140	; 0x8c
 8004b26:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2a:	2204      	movs	r2, #4
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d00f      	beq.n	8004b50 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004b30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b32:	2201      	movs	r2, #1
 8004b34:	4013      	ands	r3, r2
 8004b36:	d00b      	beq.n	8004b50 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2204      	movs	r2, #4
 8004b3e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	228c      	movs	r2, #140	; 0x8c
 8004b44:	589b      	ldr	r3, [r3, r2]
 8004b46:	2202      	movs	r2, #2
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	218c      	movs	r1, #140	; 0x8c
 8004b4e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	228c      	movs	r2, #140	; 0x8c
 8004b54:	589b      	ldr	r3, [r3, r2]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d007      	beq.n	8004b6a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f7fe fded 	bl	800373c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	228c      	movs	r2, #140	; 0x8c
 8004b66:	2100      	movs	r1, #0
 8004b68:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	225e      	movs	r2, #94	; 0x5e
 8004b6e:	5a9b      	ldrh	r3, [r3, r2]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d170      	bne.n	8004c58 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b76:	f3ef 8310 	mrs	r3, PRIMASK
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b80:	2301      	movs	r3, #1
 8004b82:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b86:	f383 8810 	msr	PRIMASK, r3
}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	495f      	ldr	r1, [pc, #380]	; (8004d14 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8004b98:	400a      	ands	r2, r1
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b9e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba2:	f383 8810 	msr	PRIMASK, r3
}
 8004ba6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bac:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004bb0:	657b      	str	r3, [r7, #84]	; 0x54
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb8:	f383 8810 	msr	PRIMASK, r3
}
 8004bbc:	46c0      	nop			; (mov r8, r8)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4953      	ldr	r1, [pc, #332]	; (8004d18 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8004bca:	400a      	ands	r2, r1
 8004bcc:	609a      	str	r2, [r3, #8]
 8004bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bd0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd4:	f383 8810 	msr	PRIMASK, r3
}
 8004bd8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2288      	movs	r2, #136	; 0x88
 8004bde:	2120      	movs	r1, #32
 8004be0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d12f      	bne.n	8004c50 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bfa:	623b      	str	r3, [r7, #32]
  return(result);
 8004bfc:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bfe:	653b      	str	r3, [r7, #80]	; 0x50
 8004c00:	2301      	movs	r3, #1
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	f383 8810 	msr	PRIMASK, r3
}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2110      	movs	r1, #16
 8004c18:	438a      	bics	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	f383 8810 	msr	PRIMASK, r3
}
 8004c26:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	2210      	movs	r2, #16
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b10      	cmp	r3, #16
 8004c34:	d103      	bne.n	8004c3e <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2210      	movs	r2, #16
 8004c3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	225c      	movs	r2, #92	; 0x5c
 8004c42:	5a9a      	ldrh	r2, [r3, r2]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	0011      	movs	r1, r2
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f7fe fd7f 	bl	800374c <HAL_UARTEx_RxEventCallback>
 8004c4e:	e003      	b.n	8004c58 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	0018      	movs	r0, r3
 8004c54:	f7fb fd14 	bl	8000680 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004c58:	235e      	movs	r3, #94	; 0x5e
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d004      	beq.n	8004c6c <UART_RxISR_8BIT_FIFOEN+0x22c>
 8004c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c64:	2220      	movs	r2, #32
 8004c66:	4013      	ands	r3, r2
 8004c68:	d000      	beq.n	8004c6c <UART_RxISR_8BIT_FIFOEN+0x22c>
 8004c6a:	e70c      	b.n	8004a86 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004c6c:	204e      	movs	r0, #78	; 0x4e
 8004c6e:	183b      	adds	r3, r7, r0
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	215e      	movs	r1, #94	; 0x5e
 8004c74:	5a52      	ldrh	r2, [r2, r1]
 8004c76:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004c78:	0001      	movs	r1, r0
 8004c7a:	187b      	adds	r3, r7, r1
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d044      	beq.n	8004d0c <UART_RxISR_8BIT_FIFOEN+0x2cc>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2268      	movs	r2, #104	; 0x68
 8004c86:	5a9b      	ldrh	r3, [r3, r2]
 8004c88:	187a      	adds	r2, r7, r1
 8004c8a:	8812      	ldrh	r2, [r2, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d23d      	bcs.n	8004d0c <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c90:	f3ef 8310 	mrs	r3, PRIMASK
 8004c94:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c96:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004c98:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f383 8810 	msr	PRIMASK, r3
}
 8004ca4:	46c0      	nop			; (mov r8, r8)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	491a      	ldr	r1, [pc, #104]	; (8004d1c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8004cb2:	400a      	ands	r2, r1
 8004cb4:	609a      	str	r2, [r3, #8]
 8004cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f383 8810 	msr	PRIMASK, r3
}
 8004cc0:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a16      	ldr	r2, [pc, #88]	; (8004d20 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8004cc6:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8004ccc:	617b      	str	r3, [r7, #20]
  return(result);
 8004cce:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	f383 8810 	msr	PRIMASK, r3
}
 8004cdc:	46c0      	nop			; (mov r8, r8)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2120      	movs	r1, #32
 8004cea:	430a      	orrs	r2, r1
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	f383 8810 	msr	PRIMASK, r3
}
 8004cf8:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004cfa:	e007      	b.n	8004d0c <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2108      	movs	r1, #8
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	619a      	str	r2, [r3, #24]
}
 8004d0c:	46c0      	nop			; (mov r8, r8)
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	b01c      	add	sp, #112	; 0x70
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	fffffeff 	.word	0xfffffeff
 8004d18:	effffffe 	.word	0xeffffffe
 8004d1c:	efffffff 	.word	0xefffffff
 8004d20:	08004769 	.word	0x08004769

08004d24 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b09e      	sub	sp, #120	; 0x78
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004d2c:	2372      	movs	r3, #114	; 0x72
 8004d2e:	18fb      	adds	r3, r7, r3
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	2160      	movs	r1, #96	; 0x60
 8004d34:	5a52      	ldrh	r2, [r2, r1]
 8004d36:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2288      	movs	r2, #136	; 0x88
 8004d54:	589b      	ldr	r3, [r3, r2]
 8004d56:	2b22      	cmp	r3, #34	; 0x22
 8004d58:	d000      	beq.n	8004d5c <UART_RxISR_16BIT_FIFOEN+0x38>
 8004d5a:	e141      	b.n	8004fe0 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004d5c:	2366      	movs	r3, #102	; 0x66
 8004d5e:	18fb      	adds	r3, r7, r3
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	2168      	movs	r1, #104	; 0x68
 8004d64:	5a52      	ldrh	r2, [r2, r1]
 8004d66:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004d68:	e0e8      	b.n	8004f3c <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d70:	2164      	movs	r1, #100	; 0x64
 8004d72:	187b      	adds	r3, r7, r1
 8004d74:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7a:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8004d7c:	187b      	adds	r3, r7, r1
 8004d7e:	2272      	movs	r2, #114	; 0x72
 8004d80:	18ba      	adds	r2, r7, r2
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	8812      	ldrh	r2, [r2, #0]
 8004d86:	4013      	ands	r3, r2
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d92:	1c9a      	adds	r2, r3, #2
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	225e      	movs	r2, #94	; 0x5e
 8004d9c:	5a9b      	ldrh	r3, [r3, r2]
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b299      	uxth	r1, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	225e      	movs	r2, #94	; 0x5e
 8004da8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db4:	2207      	movs	r2, #7
 8004db6:	4013      	ands	r3, r2
 8004db8:	d049      	beq.n	8004e4e <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	d010      	beq.n	8004de4 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8004dc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dc4:	2380      	movs	r3, #128	; 0x80
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	4013      	ands	r3, r2
 8004dca:	d00b      	beq.n	8004de4 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	228c      	movs	r2, #140	; 0x8c
 8004dd8:	589b      	ldr	r3, [r3, r2]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	218c      	movs	r1, #140	; 0x8c
 8004de2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004de4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de6:	2202      	movs	r2, #2
 8004de8:	4013      	ands	r3, r2
 8004dea:	d00f      	beq.n	8004e0c <UART_RxISR_16BIT_FIFOEN+0xe8>
 8004dec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dee:	2201      	movs	r2, #1
 8004df0:	4013      	ands	r3, r2
 8004df2:	d00b      	beq.n	8004e0c <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2202      	movs	r2, #2
 8004dfa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	228c      	movs	r2, #140	; 0x8c
 8004e00:	589b      	ldr	r3, [r3, r2]
 8004e02:	2204      	movs	r2, #4
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	218c      	movs	r1, #140	; 0x8c
 8004e0a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e0e:	2204      	movs	r2, #4
 8004e10:	4013      	ands	r3, r2
 8004e12:	d00f      	beq.n	8004e34 <UART_RxISR_16BIT_FIFOEN+0x110>
 8004e14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e16:	2201      	movs	r2, #1
 8004e18:	4013      	ands	r3, r2
 8004e1a:	d00b      	beq.n	8004e34 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2204      	movs	r2, #4
 8004e22:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	228c      	movs	r2, #140	; 0x8c
 8004e28:	589b      	ldr	r3, [r3, r2]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	218c      	movs	r1, #140	; 0x8c
 8004e32:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	228c      	movs	r2, #140	; 0x8c
 8004e38:	589b      	ldr	r3, [r3, r2]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d007      	beq.n	8004e4e <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	0018      	movs	r0, r3
 8004e42:	f7fe fc7b 	bl	800373c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	228c      	movs	r2, #140	; 0x8c
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	225e      	movs	r2, #94	; 0x5e
 8004e52:	5a9b      	ldrh	r3, [r3, r2]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d170      	bne.n	8004f3c <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e5e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e64:	2301      	movs	r3, #1
 8004e66:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6a:	f383 8810 	msr	PRIMASK, r3
}
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	495f      	ldr	r1, [pc, #380]	; (8004ff8 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8004e7c:	400a      	ands	r2, r1
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e82:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e86:	f383 8810 	msr	PRIMASK, r3
}
 8004e8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e90:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e94:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e96:	2301      	movs	r3, #1
 8004e98:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ea0:	46c0      	nop			; (mov r8, r8)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4953      	ldr	r1, [pc, #332]	; (8004ffc <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8004eae:	400a      	ands	r2, r1
 8004eb0:	609a      	str	r2, [r3, #8]
 8004eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eb4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb8:	f383 8810 	msr	PRIMASK, r3
}
 8004ebc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2288      	movs	r2, #136	; 0x88
 8004ec2:	2120      	movs	r1, #32
 8004ec4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d12f      	bne.n	8004f34 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eda:	f3ef 8310 	mrs	r3, PRIMASK
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	f383 8810 	msr	PRIMASK, r3
}
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2110      	movs	r1, #16
 8004efc:	438a      	bics	r2, r1
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f06:	f383 8810 	msr	PRIMASK, r3
}
 8004f0a:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	2210      	movs	r2, #16
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b10      	cmp	r3, #16
 8004f18:	d103      	bne.n	8004f22 <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2210      	movs	r2, #16
 8004f20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	225c      	movs	r2, #92	; 0x5c
 8004f26:	5a9a      	ldrh	r2, [r3, r2]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	0011      	movs	r1, r2
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	f7fe fc0d 	bl	800374c <HAL_UARTEx_RxEventCallback>
 8004f32:	e003      	b.n	8004f3c <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	0018      	movs	r0, r3
 8004f38:	f7fb fba2 	bl	8000680 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004f3c:	2366      	movs	r3, #102	; 0x66
 8004f3e:	18fb      	adds	r3, r7, r3
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d004      	beq.n	8004f50 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f48:	2220      	movs	r2, #32
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	d000      	beq.n	8004f50 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004f4e:	e70c      	b.n	8004d6a <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004f50:	2052      	movs	r0, #82	; 0x52
 8004f52:	183b      	adds	r3, r7, r0
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	215e      	movs	r1, #94	; 0x5e
 8004f58:	5a52      	ldrh	r2, [r2, r1]
 8004f5a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004f5c:	0001      	movs	r1, r0
 8004f5e:	187b      	adds	r3, r7, r1
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d044      	beq.n	8004ff0 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2268      	movs	r2, #104	; 0x68
 8004f6a:	5a9b      	ldrh	r3, [r3, r2]
 8004f6c:	187a      	adds	r2, r7, r1
 8004f6e:	8812      	ldrh	r2, [r2, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d23d      	bcs.n	8004ff0 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f74:	f3ef 8310 	mrs	r3, PRIMASK
 8004f78:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f7e:	2301      	movs	r3, #1
 8004f80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f383 8810 	msr	PRIMASK, r3
}
 8004f88:	46c0      	nop			; (mov r8, r8)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	491a      	ldr	r1, [pc, #104]	; (8005000 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8004f96:	400a      	ands	r2, r1
 8004f98:	609a      	str	r2, [r3, #8]
 8004f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f383 8810 	msr	PRIMASK, r3
}
 8004fa4:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a16      	ldr	r2, [pc, #88]	; (8005004 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8004faa:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fac:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004fb2:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004fb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	f383 8810 	msr	PRIMASK, r3
}
 8004fc0:	46c0      	nop			; (mov r8, r8)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2120      	movs	r1, #32
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	f383 8810 	msr	PRIMASK, r3
}
 8004fdc:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fde:	e007      	b.n	8004ff0 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2108      	movs	r1, #8
 8004fec:	430a      	orrs	r2, r1
 8004fee:	619a      	str	r2, [r3, #24]
}
 8004ff0:	46c0      	nop			; (mov r8, r8)
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	b01e      	add	sp, #120	; 0x78
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	fffffeff 	.word	0xfffffeff
 8004ffc:	effffffe 	.word	0xeffffffe
 8005000:	efffffff 	.word	0xefffffff
 8005004:	080048d5 	.word	0x080048d5

08005008 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005010:	46c0      	nop			; (mov r8, r8)
 8005012:	46bd      	mov	sp, r7
 8005014:	b002      	add	sp, #8
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005020:	46c0      	nop			; (mov r8, r8)
 8005022:	46bd      	mov	sp, r7
 8005024:	b002      	add	sp, #8
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005030:	46c0      	nop			; (mov r8, r8)
 8005032:	46bd      	mov	sp, r7
 8005034:	b002      	add	sp, #8
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2280      	movs	r2, #128	; 0x80
 8005044:	5c9b      	ldrb	r3, [r3, r2]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d101      	bne.n	800504e <HAL_UARTEx_DisableFifoMode+0x16>
 800504a:	2302      	movs	r3, #2
 800504c:	e027      	b.n	800509e <HAL_UARTEx_DisableFifoMode+0x66>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2280      	movs	r2, #128	; 0x80
 8005052:	2101      	movs	r1, #1
 8005054:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2284      	movs	r2, #132	; 0x84
 800505a:	2124      	movs	r1, #36	; 0x24
 800505c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2101      	movs	r1, #1
 8005072:	438a      	bics	r2, r1
 8005074:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4a0b      	ldr	r2, [pc, #44]	; (80050a8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800507a:	4013      	ands	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2284      	movs	r2, #132	; 0x84
 8005090:	2120      	movs	r1, #32
 8005092:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2280      	movs	r2, #128	; 0x80
 8005098:	2100      	movs	r1, #0
 800509a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	0018      	movs	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b004      	add	sp, #16
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	46c0      	nop			; (mov r8, r8)
 80050a8:	dfffffff 	.word	0xdfffffff

080050ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2280      	movs	r2, #128	; 0x80
 80050ba:	5c9b      	ldrb	r3, [r3, r2]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d101      	bne.n	80050c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80050c0:	2302      	movs	r3, #2
 80050c2:	e02e      	b.n	8005122 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2280      	movs	r2, #128	; 0x80
 80050c8:	2101      	movs	r1, #1
 80050ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2284      	movs	r2, #132	; 0x84
 80050d0:	2124      	movs	r1, #36	; 0x24
 80050d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2101      	movs	r1, #1
 80050e8:	438a      	bics	r2, r1
 80050ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	08d9      	lsrs	r1, r3, #3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	0018      	movs	r0, r3
 8005104:	f000 f854 	bl	80051b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2284      	movs	r2, #132	; 0x84
 8005114:	2120      	movs	r1, #32
 8005116:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2280      	movs	r2, #128	; 0x80
 800511c:	2100      	movs	r1, #0
 800511e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	0018      	movs	r0, r3
 8005124:	46bd      	mov	sp, r7
 8005126:	b004      	add	sp, #16
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2280      	movs	r2, #128	; 0x80
 800513a:	5c9b      	ldrb	r3, [r3, r2]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005140:	2302      	movs	r3, #2
 8005142:	e02f      	b.n	80051a4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2280      	movs	r2, #128	; 0x80
 8005148:	2101      	movs	r1, #1
 800514a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2284      	movs	r2, #132	; 0x84
 8005150:	2124      	movs	r1, #36	; 0x24
 8005152:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2101      	movs	r1, #1
 8005168:	438a      	bics	r2, r1
 800516a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	4a0e      	ldr	r2, [pc, #56]	; (80051ac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005174:	4013      	ands	r3, r2
 8005176:	0019      	movs	r1, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	0018      	movs	r0, r3
 8005186:	f000 f813 	bl	80051b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2284      	movs	r2, #132	; 0x84
 8005196:	2120      	movs	r1, #32
 8005198:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2280      	movs	r2, #128	; 0x80
 800519e:	2100      	movs	r1, #0
 80051a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	0018      	movs	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	b004      	add	sp, #16
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	f1ffffff 	.word	0xf1ffffff

080051b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d108      	bne.n	80051d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	226a      	movs	r2, #106	; 0x6a
 80051c4:	2101      	movs	r1, #1
 80051c6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2268      	movs	r2, #104	; 0x68
 80051cc:	2101      	movs	r1, #1
 80051ce:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80051d0:	e043      	b.n	800525a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80051d2:	260f      	movs	r6, #15
 80051d4:	19bb      	adds	r3, r7, r6
 80051d6:	2208      	movs	r2, #8
 80051d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80051da:	200e      	movs	r0, #14
 80051dc:	183b      	adds	r3, r7, r0
 80051de:	2208      	movs	r2, #8
 80051e0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	0e5b      	lsrs	r3, r3, #25
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	240d      	movs	r4, #13
 80051ee:	193b      	adds	r3, r7, r4
 80051f0:	2107      	movs	r1, #7
 80051f2:	400a      	ands	r2, r1
 80051f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	0f5b      	lsrs	r3, r3, #29
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	250c      	movs	r5, #12
 8005202:	197b      	adds	r3, r7, r5
 8005204:	2107      	movs	r1, #7
 8005206:	400a      	ands	r2, r1
 8005208:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800520a:	183b      	adds	r3, r7, r0
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	197a      	adds	r2, r7, r5
 8005210:	7812      	ldrb	r2, [r2, #0]
 8005212:	4914      	ldr	r1, [pc, #80]	; (8005264 <UARTEx_SetNbDataToProcess+0xb4>)
 8005214:	5c8a      	ldrb	r2, [r1, r2]
 8005216:	435a      	muls	r2, r3
 8005218:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800521a:	197b      	adds	r3, r7, r5
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	4a12      	ldr	r2, [pc, #72]	; (8005268 <UARTEx_SetNbDataToProcess+0xb8>)
 8005220:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005222:	0019      	movs	r1, r3
 8005224:	f7fa fff8 	bl	8000218 <__divsi3>
 8005228:	0003      	movs	r3, r0
 800522a:	b299      	uxth	r1, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	226a      	movs	r2, #106	; 0x6a
 8005230:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005232:	19bb      	adds	r3, r7, r6
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	193a      	adds	r2, r7, r4
 8005238:	7812      	ldrb	r2, [r2, #0]
 800523a:	490a      	ldr	r1, [pc, #40]	; (8005264 <UARTEx_SetNbDataToProcess+0xb4>)
 800523c:	5c8a      	ldrb	r2, [r1, r2]
 800523e:	435a      	muls	r2, r3
 8005240:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005242:	193b      	adds	r3, r7, r4
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	4a08      	ldr	r2, [pc, #32]	; (8005268 <UARTEx_SetNbDataToProcess+0xb8>)
 8005248:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800524a:	0019      	movs	r1, r3
 800524c:	f7fa ffe4 	bl	8000218 <__divsi3>
 8005250:	0003      	movs	r3, r0
 8005252:	b299      	uxth	r1, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2268      	movs	r2, #104	; 0x68
 8005258:	5299      	strh	r1, [r3, r2]
}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	46bd      	mov	sp, r7
 800525e:	b005      	add	sp, #20
 8005260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	08005378 	.word	0x08005378
 8005268:	08005380 	.word	0x08005380

0800526c <__libc_init_array>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	2600      	movs	r6, #0
 8005270:	4d0c      	ldr	r5, [pc, #48]	; (80052a4 <__libc_init_array+0x38>)
 8005272:	4c0d      	ldr	r4, [pc, #52]	; (80052a8 <__libc_init_array+0x3c>)
 8005274:	1b64      	subs	r4, r4, r5
 8005276:	10a4      	asrs	r4, r4, #2
 8005278:	42a6      	cmp	r6, r4
 800527a:	d109      	bne.n	8005290 <__libc_init_array+0x24>
 800527c:	2600      	movs	r6, #0
 800527e:	f000 f821 	bl	80052c4 <_init>
 8005282:	4d0a      	ldr	r5, [pc, #40]	; (80052ac <__libc_init_array+0x40>)
 8005284:	4c0a      	ldr	r4, [pc, #40]	; (80052b0 <__libc_init_array+0x44>)
 8005286:	1b64      	subs	r4, r4, r5
 8005288:	10a4      	asrs	r4, r4, #2
 800528a:	42a6      	cmp	r6, r4
 800528c:	d105      	bne.n	800529a <__libc_init_array+0x2e>
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	00b3      	lsls	r3, r6, #2
 8005292:	58eb      	ldr	r3, [r5, r3]
 8005294:	4798      	blx	r3
 8005296:	3601      	adds	r6, #1
 8005298:	e7ee      	b.n	8005278 <__libc_init_array+0xc>
 800529a:	00b3      	lsls	r3, r6, #2
 800529c:	58eb      	ldr	r3, [r5, r3]
 800529e:	4798      	blx	r3
 80052a0:	3601      	adds	r6, #1
 80052a2:	e7f2      	b.n	800528a <__libc_init_array+0x1e>
 80052a4:	08005390 	.word	0x08005390
 80052a8:	08005390 	.word	0x08005390
 80052ac:	08005390 	.word	0x08005390
 80052b0:	08005394 	.word	0x08005394

080052b4 <memset>:
 80052b4:	0003      	movs	r3, r0
 80052b6:	1882      	adds	r2, r0, r2
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d100      	bne.n	80052be <memset+0xa>
 80052bc:	4770      	bx	lr
 80052be:	7019      	strb	r1, [r3, #0]
 80052c0:	3301      	adds	r3, #1
 80052c2:	e7f9      	b.n	80052b8 <memset+0x4>

080052c4 <_init>:
 80052c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ca:	bc08      	pop	{r3}
 80052cc:	469e      	mov	lr, r3
 80052ce:	4770      	bx	lr

080052d0 <_fini>:
 80052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d6:	bc08      	pop	{r3}
 80052d8:	469e      	mov	lr, r3
 80052da:	4770      	bx	lr
