
Nucleo_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002acc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08002b88  08002b88  00012b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c20  08002c20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c28  08002c28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c28  08002c28  00012c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c2c  08002c2c  00012c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08002c3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002c3c  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9f0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000199a  00000000  00000000  0002ba24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0002d3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002dbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cf6  00000000  00000000  0002e348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a762  00000000  00000000  0004503e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092406  00000000  00000000  0004f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1ba6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bd4  00000000  00000000  000e1bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002b70 	.word	0x08002b70

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002b70 	.word	0x08002b70

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	1c08      	adds	r0, r1, #0
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 f9e3 	bl	80009ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f827 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 f8bb 	bl	80007a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062e:	f000 f86b 	bl	8000708 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t Test[] = "Hello World \r\n";
 8000632:	003b      	movs	r3, r7
 8000634:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <main+0x54>)
 8000636:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000638:	c313      	stmia	r3!, {r0, r1, r4}
 800063a:	8811      	ldrh	r1, [r2, #0]
 800063c:	8019      	strh	r1, [r3, #0]
 800063e:	7892      	ldrb	r2, [r2, #2]
 8000640:	709a      	strb	r2, [r3, #2]
	  HAL_UART_Transmit(&huart2,Test,sizeof(Test),10);
 8000642:	0039      	movs	r1, r7
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <main+0x58>)
 8000646:	230a      	movs	r3, #10
 8000648:	220f      	movs	r2, #15
 800064a:	f001 fbfd 	bl	8001e48 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 800064e:	23fa      	movs	r3, #250	; 0xfa
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fa50 	bl	8000af8 <HAL_Delay>


	  /* Dioda LD4 */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000658:	23a0      	movs	r3, #160	; 0xa0
 800065a:	05db      	lsls	r3, r3, #23
 800065c:	2120      	movs	r1, #32
 800065e:	0018      	movs	r0, r3
 8000660:	f000 fcb9 	bl	8000fd6 <HAL_GPIO_TogglePin>
	  HAL_Delay (2000);
 8000664:	23fa      	movs	r3, #250	; 0xfa
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	0018      	movs	r0, r3
 800066a:	f000 fa45 	bl	8000af8 <HAL_Delay>
  {
 800066e:	e7e0      	b.n	8000632 <main+0x16>
 8000670:	08002b88 	.word	0x08002b88
 8000674:	20000028 	.word	0x20000028

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b093      	sub	sp, #76	; 0x4c
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	2410      	movs	r4, #16
 8000680:	193b      	adds	r3, r7, r4
 8000682:	0018      	movs	r0, r3
 8000684:	2338      	movs	r3, #56	; 0x38
 8000686:	001a      	movs	r2, r3
 8000688:	2100      	movs	r1, #0
 800068a:	f002 fa69 	bl	8002b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068e:	003b      	movs	r3, r7
 8000690:	0018      	movs	r0, r3
 8000692:	2310      	movs	r3, #16
 8000694:	001a      	movs	r2, r3
 8000696:	2100      	movs	r1, #0
 8000698:	f002 fa62 	bl	8002b60 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fcb3 	bl	800100c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	2202      	movs	r2, #2
 80006aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2280      	movs	r2, #128	; 0x80
 80006b0:	0052      	lsls	r2, r2, #1
 80006b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2240      	movs	r2, #64	; 0x40
 80006be:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fceb 	bl	80010a4 <HAL_RCC_OscConfig>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006d2:	f000 f8b7 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	003b      	movs	r3, r7
 80006d8:	2207      	movs	r2, #7
 80006da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006dc:	003b      	movs	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	003b      	movs	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	003b      	movs	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ee:	003b      	movs	r3, r7
 80006f0:	2100      	movs	r1, #0
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 fff0 	bl	80016d8 <HAL_RCC_ClockConfig>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006fc:	f000 f8a2 	bl	8000844 <Error_Handler>
  }
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b013      	add	sp, #76	; 0x4c
 8000706:	bd90      	pop	{r4, r7, pc}

08000708 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_USART2_UART_Init+0x94>)
 800070e:	4a24      	ldr	r2, [pc, #144]	; (80007a0 <MX_USART2_UART_Init+0x98>)
 8000710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <MX_USART2_UART_Init+0x94>)
 8000714:	22e1      	movs	r2, #225	; 0xe1
 8000716:	0252      	lsls	r2, r2, #9
 8000718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_USART2_UART_Init+0x94>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_USART2_UART_Init+0x94>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_USART2_UART_Init+0x94>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_USART2_UART_Init+0x94>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_USART2_UART_Init+0x94>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_USART2_UART_Init+0x94>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_USART2_UART_Init+0x94>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_USART2_UART_Init+0x94>)
 8000746:	2200      	movs	r2, #0
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_USART2_UART_Init+0x94>)
 800074c:	2200      	movs	r2, #0
 800074e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_USART2_UART_Init+0x94>)
 8000752:	0018      	movs	r0, r3
 8000754:	f001 fb22 	bl	8001d9c <HAL_UART_Init>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800075c:	f000 f872 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART2_UART_Init+0x94>)
 8000762:	2100      	movs	r1, #0
 8000764:	0018      	movs	r0, r3
 8000766:	f002 f8f7 	bl	8002958 <HAL_UARTEx_SetTxFifoThreshold>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800076e:	f000 f869 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_USART2_UART_Init+0x94>)
 8000774:	2100      	movs	r1, #0
 8000776:	0018      	movs	r0, r3
 8000778:	f002 f92e 	bl	80029d8 <HAL_UARTEx_SetRxFifoThreshold>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000780:	f000 f860 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <MX_USART2_UART_Init+0x94>)
 8000786:	0018      	movs	r0, r3
 8000788:	f002 f8ac 	bl	80028e4 <HAL_UARTEx_DisableFifoMode>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d001      	beq.n	8000794 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000790:	f000 f858 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	20000028 	.word	0x20000028
 80007a0:	40004400 	.word	0x40004400

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	240c      	movs	r4, #12
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	0018      	movs	r0, r3
 80007b0:	2314      	movs	r3, #20
 80007b2:	001a      	movs	r2, r3
 80007b4:	2100      	movs	r1, #0
 80007b6:	f002 f9d3 	bl	8002b60 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_GPIO_Init+0x9c>)
 80007bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_GPIO_Init+0x9c>)
 80007c0:	2104      	movs	r1, #4
 80007c2:	430a      	orrs	r2, r1
 80007c4:	635a      	str	r2, [r3, #52]	; 0x34
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_GPIO_Init+0x9c>)
 80007c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ca:	2204      	movs	r2, #4
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_GPIO_Init+0x9c>)
 80007d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_GPIO_Init+0x9c>)
 80007d8:	2120      	movs	r1, #32
 80007da:	430a      	orrs	r2, r1
 80007dc:	635a      	str	r2, [r3, #52]	; 0x34
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_GPIO_Init+0x9c>)
 80007e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007e2:	2220      	movs	r2, #32
 80007e4:	4013      	ands	r3, r2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_GPIO_Init+0x9c>)
 80007ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_GPIO_Init+0x9c>)
 80007f0:	2101      	movs	r1, #1
 80007f2:	430a      	orrs	r2, r1
 80007f4:	635a      	str	r2, [r3, #52]	; 0x34
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_GPIO_Init+0x9c>)
 80007f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007fa:	2201      	movs	r2, #1
 80007fc:	4013      	ands	r3, r2
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000802:	23a0      	movs	r3, #160	; 0xa0
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	2200      	movs	r2, #0
 8000808:	2120      	movs	r1, #32
 800080a:	0018      	movs	r0, r3
 800080c:	f000 fbc6 	bl	8000f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000810:	0021      	movs	r1, r4
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2220      	movs	r2, #32
 8000816:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2201      	movs	r2, #1
 800081c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2202      	movs	r2, #2
 8000828:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800082a:	187a      	adds	r2, r7, r1
 800082c:	23a0      	movs	r3, #160	; 0xa0
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	0011      	movs	r1, r2
 8000832:	0018      	movs	r0, r3
 8000834:	f000 fa4e 	bl	8000cd4 <HAL_GPIO_Init>

}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b009      	add	sp, #36	; 0x24
 800083e:	bd90      	pop	{r4, r7, pc}
 8000840:	40021000 	.word	0x40021000

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_MspInit+0x4c>)
 8000858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <HAL_MspInit+0x4c>)
 800085c:	2101      	movs	r1, #1
 800085e:	430a      	orrs	r2, r1
 8000860:	641a      	str	r2, [r3, #64]	; 0x40
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	2201      	movs	r2, #1
 8000868:	4013      	ands	r3, r2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <HAL_MspInit+0x4c>)
 8000870:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_MspInit+0x4c>)
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	0549      	lsls	r1, r1, #21
 8000878:	430a      	orrs	r2, r1
 800087a:	63da      	str	r2, [r3, #60]	; 0x3c
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <HAL_MspInit+0x4c>)
 800087e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	055b      	lsls	r3, r3, #21
 8000884:	4013      	ands	r3, r2
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800088a:	23c0      	movs	r3, #192	; 0xc0
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	0018      	movs	r0, r3
 8000890:	f000 f956 	bl	8000b40 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b002      	add	sp, #8
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40021000 	.word	0x40021000

080008a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b097      	sub	sp, #92	; 0x5c
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	2344      	movs	r3, #68	; 0x44
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	0018      	movs	r0, r3
 80008ae:	2314      	movs	r3, #20
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f002 f954 	bl	8002b60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b8:	2410      	movs	r4, #16
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	0018      	movs	r0, r3
 80008be:	2334      	movs	r3, #52	; 0x34
 80008c0:	001a      	movs	r2, r3
 80008c2:	2100      	movs	r1, #0
 80008c4:	f002 f94c 	bl	8002b60 <memset>
  if(huart->Instance==USART2)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a22      	ldr	r2, [pc, #136]	; (8000958 <HAL_UART_MspInit+0xb8>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d13e      	bne.n	8000950 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	2202      	movs	r2, #2
 80008d6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	0018      	movs	r0, r3
 80008e2:	f001 f8a3 	bl	8001a2c <HAL_RCCEx_PeriphCLKConfig>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008ea:	f7ff ffab 	bl	8000844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <HAL_UART_MspInit+0xbc>)
 80008f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <HAL_UART_MspInit+0xbc>)
 80008f4:	2180      	movs	r1, #128	; 0x80
 80008f6:	0289      	lsls	r1, r1, #10
 80008f8:	430a      	orrs	r2, r1
 80008fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <HAL_UART_MspInit+0xbc>)
 80008fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	029b      	lsls	r3, r3, #10
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <HAL_UART_MspInit+0xbc>)
 800090c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <HAL_UART_MspInit+0xbc>)
 8000910:	2101      	movs	r1, #1
 8000912:	430a      	orrs	r2, r1
 8000914:	635a      	str	r2, [r3, #52]	; 0x34
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <HAL_UART_MspInit+0xbc>)
 8000918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800091a:	2201      	movs	r2, #1
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000922:	2144      	movs	r1, #68	; 0x44
 8000924:	187b      	adds	r3, r7, r1
 8000926:	220c      	movs	r2, #12
 8000928:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2202      	movs	r2, #2
 800092e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2201      	movs	r2, #1
 8000934:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2201      	movs	r2, #1
 8000940:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	187a      	adds	r2, r7, r1
 8000944:	23a0      	movs	r3, #160	; 0xa0
 8000946:	05db      	lsls	r3, r3, #23
 8000948:	0011      	movs	r1, r2
 800094a:	0018      	movs	r0, r3
 800094c:	f000 f9c2 	bl	8000cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b017      	add	sp, #92	; 0x5c
 8000956:	bd90      	pop	{r4, r7, pc}
 8000958:	40004400 	.word	0x40004400
 800095c:	40021000 	.word	0x40021000

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <NMI_Handler+0x4>

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000984:	f000 f89c 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800099a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800099c:	f7ff fff7 	bl	800098e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009a2:	490d      	ldr	r1, [pc, #52]	; (80009d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <LoopForever+0xe>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b8:	4c0a      	ldr	r4, [pc, #40]	; (80009e4 <LoopForever+0x16>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009c6:	f002 f8a7 	bl	8002b18 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009ca:	f7ff fe27 	bl	800061c <main>

080009ce <LoopForever>:

LoopForever:
  b LoopForever
 80009ce:	e7fe      	b.n	80009ce <LoopForever>
  ldr   r0, =_estack
 80009d0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009dc:	08002c30 	.word	0x08002c30
  ldr r2, =_sbss
 80009e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e4:	200000bc 	.word	0x200000bc

080009e8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC1_COMP_IRQHandler>
	...

080009ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_Init+0x3c>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_Init+0x3c>)
 80009fe:	2180      	movs	r1, #128	; 0x80
 8000a00:	0049      	lsls	r1, r1, #1
 8000a02:	430a      	orrs	r2, r1
 8000a04:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 f810 	bl	8000a2c <HAL_InitTick>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d003      	beq.n	8000a18 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
 8000a16:	e001      	b.n	8000a1c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a18:	f7ff ff1a 	bl	8000850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781b      	ldrb	r3, [r3, #0]
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b002      	add	sp, #8
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40022000 	.word	0x40022000

08000a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a34:	230f      	movs	r3, #15
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <HAL_InitTick+0x88>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d02b      	beq.n	8000a9c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <HAL_InitTick+0x8c>)
 8000a46:	681c      	ldr	r4, [r3, #0]
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_InitTick+0x88>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	23fa      	movs	r3, #250	; 0xfa
 8000a50:	0098      	lsls	r0, r3, #2
 8000a52:	f7ff fb57 	bl	8000104 <__udivsi3>
 8000a56:	0003      	movs	r3, r0
 8000a58:	0019      	movs	r1, r3
 8000a5a:	0020      	movs	r0, r4
 8000a5c:	f7ff fb52 	bl	8000104 <__udivsi3>
 8000a60:	0003      	movs	r3, r0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 f929 	bl	8000cba <HAL_SYSTICK_Config>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d112      	bne.n	8000a92 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d80a      	bhi.n	8000a88 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	2301      	movs	r3, #1
 8000a76:	425b      	negs	r3, r3
 8000a78:	2200      	movs	r2, #0
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 f908 	bl	8000c90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_InitTick+0x90>)
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	e00d      	b.n	8000aa4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a88:	230f      	movs	r3, #15
 8000a8a:	18fb      	adds	r3, r7, r3
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
 8000a90:	e008      	b.n	8000aa4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a92:	230f      	movs	r3, #15
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	e003      	b.n	8000aa4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	781b      	ldrb	r3, [r3, #0]
}
 8000aaa:	0018      	movs	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b005      	add	sp, #20
 8000ab0:	bd90      	pop	{r4, r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000004 	.word	0x20000004

08000ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_IncTick+0x1c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	001a      	movs	r2, r3
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_IncTick+0x20>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	18d2      	adds	r2, r2, r3
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <HAL_IncTick+0x20>)
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	200000b8 	.word	0x200000b8

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b02      	ldr	r3, [pc, #8]	; (8000af4 <HAL_GetTick+0x10>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	0018      	movs	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	200000b8 	.word	0x200000b8

08000af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b00:	f7ff fff0 	bl	8000ae4 <HAL_GetTick>
 8000b04:	0003      	movs	r3, r0
 8000b06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	d005      	beq.n	8000b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <HAL_Delay+0x44>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	001a      	movs	r2, r3
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	189b      	adds	r3, r3, r2
 8000b1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	f7ff ffe0 	bl	8000ae4 <HAL_GetTick>
 8000b24:	0002      	movs	r2, r0
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d8f7      	bhi.n	8000b20 <HAL_Delay+0x28>
  {
  }
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b004      	add	sp, #16
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	20000008 	.word	0x20000008

08000b40 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000b4e:	4013      	ands	r3, r2
 8000b50:	0019      	movs	r1, r3
 8000b52:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	430a      	orrs	r2, r1
 8000b58:	601a      	str	r2, [r3, #0]
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b002      	add	sp, #8
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	40010000 	.word	0x40010000
 8000b68:	fffff9ff 	.word	0xfffff9ff

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	0002      	movs	r2, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b80:	d828      	bhi.n	8000bd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b82:	4a2f      	ldr	r2, [pc, #188]	; (8000c40 <__NVIC_SetPriority+0xd4>)
 8000b84:	1dfb      	adds	r3, r7, #7
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b25b      	sxtb	r3, r3
 8000b8a:	089b      	lsrs	r3, r3, #2
 8000b8c:	33c0      	adds	r3, #192	; 0xc0
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	589b      	ldr	r3, [r3, r2]
 8000b92:	1dfa      	adds	r2, r7, #7
 8000b94:	7812      	ldrb	r2, [r2, #0]
 8000b96:	0011      	movs	r1, r2
 8000b98:	2203      	movs	r2, #3
 8000b9a:	400a      	ands	r2, r1
 8000b9c:	00d2      	lsls	r2, r2, #3
 8000b9e:	21ff      	movs	r1, #255	; 0xff
 8000ba0:	4091      	lsls	r1, r2
 8000ba2:	000a      	movs	r2, r1
 8000ba4:	43d2      	mvns	r2, r2
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	019b      	lsls	r3, r3, #6
 8000bae:	22ff      	movs	r2, #255	; 0xff
 8000bb0:	401a      	ands	r2, r3
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	2303      	movs	r3, #3
 8000bba:	4003      	ands	r3, r0
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc0:	481f      	ldr	r0, [pc, #124]	; (8000c40 <__NVIC_SetPriority+0xd4>)
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b25b      	sxtb	r3, r3
 8000bc8:	089b      	lsrs	r3, r3, #2
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	33c0      	adds	r3, #192	; 0xc0
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bd2:	e031      	b.n	8000c38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd4:	4a1b      	ldr	r2, [pc, #108]	; (8000c44 <__NVIC_SetPriority+0xd8>)
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	0019      	movs	r1, r3
 8000bdc:	230f      	movs	r3, #15
 8000bde:	400b      	ands	r3, r1
 8000be0:	3b08      	subs	r3, #8
 8000be2:	089b      	lsrs	r3, r3, #2
 8000be4:	3306      	adds	r3, #6
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	18d3      	adds	r3, r2, r3
 8000bea:	3304      	adds	r3, #4
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	1dfa      	adds	r2, r7, #7
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	400a      	ands	r2, r1
 8000bf8:	00d2      	lsls	r2, r2, #3
 8000bfa:	21ff      	movs	r1, #255	; 0xff
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	000a      	movs	r2, r1
 8000c00:	43d2      	mvns	r2, r2
 8000c02:	401a      	ands	r2, r3
 8000c04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	019b      	lsls	r3, r3, #6
 8000c0a:	22ff      	movs	r2, #255	; 0xff
 8000c0c:	401a      	ands	r2, r3
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	0018      	movs	r0, r3
 8000c14:	2303      	movs	r3, #3
 8000c16:	4003      	ands	r3, r0
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c1c:	4809      	ldr	r0, [pc, #36]	; (8000c44 <__NVIC_SetPriority+0xd8>)
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	001c      	movs	r4, r3
 8000c24:	230f      	movs	r3, #15
 8000c26:	4023      	ands	r3, r4
 8000c28:	3b08      	subs	r3, #8
 8000c2a:	089b      	lsrs	r3, r3, #2
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	3306      	adds	r3, #6
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	18c3      	adds	r3, r0, r3
 8000c34:	3304      	adds	r3, #4
 8000c36:	601a      	str	r2, [r3, #0]
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b003      	add	sp, #12
 8000c3e:	bd90      	pop	{r4, r7, pc}
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	1e5a      	subs	r2, r3, #1
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	045b      	lsls	r3, r3, #17
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d301      	bcc.n	8000c60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e010      	b.n	8000c82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <SysTick_Config+0x44>)
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	3a01      	subs	r2, #1
 8000c66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c68:	2301      	movs	r3, #1
 8000c6a:	425b      	negs	r3, r3
 8000c6c:	2103      	movs	r1, #3
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f7ff ff7c 	bl	8000b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <SysTick_Config+0x44>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <SysTick_Config+0x44>)
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	0018      	movs	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b002      	add	sp, #8
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	e000e010 	.word	0xe000e010

08000c90 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	1c02      	adds	r2, r0, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b25b      	sxtb	r3, r3
 8000caa:	0011      	movs	r1, r2
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff ff5d 	bl	8000b6c <__NVIC_SetPriority>
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b004      	add	sp, #16
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff ffbf 	bl	8000c48 <SysTick_Config>
 8000cca:	0003      	movs	r3, r0
}
 8000ccc:	0018      	movs	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce2:	e147      	b.n	8000f74 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2101      	movs	r1, #1
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	4091      	lsls	r1, r2
 8000cee:	000a      	movs	r2, r1
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d100      	bne.n	8000cfc <HAL_GPIO_Init+0x28>
 8000cfa:	e138      	b.n	8000f6e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2203      	movs	r2, #3
 8000d02:	4013      	ands	r3, r2
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d005      	beq.n	8000d14 <HAL_GPIO_Init+0x40>
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	4013      	ands	r3, r2
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d130      	bne.n	8000d76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	409a      	lsls	r2, r3
 8000d22:	0013      	movs	r3, r2
 8000d24:	43da      	mvns	r2, r3
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	409a      	lsls	r2, r3
 8000d36:	0013      	movs	r3, r2
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	43da      	mvns	r2, r3
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	091b      	lsrs	r3, r3, #4
 8000d60:	2201      	movs	r2, #1
 8000d62:	401a      	ands	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	409a      	lsls	r2, r3
 8000d68:	0013      	movs	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d017      	beq.n	8000db2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	0013      	movs	r3, r2
 8000d92:	43da      	mvns	r2, r3
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	409a      	lsls	r2, r3
 8000da4:	0013      	movs	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2203      	movs	r2, #3
 8000db8:	4013      	ands	r3, r2
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d123      	bne.n	8000e06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	08da      	lsrs	r2, r3, #3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3208      	adds	r2, #8
 8000dc6:	0092      	lsls	r2, r2, #2
 8000dc8:	58d3      	ldr	r3, [r2, r3]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	2207      	movs	r2, #7
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	0013      	movs	r3, r2
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	691a      	ldr	r2, [r3, #16]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	2107      	movs	r1, #7
 8000dea:	400b      	ands	r3, r1
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	409a      	lsls	r2, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	08da      	lsrs	r2, r3, #3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3208      	adds	r2, #8
 8000e00:	0092      	lsls	r2, r2, #2
 8000e02:	6939      	ldr	r1, [r7, #16]
 8000e04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	409a      	lsls	r2, r3
 8000e14:	0013      	movs	r3, r2
 8000e16:	43da      	mvns	r2, r3
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2203      	movs	r2, #3
 8000e24:	401a      	ands	r2, r3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	23c0      	movs	r3, #192	; 0xc0
 8000e40:	029b      	lsls	r3, r3, #10
 8000e42:	4013      	ands	r3, r2
 8000e44:	d100      	bne.n	8000e48 <HAL_GPIO_Init+0x174>
 8000e46:	e092      	b.n	8000f6e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e48:	4a50      	ldr	r2, [pc, #320]	; (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3318      	adds	r3, #24
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	589b      	ldr	r3, [r3, r2]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2203      	movs	r2, #3
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	220f      	movs	r2, #15
 8000e60:	409a      	lsls	r2, r3
 8000e62:	0013      	movs	r3, r2
 8000e64:	43da      	mvns	r2, r3
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	23a0      	movs	r3, #160	; 0xa0
 8000e70:	05db      	lsls	r3, r3, #23
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d013      	beq.n	8000e9e <HAL_GPIO_Init+0x1ca>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a45      	ldr	r2, [pc, #276]	; (8000f90 <HAL_GPIO_Init+0x2bc>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d00d      	beq.n	8000e9a <HAL_GPIO_Init+0x1c6>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a44      	ldr	r2, [pc, #272]	; (8000f94 <HAL_GPIO_Init+0x2c0>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x1c2>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a43      	ldr	r2, [pc, #268]	; (8000f98 <HAL_GPIO_Init+0x2c4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_GPIO_Init+0x1be>
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e006      	b.n	8000ea0 <HAL_GPIO_Init+0x1cc>
 8000e92:	2305      	movs	r3, #5
 8000e94:	e004      	b.n	8000ea0 <HAL_GPIO_Init+0x1cc>
 8000e96:	2302      	movs	r3, #2
 8000e98:	e002      	b.n	8000ea0 <HAL_GPIO_Init+0x1cc>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <HAL_GPIO_Init+0x1cc>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	400a      	ands	r2, r1
 8000ea6:	00d2      	lsls	r2, r2, #3
 8000ea8:	4093      	lsls	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000eb0:	4936      	ldr	r1, [pc, #216]	; (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3318      	adds	r3, #24
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ebe:	4b33      	ldr	r3, [pc, #204]	; (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	035b      	lsls	r3, r3, #13
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ee2:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ee8:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	43da      	mvns	r2, r3
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	039b      	lsls	r3, r3, #14
 8000f00:	4013      	ands	r3, r2
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f12:	4a1e      	ldr	r2, [pc, #120]	; (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000f14:	2384      	movs	r3, #132	; 0x84
 8000f16:	58d3      	ldr	r3, [r2, r3]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	43da      	mvns	r2, r3
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	029b      	lsls	r3, r3, #10
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f38:	4914      	ldr	r1, [pc, #80]	; (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000f3a:	2284      	movs	r2, #132	; 0x84
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000f40:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	58d3      	ldr	r3, [r2, r3]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	025b      	lsls	r3, r3, #9
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f66:	4909      	ldr	r1, [pc, #36]	; (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000f68:	2280      	movs	r2, #128	; 0x80
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	40da      	lsrs	r2, r3
 8000f7c:	1e13      	subs	r3, r2, #0
 8000f7e:	d000      	beq.n	8000f82 <HAL_GPIO_Init+0x2ae>
 8000f80:	e6b0      	b.n	8000ce4 <HAL_GPIO_Init+0x10>
  }
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b006      	add	sp, #24
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40021800 	.word	0x40021800
 8000f90:	50000400 	.word	0x50000400
 8000f94:	50000800 	.word	0x50000800
 8000f98:	50000c00 	.word	0x50000c00

08000f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	0008      	movs	r0, r1
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	1cbb      	adds	r3, r7, #2
 8000faa:	1c02      	adds	r2, r0, #0
 8000fac:	801a      	strh	r2, [r3, #0]
 8000fae:	1c7b      	adds	r3, r7, #1
 8000fb0:	1c0a      	adds	r2, r1, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fb4:	1c7b      	adds	r3, r7, #1
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d004      	beq.n	8000fc6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fbc:	1cbb      	adds	r3, r7, #2
 8000fbe:	881a      	ldrh	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fc4:	e003      	b.n	8000fce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fc6:	1cbb      	adds	r3, r7, #2
 8000fc8:	881a      	ldrh	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	000a      	movs	r2, r1
 8000fe0:	1cbb      	adds	r3, r7, #2
 8000fe2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fea:	1cbb      	adds	r3, r7, #2
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	041a      	lsls	r2, r3, #16
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	1cb9      	adds	r1, r7, #2
 8000ffa:	8809      	ldrh	r1, [r1, #0]
 8000ffc:	400b      	ands	r3, r1
 8000ffe:	431a      	orrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	619a      	str	r2, [r3, #24]
}
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b004      	add	sp, #16
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a19      	ldr	r2, [pc, #100]	; (8001080 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800101a:	4013      	ands	r3, r2
 800101c:	0019      	movs	r1, r3
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	430a      	orrs	r2, r1
 8001024:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	429a      	cmp	r2, r3
 800102e:	d11f      	bne.n	8001070 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	0013      	movs	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	189b      	adds	r3, r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4912      	ldr	r1, [pc, #72]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff f860 	bl	8000104 <__udivsi3>
 8001044:	0003      	movs	r3, r0
 8001046:	3301      	adds	r3, #1
 8001048:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800104a:	e008      	b.n	800105e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3b01      	subs	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	e001      	b.n	800105e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e009      	b.n	8001072 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001060:	695a      	ldr	r2, [r3, #20]
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	401a      	ands	r2, r3
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	429a      	cmp	r2, r3
 800106e:	d0ed      	beq.n	800104c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	b004      	add	sp, #16
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	40007000 	.word	0x40007000
 8001080:	fffff9ff 	.word	0xfffff9ff
 8001084:	20000000 	.word	0x20000000
 8001088:	000f4240 	.word	0x000f4240

0800108c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	23e0      	movs	r3, #224	; 0xe0
 8001096:	01db      	lsls	r3, r3, #7
 8001098:	4013      	ands	r3, r2
}
 800109a:	0018      	movs	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021000 	.word	0x40021000

080010a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e2fe      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2201      	movs	r2, #1
 80010bc:	4013      	ands	r3, r2
 80010be:	d100      	bne.n	80010c2 <HAL_RCC_OscConfig+0x1e>
 80010c0:	e07c      	b.n	80011bc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010c2:	4bc3      	ldr	r3, [pc, #780]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	2238      	movs	r2, #56	; 0x38
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010cc:	4bc0      	ldr	r3, [pc, #768]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	2203      	movs	r2, #3
 80010d2:	4013      	ands	r3, r2
 80010d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	2b10      	cmp	r3, #16
 80010da:	d102      	bne.n	80010e2 <HAL_RCC_OscConfig+0x3e>
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d002      	beq.n	80010e8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d10b      	bne.n	8001100 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e8:	4bb9      	ldr	r3, [pc, #740]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	029b      	lsls	r3, r3, #10
 80010f0:	4013      	ands	r3, r2
 80010f2:	d062      	beq.n	80011ba <HAL_RCC_OscConfig+0x116>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d15e      	bne.n	80011ba <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e2d9      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	025b      	lsls	r3, r3, #9
 8001108:	429a      	cmp	r2, r3
 800110a:	d107      	bne.n	800111c <HAL_RCC_OscConfig+0x78>
 800110c:	4bb0      	ldr	r3, [pc, #704]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4baf      	ldr	r3, [pc, #700]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 8001112:	2180      	movs	r1, #128	; 0x80
 8001114:	0249      	lsls	r1, r1, #9
 8001116:	430a      	orrs	r2, r1
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	e020      	b.n	800115e <HAL_RCC_OscConfig+0xba>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	23a0      	movs	r3, #160	; 0xa0
 8001122:	02db      	lsls	r3, r3, #11
 8001124:	429a      	cmp	r2, r3
 8001126:	d10e      	bne.n	8001146 <HAL_RCC_OscConfig+0xa2>
 8001128:	4ba9      	ldr	r3, [pc, #676]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4ba8      	ldr	r3, [pc, #672]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 800112e:	2180      	movs	r1, #128	; 0x80
 8001130:	02c9      	lsls	r1, r1, #11
 8001132:	430a      	orrs	r2, r1
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	4ba6      	ldr	r3, [pc, #664]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	4ba5      	ldr	r3, [pc, #660]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 800113c:	2180      	movs	r1, #128	; 0x80
 800113e:	0249      	lsls	r1, r1, #9
 8001140:	430a      	orrs	r2, r1
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e00b      	b.n	800115e <HAL_RCC_OscConfig+0xba>
 8001146:	4ba2      	ldr	r3, [pc, #648]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	4ba1      	ldr	r3, [pc, #644]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 800114c:	49a1      	ldr	r1, [pc, #644]	; (80013d4 <HAL_RCC_OscConfig+0x330>)
 800114e:	400a      	ands	r2, r1
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	4b9f      	ldr	r3, [pc, #636]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4b9e      	ldr	r3, [pc, #632]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 8001158:	499f      	ldr	r1, [pc, #636]	; (80013d8 <HAL_RCC_OscConfig+0x334>)
 800115a:	400a      	ands	r2, r1
 800115c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d014      	beq.n	8001190 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001166:	f7ff fcbd 	bl	8000ae4 <HAL_GetTick>
 800116a:	0003      	movs	r3, r0
 800116c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fcb8 	bl	8000ae4 <HAL_GetTick>
 8001174:	0002      	movs	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	; 0x64
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e298      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001182:	4b93      	ldr	r3, [pc, #588]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	029b      	lsls	r3, r3, #10
 800118a:	4013      	ands	r3, r2
 800118c:	d0f0      	beq.n	8001170 <HAL_RCC_OscConfig+0xcc>
 800118e:	e015      	b.n	80011bc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001190:	f7ff fca8 	bl	8000ae4 <HAL_GetTick>
 8001194:	0003      	movs	r3, r0
 8001196:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800119a:	f7ff fca3 	bl	8000ae4 <HAL_GetTick>
 800119e:	0002      	movs	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b64      	cmp	r3, #100	; 0x64
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e283      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ac:	4b88      	ldr	r3, [pc, #544]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	029b      	lsls	r3, r3, #10
 80011b4:	4013      	ands	r3, r2
 80011b6:	d1f0      	bne.n	800119a <HAL_RCC_OscConfig+0xf6>
 80011b8:	e000      	b.n	80011bc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2202      	movs	r2, #2
 80011c2:	4013      	ands	r3, r2
 80011c4:	d100      	bne.n	80011c8 <HAL_RCC_OscConfig+0x124>
 80011c6:	e099      	b.n	80012fc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011c8:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2238      	movs	r2, #56	; 0x38
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011d2:	4b7f      	ldr	r3, [pc, #508]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	2203      	movs	r2, #3
 80011d8:	4013      	ands	r3, r2
 80011da:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2b10      	cmp	r3, #16
 80011e0:	d102      	bne.n	80011e8 <HAL_RCC_OscConfig+0x144>
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d002      	beq.n	80011ee <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d135      	bne.n	800125a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011ee:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	4013      	ands	r3, r2
 80011f8:	d005      	beq.n	8001206 <HAL_RCC_OscConfig+0x162>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e256      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001206:	4b72      	ldr	r3, [pc, #456]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	4a74      	ldr	r2, [pc, #464]	; (80013dc <HAL_RCC_OscConfig+0x338>)
 800120c:	4013      	ands	r3, r2
 800120e:	0019      	movs	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	021a      	lsls	r2, r3, #8
 8001216:	4b6e      	ldr	r3, [pc, #440]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 8001218:	430a      	orrs	r2, r1
 800121a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d112      	bne.n	8001248 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001222:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a6e      	ldr	r2, [pc, #440]	; (80013e0 <HAL_RCC_OscConfig+0x33c>)
 8001228:	4013      	ands	r3, r2
 800122a:	0019      	movs	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	4b67      	ldr	r3, [pc, #412]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 8001232:	430a      	orrs	r2, r1
 8001234:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001236:	4b66      	ldr	r3, [pc, #408]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	0adb      	lsrs	r3, r3, #11
 800123c:	2207      	movs	r2, #7
 800123e:	4013      	ands	r3, r2
 8001240:	4a68      	ldr	r2, [pc, #416]	; (80013e4 <HAL_RCC_OscConfig+0x340>)
 8001242:	40da      	lsrs	r2, r3
 8001244:	4b68      	ldr	r3, [pc, #416]	; (80013e8 <HAL_RCC_OscConfig+0x344>)
 8001246:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001248:	4b68      	ldr	r3, [pc, #416]	; (80013ec <HAL_RCC_OscConfig+0x348>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	0018      	movs	r0, r3
 800124e:	f7ff fbed 	bl	8000a2c <HAL_InitTick>
 8001252:	1e03      	subs	r3, r0, #0
 8001254:	d051      	beq.n	80012fa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e22c      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d030      	beq.n	80012c4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001262:	4b5b      	ldr	r3, [pc, #364]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a5e      	ldr	r2, [pc, #376]	; (80013e0 <HAL_RCC_OscConfig+0x33c>)
 8001268:	4013      	ands	r3, r2
 800126a:	0019      	movs	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	4b57      	ldr	r3, [pc, #348]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 8001272:	430a      	orrs	r2, r1
 8001274:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001276:	4b56      	ldr	r3, [pc, #344]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4b55      	ldr	r3, [pc, #340]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	0049      	lsls	r1, r1, #1
 8001280:	430a      	orrs	r2, r1
 8001282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001284:	f7ff fc2e 	bl	8000ae4 <HAL_GetTick>
 8001288:	0003      	movs	r3, r0
 800128a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800128e:	f7ff fc29 	bl	8000ae4 <HAL_GetTick>
 8001292:	0002      	movs	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e209      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012a0:	4b4b      	ldr	r3, [pc, #300]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	4013      	ands	r3, r2
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ac:	4b48      	ldr	r3, [pc, #288]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	4a4a      	ldr	r2, [pc, #296]	; (80013dc <HAL_RCC_OscConfig+0x338>)
 80012b2:	4013      	ands	r3, r2
 80012b4:	0019      	movs	r1, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	021a      	lsls	r2, r3, #8
 80012bc:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 80012be:	430a      	orrs	r2, r1
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	e01b      	b.n	80012fc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80012c4:	4b42      	ldr	r3, [pc, #264]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 80012ca:	4949      	ldr	r1, [pc, #292]	; (80013f0 <HAL_RCC_OscConfig+0x34c>)
 80012cc:	400a      	ands	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d0:	f7ff fc08 	bl	8000ae4 <HAL_GetTick>
 80012d4:	0003      	movs	r3, r0
 80012d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012da:	f7ff fc03 	bl	8000ae4 <HAL_GetTick>
 80012de:	0002      	movs	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e1e3      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012ec:	4b38      	ldr	r3, [pc, #224]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	4013      	ands	r3, r2
 80012f6:	d1f0      	bne.n	80012da <HAL_RCC_OscConfig+0x236>
 80012f8:	e000      	b.n	80012fc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012fa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2208      	movs	r2, #8
 8001302:	4013      	ands	r3, r2
 8001304:	d047      	beq.n	8001396 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001306:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2238      	movs	r2, #56	; 0x38
 800130c:	4013      	ands	r3, r2
 800130e:	2b18      	cmp	r3, #24
 8001310:	d10a      	bne.n	8001328 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001312:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 8001314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001316:	2202      	movs	r2, #2
 8001318:	4013      	ands	r3, r2
 800131a:	d03c      	beq.n	8001396 <HAL_RCC_OscConfig+0x2f2>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d138      	bne.n	8001396 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e1c5      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d019      	beq.n	8001364 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001330:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 8001332:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001334:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 8001336:	2101      	movs	r1, #1
 8001338:	430a      	orrs	r2, r1
 800133a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133c:	f7ff fbd2 	bl	8000ae4 <HAL_GetTick>
 8001340:	0003      	movs	r3, r0
 8001342:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001346:	f7ff fbcd 	bl	8000ae4 <HAL_GetTick>
 800134a:	0002      	movs	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e1ad      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 800135a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135c:	2202      	movs	r2, #2
 800135e:	4013      	ands	r3, r2
 8001360:	d0f1      	beq.n	8001346 <HAL_RCC_OscConfig+0x2a2>
 8001362:	e018      	b.n	8001396 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 8001366:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 800136a:	2101      	movs	r1, #1
 800136c:	438a      	bics	r2, r1
 800136e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fbb8 	bl	8000ae4 <HAL_GetTick>
 8001374:	0003      	movs	r3, r0
 8001376:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800137a:	f7ff fbb3 	bl	8000ae4 <HAL_GetTick>
 800137e:	0002      	movs	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e193      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 800138e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001390:	2202      	movs	r2, #2
 8001392:	4013      	ands	r3, r2
 8001394:	d1f1      	bne.n	800137a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2204      	movs	r2, #4
 800139c:	4013      	ands	r3, r2
 800139e:	d100      	bne.n	80013a2 <HAL_RCC_OscConfig+0x2fe>
 80013a0:	e0c6      	b.n	8001530 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013a2:	231f      	movs	r3, #31
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2238      	movs	r2, #56	; 0x38
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b20      	cmp	r3, #32
 80013b4:	d11e      	bne.n	80013f4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_RCC_OscConfig+0x32c>)
 80013b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ba:	2202      	movs	r2, #2
 80013bc:	4013      	ands	r3, r2
 80013be:	d100      	bne.n	80013c2 <HAL_RCC_OscConfig+0x31e>
 80013c0:	e0b6      	b.n	8001530 <HAL_RCC_OscConfig+0x48c>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d000      	beq.n	80013cc <HAL_RCC_OscConfig+0x328>
 80013ca:	e0b1      	b.n	8001530 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e171      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>
 80013d0:	40021000 	.word	0x40021000
 80013d4:	fffeffff 	.word	0xfffeffff
 80013d8:	fffbffff 	.word	0xfffbffff
 80013dc:	ffff80ff 	.word	0xffff80ff
 80013e0:	ffffc7ff 	.word	0xffffc7ff
 80013e4:	00f42400 	.word	0x00f42400
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000004 	.word	0x20000004
 80013f0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80013f4:	4bb1      	ldr	r3, [pc, #708]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 80013f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	055b      	lsls	r3, r3, #21
 80013fc:	4013      	ands	r3, r2
 80013fe:	d101      	bne.n	8001404 <HAL_RCC_OscConfig+0x360>
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <HAL_RCC_OscConfig+0x362>
 8001404:	2300      	movs	r3, #0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d011      	beq.n	800142e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	4bac      	ldr	r3, [pc, #688]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 800140c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800140e:	4bab      	ldr	r3, [pc, #684]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 8001410:	2180      	movs	r1, #128	; 0x80
 8001412:	0549      	lsls	r1, r1, #21
 8001414:	430a      	orrs	r2, r1
 8001416:	63da      	str	r2, [r3, #60]	; 0x3c
 8001418:	4ba8      	ldr	r3, [pc, #672]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 800141a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	055b      	lsls	r3, r3, #21
 8001420:	4013      	ands	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001426:	231f      	movs	r3, #31
 8001428:	18fb      	adds	r3, r7, r3
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800142e:	4ba4      	ldr	r3, [pc, #656]	; (80016c0 <HAL_RCC_OscConfig+0x61c>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4013      	ands	r3, r2
 8001438:	d11a      	bne.n	8001470 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800143a:	4ba1      	ldr	r3, [pc, #644]	; (80016c0 <HAL_RCC_OscConfig+0x61c>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4ba0      	ldr	r3, [pc, #640]	; (80016c0 <HAL_RCC_OscConfig+0x61c>)
 8001440:	2180      	movs	r1, #128	; 0x80
 8001442:	0049      	lsls	r1, r1, #1
 8001444:	430a      	orrs	r2, r1
 8001446:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001448:	f7ff fb4c 	bl	8000ae4 <HAL_GetTick>
 800144c:	0003      	movs	r3, r0
 800144e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001452:	f7ff fb47 	bl	8000ae4 <HAL_GetTick>
 8001456:	0002      	movs	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e127      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001464:	4b96      	ldr	r3, [pc, #600]	; (80016c0 <HAL_RCC_OscConfig+0x61c>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4013      	ands	r3, r2
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d106      	bne.n	8001486 <HAL_RCC_OscConfig+0x3e2>
 8001478:	4b90      	ldr	r3, [pc, #576]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 800147a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800147c:	4b8f      	ldr	r3, [pc, #572]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 800147e:	2101      	movs	r1, #1
 8001480:	430a      	orrs	r2, r1
 8001482:	65da      	str	r2, [r3, #92]	; 0x5c
 8001484:	e01c      	b.n	80014c0 <HAL_RCC_OscConfig+0x41c>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b05      	cmp	r3, #5
 800148c:	d10c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x404>
 800148e:	4b8b      	ldr	r3, [pc, #556]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 8001490:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001492:	4b8a      	ldr	r3, [pc, #552]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 8001494:	2104      	movs	r1, #4
 8001496:	430a      	orrs	r2, r1
 8001498:	65da      	str	r2, [r3, #92]	; 0x5c
 800149a:	4b88      	ldr	r3, [pc, #544]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 800149c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800149e:	4b87      	ldr	r3, [pc, #540]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 80014a0:	2101      	movs	r1, #1
 80014a2:	430a      	orrs	r2, r1
 80014a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80014a6:	e00b      	b.n	80014c0 <HAL_RCC_OscConfig+0x41c>
 80014a8:	4b84      	ldr	r3, [pc, #528]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 80014aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014ac:	4b83      	ldr	r3, [pc, #524]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 80014ae:	2101      	movs	r1, #1
 80014b0:	438a      	bics	r2, r1
 80014b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80014b4:	4b81      	ldr	r3, [pc, #516]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 80014b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014b8:	4b80      	ldr	r3, [pc, #512]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 80014ba:	2104      	movs	r1, #4
 80014bc:	438a      	bics	r2, r1
 80014be:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d014      	beq.n	80014f2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fb0c 	bl	8000ae4 <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014d0:	e009      	b.n	80014e6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d2:	f7ff fb07 	bl	8000ae4 <HAL_GetTick>
 80014d6:	0002      	movs	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	4a79      	ldr	r2, [pc, #484]	; (80016c4 <HAL_RCC_OscConfig+0x620>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e0e6      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014e6:	4b75      	ldr	r3, [pc, #468]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 80014e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ea:	2202      	movs	r2, #2
 80014ec:	4013      	ands	r3, r2
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0x42e>
 80014f0:	e013      	b.n	800151a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f2:	f7ff faf7 	bl	8000ae4 <HAL_GetTick>
 80014f6:	0003      	movs	r3, r0
 80014f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014fa:	e009      	b.n	8001510 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fc:	f7ff faf2 	bl	8000ae4 <HAL_GetTick>
 8001500:	0002      	movs	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	4a6f      	ldr	r2, [pc, #444]	; (80016c4 <HAL_RCC_OscConfig+0x620>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e0d1      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001510:	4b6a      	ldr	r3, [pc, #424]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 8001512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001514:	2202      	movs	r2, #2
 8001516:	4013      	ands	r3, r2
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800151a:	231f      	movs	r3, #31
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d105      	bne.n	8001530 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001524:	4b65      	ldr	r3, [pc, #404]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 8001526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001528:	4b64      	ldr	r3, [pc, #400]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 800152a:	4967      	ldr	r1, [pc, #412]	; (80016c8 <HAL_RCC_OscConfig+0x624>)
 800152c:	400a      	ands	r2, r1
 800152e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d100      	bne.n	800153a <HAL_RCC_OscConfig+0x496>
 8001538:	e0bb      	b.n	80016b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800153a:	4b60      	ldr	r3, [pc, #384]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2238      	movs	r2, #56	; 0x38
 8001540:	4013      	ands	r3, r2
 8001542:	2b10      	cmp	r3, #16
 8001544:	d100      	bne.n	8001548 <HAL_RCC_OscConfig+0x4a4>
 8001546:	e07b      	b.n	8001640 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d156      	bne.n	80015fe <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001550:	4b5a      	ldr	r3, [pc, #360]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b59      	ldr	r3, [pc, #356]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 8001556:	495d      	ldr	r1, [pc, #372]	; (80016cc <HAL_RCC_OscConfig+0x628>)
 8001558:	400a      	ands	r2, r1
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155c:	f7ff fac2 	bl	8000ae4 <HAL_GetTick>
 8001560:	0003      	movs	r3, r0
 8001562:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001566:	f7ff fabd 	bl	8000ae4 <HAL_GetTick>
 800156a:	0002      	movs	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e09d      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001578:	4b50      	ldr	r3, [pc, #320]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	049b      	lsls	r3, r3, #18
 8001580:	4013      	ands	r3, r2
 8001582:	d1f0      	bne.n	8001566 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001584:	4b4d      	ldr	r3, [pc, #308]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	4a51      	ldr	r2, [pc, #324]	; (80016d0 <HAL_RCC_OscConfig+0x62c>)
 800158a:	4013      	ands	r3, r2
 800158c:	0019      	movs	r1, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a1a      	ldr	r2, [r3, #32]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b0:	431a      	orrs	r2, r3
 80015b2:	4b42      	ldr	r3, [pc, #264]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 80015b4:	430a      	orrs	r2, r1
 80015b6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b8:	4b40      	ldr	r3, [pc, #256]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b3f      	ldr	r3, [pc, #252]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 80015be:	2180      	movs	r1, #128	; 0x80
 80015c0:	0449      	lsls	r1, r1, #17
 80015c2:	430a      	orrs	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80015c6:	4b3d      	ldr	r3, [pc, #244]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	4b3c      	ldr	r3, [pc, #240]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 80015cc:	2180      	movs	r1, #128	; 0x80
 80015ce:	0549      	lsls	r1, r1, #21
 80015d0:	430a      	orrs	r2, r1
 80015d2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff fa86 	bl	8000ae4 <HAL_GetTick>
 80015d8:	0003      	movs	r3, r0
 80015da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015de:	f7ff fa81 	bl	8000ae4 <HAL_GetTick>
 80015e2:	0002      	movs	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e061      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015f0:	4b32      	ldr	r3, [pc, #200]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	049b      	lsls	r3, r3, #18
 80015f8:	4013      	ands	r3, r2
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x53a>
 80015fc:	e059      	b.n	80016b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fe:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 8001604:	4931      	ldr	r1, [pc, #196]	; (80016cc <HAL_RCC_OscConfig+0x628>)
 8001606:	400a      	ands	r2, r1
 8001608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160a:	f7ff fa6b 	bl	8000ae4 <HAL_GetTick>
 800160e:	0003      	movs	r3, r0
 8001610:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff fa66 	bl	8000ae4 <HAL_GetTick>
 8001618:	0002      	movs	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e046      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001626:	4b25      	ldr	r3, [pc, #148]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	049b      	lsls	r3, r3, #18
 800162e:	4013      	ands	r3, r2
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001632:	4b22      	ldr	r3, [pc, #136]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	4b21      	ldr	r3, [pc, #132]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 8001638:	4926      	ldr	r1, [pc, #152]	; (80016d4 <HAL_RCC_OscConfig+0x630>)
 800163a:	400a      	ands	r2, r1
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	e038      	b.n	80016b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d101      	bne.n	800164c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e033      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <HAL_RCC_OscConfig+0x618>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2203      	movs	r2, #3
 8001656:	401a      	ands	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	429a      	cmp	r2, r3
 800165e:	d126      	bne.n	80016ae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	2270      	movs	r2, #112	; 0x70
 8001664:	401a      	ands	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	429a      	cmp	r2, r3
 800166c:	d11f      	bne.n	80016ae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	23fe      	movs	r3, #254	; 0xfe
 8001672:	01db      	lsls	r3, r3, #7
 8001674:	401a      	ands	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800167c:	429a      	cmp	r2, r3
 800167e:	d116      	bne.n	80016ae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	23f8      	movs	r3, #248	; 0xf8
 8001684:	039b      	lsls	r3, r3, #14
 8001686:	401a      	ands	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800168c:	429a      	cmp	r2, r3
 800168e:	d10e      	bne.n	80016ae <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	23e0      	movs	r3, #224	; 0xe0
 8001694:	051b      	lsls	r3, r3, #20
 8001696:	401a      	ands	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800169c:	429a      	cmp	r2, r3
 800169e:	d106      	bne.n	80016ae <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	0f5b      	lsrs	r3, r3, #29
 80016a4:	075a      	lsls	r2, r3, #29
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d001      	beq.n	80016b2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	0018      	movs	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b008      	add	sp, #32
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40007000 	.word	0x40007000
 80016c4:	00001388 	.word	0x00001388
 80016c8:	efffffff 	.word	0xefffffff
 80016cc:	feffffff 	.word	0xfeffffff
 80016d0:	11c1808c 	.word	0x11c1808c
 80016d4:	eefefffc 	.word	0xeefefffc

080016d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0e9      	b.n	80018c0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016ec:	4b76      	ldr	r3, [pc, #472]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2207      	movs	r2, #7
 80016f2:	4013      	ands	r3, r2
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d91e      	bls.n	8001738 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fa:	4b73      	ldr	r3, [pc, #460]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2207      	movs	r2, #7
 8001700:	4393      	bics	r3, r2
 8001702:	0019      	movs	r1, r3
 8001704:	4b70      	ldr	r3, [pc, #448]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800170c:	f7ff f9ea 	bl	8000ae4 <HAL_GetTick>
 8001710:	0003      	movs	r3, r0
 8001712:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001714:	e009      	b.n	800172a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001716:	f7ff f9e5 	bl	8000ae4 <HAL_GetTick>
 800171a:	0002      	movs	r2, r0
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	4a6a      	ldr	r2, [pc, #424]	; (80018cc <HAL_RCC_ClockConfig+0x1f4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d901      	bls.n	800172a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e0ca      	b.n	80018c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800172a:	4b67      	ldr	r3, [pc, #412]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2207      	movs	r2, #7
 8001730:	4013      	ands	r3, r2
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d1ee      	bne.n	8001716 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2202      	movs	r2, #2
 800173e:	4013      	ands	r3, r2
 8001740:	d015      	beq.n	800176e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2204      	movs	r2, #4
 8001748:	4013      	ands	r3, r2
 800174a:	d006      	beq.n	800175a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800174c:	4b60      	ldr	r3, [pc, #384]	; (80018d0 <HAL_RCC_ClockConfig+0x1f8>)
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	4b5f      	ldr	r3, [pc, #380]	; (80018d0 <HAL_RCC_ClockConfig+0x1f8>)
 8001752:	21e0      	movs	r1, #224	; 0xe0
 8001754:	01c9      	lsls	r1, r1, #7
 8001756:	430a      	orrs	r2, r1
 8001758:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800175a:	4b5d      	ldr	r3, [pc, #372]	; (80018d0 <HAL_RCC_ClockConfig+0x1f8>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	4a5d      	ldr	r2, [pc, #372]	; (80018d4 <HAL_RCC_ClockConfig+0x1fc>)
 8001760:	4013      	ands	r3, r2
 8001762:	0019      	movs	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	4b59      	ldr	r3, [pc, #356]	; (80018d0 <HAL_RCC_ClockConfig+0x1f8>)
 800176a:	430a      	orrs	r2, r1
 800176c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2201      	movs	r2, #1
 8001774:	4013      	ands	r3, r2
 8001776:	d057      	beq.n	8001828 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d107      	bne.n	8001790 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001780:	4b53      	ldr	r3, [pc, #332]	; (80018d0 <HAL_RCC_ClockConfig+0x1f8>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	029b      	lsls	r3, r3, #10
 8001788:	4013      	ands	r3, r2
 800178a:	d12b      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e097      	b.n	80018c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d107      	bne.n	80017a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001798:	4b4d      	ldr	r3, [pc, #308]	; (80018d0 <HAL_RCC_ClockConfig+0x1f8>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	049b      	lsls	r3, r3, #18
 80017a0:	4013      	ands	r3, r2
 80017a2:	d11f      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e08b      	b.n	80018c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d107      	bne.n	80017c0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b0:	4b47      	ldr	r3, [pc, #284]	; (80018d0 <HAL_RCC_ClockConfig+0x1f8>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4013      	ands	r3, r2
 80017ba:	d113      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e07f      	b.n	80018c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d106      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c8:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <HAL_RCC_ClockConfig+0x1f8>)
 80017ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017cc:	2202      	movs	r2, #2
 80017ce:	4013      	ands	r3, r2
 80017d0:	d108      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e074      	b.n	80018c0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d6:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <HAL_RCC_ClockConfig+0x1f8>)
 80017d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017da:	2202      	movs	r2, #2
 80017dc:	4013      	ands	r3, r2
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e06d      	b.n	80018c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017e4:	4b3a      	ldr	r3, [pc, #232]	; (80018d0 <HAL_RCC_ClockConfig+0x1f8>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2207      	movs	r2, #7
 80017ea:	4393      	bics	r3, r2
 80017ec:	0019      	movs	r1, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <HAL_RCC_ClockConfig+0x1f8>)
 80017f4:	430a      	orrs	r2, r1
 80017f6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017f8:	f7ff f974 	bl	8000ae4 <HAL_GetTick>
 80017fc:	0003      	movs	r3, r0
 80017fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001800:	e009      	b.n	8001816 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001802:	f7ff f96f 	bl	8000ae4 <HAL_GetTick>
 8001806:	0002      	movs	r2, r0
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	4a2f      	ldr	r2, [pc, #188]	; (80018cc <HAL_RCC_ClockConfig+0x1f4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e054      	b.n	80018c0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	4b2e      	ldr	r3, [pc, #184]	; (80018d0 <HAL_RCC_ClockConfig+0x1f8>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2238      	movs	r2, #56	; 0x38
 800181c:	401a      	ands	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	429a      	cmp	r2, r3
 8001826:	d1ec      	bne.n	8001802 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2207      	movs	r2, #7
 800182e:	4013      	ands	r3, r2
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d21e      	bcs.n	8001874 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2207      	movs	r2, #7
 800183c:	4393      	bics	r3, r2
 800183e:	0019      	movs	r1, r3
 8001840:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001848:	f7ff f94c 	bl	8000ae4 <HAL_GetTick>
 800184c:	0003      	movs	r3, r0
 800184e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001850:	e009      	b.n	8001866 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001852:	f7ff f947 	bl	8000ae4 <HAL_GetTick>
 8001856:	0002      	movs	r2, r0
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <HAL_RCC_ClockConfig+0x1f4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e02c      	b.n	80018c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2207      	movs	r2, #7
 800186c:	4013      	ands	r3, r2
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d1ee      	bne.n	8001852 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2204      	movs	r2, #4
 800187a:	4013      	ands	r3, r2
 800187c:	d009      	beq.n	8001892 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_RCC_ClockConfig+0x1f8>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	4a15      	ldr	r2, [pc, #84]	; (80018d8 <HAL_RCC_ClockConfig+0x200>)
 8001884:	4013      	ands	r3, r2
 8001886:	0019      	movs	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_RCC_ClockConfig+0x1f8>)
 800188e:	430a      	orrs	r2, r1
 8001890:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001892:	f000 f829 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 8001896:	0001      	movs	r1, r0
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <HAL_RCC_ClockConfig+0x1f8>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	220f      	movs	r2, #15
 80018a0:	401a      	ands	r2, r3
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <HAL_RCC_ClockConfig+0x204>)
 80018a4:	0092      	lsls	r2, r2, #2
 80018a6:	58d3      	ldr	r3, [r2, r3]
 80018a8:	221f      	movs	r2, #31
 80018aa:	4013      	ands	r3, r2
 80018ac:	000a      	movs	r2, r1
 80018ae:	40da      	lsrs	r2, r3
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_ClockConfig+0x208>)
 80018b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_RCC_ClockConfig+0x20c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	0018      	movs	r0, r3
 80018ba:	f7ff f8b7 	bl	8000a2c <HAL_InitTick>
 80018be:	0003      	movs	r3, r0
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b004      	add	sp, #16
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40022000 	.word	0x40022000
 80018cc:	00001388 	.word	0x00001388
 80018d0:	40021000 	.word	0x40021000
 80018d4:	fffff0ff 	.word	0xfffff0ff
 80018d8:	ffff8fff 	.word	0xffff8fff
 80018dc:	08002b98 	.word	0x08002b98
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ee:	4b3c      	ldr	r3, [pc, #240]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2238      	movs	r2, #56	; 0x38
 80018f4:	4013      	ands	r3, r2
 80018f6:	d10f      	bne.n	8001918 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80018f8:	4b39      	ldr	r3, [pc, #228]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	0adb      	lsrs	r3, r3, #11
 80018fe:	2207      	movs	r2, #7
 8001900:	4013      	ands	r3, r2
 8001902:	2201      	movs	r2, #1
 8001904:	409a      	lsls	r2, r3
 8001906:	0013      	movs	r3, r2
 8001908:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800190a:	6839      	ldr	r1, [r7, #0]
 800190c:	4835      	ldr	r0, [pc, #212]	; (80019e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800190e:	f7fe fbf9 	bl	8000104 <__udivsi3>
 8001912:	0003      	movs	r3, r0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	e05d      	b.n	80019d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001918:	4b31      	ldr	r3, [pc, #196]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2238      	movs	r2, #56	; 0x38
 800191e:	4013      	ands	r3, r2
 8001920:	2b08      	cmp	r3, #8
 8001922:	d102      	bne.n	800192a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001924:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	e054      	b.n	80019d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800192a:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2238      	movs	r2, #56	; 0x38
 8001930:	4013      	ands	r3, r2
 8001932:	2b10      	cmp	r3, #16
 8001934:	d138      	bne.n	80019a8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001936:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2203      	movs	r2, #3
 800193c:	4013      	ands	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001940:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	2207      	movs	r2, #7
 8001948:	4013      	ands	r3, r2
 800194a:	3301      	adds	r3, #1
 800194c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2b03      	cmp	r3, #3
 8001952:	d10d      	bne.n	8001970 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	4824      	ldr	r0, [pc, #144]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001958:	f7fe fbd4 	bl	8000104 <__udivsi3>
 800195c:	0003      	movs	r3, r0
 800195e:	0019      	movs	r1, r3
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	227f      	movs	r2, #127	; 0x7f
 8001968:	4013      	ands	r3, r2
 800196a:	434b      	muls	r3, r1
 800196c:	617b      	str	r3, [r7, #20]
        break;
 800196e:	e00d      	b.n	800198c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	481c      	ldr	r0, [pc, #112]	; (80019e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001974:	f7fe fbc6 	bl	8000104 <__udivsi3>
 8001978:	0003      	movs	r3, r0
 800197a:	0019      	movs	r1, r3
 800197c:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	227f      	movs	r2, #127	; 0x7f
 8001984:	4013      	ands	r3, r2
 8001986:	434b      	muls	r3, r1
 8001988:	617b      	str	r3, [r7, #20]
        break;
 800198a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800198c:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0f5b      	lsrs	r3, r3, #29
 8001992:	2207      	movs	r2, #7
 8001994:	4013      	ands	r3, r2
 8001996:	3301      	adds	r3, #1
 8001998:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	6978      	ldr	r0, [r7, #20]
 800199e:	f7fe fbb1 	bl	8000104 <__udivsi3>
 80019a2:	0003      	movs	r3, r0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	e015      	b.n	80019d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2238      	movs	r2, #56	; 0x38
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b20      	cmp	r3, #32
 80019b2:	d103      	bne.n	80019bc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	e00b      	b.n	80019d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2238      	movs	r2, #56	; 0x38
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b18      	cmp	r3, #24
 80019c6:	d103      	bne.n	80019d0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80019c8:	23fa      	movs	r3, #250	; 0xfa
 80019ca:	01db      	lsls	r3, r3, #7
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	e001      	b.n	80019d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80019d4:	693b      	ldr	r3, [r7, #16]
}
 80019d6:	0018      	movs	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	b006      	add	sp, #24
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	40021000 	.word	0x40021000
 80019e4:	00f42400 	.word	0x00f42400
 80019e8:	007a1200 	.word	0x007a1200

080019ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019f0:	4b02      	ldr	r3, [pc, #8]	; (80019fc <HAL_RCC_GetHCLKFreq+0x10>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	20000000 	.word	0x20000000

08001a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a00:	b5b0      	push	{r4, r5, r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a04:	f7ff fff2 	bl	80019ec <HAL_RCC_GetHCLKFreq>
 8001a08:	0004      	movs	r4, r0
 8001a0a:	f7ff fb3f 	bl	800108c <LL_RCC_GetAPB1Prescaler>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	0b1a      	lsrs	r2, r3, #12
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a14:	0092      	lsls	r2, r2, #2
 8001a16:	58d3      	ldr	r3, [r2, r3]
 8001a18:	221f      	movs	r2, #31
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	40dc      	lsrs	r4, r3
 8001a1e:	0023      	movs	r3, r4
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bdb0      	pop	{r4, r5, r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	08002bd8 	.word	0x08002bd8

08001a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001a34:	2313      	movs	r3, #19
 8001a36:	18fb      	adds	r3, r7, r3
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a3c:	2312      	movs	r3, #18
 8001a3e:	18fb      	adds	r3, r7, r3
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	029b      	lsls	r3, r3, #10
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d100      	bne.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001a50:	e0a3      	b.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a52:	2011      	movs	r0, #17
 8001a54:	183b      	adds	r3, r7, r0
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a5a:	4bc3      	ldr	r3, [pc, #780]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	055b      	lsls	r3, r3, #21
 8001a62:	4013      	ands	r3, r2
 8001a64:	d110      	bne.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	4bc0      	ldr	r3, [pc, #768]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a6a:	4bbf      	ldr	r3, [pc, #764]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a6c:	2180      	movs	r1, #128	; 0x80
 8001a6e:	0549      	lsls	r1, r1, #21
 8001a70:	430a      	orrs	r2, r1
 8001a72:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a74:	4bbc      	ldr	r3, [pc, #752]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	055b      	lsls	r3, r3, #21
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a82:	183b      	adds	r3, r7, r0
 8001a84:	2201      	movs	r2, #1
 8001a86:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a88:	4bb8      	ldr	r3, [pc, #736]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4bb7      	ldr	r3, [pc, #732]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	0049      	lsls	r1, r1, #1
 8001a92:	430a      	orrs	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a96:	f7ff f825 	bl	8000ae4 <HAL_GetTick>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a9e:	e00b      	b.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa0:	f7ff f820 	bl	8000ae4 <HAL_GetTick>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d904      	bls.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001aae:	2313      	movs	r3, #19
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	701a      	strb	r2, [r3, #0]
        break;
 8001ab6:	e005      	b.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ab8:	4bac      	ldr	r3, [pc, #688]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d0ed      	beq.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001ac4:	2313      	movs	r3, #19
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d154      	bne.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ace:	4ba6      	ldr	r3, [pc, #664]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ad0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ad2:	23c0      	movs	r3, #192	; 0xc0
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d019      	beq.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d014      	beq.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001aea:	4b9f      	ldr	r3, [pc, #636]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aee:	4aa0      	ldr	r2, [pc, #640]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001af4:	4b9c      	ldr	r3, [pc, #624]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001af6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001af8:	4b9b      	ldr	r3, [pc, #620]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001afa:	2180      	movs	r1, #128	; 0x80
 8001afc:	0249      	lsls	r1, r1, #9
 8001afe:	430a      	orrs	r2, r1
 8001b00:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b02:	4b99      	ldr	r3, [pc, #612]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b06:	4b98      	ldr	r3, [pc, #608]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b08:	499a      	ldr	r1, [pc, #616]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b0e:	4b96      	ldr	r3, [pc, #600]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2201      	movs	r2, #1
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d016      	beq.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7fe ffe2 	bl	8000ae4 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b24:	e00c      	b.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b26:	f7fe ffdd 	bl	8000ae4 <HAL_GetTick>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	4a91      	ldr	r2, [pc, #580]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d904      	bls.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001b36:	2313      	movs	r3, #19
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	701a      	strb	r2, [r3, #0]
            break;
 8001b3e:	e004      	b.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b40:	4b89      	ldr	r3, [pc, #548]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b44:	2202      	movs	r2, #2
 8001b46:	4013      	ands	r3, r2
 8001b48:	d0ed      	beq.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001b4a:	2313      	movs	r3, #19
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10a      	bne.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b54:	4b84      	ldr	r3, [pc, #528]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b58:	4a85      	ldr	r2, [pc, #532]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b62:	4b81      	ldr	r3, [pc, #516]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b64:	430a      	orrs	r2, r1
 8001b66:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b68:	e00c      	b.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b6a:	2312      	movs	r3, #18
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	2213      	movs	r2, #19
 8001b70:	18ba      	adds	r2, r7, r2
 8001b72:	7812      	ldrb	r2, [r2, #0]
 8001b74:	701a      	strb	r2, [r3, #0]
 8001b76:	e005      	b.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b78:	2312      	movs	r3, #18
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	2213      	movs	r2, #19
 8001b7e:	18ba      	adds	r2, r7, r2
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b84:	2311      	movs	r3, #17
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d105      	bne.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8e:	4b76      	ldr	r3, [pc, #472]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b92:	4b75      	ldr	r3, [pc, #468]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b94:	4979      	ldr	r1, [pc, #484]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001b96:	400a      	ands	r2, r1
 8001b98:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d009      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ba4:	4b70      	ldr	r3, [pc, #448]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba8:	2203      	movs	r2, #3
 8001baa:	4393      	bics	r3, r2
 8001bac:	0019      	movs	r1, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	4b6d      	ldr	r3, [pc, #436]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d009      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bc2:	4b69      	ldr	r3, [pc, #420]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	4393      	bics	r3, r2
 8001bca:	0019      	movs	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	4b65      	ldr	r3, [pc, #404]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2210      	movs	r2, #16
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d009      	beq.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001be0:	4b61      	ldr	r3, [pc, #388]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be4:	4a66      	ldr	r2, [pc, #408]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	0019      	movs	r1, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	4b5e      	ldr	r3, [pc, #376]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d009      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c00:	4b59      	ldr	r3, [pc, #356]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c04:	4a5f      	ldr	r2, [pc, #380]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	0019      	movs	r1, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	4b56      	ldr	r3, [pc, #344]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c10:	430a      	orrs	r2, r1
 8001c12:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d009      	beq.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001c20:	4b51      	ldr	r3, [pc, #324]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c24:	4a58      	ldr	r2, [pc, #352]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	0019      	movs	r1, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69da      	ldr	r2, [r3, #28]
 8001c2e:	4b4e      	ldr	r3, [pc, #312]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c30:	430a      	orrs	r2, r1
 8001c32:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d009      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c3e:	4b4a      	ldr	r3, [pc, #296]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c42:	4a52      	ldr	r2, [pc, #328]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	0019      	movs	r1, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	4b46      	ldr	r3, [pc, #280]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	01db      	lsls	r3, r3, #7
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d015      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c5e:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	0899      	lsrs	r1, r3, #2
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1a      	ldr	r2, [r3, #32]
 8001c6a:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1a      	ldr	r2, [r3, #32]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	05db      	lsls	r3, r3, #23
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c7c:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	4b39      	ldr	r3, [pc, #228]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c82:	2180      	movs	r1, #128	; 0x80
 8001c84:	0249      	lsls	r1, r1, #9
 8001c86:	430a      	orrs	r2, r1
 8001c88:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	031b      	lsls	r3, r3, #12
 8001c92:	4013      	ands	r3, r2
 8001c94:	d009      	beq.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c96:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9a:	2240      	movs	r2, #64	; 0x40
 8001c9c:	4393      	bics	r3, r2
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca4:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	039b      	lsls	r3, r3, #14
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d016      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001cb6:	4b2c      	ldr	r3, [pc, #176]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cba:	4a35      	ldr	r2, [pc, #212]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cc4:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	03db      	lsls	r3, r3, #15
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d106      	bne.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001cd6:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	4b23      	ldr	r3, [pc, #140]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	0449      	lsls	r1, r1, #17
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	03db      	lsls	r3, r3, #15
 8001cec:	4013      	ands	r3, r2
 8001cee:	d016      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf4:	4a27      	ldr	r2, [pc, #156]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d00:	430a      	orrs	r2, r1
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	045b      	lsls	r3, r3, #17
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d106      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001d10:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d16:	2180      	movs	r1, #128	; 0x80
 8001d18:	0449      	lsls	r1, r1, #17
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	4013      	ands	r3, r2
 8001d28:	d016      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2e:	4a1a      	ldr	r2, [pc, #104]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	0019      	movs	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	01db      	lsls	r3, r3, #7
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d106      	bne.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d50:	2180      	movs	r1, #128	; 0x80
 8001d52:	0249      	lsls	r1, r1, #9
 8001d54:	430a      	orrs	r2, r1
 8001d56:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001d58:	2312      	movs	r3, #18
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	781b      	ldrb	r3, [r3, #0]
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b006      	add	sp, #24
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	fffffcff 	.word	0xfffffcff
 8001d74:	fffeffff 	.word	0xfffeffff
 8001d78:	00001388 	.word	0x00001388
 8001d7c:	efffffff 	.word	0xefffffff
 8001d80:	fffff3ff 	.word	0xfffff3ff
 8001d84:	fff3ffff 	.word	0xfff3ffff
 8001d88:	ffcfffff 	.word	0xffcfffff
 8001d8c:	ffffcfff 	.word	0xffffcfff
 8001d90:	ffbfffff 	.word	0xffbfffff
 8001d94:	feffffff 	.word	0xfeffffff
 8001d98:	ffff3fff 	.word	0xffff3fff

08001d9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e046      	b.n	8001e3c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2284      	movs	r2, #132	; 0x84
 8001db2:	589b      	ldr	r3, [r3, r2]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d107      	bne.n	8001dc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f7fe fd6c 	bl	80008a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2284      	movs	r2, #132	; 0x84
 8001dcc:	2124      	movs	r1, #36	; 0x24
 8001dce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2101      	movs	r1, #1
 8001ddc:	438a      	bics	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	0018      	movs	r0, r3
 8001de4:	f000 f8dc 	bl	8001fa0 <UART_SetConfig>
 8001de8:	0003      	movs	r3, r0
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e024      	b.n	8001e3c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f000 fbab 	bl	8002558 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	490d      	ldr	r1, [pc, #52]	; (8001e44 <HAL_UART_Init+0xa8>)
 8001e0e:	400a      	ands	r2, r1
 8001e10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	212a      	movs	r1, #42	; 0x2a
 8001e1e:	438a      	bics	r2, r1
 8001e20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f000 fc43 	bl	80026c0 <UART_CheckIdleState>
 8001e3a:	0003      	movs	r3, r0
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b002      	add	sp, #8
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	ffffb7ff 	.word	0xffffb7ff

08001e48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	1dbb      	adds	r3, r7, #6
 8001e56:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2284      	movs	r2, #132	; 0x84
 8001e5c:	589b      	ldr	r3, [r3, r2]
 8001e5e:	2b20      	cmp	r3, #32
 8001e60:	d000      	beq.n	8001e64 <HAL_UART_Transmit+0x1c>
 8001e62:	e097      	b.n	8001f94 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_UART_Transmit+0x2a>
 8001e6a:	1dbb      	adds	r3, r7, #6
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e08f      	b.n	8001f96 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	015b      	lsls	r3, r3, #5
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d109      	bne.n	8001e96 <HAL_UART_Transmit+0x4e>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d105      	bne.n	8001e96 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d001      	beq.n	8001e96 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e07f      	b.n	8001f96 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2280      	movs	r2, #128	; 0x80
 8001e9a:	5c9b      	ldrb	r3, [r3, r2]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_UART_Transmit+0x5c>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e078      	b.n	8001f96 <HAL_UART_Transmit+0x14e>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2280      	movs	r2, #128	; 0x80
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	228c      	movs	r2, #140	; 0x8c
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2284      	movs	r2, #132	; 0x84
 8001eb8:	2121      	movs	r1, #33	; 0x21
 8001eba:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ebc:	f7fe fe12 	bl	8000ae4 <HAL_GetTick>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1dba      	adds	r2, r7, #6
 8001ec8:	2154      	movs	r1, #84	; 0x54
 8001eca:	8812      	ldrh	r2, [r2, #0]
 8001ecc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1dba      	adds	r2, r7, #6
 8001ed2:	2156      	movs	r1, #86	; 0x56
 8001ed4:	8812      	ldrh	r2, [r2, #0]
 8001ed6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	015b      	lsls	r3, r3, #5
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d108      	bne.n	8001ef6 <HAL_UART_Transmit+0xae>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d104      	bne.n	8001ef6 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	e003      	b.n	8001efe <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2280      	movs	r2, #128	; 0x80
 8001f02:	2100      	movs	r1, #0
 8001f04:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001f06:	e02c      	b.n	8001f62 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	0013      	movs	r3, r2
 8001f12:	2200      	movs	r2, #0
 8001f14:	2180      	movs	r1, #128	; 0x80
 8001f16:	f000 fc1d 	bl	8002754 <UART_WaitOnFlagUntilTimeout>
 8001f1a:	1e03      	subs	r3, r0, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e039      	b.n	8001f96 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10b      	bne.n	8001f40 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	001a      	movs	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	05d2      	lsls	r2, r2, #23
 8001f34:	0dd2      	lsrs	r2, r2, #23
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	e007      	b.n	8001f50 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	781a      	ldrb	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2256      	movs	r2, #86	; 0x56
 8001f54:	5a9b      	ldrh	r3, [r3, r2]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b299      	uxth	r1, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2256      	movs	r2, #86	; 0x56
 8001f60:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2256      	movs	r2, #86	; 0x56
 8001f66:	5a9b      	ldrh	r3, [r3, r2]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1cc      	bne.n	8001f08 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	0013      	movs	r3, r2
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2140      	movs	r1, #64	; 0x40
 8001f7c:	f000 fbea 	bl	8002754 <UART_WaitOnFlagUntilTimeout>
 8001f80:	1e03      	subs	r3, r0, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e006      	b.n	8001f96 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2284      	movs	r2, #132	; 0x84
 8001f8c:	2120      	movs	r1, #32
 8001f8e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e000      	b.n	8001f96 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8001f94:	2302      	movs	r3, #2
  }
}
 8001f96:	0018      	movs	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b008      	add	sp, #32
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fa0:	b5b0      	push	{r4, r5, r7, lr}
 8001fa2:	b090      	sub	sp, #64	; 0x40
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fa8:	231a      	movs	r3, #26
 8001faa:	2220      	movs	r2, #32
 8001fac:	4694      	mov	ip, r2
 8001fae:	44bc      	add	ip, r7
 8001fb0:	4463      	add	r3, ip
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4ab9      	ldr	r2, [pc, #740]	; (80022bc <UART_SetConfig+0x31c>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	0019      	movs	r1, r3
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4ab5      	ldr	r2, [pc, #724]	; (80022c0 <UART_SetConfig+0x320>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	0018      	movs	r0, r3
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	68d9      	ldr	r1, [r3, #12]
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	430b      	orrs	r3, r1
 8001ffc:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4aae      	ldr	r2, [pc, #696]	; (80022c4 <UART_SetConfig+0x324>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d004      	beq.n	8002018 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002014:	4313      	orrs	r3, r2
 8002016:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	4aaa      	ldr	r2, [pc, #680]	; (80022c8 <UART_SetConfig+0x328>)
 8002020:	4013      	ands	r3, r2
 8002022:	0019      	movs	r1, r3
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800202a:	430b      	orrs	r3, r1
 800202c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	220f      	movs	r2, #15
 8002036:	4393      	bics	r3, r2
 8002038:	0018      	movs	r0, r3
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	0003      	movs	r3, r0
 8002044:	430b      	orrs	r3, r1
 8002046:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a9f      	ldr	r2, [pc, #636]	; (80022cc <UART_SetConfig+0x32c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d136      	bne.n	80020c0 <UART_SetConfig+0x120>
 8002052:	4b9f      	ldr	r3, [pc, #636]	; (80022d0 <UART_SetConfig+0x330>)
 8002054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002056:	2203      	movs	r2, #3
 8002058:	4013      	ands	r3, r2
 800205a:	2b03      	cmp	r3, #3
 800205c:	d020      	beq.n	80020a0 <UART_SetConfig+0x100>
 800205e:	d827      	bhi.n	80020b0 <UART_SetConfig+0x110>
 8002060:	2b02      	cmp	r3, #2
 8002062:	d00d      	beq.n	8002080 <UART_SetConfig+0xe0>
 8002064:	d824      	bhi.n	80020b0 <UART_SetConfig+0x110>
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <UART_SetConfig+0xd0>
 800206a:	2b01      	cmp	r3, #1
 800206c:	d010      	beq.n	8002090 <UART_SetConfig+0xf0>
 800206e:	e01f      	b.n	80020b0 <UART_SetConfig+0x110>
 8002070:	231b      	movs	r3, #27
 8002072:	2220      	movs	r2, #32
 8002074:	4694      	mov	ip, r2
 8002076:	44bc      	add	ip, r7
 8002078:	4463      	add	r3, ip
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
 800207e:	e0c5      	b.n	800220c <UART_SetConfig+0x26c>
 8002080:	231b      	movs	r3, #27
 8002082:	2220      	movs	r2, #32
 8002084:	4694      	mov	ip, r2
 8002086:	44bc      	add	ip, r7
 8002088:	4463      	add	r3, ip
 800208a:	2202      	movs	r2, #2
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	e0bd      	b.n	800220c <UART_SetConfig+0x26c>
 8002090:	231b      	movs	r3, #27
 8002092:	2220      	movs	r2, #32
 8002094:	4694      	mov	ip, r2
 8002096:	44bc      	add	ip, r7
 8002098:	4463      	add	r3, ip
 800209a:	2204      	movs	r2, #4
 800209c:	701a      	strb	r2, [r3, #0]
 800209e:	e0b5      	b.n	800220c <UART_SetConfig+0x26c>
 80020a0:	231b      	movs	r3, #27
 80020a2:	2220      	movs	r2, #32
 80020a4:	4694      	mov	ip, r2
 80020a6:	44bc      	add	ip, r7
 80020a8:	4463      	add	r3, ip
 80020aa:	2208      	movs	r2, #8
 80020ac:	701a      	strb	r2, [r3, #0]
 80020ae:	e0ad      	b.n	800220c <UART_SetConfig+0x26c>
 80020b0:	231b      	movs	r3, #27
 80020b2:	2220      	movs	r2, #32
 80020b4:	4694      	mov	ip, r2
 80020b6:	44bc      	add	ip, r7
 80020b8:	4463      	add	r3, ip
 80020ba:	2210      	movs	r2, #16
 80020bc:	701a      	strb	r2, [r3, #0]
 80020be:	e0a5      	b.n	800220c <UART_SetConfig+0x26c>
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a83      	ldr	r2, [pc, #524]	; (80022d4 <UART_SetConfig+0x334>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d136      	bne.n	8002138 <UART_SetConfig+0x198>
 80020ca:	4b81      	ldr	r3, [pc, #516]	; (80022d0 <UART_SetConfig+0x330>)
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	220c      	movs	r2, #12
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b0c      	cmp	r3, #12
 80020d4:	d020      	beq.n	8002118 <UART_SetConfig+0x178>
 80020d6:	d827      	bhi.n	8002128 <UART_SetConfig+0x188>
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d00d      	beq.n	80020f8 <UART_SetConfig+0x158>
 80020dc:	d824      	bhi.n	8002128 <UART_SetConfig+0x188>
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <UART_SetConfig+0x148>
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d010      	beq.n	8002108 <UART_SetConfig+0x168>
 80020e6:	e01f      	b.n	8002128 <UART_SetConfig+0x188>
 80020e8:	231b      	movs	r3, #27
 80020ea:	2220      	movs	r2, #32
 80020ec:	4694      	mov	ip, r2
 80020ee:	44bc      	add	ip, r7
 80020f0:	4463      	add	r3, ip
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
 80020f6:	e089      	b.n	800220c <UART_SetConfig+0x26c>
 80020f8:	231b      	movs	r3, #27
 80020fa:	2220      	movs	r2, #32
 80020fc:	4694      	mov	ip, r2
 80020fe:	44bc      	add	ip, r7
 8002100:	4463      	add	r3, ip
 8002102:	2202      	movs	r2, #2
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	e081      	b.n	800220c <UART_SetConfig+0x26c>
 8002108:	231b      	movs	r3, #27
 800210a:	2220      	movs	r2, #32
 800210c:	4694      	mov	ip, r2
 800210e:	44bc      	add	ip, r7
 8002110:	4463      	add	r3, ip
 8002112:	2204      	movs	r2, #4
 8002114:	701a      	strb	r2, [r3, #0]
 8002116:	e079      	b.n	800220c <UART_SetConfig+0x26c>
 8002118:	231b      	movs	r3, #27
 800211a:	2220      	movs	r2, #32
 800211c:	4694      	mov	ip, r2
 800211e:	44bc      	add	ip, r7
 8002120:	4463      	add	r3, ip
 8002122:	2208      	movs	r2, #8
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	e071      	b.n	800220c <UART_SetConfig+0x26c>
 8002128:	231b      	movs	r3, #27
 800212a:	2220      	movs	r2, #32
 800212c:	4694      	mov	ip, r2
 800212e:	44bc      	add	ip, r7
 8002130:	4463      	add	r3, ip
 8002132:	2210      	movs	r2, #16
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	e069      	b.n	800220c <UART_SetConfig+0x26c>
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a66      	ldr	r2, [pc, #408]	; (80022d8 <UART_SetConfig+0x338>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d107      	bne.n	8002152 <UART_SetConfig+0x1b2>
 8002142:	231b      	movs	r3, #27
 8002144:	2220      	movs	r2, #32
 8002146:	4694      	mov	ip, r2
 8002148:	44bc      	add	ip, r7
 800214a:	4463      	add	r3, ip
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
 8002150:	e05c      	b.n	800220c <UART_SetConfig+0x26c>
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a61      	ldr	r2, [pc, #388]	; (80022dc <UART_SetConfig+0x33c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d107      	bne.n	800216c <UART_SetConfig+0x1cc>
 800215c:	231b      	movs	r3, #27
 800215e:	2220      	movs	r2, #32
 8002160:	4694      	mov	ip, r2
 8002162:	44bc      	add	ip, r7
 8002164:	4463      	add	r3, ip
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
 800216a:	e04f      	b.n	800220c <UART_SetConfig+0x26c>
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a54      	ldr	r2, [pc, #336]	; (80022c4 <UART_SetConfig+0x324>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d143      	bne.n	80021fe <UART_SetConfig+0x25e>
 8002176:	4b56      	ldr	r3, [pc, #344]	; (80022d0 <UART_SetConfig+0x330>)
 8002178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800217a:	23c0      	movs	r3, #192	; 0xc0
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	4013      	ands	r3, r2
 8002180:	22c0      	movs	r2, #192	; 0xc0
 8002182:	0112      	lsls	r2, r2, #4
 8002184:	4293      	cmp	r3, r2
 8002186:	d02a      	beq.n	80021de <UART_SetConfig+0x23e>
 8002188:	22c0      	movs	r2, #192	; 0xc0
 800218a:	0112      	lsls	r2, r2, #4
 800218c:	4293      	cmp	r3, r2
 800218e:	d82e      	bhi.n	80021ee <UART_SetConfig+0x24e>
 8002190:	2280      	movs	r2, #128	; 0x80
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	4293      	cmp	r3, r2
 8002196:	d012      	beq.n	80021be <UART_SetConfig+0x21e>
 8002198:	2280      	movs	r2, #128	; 0x80
 800219a:	0112      	lsls	r2, r2, #4
 800219c:	4293      	cmp	r3, r2
 800219e:	d826      	bhi.n	80021ee <UART_SetConfig+0x24e>
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d004      	beq.n	80021ae <UART_SetConfig+0x20e>
 80021a4:	2280      	movs	r2, #128	; 0x80
 80021a6:	00d2      	lsls	r2, r2, #3
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d010      	beq.n	80021ce <UART_SetConfig+0x22e>
 80021ac:	e01f      	b.n	80021ee <UART_SetConfig+0x24e>
 80021ae:	231b      	movs	r3, #27
 80021b0:	2220      	movs	r2, #32
 80021b2:	4694      	mov	ip, r2
 80021b4:	44bc      	add	ip, r7
 80021b6:	4463      	add	r3, ip
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
 80021bc:	e026      	b.n	800220c <UART_SetConfig+0x26c>
 80021be:	231b      	movs	r3, #27
 80021c0:	2220      	movs	r2, #32
 80021c2:	4694      	mov	ip, r2
 80021c4:	44bc      	add	ip, r7
 80021c6:	4463      	add	r3, ip
 80021c8:	2202      	movs	r2, #2
 80021ca:	701a      	strb	r2, [r3, #0]
 80021cc:	e01e      	b.n	800220c <UART_SetConfig+0x26c>
 80021ce:	231b      	movs	r3, #27
 80021d0:	2220      	movs	r2, #32
 80021d2:	4694      	mov	ip, r2
 80021d4:	44bc      	add	ip, r7
 80021d6:	4463      	add	r3, ip
 80021d8:	2204      	movs	r2, #4
 80021da:	701a      	strb	r2, [r3, #0]
 80021dc:	e016      	b.n	800220c <UART_SetConfig+0x26c>
 80021de:	231b      	movs	r3, #27
 80021e0:	2220      	movs	r2, #32
 80021e2:	4694      	mov	ip, r2
 80021e4:	44bc      	add	ip, r7
 80021e6:	4463      	add	r3, ip
 80021e8:	2208      	movs	r2, #8
 80021ea:	701a      	strb	r2, [r3, #0]
 80021ec:	e00e      	b.n	800220c <UART_SetConfig+0x26c>
 80021ee:	231b      	movs	r3, #27
 80021f0:	2220      	movs	r2, #32
 80021f2:	4694      	mov	ip, r2
 80021f4:	44bc      	add	ip, r7
 80021f6:	4463      	add	r3, ip
 80021f8:	2210      	movs	r2, #16
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	e006      	b.n	800220c <UART_SetConfig+0x26c>
 80021fe:	231b      	movs	r3, #27
 8002200:	2220      	movs	r2, #32
 8002202:	4694      	mov	ip, r2
 8002204:	44bc      	add	ip, r7
 8002206:	4463      	add	r3, ip
 8002208:	2210      	movs	r2, #16
 800220a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a2c      	ldr	r2, [pc, #176]	; (80022c4 <UART_SetConfig+0x324>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d000      	beq.n	8002218 <UART_SetConfig+0x278>
 8002216:	e0ad      	b.n	8002374 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002218:	231b      	movs	r3, #27
 800221a:	2220      	movs	r2, #32
 800221c:	4694      	mov	ip, r2
 800221e:	44bc      	add	ip, r7
 8002220:	4463      	add	r3, ip
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b08      	cmp	r3, #8
 8002226:	d015      	beq.n	8002254 <UART_SetConfig+0x2b4>
 8002228:	dc18      	bgt.n	800225c <UART_SetConfig+0x2bc>
 800222a:	2b04      	cmp	r3, #4
 800222c:	d00d      	beq.n	800224a <UART_SetConfig+0x2aa>
 800222e:	dc15      	bgt.n	800225c <UART_SetConfig+0x2bc>
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <UART_SetConfig+0x29a>
 8002234:	2b02      	cmp	r3, #2
 8002236:	d005      	beq.n	8002244 <UART_SetConfig+0x2a4>
 8002238:	e010      	b.n	800225c <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800223a:	f7ff fbe1 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
 800223e:	0003      	movs	r3, r0
 8002240:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002242:	e015      	b.n	8002270 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002244:	4b26      	ldr	r3, [pc, #152]	; (80022e0 <UART_SetConfig+0x340>)
 8002246:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002248:	e012      	b.n	8002270 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800224a:	f7ff fb4d 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 800224e:	0003      	movs	r3, r0
 8002250:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002252:	e00d      	b.n	8002270 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	021b      	lsls	r3, r3, #8
 8002258:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800225a:	e009      	b.n	8002270 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002260:	231a      	movs	r3, #26
 8002262:	2220      	movs	r2, #32
 8002264:	4694      	mov	ip, r2
 8002266:	44bc      	add	ip, r7
 8002268:	4463      	add	r3, ip
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
        break;
 800226e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002272:	2b00      	cmp	r3, #0
 8002274:	d100      	bne.n	8002278 <UART_SetConfig+0x2d8>
 8002276:	e153      	b.n	8002520 <UART_SetConfig+0x580>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800227c:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <UART_SetConfig+0x344>)
 800227e:	0052      	lsls	r2, r2, #1
 8002280:	5ad3      	ldrh	r3, [r2, r3]
 8002282:	0019      	movs	r1, r3
 8002284:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002286:	f7fd ff3d 	bl	8000104 <__udivsi3>
 800228a:	0003      	movs	r3, r0
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	0013      	movs	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	189b      	adds	r3, r3, r2
 8002298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800229a:	429a      	cmp	r2, r3
 800229c:	d305      	bcc.n	80022aa <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80022a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d91e      	bls.n	80022e8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80022aa:	231a      	movs	r3, #26
 80022ac:	2220      	movs	r2, #32
 80022ae:	4694      	mov	ip, r2
 80022b0:	44bc      	add	ip, r7
 80022b2:	4463      	add	r3, ip
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
 80022b8:	e132      	b.n	8002520 <UART_SetConfig+0x580>
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	cfff69f3 	.word	0xcfff69f3
 80022c0:	ffffcfff 	.word	0xffffcfff
 80022c4:	40008000 	.word	0x40008000
 80022c8:	11fff4ff 	.word	0x11fff4ff
 80022cc:	40013800 	.word	0x40013800
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40004400 	.word	0x40004400
 80022d8:	40004800 	.word	0x40004800
 80022dc:	40004c00 	.word	0x40004c00
 80022e0:	00f42400 	.word	0x00f42400
 80022e4:	08002bf8 	.word	0x08002bf8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80022e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022f4:	4b96      	ldr	r3, [pc, #600]	; (8002550 <UART_SetConfig+0x5b0>)
 80022f6:	0052      	lsls	r2, r2, #1
 80022f8:	5ad3      	ldrh	r3, [r2, r3]
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	69b8      	ldr	r0, [r7, #24]
 8002306:	69f9      	ldr	r1, [r7, #28]
 8002308:	f7fe f872 	bl	80003f0 <__aeabi_uldivmod>
 800230c:	0002      	movs	r2, r0
 800230e:	000b      	movs	r3, r1
 8002310:	0e11      	lsrs	r1, r2, #24
 8002312:	021d      	lsls	r5, r3, #8
 8002314:	430d      	orrs	r5, r1
 8002316:	0214      	lsls	r4, r2, #8
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	085b      	lsrs	r3, r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68b8      	ldr	r0, [r7, #8]
 8002326:	68f9      	ldr	r1, [r7, #12]
 8002328:	1900      	adds	r0, r0, r4
 800232a:	4169      	adcs	r1, r5
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	603b      	str	r3, [r7, #0]
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f7fe f859 	bl	80003f0 <__aeabi_uldivmod>
 800233e:	0002      	movs	r2, r0
 8002340:	000b      	movs	r3, r1
 8002342:	0013      	movs	r3, r2
 8002344:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002348:	23c0      	movs	r3, #192	; 0xc0
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	429a      	cmp	r2, r3
 800234e:	d309      	bcc.n	8002364 <UART_SetConfig+0x3c4>
 8002350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002352:	2380      	movs	r3, #128	; 0x80
 8002354:	035b      	lsls	r3, r3, #13
 8002356:	429a      	cmp	r2, r3
 8002358:	d204      	bcs.n	8002364 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	e0dd      	b.n	8002520 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 8002364:	231a      	movs	r3, #26
 8002366:	2220      	movs	r2, #32
 8002368:	4694      	mov	ip, r2
 800236a:	44bc      	add	ip, r7
 800236c:	4463      	add	r3, ip
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	e0d5      	b.n	8002520 <UART_SetConfig+0x580>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	69da      	ldr	r2, [r3, #28]
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	021b      	lsls	r3, r3, #8
 800237c:	429a      	cmp	r2, r3
 800237e:	d000      	beq.n	8002382 <UART_SetConfig+0x3e2>
 8002380:	e073      	b.n	800246a <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8002382:	231b      	movs	r3, #27
 8002384:	2220      	movs	r2, #32
 8002386:	4694      	mov	ip, r2
 8002388:	44bc      	add	ip, r7
 800238a:	4463      	add	r3, ip
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b08      	cmp	r3, #8
 8002390:	d015      	beq.n	80023be <UART_SetConfig+0x41e>
 8002392:	dc18      	bgt.n	80023c6 <UART_SetConfig+0x426>
 8002394:	2b04      	cmp	r3, #4
 8002396:	d00d      	beq.n	80023b4 <UART_SetConfig+0x414>
 8002398:	dc15      	bgt.n	80023c6 <UART_SetConfig+0x426>
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <UART_SetConfig+0x404>
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d005      	beq.n	80023ae <UART_SetConfig+0x40e>
 80023a2:	e010      	b.n	80023c6 <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023a4:	f7ff fb2c 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
 80023a8:	0003      	movs	r3, r0
 80023aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023ac:	e015      	b.n	80023da <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023ae:	4b69      	ldr	r3, [pc, #420]	; (8002554 <UART_SetConfig+0x5b4>)
 80023b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023b2:	e012      	b.n	80023da <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023b4:	f7ff fa98 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 80023b8:	0003      	movs	r3, r0
 80023ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023bc:	e00d      	b.n	80023da <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023c4:	e009      	b.n	80023da <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80023ca:	231a      	movs	r3, #26
 80023cc:	2220      	movs	r2, #32
 80023ce:	4694      	mov	ip, r2
 80023d0:	44bc      	add	ip, r7
 80023d2:	4463      	add	r3, ip
 80023d4:	2201      	movs	r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]
        break;
 80023d8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80023da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d100      	bne.n	80023e2 <UART_SetConfig+0x442>
 80023e0:	e09e      	b.n	8002520 <UART_SetConfig+0x580>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023e6:	4b5a      	ldr	r3, [pc, #360]	; (8002550 <UART_SetConfig+0x5b0>)
 80023e8:	0052      	lsls	r2, r2, #1
 80023ea:	5ad3      	ldrh	r3, [r2, r3]
 80023ec:	0019      	movs	r1, r3
 80023ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80023f0:	f7fd fe88 	bl	8000104 <__udivsi3>
 80023f4:	0003      	movs	r3, r0
 80023f6:	005a      	lsls	r2, r3, #1
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	085b      	lsrs	r3, r3, #1
 80023fe:	18d2      	adds	r2, r2, r3
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	0019      	movs	r1, r3
 8002406:	0010      	movs	r0, r2
 8002408:	f7fd fe7c 	bl	8000104 <__udivsi3>
 800240c:	0003      	movs	r3, r0
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002412:	2b0f      	cmp	r3, #15
 8002414:	d921      	bls.n	800245a <UART_SetConfig+0x4ba>
 8002416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	025b      	lsls	r3, r3, #9
 800241c:	429a      	cmp	r2, r3
 800241e:	d21c      	bcs.n	800245a <UART_SetConfig+0x4ba>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002422:	b29a      	uxth	r2, r3
 8002424:	200e      	movs	r0, #14
 8002426:	2420      	movs	r4, #32
 8002428:	193b      	adds	r3, r7, r4
 800242a:	181b      	adds	r3, r3, r0
 800242c:	210f      	movs	r1, #15
 800242e:	438a      	bics	r2, r1
 8002430:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002434:	085b      	lsrs	r3, r3, #1
 8002436:	b29b      	uxth	r3, r3
 8002438:	2207      	movs	r2, #7
 800243a:	4013      	ands	r3, r2
 800243c:	b299      	uxth	r1, r3
 800243e:	193b      	adds	r3, r7, r4
 8002440:	181b      	adds	r3, r3, r0
 8002442:	193a      	adds	r2, r7, r4
 8002444:	1812      	adds	r2, r2, r0
 8002446:	8812      	ldrh	r2, [r2, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	193a      	adds	r2, r7, r4
 8002452:	1812      	adds	r2, r2, r0
 8002454:	8812      	ldrh	r2, [r2, #0]
 8002456:	60da      	str	r2, [r3, #12]
 8002458:	e062      	b.n	8002520 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 800245a:	231a      	movs	r3, #26
 800245c:	2220      	movs	r2, #32
 800245e:	4694      	mov	ip, r2
 8002460:	44bc      	add	ip, r7
 8002462:	4463      	add	r3, ip
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
 8002468:	e05a      	b.n	8002520 <UART_SetConfig+0x580>
      }
    }
  }
  else
  {
    switch (clocksource)
 800246a:	231b      	movs	r3, #27
 800246c:	2220      	movs	r2, #32
 800246e:	4694      	mov	ip, r2
 8002470:	44bc      	add	ip, r7
 8002472:	4463      	add	r3, ip
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b08      	cmp	r3, #8
 8002478:	d015      	beq.n	80024a6 <UART_SetConfig+0x506>
 800247a:	dc18      	bgt.n	80024ae <UART_SetConfig+0x50e>
 800247c:	2b04      	cmp	r3, #4
 800247e:	d00d      	beq.n	800249c <UART_SetConfig+0x4fc>
 8002480:	dc15      	bgt.n	80024ae <UART_SetConfig+0x50e>
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <UART_SetConfig+0x4ec>
 8002486:	2b02      	cmp	r3, #2
 8002488:	d005      	beq.n	8002496 <UART_SetConfig+0x4f6>
 800248a:	e010      	b.n	80024ae <UART_SetConfig+0x50e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800248c:	f7ff fab8 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
 8002490:	0003      	movs	r3, r0
 8002492:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002494:	e015      	b.n	80024c2 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002496:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <UART_SetConfig+0x5b4>)
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800249a:	e012      	b.n	80024c2 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800249c:	f7ff fa24 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 80024a0:	0003      	movs	r3, r0
 80024a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80024a4:	e00d      	b.n	80024c2 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80024ac:	e009      	b.n	80024c2 <UART_SetConfig+0x522>
      default:
        pclk = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80024b2:	231a      	movs	r3, #26
 80024b4:	2220      	movs	r2, #32
 80024b6:	4694      	mov	ip, r2
 80024b8:	44bc      	add	ip, r7
 80024ba:	4463      	add	r3, ip
 80024bc:	2201      	movs	r2, #1
 80024be:	701a      	strb	r2, [r3, #0]
        break;
 80024c0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80024c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d02b      	beq.n	8002520 <UART_SetConfig+0x580>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024cc:	4b20      	ldr	r3, [pc, #128]	; (8002550 <UART_SetConfig+0x5b0>)
 80024ce:	0052      	lsls	r2, r2, #1
 80024d0:	5ad3      	ldrh	r3, [r2, r3]
 80024d2:	0019      	movs	r1, r3
 80024d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80024d6:	f7fd fe15 	bl	8000104 <__udivsi3>
 80024da:	0003      	movs	r3, r0
 80024dc:	001a      	movs	r2, r3
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	085b      	lsrs	r3, r3, #1
 80024e4:	18d2      	adds	r2, r2, r3
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	0019      	movs	r1, r3
 80024ec:	0010      	movs	r0, r2
 80024ee:	f7fd fe09 	bl	8000104 <__udivsi3>
 80024f2:	0003      	movs	r3, r0
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	2b0f      	cmp	r3, #15
 80024fa:	d90a      	bls.n	8002512 <UART_SetConfig+0x572>
 80024fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	025b      	lsls	r3, r3, #9
 8002502:	429a      	cmp	r2, r3
 8002504:	d205      	bcs.n	8002512 <UART_SetConfig+0x572>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002508:	b29a      	uxth	r2, r3
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60da      	str	r2, [r3, #12]
 8002510:	e006      	b.n	8002520 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 8002512:	231a      	movs	r3, #26
 8002514:	2220      	movs	r2, #32
 8002516:	4694      	mov	ip, r2
 8002518:	44bc      	add	ip, r7
 800251a:	4463      	add	r3, ip
 800251c:	2201      	movs	r2, #1
 800251e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	226a      	movs	r2, #106	; 0x6a
 8002524:	2101      	movs	r1, #1
 8002526:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	2268      	movs	r2, #104	; 0x68
 800252c:	2101      	movs	r1, #1
 800252e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	2200      	movs	r2, #0
 8002534:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	2200      	movs	r2, #0
 800253a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800253c:	231a      	movs	r3, #26
 800253e:	2220      	movs	r2, #32
 8002540:	4694      	mov	ip, r2
 8002542:	44bc      	add	ip, r7
 8002544:	4463      	add	r3, ip
 8002546:	781b      	ldrb	r3, [r3, #0]
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	b010      	add	sp, #64	; 0x40
 800254e:	bdb0      	pop	{r4, r5, r7, pc}
 8002550:	08002bf8 	.word	0x08002bf8
 8002554:	00f42400 	.word	0x00f42400

08002558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	2201      	movs	r2, #1
 8002566:	4013      	ands	r3, r2
 8002568:	d00b      	beq.n	8002582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a4a      	ldr	r2, [pc, #296]	; (800269c <UART_AdvFeatureConfig+0x144>)
 8002572:	4013      	ands	r3, r2
 8002574:	0019      	movs	r1, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002586:	2202      	movs	r2, #2
 8002588:	4013      	ands	r3, r2
 800258a:	d00b      	beq.n	80025a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4a43      	ldr	r2, [pc, #268]	; (80026a0 <UART_AdvFeatureConfig+0x148>)
 8002594:	4013      	ands	r3, r2
 8002596:	0019      	movs	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	2204      	movs	r2, #4
 80025aa:	4013      	ands	r3, r2
 80025ac:	d00b      	beq.n	80025c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4a3b      	ldr	r2, [pc, #236]	; (80026a4 <UART_AdvFeatureConfig+0x14c>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	0019      	movs	r1, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	2208      	movs	r2, #8
 80025cc:	4013      	ands	r3, r2
 80025ce:	d00b      	beq.n	80025e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4a34      	ldr	r2, [pc, #208]	; (80026a8 <UART_AdvFeatureConfig+0x150>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	2210      	movs	r2, #16
 80025ee:	4013      	ands	r3, r2
 80025f0:	d00b      	beq.n	800260a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4a2c      	ldr	r2, [pc, #176]	; (80026ac <UART_AdvFeatureConfig+0x154>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	0019      	movs	r1, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	2220      	movs	r2, #32
 8002610:	4013      	ands	r3, r2
 8002612:	d00b      	beq.n	800262c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	4a25      	ldr	r2, [pc, #148]	; (80026b0 <UART_AdvFeatureConfig+0x158>)
 800261c:	4013      	ands	r3, r2
 800261e:	0019      	movs	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	2240      	movs	r2, #64	; 0x40
 8002632:	4013      	ands	r3, r2
 8002634:	d01d      	beq.n	8002672 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4a1d      	ldr	r2, [pc, #116]	; (80026b4 <UART_AdvFeatureConfig+0x15c>)
 800263e:	4013      	ands	r3, r2
 8002640:	0019      	movs	r1, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	035b      	lsls	r3, r3, #13
 8002656:	429a      	cmp	r2, r3
 8002658:	d10b      	bne.n	8002672 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a15      	ldr	r2, [pc, #84]	; (80026b8 <UART_AdvFeatureConfig+0x160>)
 8002662:	4013      	ands	r3, r2
 8002664:	0019      	movs	r1, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	2280      	movs	r2, #128	; 0x80
 8002678:	4013      	ands	r3, r2
 800267a:	d00b      	beq.n	8002694 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <UART_AdvFeatureConfig+0x164>)
 8002684:	4013      	ands	r3, r2
 8002686:	0019      	movs	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	605a      	str	r2, [r3, #4]
  }
}
 8002694:	46c0      	nop			; (mov r8, r8)
 8002696:	46bd      	mov	sp, r7
 8002698:	b002      	add	sp, #8
 800269a:	bd80      	pop	{r7, pc}
 800269c:	fffdffff 	.word	0xfffdffff
 80026a0:	fffeffff 	.word	0xfffeffff
 80026a4:	fffbffff 	.word	0xfffbffff
 80026a8:	ffff7fff 	.word	0xffff7fff
 80026ac:	ffffefff 	.word	0xffffefff
 80026b0:	ffffdfff 	.word	0xffffdfff
 80026b4:	ffefffff 	.word	0xffefffff
 80026b8:	ff9fffff 	.word	0xff9fffff
 80026bc:	fff7ffff 	.word	0xfff7ffff

080026c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	228c      	movs	r2, #140	; 0x8c
 80026cc:	2100      	movs	r1, #0
 80026ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80026d0:	f7fe fa08 	bl	8000ae4 <HAL_GetTick>
 80026d4:	0003      	movs	r3, r0
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2208      	movs	r2, #8
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d10c      	bne.n	8002700 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2280      	movs	r2, #128	; 0x80
 80026ea:	0391      	lsls	r1, r2, #14
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	4a18      	ldr	r2, [pc, #96]	; (8002750 <UART_CheckIdleState+0x90>)
 80026f0:	9200      	str	r2, [sp, #0]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f000 f82e 	bl	8002754 <UART_WaitOnFlagUntilTimeout>
 80026f8:	1e03      	subs	r3, r0, #0
 80026fa:	d001      	beq.n	8002700 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e023      	b.n	8002748 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2204      	movs	r2, #4
 8002708:	4013      	ands	r3, r2
 800270a:	2b04      	cmp	r3, #4
 800270c:	d10c      	bne.n	8002728 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2280      	movs	r2, #128	; 0x80
 8002712:	03d1      	lsls	r1, r2, #15
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4a0e      	ldr	r2, [pc, #56]	; (8002750 <UART_CheckIdleState+0x90>)
 8002718:	9200      	str	r2, [sp, #0]
 800271a:	2200      	movs	r2, #0
 800271c:	f000 f81a 	bl	8002754 <UART_WaitOnFlagUntilTimeout>
 8002720:	1e03      	subs	r3, r0, #0
 8002722:	d001      	beq.n	8002728 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e00f      	b.n	8002748 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2284      	movs	r2, #132	; 0x84
 800272c:	2120      	movs	r1, #32
 800272e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2288      	movs	r2, #136	; 0x88
 8002734:	2120      	movs	r1, #32
 8002736:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2280      	movs	r2, #128	; 0x80
 8002742:	2100      	movs	r1, #0
 8002744:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b004      	add	sp, #16
 800274e:	bd80      	pop	{r7, pc}
 8002750:	01ffffff 	.word	0x01ffffff

08002754 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b094      	sub	sp, #80	; 0x50
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	1dfb      	adds	r3, r7, #7
 8002762:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002764:	e0a7      	b.n	80028b6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002766:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002768:	3301      	adds	r3, #1
 800276a:	d100      	bne.n	800276e <UART_WaitOnFlagUntilTimeout+0x1a>
 800276c:	e0a3      	b.n	80028b6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276e:	f7fe f9b9 	bl	8000ae4 <HAL_GetTick>
 8002772:	0002      	movs	r2, r0
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800277a:	429a      	cmp	r2, r3
 800277c:	d302      	bcc.n	8002784 <UART_WaitOnFlagUntilTimeout+0x30>
 800277e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002780:	2b00      	cmp	r3, #0
 8002782:	d13f      	bne.n	8002804 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002784:	f3ef 8310 	mrs	r3, PRIMASK
 8002788:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800278c:	647b      	str	r3, [r7, #68]	; 0x44
 800278e:	2301      	movs	r3, #1
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002794:	f383 8810 	msr	PRIMASK, r3
}
 8002798:	46c0      	nop			; (mov r8, r8)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	494e      	ldr	r1, [pc, #312]	; (80028e0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80027a6:	400a      	ands	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ac:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	f383 8810 	msr	PRIMASK, r3
}
 80027b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027b6:	f3ef 8310 	mrs	r3, PRIMASK
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80027bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027be:	643b      	str	r3, [r7, #64]	; 0x40
 80027c0:	2301      	movs	r3, #1
 80027c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c6:	f383 8810 	msr	PRIMASK, r3
}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2101      	movs	r1, #1
 80027d8:	438a      	bics	r2, r1
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027de:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e2:	f383 8810 	msr	PRIMASK, r3
}
 80027e6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2284      	movs	r2, #132	; 0x84
 80027ec:	2120      	movs	r1, #32
 80027ee:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2288      	movs	r2, #136	; 0x88
 80027f4:	2120      	movs	r1, #32
 80027f6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2280      	movs	r2, #128	; 0x80
 80027fc:	2100      	movs	r1, #0
 80027fe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e069      	b.n	80028d8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2204      	movs	r2, #4
 800280c:	4013      	ands	r3, r2
 800280e:	d052      	beq.n	80028b6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	69da      	ldr	r2, [r3, #28]
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	401a      	ands	r2, r3
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	429a      	cmp	r2, r3
 8002822:	d148      	bne.n	80028b6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2280      	movs	r2, #128	; 0x80
 800282a:	0112      	lsls	r2, r2, #4
 800282c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800282e:	f3ef 8310 	mrs	r3, PRIMASK
 8002832:	613b      	str	r3, [r7, #16]
  return(result);
 8002834:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002838:	2301      	movs	r3, #1
 800283a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f383 8810 	msr	PRIMASK, r3
}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4924      	ldr	r1, [pc, #144]	; (80028e0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002850:	400a      	ands	r2, r1
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002856:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	f383 8810 	msr	PRIMASK, r3
}
 800285e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002860:	f3ef 8310 	mrs	r3, PRIMASK
 8002864:	61fb      	str	r3, [r7, #28]
  return(result);
 8002866:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002868:	64bb      	str	r3, [r7, #72]	; 0x48
 800286a:	2301      	movs	r3, #1
 800286c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	f383 8810 	msr	PRIMASK, r3
}
 8002874:	46c0      	nop			; (mov r8, r8)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2101      	movs	r1, #1
 8002882:	438a      	bics	r2, r1
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	f383 8810 	msr	PRIMASK, r3
}
 8002890:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2284      	movs	r2, #132	; 0x84
 8002896:	2120      	movs	r1, #32
 8002898:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2288      	movs	r2, #136	; 0x88
 800289e:	2120      	movs	r1, #32
 80028a0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	228c      	movs	r2, #140	; 0x8c
 80028a6:	2120      	movs	r1, #32
 80028a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2280      	movs	r2, #128	; 0x80
 80028ae:	2100      	movs	r1, #0
 80028b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e010      	b.n	80028d8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	4013      	ands	r3, r2
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	425a      	negs	r2, r3
 80028c6:	4153      	adcs	r3, r2
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	001a      	movs	r2, r3
 80028cc:	1dfb      	adds	r3, r7, #7
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d100      	bne.n	80028d6 <UART_WaitOnFlagUntilTimeout+0x182>
 80028d4:	e747      	b.n	8002766 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	0018      	movs	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	b014      	add	sp, #80	; 0x50
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	fffffe5f 	.word	0xfffffe5f

080028e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2280      	movs	r2, #128	; 0x80
 80028f0:	5c9b      	ldrb	r3, [r3, r2]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_UARTEx_DisableFifoMode+0x16>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e027      	b.n	800294a <HAL_UARTEx_DisableFifoMode+0x66>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2280      	movs	r2, #128	; 0x80
 80028fe:	2101      	movs	r1, #1
 8002900:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2284      	movs	r2, #132	; 0x84
 8002906:	2124      	movs	r1, #36	; 0x24
 8002908:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2101      	movs	r1, #1
 800291e:	438a      	bics	r2, r1
 8002920:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4a0b      	ldr	r2, [pc, #44]	; (8002954 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002926:	4013      	ands	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2284      	movs	r2, #132	; 0x84
 800293c:	2120      	movs	r1, #32
 800293e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2280      	movs	r2, #128	; 0x80
 8002944:	2100      	movs	r1, #0
 8002946:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	0018      	movs	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	b004      	add	sp, #16
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	dfffffff 	.word	0xdfffffff

08002958 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2280      	movs	r2, #128	; 0x80
 8002966:	5c9b      	ldrb	r3, [r3, r2]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800296c:	2302      	movs	r3, #2
 800296e:	e02e      	b.n	80029ce <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2280      	movs	r2, #128	; 0x80
 8002974:	2101      	movs	r1, #1
 8002976:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2284      	movs	r2, #132	; 0x84
 800297c:	2124      	movs	r1, #36	; 0x24
 800297e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2101      	movs	r1, #1
 8002994:	438a      	bics	r2, r1
 8002996:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	08d9      	lsrs	r1, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	0018      	movs	r0, r3
 80029b0:	f000 f854 	bl	8002a5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2284      	movs	r2, #132	; 0x84
 80029c0:	2120      	movs	r1, #32
 80029c2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2280      	movs	r2, #128	; 0x80
 80029c8:	2100      	movs	r1, #0
 80029ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	0018      	movs	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b004      	add	sp, #16
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2280      	movs	r2, #128	; 0x80
 80029e6:	5c9b      	ldrb	r3, [r3, r2]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e02f      	b.n	8002a50 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2280      	movs	r2, #128	; 0x80
 80029f4:	2101      	movs	r1, #1
 80029f6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2284      	movs	r2, #132	; 0x84
 80029fc:	2124      	movs	r1, #36	; 0x24
 80029fe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2101      	movs	r1, #1
 8002a14:	438a      	bics	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	4a0e      	ldr	r2, [pc, #56]	; (8002a58 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	0019      	movs	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	0018      	movs	r0, r3
 8002a32:	f000 f813 	bl	8002a5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2284      	movs	r2, #132	; 0x84
 8002a42:	2120      	movs	r1, #32
 8002a44:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2280      	movs	r2, #128	; 0x80
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b004      	add	sp, #16
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	f1ffffff 	.word	0xf1ffffff

08002a5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d108      	bne.n	8002a7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	226a      	movs	r2, #106	; 0x6a
 8002a70:	2101      	movs	r1, #1
 8002a72:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2268      	movs	r2, #104	; 0x68
 8002a78:	2101      	movs	r1, #1
 8002a7a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002a7c:	e043      	b.n	8002b06 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002a7e:	260f      	movs	r6, #15
 8002a80:	19bb      	adds	r3, r7, r6
 8002a82:	2208      	movs	r2, #8
 8002a84:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002a86:	200e      	movs	r0, #14
 8002a88:	183b      	adds	r3, r7, r0
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	0e5b      	lsrs	r3, r3, #25
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	240d      	movs	r4, #13
 8002a9a:	193b      	adds	r3, r7, r4
 8002a9c:	2107      	movs	r1, #7
 8002a9e:	400a      	ands	r2, r1
 8002aa0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	0f5b      	lsrs	r3, r3, #29
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	250c      	movs	r5, #12
 8002aae:	197b      	adds	r3, r7, r5
 8002ab0:	2107      	movs	r1, #7
 8002ab2:	400a      	ands	r2, r1
 8002ab4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002ab6:	183b      	adds	r3, r7, r0
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	197a      	adds	r2, r7, r5
 8002abc:	7812      	ldrb	r2, [r2, #0]
 8002abe:	4914      	ldr	r1, [pc, #80]	; (8002b10 <UARTEx_SetNbDataToProcess+0xb4>)
 8002ac0:	5c8a      	ldrb	r2, [r1, r2]
 8002ac2:	435a      	muls	r2, r3
 8002ac4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002ac6:	197b      	adds	r3, r7, r5
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	4a12      	ldr	r2, [pc, #72]	; (8002b14 <UARTEx_SetNbDataToProcess+0xb8>)
 8002acc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002ace:	0019      	movs	r1, r3
 8002ad0:	f7fd fba2 	bl	8000218 <__divsi3>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	b299      	uxth	r1, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	226a      	movs	r2, #106	; 0x6a
 8002adc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002ade:	19bb      	adds	r3, r7, r6
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	193a      	adds	r2, r7, r4
 8002ae4:	7812      	ldrb	r2, [r2, #0]
 8002ae6:	490a      	ldr	r1, [pc, #40]	; (8002b10 <UARTEx_SetNbDataToProcess+0xb4>)
 8002ae8:	5c8a      	ldrb	r2, [r1, r2]
 8002aea:	435a      	muls	r2, r3
 8002aec:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002aee:	193b      	adds	r3, r7, r4
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	4a08      	ldr	r2, [pc, #32]	; (8002b14 <UARTEx_SetNbDataToProcess+0xb8>)
 8002af4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002af6:	0019      	movs	r1, r3
 8002af8:	f7fd fb8e 	bl	8000218 <__divsi3>
 8002afc:	0003      	movs	r3, r0
 8002afe:	b299      	uxth	r1, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2268      	movs	r2, #104	; 0x68
 8002b04:	5299      	strh	r1, [r3, r2]
}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b005      	add	sp, #20
 8002b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	08002c10 	.word	0x08002c10
 8002b14:	08002c18 	.word	0x08002c18

08002b18 <__libc_init_array>:
 8002b18:	b570      	push	{r4, r5, r6, lr}
 8002b1a:	2600      	movs	r6, #0
 8002b1c:	4d0c      	ldr	r5, [pc, #48]	; (8002b50 <__libc_init_array+0x38>)
 8002b1e:	4c0d      	ldr	r4, [pc, #52]	; (8002b54 <__libc_init_array+0x3c>)
 8002b20:	1b64      	subs	r4, r4, r5
 8002b22:	10a4      	asrs	r4, r4, #2
 8002b24:	42a6      	cmp	r6, r4
 8002b26:	d109      	bne.n	8002b3c <__libc_init_array+0x24>
 8002b28:	2600      	movs	r6, #0
 8002b2a:	f000 f821 	bl	8002b70 <_init>
 8002b2e:	4d0a      	ldr	r5, [pc, #40]	; (8002b58 <__libc_init_array+0x40>)
 8002b30:	4c0a      	ldr	r4, [pc, #40]	; (8002b5c <__libc_init_array+0x44>)
 8002b32:	1b64      	subs	r4, r4, r5
 8002b34:	10a4      	asrs	r4, r4, #2
 8002b36:	42a6      	cmp	r6, r4
 8002b38:	d105      	bne.n	8002b46 <__libc_init_array+0x2e>
 8002b3a:	bd70      	pop	{r4, r5, r6, pc}
 8002b3c:	00b3      	lsls	r3, r6, #2
 8002b3e:	58eb      	ldr	r3, [r5, r3]
 8002b40:	4798      	blx	r3
 8002b42:	3601      	adds	r6, #1
 8002b44:	e7ee      	b.n	8002b24 <__libc_init_array+0xc>
 8002b46:	00b3      	lsls	r3, r6, #2
 8002b48:	58eb      	ldr	r3, [r5, r3]
 8002b4a:	4798      	blx	r3
 8002b4c:	3601      	adds	r6, #1
 8002b4e:	e7f2      	b.n	8002b36 <__libc_init_array+0x1e>
 8002b50:	08002c28 	.word	0x08002c28
 8002b54:	08002c28 	.word	0x08002c28
 8002b58:	08002c28 	.word	0x08002c28
 8002b5c:	08002c2c 	.word	0x08002c2c

08002b60 <memset>:
 8002b60:	0003      	movs	r3, r0
 8002b62:	1882      	adds	r2, r0, r2
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d100      	bne.n	8002b6a <memset+0xa>
 8002b68:	4770      	bx	lr
 8002b6a:	7019      	strb	r1, [r3, #0]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	e7f9      	b.n	8002b64 <memset+0x4>

08002b70 <_init>:
 8002b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b76:	bc08      	pop	{r3}
 8002b78:	469e      	mov	lr, r3
 8002b7a:	4770      	bx	lr

08002b7c <_fini>:
 8002b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b82:	bc08      	pop	{r3}
 8002b84:	469e      	mov	lr, r3
 8002b86:	4770      	bx	lr
