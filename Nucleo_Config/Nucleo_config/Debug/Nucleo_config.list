
Nucleo_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000589c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08005958  08005958  00015958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a6c  08005a6c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a6c  08005a6c  00015a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a74  08005a74  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a74  08005a74  00015a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a78  08005a78  00015a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000070  08005aec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08005aec  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011afe  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000251b  00000000  00000000  00031b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  000340b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  00034fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cb1  00000000  00000000  00035dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e93  00000000  00000000  0004ea71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a06ab  00000000  00000000  00060904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100faf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039ac  00000000  00000000  00101000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005940 	.word	0x08005940

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08005940 	.word	0x08005940

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	469b      	mov	fp, r3
 800047a:	d433      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047c:	465a      	mov	r2, fp
 800047e:	4653      	mov	r3, sl
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83a      	bhi.n	8000506 <__udivmoddi4+0xc2>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e078      	b.n	8000588 <__udivmoddi4+0x144>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e075      	b.n	800058e <__udivmoddi4+0x14a>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e028      	b.n	800050e <__udivmoddi4+0xca>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	2320      	movs	r3, #32
 80004e8:	1a9b      	subs	r3, r3, r2
 80004ea:	4652      	mov	r2, sl
 80004ec:	40da      	lsrs	r2, r3
 80004ee:	4641      	mov	r1, r8
 80004f0:	0013      	movs	r3, r2
 80004f2:	464a      	mov	r2, r9
 80004f4:	408a      	lsls	r2, r1
 80004f6:	0017      	movs	r7, r2
 80004f8:	4642      	mov	r2, r8
 80004fa:	431f      	orrs	r7, r3
 80004fc:	4653      	mov	r3, sl
 80004fe:	4093      	lsls	r3, r2
 8000500:	001e      	movs	r6, r3
 8000502:	42af      	cmp	r7, r5
 8000504:	d9c4      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	4643      	mov	r3, r8
 8000510:	2b00      	cmp	r3, #0
 8000512:	d0d9      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000514:	07fb      	lsls	r3, r7, #31
 8000516:	0872      	lsrs	r2, r6, #1
 8000518:	431a      	orrs	r2, r3
 800051a:	4646      	mov	r6, r8
 800051c:	087b      	lsrs	r3, r7, #1
 800051e:	e00e      	b.n	800053e <__udivmoddi4+0xfa>
 8000520:	42ab      	cmp	r3, r5
 8000522:	d101      	bne.n	8000528 <__udivmoddi4+0xe4>
 8000524:	42a2      	cmp	r2, r4
 8000526:	d80c      	bhi.n	8000542 <__udivmoddi4+0xfe>
 8000528:	1aa4      	subs	r4, r4, r2
 800052a:	419d      	sbcs	r5, r3
 800052c:	2001      	movs	r0, #1
 800052e:	1924      	adds	r4, r4, r4
 8000530:	416d      	adcs	r5, r5
 8000532:	2100      	movs	r1, #0
 8000534:	3e01      	subs	r6, #1
 8000536:	1824      	adds	r4, r4, r0
 8000538:	414d      	adcs	r5, r1
 800053a:	2e00      	cmp	r6, #0
 800053c:	d006      	beq.n	800054c <__udivmoddi4+0x108>
 800053e:	42ab      	cmp	r3, r5
 8000540:	d9ee      	bls.n	8000520 <__udivmoddi4+0xdc>
 8000542:	3e01      	subs	r6, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2e00      	cmp	r6, #0
 800054a:	d1f8      	bne.n	800053e <__udivmoddi4+0xfa>
 800054c:	9800      	ldr	r0, [sp, #0]
 800054e:	9901      	ldr	r1, [sp, #4]
 8000550:	465b      	mov	r3, fp
 8000552:	1900      	adds	r0, r0, r4
 8000554:	4169      	adcs	r1, r5
 8000556:	2b00      	cmp	r3, #0
 8000558:	db24      	blt.n	80005a4 <__udivmoddi4+0x160>
 800055a:	002b      	movs	r3, r5
 800055c:	465a      	mov	r2, fp
 800055e:	4644      	mov	r4, r8
 8000560:	40d3      	lsrs	r3, r2
 8000562:	002a      	movs	r2, r5
 8000564:	40e2      	lsrs	r2, r4
 8000566:	001c      	movs	r4, r3
 8000568:	465b      	mov	r3, fp
 800056a:	0015      	movs	r5, r2
 800056c:	2b00      	cmp	r3, #0
 800056e:	db2a      	blt.n	80005c6 <__udivmoddi4+0x182>
 8000570:	0026      	movs	r6, r4
 8000572:	409e      	lsls	r6, r3
 8000574:	0033      	movs	r3, r6
 8000576:	0026      	movs	r6, r4
 8000578:	4647      	mov	r7, r8
 800057a:	40be      	lsls	r6, r7
 800057c:	0032      	movs	r2, r6
 800057e:	1a80      	subs	r0, r0, r2
 8000580:	4199      	sbcs	r1, r3
 8000582:	9000      	str	r0, [sp, #0]
 8000584:	9101      	str	r1, [sp, #4]
 8000586:	e79f      	b.n	80004c8 <__udivmoddi4+0x84>
 8000588:	42a3      	cmp	r3, r4
 800058a:	d8bc      	bhi.n	8000506 <__udivmoddi4+0xc2>
 800058c:	e783      	b.n	8000496 <__udivmoddi4+0x52>
 800058e:	4642      	mov	r2, r8
 8000590:	2320      	movs	r3, #32
 8000592:	2100      	movs	r1, #0
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	2200      	movs	r2, #0
 8000598:	9100      	str	r1, [sp, #0]
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	2201      	movs	r2, #1
 800059e:	40da      	lsrs	r2, r3
 80005a0:	9201      	str	r2, [sp, #4]
 80005a2:	e786      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	4646      	mov	r6, r8
 80005ae:	409a      	lsls	r2, r3
 80005b0:	0023      	movs	r3, r4
 80005b2:	40f3      	lsrs	r3, r6
 80005b4:	4644      	mov	r4, r8
 80005b6:	4313      	orrs	r3, r2
 80005b8:	002a      	movs	r2, r5
 80005ba:	40e2      	lsrs	r2, r4
 80005bc:	001c      	movs	r4, r3
 80005be:	465b      	mov	r3, fp
 80005c0:	0015      	movs	r5, r2
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	dad4      	bge.n	8000570 <__udivmoddi4+0x12c>
 80005c6:	4642      	mov	r2, r8
 80005c8:	002f      	movs	r7, r5
 80005ca:	2320      	movs	r3, #32
 80005cc:	0026      	movs	r6, r4
 80005ce:	4097      	lsls	r7, r2
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	40de      	lsrs	r6, r3
 80005d4:	003b      	movs	r3, r7
 80005d6:	4333      	orrs	r3, r6
 80005d8:	e7cd      	b.n	8000576 <__udivmoddi4+0x132>
 80005da:	46c0      	nop			; (mov r8, r8)

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	; (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <mdbus_send_packet_it>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void mdbus_send_packet_it(uint8_t *data, uint16_t size)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	000a      	movs	r2, r1
 800063a:	1cbb      	adds	r3, r7, #2
 800063c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart2, data, size);
 800063e:	1cbb      	adds	r3, r7, #2
 8000640:	881a      	ldrh	r2, [r3, #0]
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <mdbus_send_packet_it+0x24>)
 8000646:	0018      	movs	r0, r3
 8000648:	f002 fafe 	bl	8002c48 <HAL_UART_Transmit_IT>
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b002      	add	sp, #8
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000d8 	.word	0x200000d8

08000658 <mdbus_read_packet_it>:

void mdbus_read_packet_it(uint8_t *data, uint16_t size)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	000a      	movs	r2, r1
 8000662:	1cbb      	adds	r3, r7, #2
 8000664:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, data, PACKETSIZE);
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <mdbus_read_packet_it+0x24>)
 800066a:	2240      	movs	r2, #64	; 0x40
 800066c:	0018      	movs	r0, r3
 800066e:	f002 fba7 	bl	8002dc0 <HAL_UART_Receive_IT>
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b002      	add	sp, #8
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	200000d8 	.word	0x200000d8

08000680 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

//send callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	mdbus_on_packet_send();
 8000688:	f000 fab0 	bl	8000bec <mdbus_on_packet_send>
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b002      	add	sp, #8
 8000692:	bd80      	pop	{r7, pc}

08000694 <HAL_UART_RxCpltCallback>:

//receive callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	mdbus_on_packet_receive(Received, PACKETSIZE);
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <HAL_UART_RxCpltCallback+0x1c>)
 800069e:	2140      	movs	r1, #64	; 0x40
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fac3 	bl	8000c2c <mdbus_on_packet_receive>
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b002      	add	sp, #8
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	20000168 	.word	0x20000168

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fb62 	bl	8000d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f81c 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 f91e 	bl	8000900 <MX_GPIO_Init>
  //stat listening sanding callback
  MX_USART2_UART_Init();
 80006c4:	f000 f8ce 	bl	8000864 <MX_USART2_UART_Init>
  //start timer
  MX_TIM2_Init();
 80006c8:	f000 f876 	bl	80007b8 <MX_TIM2_Init>
  //start listening receiving callback
  HAL_UART_Receive_IT(&huart2, &Received, PACKETSIZE);
 80006cc:	4907      	ldr	r1, [pc, #28]	; (80006ec <main+0x38>)
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <main+0x3c>)
 80006d0:	2240      	movs	r2, #64	; 0x40
 80006d2:	0018      	movs	r0, r3
 80006d4:	f002 fb74 	bl	8002dc0 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <main+0x40>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 fe38 	bl	8002350 <HAL_TIM_Base_Start_IT>

  mdbus_slave_configure();
 80006e0:	f000 faf6 	bl	8000cd0 <mdbus_slave_configure>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mdbus_slave_run();
 80006e4:	f000 facc 	bl	8000c80 <mdbus_slave_run>
 80006e8:	e7fc      	b.n	80006e4 <main+0x30>
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	20000168 	.word	0x20000168
 80006f0:	200000d8 	.word	0x200000d8
 80006f4:	2000008c 	.word	0x2000008c

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b093      	sub	sp, #76	; 0x4c
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	2410      	movs	r4, #16
 8000700:	193b      	adds	r3, r7, r4
 8000702:	0018      	movs	r0, r3
 8000704:	2338      	movs	r3, #56	; 0x38
 8000706:	001a      	movs	r2, r3
 8000708:	2100      	movs	r1, #0
 800070a:	f004 fca7 	bl	800505c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070e:	003b      	movs	r3, r7
 8000710:	0018      	movs	r0, r3
 8000712:	2310      	movs	r3, #16
 8000714:	001a      	movs	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	f004 fca0 	bl	800505c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	0018      	movs	r0, r3
 8000722:	f000 fef5 	bl	8001510 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000726:	193b      	adds	r3, r7, r4
 8000728:	2202      	movs	r2, #2
 800072a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	193b      	adds	r3, r7, r4
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	0052      	lsls	r2, r2, #1
 8000732:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000734:	0021      	movs	r1, r4
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2240      	movs	r2, #64	; 0x40
 8000740:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2202      	movs	r2, #2
 8000746:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2202      	movs	r2, #2
 800074c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2208      	movs	r2, #8
 8000758:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2280      	movs	r2, #128	; 0x80
 800075e:	0292      	lsls	r2, r2, #10
 8000760:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	0492      	lsls	r2, r2, #18
 8000768:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2280      	movs	r2, #128	; 0x80
 800076e:	0592      	lsls	r2, r2, #22
 8000770:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	187b      	adds	r3, r7, r1
 8000774:	0018      	movs	r0, r3
 8000776:	f000 ff17 	bl	80015a8 <HAL_RCC_OscConfig>
 800077a:	1e03      	subs	r3, r0, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800077e:	f000 f90f 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	003b      	movs	r3, r7
 8000784:	2207      	movs	r2, #7
 8000786:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	003b      	movs	r3, r7
 800078a:	2202      	movs	r2, #2
 800078c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800078e:	003b      	movs	r3, r7
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	0112      	lsls	r2, r2, #4
 8000794:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000796:	003b      	movs	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800079c:	003b      	movs	r3, r7
 800079e:	2101      	movs	r1, #1
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 fa1b 	bl	8001bdc <HAL_RCC_ClockConfig>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007aa:	f000 f8f9 	bl	80009a0 <Error_Handler>
  }
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b013      	add	sp, #76	; 0x4c
 80007b4:	bd90      	pop	{r4, r7, pc}
	...

080007b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007be:	2310      	movs	r3, #16
 80007c0:	18fb      	adds	r3, r7, r3
 80007c2:	0018      	movs	r0, r3
 80007c4:	2310      	movs	r3, #16
 80007c6:	001a      	movs	r2, r3
 80007c8:	2100      	movs	r1, #0
 80007ca:	f004 fc47 	bl	800505c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	0018      	movs	r0, r3
 80007d2:	230c      	movs	r3, #12
 80007d4:	001a      	movs	r2, r3
 80007d6:	2100      	movs	r1, #0
 80007d8:	f004 fc40 	bl	800505c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_TIM2_Init+0xa4>)
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	05d2      	lsls	r2, r2, #23
 80007e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80007e4:	4b1d      	ldr	r3, [pc, #116]	; (800085c <MX_TIM2_Init+0xa4>)
 80007e6:	22fa      	movs	r2, #250	; 0xfa
 80007e8:	0092      	lsls	r2, r2, #2
 80007ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_TIM2_Init+0xa4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_TIM2_Init+0xa4>)
 80007f4:	4a1a      	ldr	r2, [pc, #104]	; (8000860 <MX_TIM2_Init+0xa8>)
 80007f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_TIM2_Init+0xa4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_TIM2_Init+0xa4>)
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_TIM2_Init+0xa4>)
 8000806:	0018      	movs	r0, r3
 8000808:	f001 fd4a 	bl	80022a0 <HAL_TIM_Base_Init>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000810:	f000 f8c6 	bl	80009a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000814:	2110      	movs	r1, #16
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	0152      	lsls	r2, r2, #5
 800081c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800081e:	187a      	adds	r2, r7, r1
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_TIM2_Init+0xa4>)
 8000822:	0011      	movs	r1, r2
 8000824:	0018      	movs	r0, r3
 8000826:	f001 ff21 	bl	800266c <HAL_TIM_ConfigClockSource>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800082e:	f000 f8b7 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_TIM2_Init+0xa4>)
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f002 f923 	bl	8002a90 <HAL_TIMEx_MasterConfigSynchronization>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800084e:	f000 f8a7 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b008      	add	sp, #32
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	2000008c 	.word	0x2000008c
 8000860:	00008ca0 	.word	0x00008ca0

08000864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000868:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 800086a:	4a24      	ldr	r2, [pc, #144]	; (80008fc <MX_USART2_UART_Init+0x98>)
 800086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086e:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000870:	22e1      	movs	r2, #225	; 0xe1
 8000872:	0252      	lsls	r2, r2, #9
 8000874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008ae:	0018      	movs	r0, r3
 80008b0:	f002 f974 	bl	8002b9c <HAL_UART_Init>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008b8:	f000 f872 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008be:	2100      	movs	r1, #0
 80008c0:	0018      	movs	r0, r3
 80008c2:	f004 fac1 	bl	8004e48 <HAL_UARTEx_SetTxFifoThreshold>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ca:	f000 f869 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008d0:	2100      	movs	r1, #0
 80008d2:	0018      	movs	r0, r3
 80008d4:	f004 faf8 	bl	8004ec8 <HAL_UARTEx_SetRxFifoThreshold>
 80008d8:	1e03      	subs	r3, r0, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008dc:	f000 f860 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f004 fa76 	bl	8004dd4 <HAL_UARTEx_DisableFifoMode>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008ec:	f000 f858 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	200000d8 	.word	0x200000d8
 80008fc:	40004400 	.word	0x40004400

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b089      	sub	sp, #36	; 0x24
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	240c      	movs	r4, #12
 8000908:	193b      	adds	r3, r7, r4
 800090a:	0018      	movs	r0, r3
 800090c:	2314      	movs	r3, #20
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f004 fba3 	bl	800505c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <MX_GPIO_Init+0x9c>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091a:	4b20      	ldr	r3, [pc, #128]	; (800099c <MX_GPIO_Init+0x9c>)
 800091c:	2104      	movs	r1, #4
 800091e:	430a      	orrs	r2, r1
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <MX_GPIO_Init+0x9c>)
 8000924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000926:	2204      	movs	r2, #4
 8000928:	4013      	ands	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800092e:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_GPIO_Init+0x9c>)
 8000930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_GPIO_Init+0x9c>)
 8000934:	2120      	movs	r1, #32
 8000936:	430a      	orrs	r2, r1
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_GPIO_Init+0x9c>)
 800093c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800093e:	2220      	movs	r2, #32
 8000940:	4013      	ands	r3, r2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_GPIO_Init+0x9c>)
 8000948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_GPIO_Init+0x9c>)
 800094c:	2101      	movs	r1, #1
 800094e:	430a      	orrs	r2, r1
 8000950:	635a      	str	r2, [r3, #52]	; 0x34
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_GPIO_Init+0x9c>)
 8000954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000956:	2201      	movs	r2, #1
 8000958:	4013      	ands	r3, r2
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800095e:	23a0      	movs	r3, #160	; 0xa0
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	2200      	movs	r2, #0
 8000964:	2120      	movs	r1, #32
 8000966:	0018      	movs	r0, r3
 8000968:	f000 fdb4 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800096c:	0021      	movs	r1, r4
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2220      	movs	r2, #32
 8000972:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2201      	movs	r2, #1
 8000978:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2202      	movs	r2, #2
 8000984:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000986:	187a      	adds	r2, r7, r1
 8000988:	23a0      	movs	r3, #160	; 0xa0
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	0011      	movs	r1, r2
 800098e:	0018      	movs	r0, r3
 8000990:	f000 fc3c 	bl	800120c <HAL_GPIO_Init>

}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b009      	add	sp, #36	; 0x24
 800099a:	bd90      	pop	{r4, r7, pc}
 800099c:	40021000 	.word	0x40021000

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <HAL_MspInit+0x4c>)
 80009b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <HAL_MspInit+0x4c>)
 80009b8:	2101      	movs	r1, #1
 80009ba:	430a      	orrs	r2, r1
 80009bc:	641a      	str	r2, [r3, #64]	; 0x40
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	2201      	movs	r2, #1
 80009c4:	4013      	ands	r3, r2
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <HAL_MspInit+0x4c>)
 80009cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_MspInit+0x4c>)
 80009d0:	2180      	movs	r1, #128	; 0x80
 80009d2:	0549      	lsls	r1, r1, #21
 80009d4:	430a      	orrs	r2, r1
 80009d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <HAL_MspInit+0x4c>)
 80009da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	055b      	lsls	r3, r3, #21
 80009e0:	4013      	ands	r3, r2
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80009e6:	23c0      	movs	r3, #192	; 0xc0
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 fa4e 	bl	8000e8c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b002      	add	sp, #8
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	05db      	lsls	r3, r3, #23
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d113      	bne.n	8000a38 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_TIM_Base_MspInit+0x44>)
 8000a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <HAL_TIM_Base_MspInit+0x44>)
 8000a16:	2101      	movs	r1, #1
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_TIM_Base_MspInit+0x44>)
 8000a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a20:	2201      	movs	r2, #1
 8000a22:	4013      	ands	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	200f      	movs	r0, #15
 8000a2e:	f000 faef 	bl	8001010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a32:	200f      	movs	r0, #15
 8000a34:	f000 fb01 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b004      	add	sp, #16
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40021000 	.word	0x40021000

08000a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b097      	sub	sp, #92	; 0x5c
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	2344      	movs	r3, #68	; 0x44
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	0018      	movs	r0, r3
 8000a52:	2314      	movs	r3, #20
 8000a54:	001a      	movs	r2, r3
 8000a56:	2100      	movs	r1, #0
 8000a58:	f004 fb00 	bl	800505c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a5c:	2410      	movs	r4, #16
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	0018      	movs	r0, r3
 8000a62:	2334      	movs	r3, #52	; 0x34
 8000a64:	001a      	movs	r2, r3
 8000a66:	2100      	movs	r1, #0
 8000a68:	f004 faf8 	bl	800505c <memset>
  if(huart->Instance==USART2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a26      	ldr	r2, [pc, #152]	; (8000b0c <HAL_UART_MspInit+0xc8>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d146      	bne.n	8000b04 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	2202      	movs	r2, #2
 8000a7a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	0018      	movs	r0, r3
 8000a86:	f001 fa53 	bl	8001f30 <HAL_RCCEx_PeriphCLKConfig>
 8000a8a:	1e03      	subs	r3, r0, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a8e:	f7ff ff87 	bl	80009a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <HAL_UART_MspInit+0xcc>)
 8000a94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a96:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <HAL_UART_MspInit+0xcc>)
 8000a98:	2180      	movs	r1, #128	; 0x80
 8000a9a:	0289      	lsls	r1, r1, #10
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <HAL_UART_MspInit+0xcc>)
 8000aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	029b      	lsls	r3, r3, #10
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <HAL_UART_MspInit+0xcc>)
 8000ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <HAL_UART_MspInit+0xcc>)
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	635a      	str	r2, [r3, #52]	; 0x34
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_UART_MspInit+0xcc>)
 8000abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000ac6:	2144      	movs	r1, #68	; 0x44
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	220c      	movs	r2, #12
 8000acc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	187a      	adds	r2, r7, r1
 8000ae8:	23a0      	movs	r3, #160	; 0xa0
 8000aea:	05db      	lsls	r3, r3, #23
 8000aec:	0011      	movs	r1, r2
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 fb8c 	bl	800120c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	201c      	movs	r0, #28
 8000afa:	f000 fa89 	bl	8001010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000afe:	201c      	movs	r0, #28
 8000b00:	f000 fa9b 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b017      	add	sp, #92	; 0x5c
 8000b0a:	bd90      	pop	{r4, r7, pc}
 8000b0c:	40004400 	.word	0x40004400
 8000b10:	40021000 	.word	0x40021000

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <NMI_Handler+0x4>

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b38:	f000 f98c 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <TIM2_IRQHandler+0x14>)
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f001 fc5c 	bl	8002408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	2000008c 	.word	0x2000008c

08000b5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <USART2_IRQHandler+0x14>)
 8000b62:	0018      	movs	r0, r3
 8000b64:	f002 f996 	bl	8002e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	200000d8 	.word	0x200000d8

08000b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b7c:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <_sbrk+0x5c>)
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <_sbrk+0x60>)
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <_sbrk+0x64>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <_sbrk+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	18d3      	adds	r3, r2, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d207      	bcs.n	8000bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba4:	f004 fa30 	bl	8005008 <__errno>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	220c      	movs	r2, #12
 8000bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	425b      	negs	r3, r3
 8000bb2:	e009      	b.n	8000bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	18d2      	adds	r2, r2, r3
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <_sbrk+0x64>)
 8000bc4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
}
 8000bc8:	0018      	movs	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b006      	add	sp, #24
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20009000 	.word	0x20009000
 8000bd4:	00000400 	.word	0x00000400
 8000bd8:	200001a8 	.word	0x200001a8
 8000bdc:	200001c8 	.word	0x200001c8

08000be0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <mdbus_on_packet_send>:
uint32_t timeout;
mdbus_Packet* currentPacket;
mdbus_State mdbus_state = IDLE;

void mdbus_on_packet_send()
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b08f      	sub	sp, #60	; 0x3c
 8000bf0:	af00      	add	r7, sp, #0
	static uint16_t cnt = 0;
	uint8_t Data[50];
	uint16_t size = 0;
 8000bf2:	2436      	movs	r4, #54	; 0x36
 8000bf4:	193b      	adds	r3, r7, r4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	801a      	strh	r2, [r3, #0]
	++cnt;
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <mdbus_on_packet_send+0x38>)
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <mdbus_on_packet_send+0x38>)
 8000c04:	801a      	strh	r2, [r3, #0]

	size = sprintf(Data, "Liczba wyslanych wiadomosci: %d.\n\r", cnt);
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <mdbus_on_packet_send+0x38>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	001a      	movs	r2, r3
 8000c0c:	4906      	ldr	r1, [pc, #24]	; (8000c28 <mdbus_on_packet_send+0x3c>)
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	0018      	movs	r0, r3
 8000c12:	f004 fa2b 	bl	800506c <siprintf>
 8000c16:	0002      	movs	r2, r0
 8000c18:	193b      	adds	r3, r7, r4
 8000c1a:	801a      	strh	r2, [r3, #0]
	//mdbus_send_packet_it(Data, size);
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b00f      	add	sp, #60	; 0x3c
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	200001ae 	.word	0x200001ae
 8000c28:	08005958 	.word	0x08005958

08000c2c <mdbus_on_packet_receive>:

void mdbus_on_packet_receive(uint8_t *data, uint16_t size)
{
 8000c2c:	b5b0      	push	{r4, r5, r7, lr}
 8000c2e:	b0ac      	sub	sp, #176	; 0xb0
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	000a      	movs	r2, r1
 8000c36:	1cbb      	adds	r3, r7, #2
 8000c38:	801a      	strh	r2, [r3, #0]
	uint8_t Data[PACKETSIZE+100];
	uint16_t size1 = 0;
 8000c3a:	24ae      	movs	r4, #174	; 0xae
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	801a      	strh	r2, [r3, #0]

	size1 = sprintf(Data, "Odebrana wiadomosc: %s\n\r", data);
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	490d      	ldr	r1, [pc, #52]	; (8000c7c <mdbus_on_packet_receive+0x50>)
 8000c46:	2508      	movs	r5, #8
 8000c48:	197b      	adds	r3, r7, r5
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f004 fa0e 	bl	800506c <siprintf>
 8000c50:	0002      	movs	r2, r0
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	801a      	strh	r2, [r3, #0]

	mdbus_send_packet_it(Data, size1);
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	881a      	ldrh	r2, [r3, #0]
 8000c5a:	197b      	adds	r3, r7, r5
 8000c5c:	0011      	movs	r1, r2
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f7ff fce6 	bl	8000630 <mdbus_send_packet_it>
	mdbus_read_packet_it(data, size);
 8000c64:	1cbb      	adds	r3, r7, #2
 8000c66:	881a      	ldrh	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff fcf3 	bl	8000658 <mdbus_read_packet_it>
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b02c      	add	sp, #176	; 0xb0
 8000c78:	bdb0      	pop	{r4, r5, r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	0800597c 	.word	0x0800597c

08000c80 <mdbus_slave_run>:

void mdbus_slave_run()
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	switch(mdbus_state)
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <mdbus_slave_run+0x48>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b05      	cmp	r3, #5
 8000c8a:	d816      	bhi.n	8000cba <mdbus_slave_run+0x3a>
 8000c8c:	009a      	lsls	r2, r3, #2
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <mdbus_slave_run+0x4c>)
 8000c90:	18d3      	adds	r3, r2, r3
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	469f      	mov	pc, r3
	{
	case IDLE:
		idle();
 8000c96:	f000 f825 	bl	8000ce4 <idle>
		break;
 8000c9a:	e011      	b.n	8000cc0 <mdbus_slave_run+0x40>
	case EMISSION_START:
		emision_start();
 8000c9c:	f000 f827 	bl	8000cee <emision_start>
		break;
 8000ca0:	e00e      	b.n	8000cc0 <mdbus_slave_run+0x40>
	case EMISSION:
		emision();
 8000ca2:	f000 f829 	bl	8000cf8 <emision>
		break;
 8000ca6:	e00b      	b.n	8000cc0 <mdbus_slave_run+0x40>
	case EMISSION_END:
		emision_end();
 8000ca8:	f000 f82b 	bl	8000d02 <emision_end>
		break;
 8000cac:	e008      	b.n	8000cc0 <mdbus_slave_run+0x40>
	case RECEPTION:
		reception();
 8000cae:	f000 f82d 	bl	8000d0c <reception>
		break;
 8000cb2:	e005      	b.n	8000cc0 <mdbus_slave_run+0x40>
	case WAIT_END_OF_FRAME:
		wait_end_of_frame();
 8000cb4:	f000 f82f 	bl	8000d16 <wait_end_of_frame>
		break;
 8000cb8:	e002      	b.n	8000cc0 <mdbus_slave_run+0x40>
	default:
		bad_mdbus_state();
 8000cba:	f000 f831 	bl	8000d20 <bad_mdbus_state>
		break;
 8000cbe:	46c0      	nop			; (mov r8, r8)
	}
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	200001ac 	.word	0x200001ac
 8000ccc:	080059f8 	.word	0x080059f8

08000cd0 <mdbus_slave_configure>:
	packet->data = data;
	packet->local_start_adress = local_start_adress;
}

void mdbus_slave_configure()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	mdbus_state = IDLE;
 8000cd4:	4b02      	ldr	r3, [pc, #8]	; (8000ce0 <mdbus_slave_configure+0x10>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	200001ac 	.word	0x200001ac

08000ce4 <idle>:

void idle()
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <emision_start>:

void emision_start()
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0
}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <emision>:

void emision()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <emision_end>:

void emision_end()
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	af00      	add	r7, sp, #0
}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <reception>:

void reception()
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <wait_end_of_frame>:

void wait_end_of_frame()
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0
}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <bad_mdbus_state>:

void bad_mdbus_state()
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d2e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d30:	f7ff ff56 	bl	8000be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d36:	490d      	ldr	r1, [pc, #52]	; (8000d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <LoopForever+0xe>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	; (8000d78 <LoopForever+0x16>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d5a:	f004 f95b 	bl	8005014 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d5e:	f7ff fca9 	bl	80006b4 <main>

08000d62 <LoopForever>:

LoopForever:
  b LoopForever
 8000d62:	e7fe      	b.n	8000d62 <LoopForever>
  ldr   r0, =_estack
 8000d64:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d70:	08005a7c 	.word	0x08005a7c
  ldr r2, =_sbss
 8000d74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d78:	200001c4 	.word	0x200001c4

08000d7c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC1_COMP_IRQHandler>
	...

08000d80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_Init+0x3c>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_Init+0x3c>)
 8000d92:	2180      	movs	r1, #128	; 0x80
 8000d94:	0049      	lsls	r1, r1, #1
 8000d96:	430a      	orrs	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 f810 	bl	8000dc0 <HAL_InitTick>
 8000da0:	1e03      	subs	r3, r0, #0
 8000da2:	d003      	beq.n	8000dac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
 8000daa:	e001      	b.n	8000db0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000dac:	f7ff fdfe 	bl	80009ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	781b      	ldrb	r3, [r3, #0]
}
 8000db4:	0018      	movs	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b002      	add	sp, #8
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40022000 	.word	0x40022000

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc8:	230f      	movs	r3, #15
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <HAL_InitTick+0x88>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d02b      	beq.n	8000e30 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <HAL_InitTick+0x8c>)
 8000dda:	681c      	ldr	r4, [r3, #0]
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <HAL_InitTick+0x88>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	0019      	movs	r1, r3
 8000de2:	23fa      	movs	r3, #250	; 0xfa
 8000de4:	0098      	lsls	r0, r3, #2
 8000de6:	f7ff f997 	bl	8000118 <__udivsi3>
 8000dea:	0003      	movs	r3, r0
 8000dec:	0019      	movs	r1, r3
 8000dee:	0020      	movs	r0, r4
 8000df0:	f7ff f992 	bl	8000118 <__udivsi3>
 8000df4:	0003      	movs	r3, r0
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 f92f 	bl	800105a <HAL_SYSTICK_Config>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d112      	bne.n	8000e26 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d80a      	bhi.n	8000e1c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	425b      	negs	r3, r3
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f000 f8fe 	bl	8001010 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_InitTick+0x90>)
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	e00d      	b.n	8000e38 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
 8000e24:	e008      	b.n	8000e38 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e26:	230f      	movs	r3, #15
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e003      	b.n	8000e38 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e30:	230f      	movs	r3, #15
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e38:	230f      	movs	r3, #15
 8000e3a:	18fb      	adds	r3, r7, r3
 8000e3c:	781b      	ldrb	r3, [r3, #0]
}
 8000e3e:	0018      	movs	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b005      	add	sp, #20
 8000e44:	bd90      	pop	{r4, r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000004 	.word	0x20000004

08000e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_IncTick+0x1c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_IncTick+0x20>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	18d2      	adds	r2, r2, r3
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_IncTick+0x20>)
 8000e66:	601a      	str	r2, [r3, #0]
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	20000008 	.word	0x20000008
 8000e74:	200001b0 	.word	0x200001b0

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b02      	ldr	r3, [pc, #8]	; (8000e88 <HAL_GetTick+0x10>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	200001b0 	.word	0x200001b0

08000e8c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	0019      	movs	r1, r3
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	601a      	str	r2, [r3, #0]
}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b002      	add	sp, #8
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	40010000 	.word	0x40010000
 8000eb4:	fffff9ff 	.word	0xfffff9ff

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	1dfb      	adds	r3, r7, #7
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eca:	d809      	bhi.n	8000ee0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	231f      	movs	r3, #31
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <__NVIC_EnableIRQ+0x30>)
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4091      	lsls	r1, r2
 8000edc:	000a      	movs	r2, r1
 8000ede:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b002      	add	sp, #8
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b7f      	cmp	r3, #127	; 0x7f
 8000f00:	d828      	bhi.n	8000f54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f02:	4a2f      	ldr	r2, [pc, #188]	; (8000fc0 <__NVIC_SetPriority+0xd4>)
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	33c0      	adds	r3, #192	; 0xc0
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	589b      	ldr	r3, [r3, r2]
 8000f12:	1dfa      	adds	r2, r7, #7
 8000f14:	7812      	ldrb	r2, [r2, #0]
 8000f16:	0011      	movs	r1, r2
 8000f18:	2203      	movs	r2, #3
 8000f1a:	400a      	ands	r2, r1
 8000f1c:	00d2      	lsls	r2, r2, #3
 8000f1e:	21ff      	movs	r1, #255	; 0xff
 8000f20:	4091      	lsls	r1, r2
 8000f22:	000a      	movs	r2, r1
 8000f24:	43d2      	mvns	r2, r2
 8000f26:	401a      	ands	r2, r3
 8000f28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	019b      	lsls	r3, r3, #6
 8000f2e:	22ff      	movs	r2, #255	; 0xff
 8000f30:	401a      	ands	r2, r3
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	0018      	movs	r0, r3
 8000f38:	2303      	movs	r3, #3
 8000f3a:	4003      	ands	r3, r0
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f40:	481f      	ldr	r0, [pc, #124]	; (8000fc0 <__NVIC_SetPriority+0xd4>)
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	33c0      	adds	r3, #192	; 0xc0
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f52:	e031      	b.n	8000fb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f54:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <__NVIC_SetPriority+0xd8>)
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	400b      	ands	r3, r1
 8000f60:	3b08      	subs	r3, #8
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	3306      	adds	r3, #6
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	18d3      	adds	r3, r2, r3
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	1dfa      	adds	r2, r7, #7
 8000f70:	7812      	ldrb	r2, [r2, #0]
 8000f72:	0011      	movs	r1, r2
 8000f74:	2203      	movs	r2, #3
 8000f76:	400a      	ands	r2, r1
 8000f78:	00d2      	lsls	r2, r2, #3
 8000f7a:	21ff      	movs	r1, #255	; 0xff
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	000a      	movs	r2, r1
 8000f80:	43d2      	mvns	r2, r2
 8000f82:	401a      	ands	r2, r3
 8000f84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	019b      	lsls	r3, r3, #6
 8000f8a:	22ff      	movs	r2, #255	; 0xff
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	0018      	movs	r0, r3
 8000f94:	2303      	movs	r3, #3
 8000f96:	4003      	ands	r3, r0
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f9c:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <__NVIC_SetPriority+0xd8>)
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	001c      	movs	r4, r3
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	4023      	ands	r3, r4
 8000fa8:	3b08      	subs	r3, #8
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	430a      	orrs	r2, r1
 8000fae:	3306      	adds	r3, #6
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	18c3      	adds	r3, r0, r3
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	601a      	str	r2, [r3, #0]
}
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b003      	add	sp, #12
 8000fbe:	bd90      	pop	{r4, r7, pc}
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	1e5a      	subs	r2, r3, #1
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	045b      	lsls	r3, r3, #17
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d301      	bcc.n	8000fe0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e010      	b.n	8001002 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <SysTick_Config+0x44>)
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	3a01      	subs	r2, #1
 8000fe6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe8:	2301      	movs	r3, #1
 8000fea:	425b      	negs	r3, r3
 8000fec:	2103      	movs	r1, #3
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f7ff ff7c 	bl	8000eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SysTick_Config+0x44>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Config+0x44>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	0018      	movs	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	210f      	movs	r1, #15
 800101c:	187b      	adds	r3, r7, r1
 800101e:	1c02      	adds	r2, r0, #0
 8001020:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	187b      	adds	r3, r7, r1
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b25b      	sxtb	r3, r3
 800102a:	0011      	movs	r1, r2
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff ff5d 	bl	8000eec <__NVIC_SetPriority>
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	b004      	add	sp, #16
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	0002      	movs	r2, r0
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b25b      	sxtb	r3, r3
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff ff33 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b002      	add	sp, #8
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ffaf 	bl	8000fc8 <SysTick_Config>
 800106a:	0003      	movs	r3, r0
}
 800106c:	0018      	movs	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e050      	b.n	8001128 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2225      	movs	r2, #37	; 0x25
 800108a:	5c9b      	ldrb	r3, [r3, r2]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d008      	beq.n	80010a4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2204      	movs	r2, #4
 8001096:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2224      	movs	r2, #36	; 0x24
 800109c:	2100      	movs	r1, #0
 800109e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e041      	b.n	8001128 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	210e      	movs	r1, #14
 80010b0:	438a      	bics	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	491c      	ldr	r1, [pc, #112]	; (8001130 <HAL_DMA_Abort+0xbc>)
 80010c0:	400a      	ands	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2101      	movs	r1, #1
 80010d0:	438a      	bics	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <HAL_DMA_Abort+0xc0>)
 80010d6:	6859      	ldr	r1, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	221c      	movs	r2, #28
 80010de:	4013      	ands	r3, r2
 80010e0:	2201      	movs	r2, #1
 80010e2:	409a      	lsls	r2, r3
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <HAL_DMA_Abort+0xc0>)
 80010e6:	430a      	orrs	r2, r1
 80010e8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80010f2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00c      	beq.n	8001116 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001106:	490a      	ldr	r1, [pc, #40]	; (8001130 <HAL_DMA_Abort+0xbc>)
 8001108:	400a      	ands	r2, r1
 800110a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001114:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2225      	movs	r2, #37	; 0x25
 800111a:	2101      	movs	r1, #1
 800111c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2224      	movs	r2, #36	; 0x24
 8001122:	2100      	movs	r1, #0
 8001124:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	0018      	movs	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	b002      	add	sp, #8
 800112e:	bd80      	pop	{r7, pc}
 8001130:	fffffeff 	.word	0xfffffeff
 8001134:	40020000 	.word	0x40020000

08001138 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001140:	210f      	movs	r1, #15
 8001142:	187b      	adds	r3, r7, r1
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2225      	movs	r2, #37	; 0x25
 800114c:	5c9b      	ldrb	r3, [r3, r2]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d006      	beq.n	8001162 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2204      	movs	r2, #4
 8001158:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800115a:	187b      	adds	r3, r7, r1
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	e049      	b.n	80011f6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	210e      	movs	r1, #14
 800116e:	438a      	bics	r2, r1
 8001170:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2101      	movs	r1, #1
 800117e:	438a      	bics	r2, r1
 8001180:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	491d      	ldr	r1, [pc, #116]	; (8001204 <HAL_DMA_Abort_IT+0xcc>)
 800118e:	400a      	ands	r2, r1
 8001190:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HAL_DMA_Abort_IT+0xd0>)
 8001194:	6859      	ldr	r1, [r3, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	221c      	movs	r2, #28
 800119c:	4013      	ands	r3, r2
 800119e:	2201      	movs	r2, #1
 80011a0:	409a      	lsls	r2, r3
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_DMA_Abort_IT+0xd0>)
 80011a4:	430a      	orrs	r2, r1
 80011a6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80011b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00c      	beq.n	80011d4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011c4:	490f      	ldr	r1, [pc, #60]	; (8001204 <HAL_DMA_Abort_IT+0xcc>)
 80011c6:	400a      	ands	r2, r1
 80011c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80011d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2225      	movs	r2, #37	; 0x25
 80011d8:	2101      	movs	r1, #1
 80011da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2224      	movs	r2, #36	; 0x24
 80011e0:	2100      	movs	r1, #0
 80011e2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d004      	beq.n	80011f6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	0010      	movs	r0, r2
 80011f4:	4798      	blx	r3
    }
  }
  return status;
 80011f6:	230f      	movs	r3, #15
 80011f8:	18fb      	adds	r3, r7, r3
 80011fa:	781b      	ldrb	r3, [r3, #0]
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	b004      	add	sp, #16
 8001202:	bd80      	pop	{r7, pc}
 8001204:	fffffeff 	.word	0xfffffeff
 8001208:	40020000 	.word	0x40020000

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121a:	e147      	b.n	80014ac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2101      	movs	r1, #1
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4091      	lsls	r1, r2
 8001226:	000a      	movs	r2, r1
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d100      	bne.n	8001234 <HAL_GPIO_Init+0x28>
 8001232:	e138      	b.n	80014a6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2203      	movs	r2, #3
 800123a:	4013      	ands	r3, r2
 800123c:	2b01      	cmp	r3, #1
 800123e:	d005      	beq.n	800124c <HAL_GPIO_Init+0x40>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2203      	movs	r2, #3
 8001246:	4013      	ands	r3, r2
 8001248:	2b02      	cmp	r3, #2
 800124a:	d130      	bne.n	80012ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	409a      	lsls	r2, r3
 800125a:	0013      	movs	r3, r2
 800125c:	43da      	mvns	r2, r3
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	409a      	lsls	r2, r3
 800126e:	0013      	movs	r3, r2
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001282:	2201      	movs	r2, #1
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
 8001288:	0013      	movs	r3, r2
 800128a:	43da      	mvns	r2, r3
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	2201      	movs	r2, #1
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
 80012a0:	0013      	movs	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2203      	movs	r2, #3
 80012b4:	4013      	ands	r3, r2
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d017      	beq.n	80012ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	409a      	lsls	r2, r3
 80012c8:	0013      	movs	r3, r2
 80012ca:	43da      	mvns	r2, r3
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	409a      	lsls	r2, r3
 80012dc:	0013      	movs	r3, r2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2203      	movs	r2, #3
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d123      	bne.n	800133e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	08da      	lsrs	r2, r3, #3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3208      	adds	r2, #8
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	58d3      	ldr	r3, [r2, r3]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	2207      	movs	r2, #7
 8001308:	4013      	ands	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	43da      	mvns	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	691a      	ldr	r2, [r3, #16]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2107      	movs	r1, #7
 8001322:	400b      	ands	r3, r1
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	08da      	lsrs	r2, r3, #3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3208      	adds	r2, #8
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	6939      	ldr	r1, [r7, #16]
 800133c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	43da      	mvns	r2, r3
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2203      	movs	r2, #3
 800135c:	401a      	ands	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	409a      	lsls	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	23c0      	movs	r3, #192	; 0xc0
 8001378:	029b      	lsls	r3, r3, #10
 800137a:	4013      	ands	r3, r2
 800137c:	d100      	bne.n	8001380 <HAL_GPIO_Init+0x174>
 800137e:	e092      	b.n	80014a6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001380:	4a50      	ldr	r2, [pc, #320]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3318      	adds	r3, #24
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	589b      	ldr	r3, [r3, r2]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2203      	movs	r2, #3
 8001392:	4013      	ands	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	220f      	movs	r2, #15
 8001398:	409a      	lsls	r2, r3
 800139a:	0013      	movs	r3, r2
 800139c:	43da      	mvns	r2, r3
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	23a0      	movs	r3, #160	; 0xa0
 80013a8:	05db      	lsls	r3, r3, #23
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d013      	beq.n	80013d6 <HAL_GPIO_Init+0x1ca>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a45      	ldr	r2, [pc, #276]	; (80014c8 <HAL_GPIO_Init+0x2bc>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d00d      	beq.n	80013d2 <HAL_GPIO_Init+0x1c6>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a44      	ldr	r2, [pc, #272]	; (80014cc <HAL_GPIO_Init+0x2c0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d007      	beq.n	80013ce <HAL_GPIO_Init+0x1c2>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a43      	ldr	r2, [pc, #268]	; (80014d0 <HAL_GPIO_Init+0x2c4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d101      	bne.n	80013ca <HAL_GPIO_Init+0x1be>
 80013c6:	2303      	movs	r3, #3
 80013c8:	e006      	b.n	80013d8 <HAL_GPIO_Init+0x1cc>
 80013ca:	2305      	movs	r3, #5
 80013cc:	e004      	b.n	80013d8 <HAL_GPIO_Init+0x1cc>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e002      	b.n	80013d8 <HAL_GPIO_Init+0x1cc>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <HAL_GPIO_Init+0x1cc>
 80013d6:	2300      	movs	r3, #0
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	2103      	movs	r1, #3
 80013dc:	400a      	ands	r2, r1
 80013de:	00d2      	lsls	r2, r2, #3
 80013e0:	4093      	lsls	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80013e8:	4936      	ldr	r1, [pc, #216]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	3318      	adds	r3, #24
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	43da      	mvns	r2, r3
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	035b      	lsls	r3, r3, #13
 800140e:	4013      	ands	r3, r2
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800141a:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	43da      	mvns	r2, r3
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	039b      	lsls	r3, r3, #14
 8001438:	4013      	ands	r3, r2
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800144a:	4a1e      	ldr	r2, [pc, #120]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 800144c:	2384      	movs	r3, #132	; 0x84
 800144e:	58d3      	ldr	r3, [r2, r3]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43da      	mvns	r2, r3
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	029b      	lsls	r3, r3, #10
 8001464:	4013      	ands	r3, r2
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001470:	4914      	ldr	r1, [pc, #80]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 8001472:	2284      	movs	r2, #132	; 0x84
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001478:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	58d3      	ldr	r3, [r2, r3]
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	43da      	mvns	r2, r3
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	025b      	lsls	r3, r3, #9
 8001492:	4013      	ands	r3, r2
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800149e:	4909      	ldr	r1, [pc, #36]	; (80014c4 <HAL_GPIO_Init+0x2b8>)
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	40da      	lsrs	r2, r3
 80014b4:	1e13      	subs	r3, r2, #0
 80014b6:	d000      	beq.n	80014ba <HAL_GPIO_Init+0x2ae>
 80014b8:	e6b0      	b.n	800121c <HAL_GPIO_Init+0x10>
  }
}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b006      	add	sp, #24
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021800 	.word	0x40021800
 80014c8:	50000400 	.word	0x50000400
 80014cc:	50000800 	.word	0x50000800
 80014d0:	50000c00 	.word	0x50000c00

080014d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	0008      	movs	r0, r1
 80014de:	0011      	movs	r1, r2
 80014e0:	1cbb      	adds	r3, r7, #2
 80014e2:	1c02      	adds	r2, r0, #0
 80014e4:	801a      	strh	r2, [r3, #0]
 80014e6:	1c7b      	adds	r3, r7, #1
 80014e8:	1c0a      	adds	r2, r1, #0
 80014ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014ec:	1c7b      	adds	r3, r7, #1
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d004      	beq.n	80014fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014f4:	1cbb      	adds	r3, r7, #2
 80014f6:	881a      	ldrh	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014fc:	e003      	b.n	8001506 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014fe:	1cbb      	adds	r3, r7, #2
 8001500:	881a      	ldrh	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b002      	add	sp, #8
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a19      	ldr	r2, [pc, #100]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800151e:	4013      	ands	r3, r2
 8001520:	0019      	movs	r1, r3
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	430a      	orrs	r2, r1
 8001528:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	429a      	cmp	r2, r3
 8001532:	d11f      	bne.n	8001574 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	0013      	movs	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	189b      	adds	r3, r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4912      	ldr	r1, [pc, #72]	; (800158c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001542:	0018      	movs	r0, r3
 8001544:	f7fe fde8 	bl	8000118 <__udivsi3>
 8001548:	0003      	movs	r3, r0
 800154a:	3301      	adds	r3, #1
 800154c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800154e:	e008      	b.n	8001562 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3b01      	subs	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	e001      	b.n	8001562 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e009      	b.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001564:	695a      	ldr	r2, [r3, #20]
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	401a      	ands	r2, r3
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	429a      	cmp	r2, r3
 8001572:	d0ed      	beq.n	8001550 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	0018      	movs	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	b004      	add	sp, #16
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	40007000 	.word	0x40007000
 8001584:	fffff9ff 	.word	0xfffff9ff
 8001588:	20000000 	.word	0x20000000
 800158c:	000f4240 	.word	0x000f4240

08001590 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	23e0      	movs	r3, #224	; 0xe0
 800159a:	01db      	lsls	r3, r3, #7
 800159c:	4013      	ands	r3, r2
}
 800159e:	0018      	movs	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40021000 	.word	0x40021000

080015a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e2fe      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2201      	movs	r2, #1
 80015c0:	4013      	ands	r3, r2
 80015c2:	d100      	bne.n	80015c6 <HAL_RCC_OscConfig+0x1e>
 80015c4:	e07c      	b.n	80016c0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015c6:	4bc3      	ldr	r3, [pc, #780]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2238      	movs	r2, #56	; 0x38
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d0:	4bc0      	ldr	r3, [pc, #768]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2203      	movs	r2, #3
 80015d6:	4013      	ands	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b10      	cmp	r3, #16
 80015de:	d102      	bne.n	80015e6 <HAL_RCC_OscConfig+0x3e>
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d002      	beq.n	80015ec <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d10b      	bne.n	8001604 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ec:	4bb9      	ldr	r3, [pc, #740]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	029b      	lsls	r3, r3, #10
 80015f4:	4013      	ands	r3, r2
 80015f6:	d062      	beq.n	80016be <HAL_RCC_OscConfig+0x116>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d15e      	bne.n	80016be <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e2d9      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	025b      	lsls	r3, r3, #9
 800160c:	429a      	cmp	r2, r3
 800160e:	d107      	bne.n	8001620 <HAL_RCC_OscConfig+0x78>
 8001610:	4bb0      	ldr	r3, [pc, #704]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4baf      	ldr	r3, [pc, #700]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	0249      	lsls	r1, r1, #9
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e020      	b.n	8001662 <HAL_RCC_OscConfig+0xba>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	23a0      	movs	r3, #160	; 0xa0
 8001626:	02db      	lsls	r3, r3, #11
 8001628:	429a      	cmp	r2, r3
 800162a:	d10e      	bne.n	800164a <HAL_RCC_OscConfig+0xa2>
 800162c:	4ba9      	ldr	r3, [pc, #676]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4ba8      	ldr	r3, [pc, #672]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001632:	2180      	movs	r1, #128	; 0x80
 8001634:	02c9      	lsls	r1, r1, #11
 8001636:	430a      	orrs	r2, r1
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	4ba6      	ldr	r3, [pc, #664]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4ba5      	ldr	r3, [pc, #660]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	0249      	lsls	r1, r1, #9
 8001644:	430a      	orrs	r2, r1
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e00b      	b.n	8001662 <HAL_RCC_OscConfig+0xba>
 800164a:	4ba2      	ldr	r3, [pc, #648]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	4ba1      	ldr	r3, [pc, #644]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001650:	49a1      	ldr	r1, [pc, #644]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 8001652:	400a      	ands	r2, r1
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	4b9f      	ldr	r3, [pc, #636]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b9e      	ldr	r3, [pc, #632]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800165c:	499f      	ldr	r1, [pc, #636]	; (80018dc <HAL_RCC_OscConfig+0x334>)
 800165e:	400a      	ands	r2, r1
 8001660:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d014      	beq.n	8001694 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166a:	f7ff fc05 	bl	8000e78 <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff fc00 	bl	8000e78 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e298      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001686:	4b93      	ldr	r3, [pc, #588]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	029b      	lsls	r3, r3, #10
 800168e:	4013      	ands	r3, r2
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0xcc>
 8001692:	e015      	b.n	80016c0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff fbf0 	bl	8000e78 <HAL_GetTick>
 8001698:	0003      	movs	r3, r0
 800169a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800169e:	f7ff fbeb 	bl	8000e78 <HAL_GetTick>
 80016a2:	0002      	movs	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b64      	cmp	r3, #100	; 0x64
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e283      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016b0:	4b88      	ldr	r3, [pc, #544]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	029b      	lsls	r3, r3, #10
 80016b8:	4013      	ands	r3, r2
 80016ba:	d1f0      	bne.n	800169e <HAL_RCC_OscConfig+0xf6>
 80016bc:	e000      	b.n	80016c0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2202      	movs	r2, #2
 80016c6:	4013      	ands	r3, r2
 80016c8:	d100      	bne.n	80016cc <HAL_RCC_OscConfig+0x124>
 80016ca:	e099      	b.n	8001800 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016cc:	4b81      	ldr	r3, [pc, #516]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2238      	movs	r2, #56	; 0x38
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016d6:	4b7f      	ldr	r3, [pc, #508]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2203      	movs	r2, #3
 80016dc:	4013      	ands	r3, r2
 80016de:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2b10      	cmp	r3, #16
 80016e4:	d102      	bne.n	80016ec <HAL_RCC_OscConfig+0x144>
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d002      	beq.n	80016f2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d135      	bne.n	800175e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f2:	4b78      	ldr	r3, [pc, #480]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4013      	ands	r3, r2
 80016fc:	d005      	beq.n	800170a <HAL_RCC_OscConfig+0x162>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e256      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170a:	4b72      	ldr	r3, [pc, #456]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	4a74      	ldr	r2, [pc, #464]	; (80018e0 <HAL_RCC_OscConfig+0x338>)
 8001710:	4013      	ands	r3, r2
 8001712:	0019      	movs	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	021a      	lsls	r2, r3, #8
 800171a:	4b6e      	ldr	r3, [pc, #440]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800171c:	430a      	orrs	r2, r1
 800171e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d112      	bne.n	800174c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001726:	4b6b      	ldr	r3, [pc, #428]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a6e      	ldr	r2, [pc, #440]	; (80018e4 <HAL_RCC_OscConfig+0x33c>)
 800172c:	4013      	ands	r3, r2
 800172e:	0019      	movs	r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	4b67      	ldr	r3, [pc, #412]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800173a:	4b66      	ldr	r3, [pc, #408]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	0adb      	lsrs	r3, r3, #11
 8001740:	2207      	movs	r2, #7
 8001742:	4013      	ands	r3, r2
 8001744:	4a68      	ldr	r2, [pc, #416]	; (80018e8 <HAL_RCC_OscConfig+0x340>)
 8001746:	40da      	lsrs	r2, r3
 8001748:	4b68      	ldr	r3, [pc, #416]	; (80018ec <HAL_RCC_OscConfig+0x344>)
 800174a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800174c:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x348>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	0018      	movs	r0, r3
 8001752:	f7ff fb35 	bl	8000dc0 <HAL_InitTick>
 8001756:	1e03      	subs	r3, r0, #0
 8001758:	d051      	beq.n	80017fe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e22c      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d030      	beq.n	80017c8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001766:	4b5b      	ldr	r3, [pc, #364]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a5e      	ldr	r2, [pc, #376]	; (80018e4 <HAL_RCC_OscConfig+0x33c>)
 800176c:	4013      	ands	r3, r2
 800176e:	0019      	movs	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691a      	ldr	r2, [r3, #16]
 8001774:	4b57      	ldr	r3, [pc, #348]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001776:	430a      	orrs	r2, r1
 8001778:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800177a:	4b56      	ldr	r3, [pc, #344]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4b55      	ldr	r3, [pc, #340]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001780:	2180      	movs	r1, #128	; 0x80
 8001782:	0049      	lsls	r1, r1, #1
 8001784:	430a      	orrs	r2, r1
 8001786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff fb76 	bl	8000e78 <HAL_GetTick>
 800178c:	0003      	movs	r3, r0
 800178e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001792:	f7ff fb71 	bl	8000e78 <HAL_GetTick>
 8001796:	0002      	movs	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e209      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a4:	4b4b      	ldr	r3, [pc, #300]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4013      	ands	r3, r2
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b0:	4b48      	ldr	r3, [pc, #288]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4a4a      	ldr	r2, [pc, #296]	; (80018e0 <HAL_RCC_OscConfig+0x338>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	0019      	movs	r1, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	021a      	lsls	r2, r3, #8
 80017c0:	4b44      	ldr	r3, [pc, #272]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80017c2:	430a      	orrs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	e01b      	b.n	8001800 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80017c8:	4b42      	ldr	r3, [pc, #264]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80017ce:	4949      	ldr	r1, [pc, #292]	; (80018f4 <HAL_RCC_OscConfig+0x34c>)
 80017d0:	400a      	ands	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff fb50 	bl	8000e78 <HAL_GetTick>
 80017d8:	0003      	movs	r3, r0
 80017da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017de:	f7ff fb4b 	bl	8000e78 <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e1e3      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f0:	4b38      	ldr	r3, [pc, #224]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4013      	ands	r3, r2
 80017fa:	d1f0      	bne.n	80017de <HAL_RCC_OscConfig+0x236>
 80017fc:	e000      	b.n	8001800 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2208      	movs	r2, #8
 8001806:	4013      	ands	r3, r2
 8001808:	d047      	beq.n	800189a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800180a:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2238      	movs	r2, #56	; 0x38
 8001810:	4013      	ands	r3, r2
 8001812:	2b18      	cmp	r3, #24
 8001814:	d10a      	bne.n	800182c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001816:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181a:	2202      	movs	r2, #2
 800181c:	4013      	ands	r3, r2
 800181e:	d03c      	beq.n	800189a <HAL_RCC_OscConfig+0x2f2>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d138      	bne.n	800189a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e1c5      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d019      	beq.n	8001868 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001834:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001836:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001838:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800183a:	2101      	movs	r1, #1
 800183c:	430a      	orrs	r2, r1
 800183e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001840:	f7ff fb1a 	bl	8000e78 <HAL_GetTick>
 8001844:	0003      	movs	r3, r0
 8001846:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184a:	f7ff fb15 	bl	8000e78 <HAL_GetTick>
 800184e:	0002      	movs	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e1ad      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800185e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001860:	2202      	movs	r2, #2
 8001862:	4013      	ands	r3, r2
 8001864:	d0f1      	beq.n	800184a <HAL_RCC_OscConfig+0x2a2>
 8001866:	e018      	b.n	800189a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800186a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 800186e:	2101      	movs	r1, #1
 8001870:	438a      	bics	r2, r1
 8001872:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff fb00 	bl	8000e78 <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187e:	f7ff fafb 	bl	8000e78 <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e193      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 8001892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001894:	2202      	movs	r2, #2
 8001896:	4013      	ands	r3, r2
 8001898:	d1f1      	bne.n	800187e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2204      	movs	r2, #4
 80018a0:	4013      	ands	r3, r2
 80018a2:	d100      	bne.n	80018a6 <HAL_RCC_OscConfig+0x2fe>
 80018a4:	e0c6      	b.n	8001a34 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a6:	231f      	movs	r3, #31
 80018a8:	18fb      	adds	r3, r7, r3
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2238      	movs	r2, #56	; 0x38
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b20      	cmp	r3, #32
 80018b8:	d11e      	bne.n	80018f8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_RCC_OscConfig+0x32c>)
 80018bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018be:	2202      	movs	r2, #2
 80018c0:	4013      	ands	r3, r2
 80018c2:	d100      	bne.n	80018c6 <HAL_RCC_OscConfig+0x31e>
 80018c4:	e0b6      	b.n	8001a34 <HAL_RCC_OscConfig+0x48c>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d000      	beq.n	80018d0 <HAL_RCC_OscConfig+0x328>
 80018ce:	e0b1      	b.n	8001a34 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e171      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>
 80018d4:	40021000 	.word	0x40021000
 80018d8:	fffeffff 	.word	0xfffeffff
 80018dc:	fffbffff 	.word	0xfffbffff
 80018e0:	ffff80ff 	.word	0xffff80ff
 80018e4:	ffffc7ff 	.word	0xffffc7ff
 80018e8:	00f42400 	.word	0x00f42400
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000004 	.word	0x20000004
 80018f4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018f8:	4bb1      	ldr	r3, [pc, #708]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 80018fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	055b      	lsls	r3, r3, #21
 8001900:	4013      	ands	r3, r2
 8001902:	d101      	bne.n	8001908 <HAL_RCC_OscConfig+0x360>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x362>
 8001908:	2300      	movs	r3, #0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d011      	beq.n	8001932 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	4bac      	ldr	r3, [pc, #688]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001912:	4bab      	ldr	r3, [pc, #684]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	0549      	lsls	r1, r1, #21
 8001918:	430a      	orrs	r2, r1
 800191a:	63da      	str	r2, [r3, #60]	; 0x3c
 800191c:	4ba8      	ldr	r3, [pc, #672]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 800191e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	055b      	lsls	r3, r3, #21
 8001924:	4013      	ands	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800192a:	231f      	movs	r3, #31
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001932:	4ba4      	ldr	r3, [pc, #656]	; (8001bc4 <HAL_RCC_OscConfig+0x61c>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4013      	ands	r3, r2
 800193c:	d11a      	bne.n	8001974 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800193e:	4ba1      	ldr	r3, [pc, #644]	; (8001bc4 <HAL_RCC_OscConfig+0x61c>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4ba0      	ldr	r3, [pc, #640]	; (8001bc4 <HAL_RCC_OscConfig+0x61c>)
 8001944:	2180      	movs	r1, #128	; 0x80
 8001946:	0049      	lsls	r1, r1, #1
 8001948:	430a      	orrs	r2, r1
 800194a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800194c:	f7ff fa94 	bl	8000e78 <HAL_GetTick>
 8001950:	0003      	movs	r3, r0
 8001952:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001956:	f7ff fa8f 	bl	8000e78 <HAL_GetTick>
 800195a:	0002      	movs	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e127      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001968:	4b96      	ldr	r3, [pc, #600]	; (8001bc4 <HAL_RCC_OscConfig+0x61c>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4013      	ands	r3, r2
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x3e2>
 800197c:	4b90      	ldr	r3, [pc, #576]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 800197e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001980:	4b8f      	ldr	r3, [pc, #572]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001982:	2101      	movs	r1, #1
 8001984:	430a      	orrs	r2, r1
 8001986:	65da      	str	r2, [r3, #92]	; 0x5c
 8001988:	e01c      	b.n	80019c4 <HAL_RCC_OscConfig+0x41c>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b05      	cmp	r3, #5
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x404>
 8001992:	4b8b      	ldr	r3, [pc, #556]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001994:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001996:	4b8a      	ldr	r3, [pc, #552]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001998:	2104      	movs	r1, #4
 800199a:	430a      	orrs	r2, r1
 800199c:	65da      	str	r2, [r3, #92]	; 0x5c
 800199e:	4b88      	ldr	r3, [pc, #544]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 80019a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019a2:	4b87      	ldr	r3, [pc, #540]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 80019a4:	2101      	movs	r1, #1
 80019a6:	430a      	orrs	r2, r1
 80019a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80019aa:	e00b      	b.n	80019c4 <HAL_RCC_OscConfig+0x41c>
 80019ac:	4b84      	ldr	r3, [pc, #528]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 80019ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019b0:	4b83      	ldr	r3, [pc, #524]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	438a      	bics	r2, r1
 80019b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80019b8:	4b81      	ldr	r3, [pc, #516]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 80019ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019bc:	4b80      	ldr	r3, [pc, #512]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 80019be:	2104      	movs	r1, #4
 80019c0:	438a      	bics	r2, r1
 80019c2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d014      	beq.n	80019f6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff fa54 	bl	8000e78 <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d4:	e009      	b.n	80019ea <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d6:	f7ff fa4f 	bl	8000e78 <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	4a79      	ldr	r2, [pc, #484]	; (8001bc8 <HAL_RCC_OscConfig+0x620>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e0e6      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ea:	4b75      	ldr	r3, [pc, #468]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 80019ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ee:	2202      	movs	r2, #2
 80019f0:	4013      	ands	r3, r2
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x42e>
 80019f4:	e013      	b.n	8001a1e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f6:	f7ff fa3f 	bl	8000e78 <HAL_GetTick>
 80019fa:	0003      	movs	r3, r0
 80019fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019fe:	e009      	b.n	8001a14 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a00:	f7ff fa3a 	bl	8000e78 <HAL_GetTick>
 8001a04:	0002      	movs	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	4a6f      	ldr	r2, [pc, #444]	; (8001bc8 <HAL_RCC_OscConfig+0x620>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e0d1      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a14:	4b6a      	ldr	r3, [pc, #424]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a18:	2202      	movs	r2, #2
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a1e:	231f      	movs	r3, #31
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d105      	bne.n	8001a34 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a28:	4b65      	ldr	r3, [pc, #404]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a2c:	4b64      	ldr	r3, [pc, #400]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001a2e:	4967      	ldr	r1, [pc, #412]	; (8001bcc <HAL_RCC_OscConfig+0x624>)
 8001a30:	400a      	ands	r2, r1
 8001a32:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d100      	bne.n	8001a3e <HAL_RCC_OscConfig+0x496>
 8001a3c:	e0bb      	b.n	8001bb6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a3e:	4b60      	ldr	r3, [pc, #384]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2238      	movs	r2, #56	; 0x38
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d100      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4a4>
 8001a4a:	e07b      	b.n	8001b44 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d156      	bne.n	8001b02 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a54:	4b5a      	ldr	r3, [pc, #360]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b59      	ldr	r3, [pc, #356]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001a5a:	495d      	ldr	r1, [pc, #372]	; (8001bd0 <HAL_RCC_OscConfig+0x628>)
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7ff fa0a 	bl	8000e78 <HAL_GetTick>
 8001a64:	0003      	movs	r3, r0
 8001a66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6a:	f7ff fa05 	bl	8000e78 <HAL_GetTick>
 8001a6e:	0002      	movs	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e09d      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7c:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	049b      	lsls	r3, r3, #18
 8001a84:	4013      	ands	r3, r2
 8001a86:	d1f0      	bne.n	8001a6a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a88:	4b4d      	ldr	r3, [pc, #308]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a51      	ldr	r2, [pc, #324]	; (8001bd4 <HAL_RCC_OscConfig+0x62c>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	0019      	movs	r1, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1a      	ldr	r2, [r3, #32]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	4b42      	ldr	r3, [pc, #264]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001abc:	4b40      	ldr	r3, [pc, #256]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b3f      	ldr	r3, [pc, #252]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	0449      	lsls	r1, r1, #17
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001aca:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	4b3c      	ldr	r3, [pc, #240]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001ad0:	2180      	movs	r1, #128	; 0x80
 8001ad2:	0549      	lsls	r1, r1, #21
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f9ce 	bl	8000e78 <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae2:	f7ff f9c9 	bl	8000e78 <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e061      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af4:	4b32      	ldr	r3, [pc, #200]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	049b      	lsls	r3, r3, #18
 8001afc:	4013      	ands	r3, r2
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x53a>
 8001b00:	e059      	b.n	8001bb6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b02:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001b08:	4931      	ldr	r1, [pc, #196]	; (8001bd0 <HAL_RCC_OscConfig+0x628>)
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0e:	f7ff f9b3 	bl	8000e78 <HAL_GetTick>
 8001b12:	0003      	movs	r3, r0
 8001b14:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff f9ae 	bl	8000e78 <HAL_GetTick>
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e046      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b2a:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	049b      	lsls	r3, r3, #18
 8001b32:	4013      	ands	r3, r2
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001b3c:	4926      	ldr	r1, [pc, #152]	; (8001bd8 <HAL_RCC_OscConfig+0x630>)
 8001b3e:	400a      	ands	r2, r1
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	e038      	b.n	8001bb6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e033      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_RCC_OscConfig+0x618>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2203      	movs	r2, #3
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d126      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2270      	movs	r2, #112	; 0x70
 8001b68:	401a      	ands	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d11f      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	23fe      	movs	r3, #254	; 0xfe
 8001b76:	01db      	lsls	r3, r3, #7
 8001b78:	401a      	ands	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d116      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	23f8      	movs	r3, #248	; 0xf8
 8001b88:	039b      	lsls	r3, r3, #14
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d10e      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	23e0      	movs	r3, #224	; 0xe0
 8001b98:	051b      	lsls	r3, r3, #20
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	0f5b      	lsrs	r3, r3, #29
 8001ba8:	075a      	lsls	r2, r3, #29
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d001      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	0018      	movs	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	b008      	add	sp, #32
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40007000 	.word	0x40007000
 8001bc8:	00001388 	.word	0x00001388
 8001bcc:	efffffff 	.word	0xefffffff
 8001bd0:	feffffff 	.word	0xfeffffff
 8001bd4:	11c1808c 	.word	0x11c1808c
 8001bd8:	eefefffc 	.word	0xeefefffc

08001bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0e9      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b76      	ldr	r3, [pc, #472]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d91e      	bls.n	8001c3c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b73      	ldr	r3, [pc, #460]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2207      	movs	r2, #7
 8001c04:	4393      	bics	r3, r2
 8001c06:	0019      	movs	r1, r3
 8001c08:	4b70      	ldr	r3, [pc, #448]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c10:	f7ff f932 	bl	8000e78 <HAL_GetTick>
 8001c14:	0003      	movs	r3, r0
 8001c16:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c18:	e009      	b.n	8001c2e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1a:	f7ff f92d 	bl	8000e78 <HAL_GetTick>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	4a6a      	ldr	r2, [pc, #424]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e0ca      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c2e:	4b67      	ldr	r3, [pc, #412]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2207      	movs	r2, #7
 8001c34:	4013      	ands	r3, r2
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d1ee      	bne.n	8001c1a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2202      	movs	r2, #2
 8001c42:	4013      	ands	r3, r2
 8001c44:	d015      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d006      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c50:	4b60      	ldr	r3, [pc, #384]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	4b5f      	ldr	r3, [pc, #380]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c56:	21e0      	movs	r1, #224	; 0xe0
 8001c58:	01c9      	lsls	r1, r1, #7
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c5e:	4b5d      	ldr	r3, [pc, #372]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	4a5d      	ldr	r2, [pc, #372]	; (8001dd8 <HAL_RCC_ClockConfig+0x1fc>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	4b59      	ldr	r3, [pc, #356]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2201      	movs	r2, #1
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d057      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d107      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	029b      	lsls	r3, r3, #10
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d12b      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e097      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9c:	4b4d      	ldr	r3, [pc, #308]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	049b      	lsls	r3, r3, #18
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d11f      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e08b      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb4:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d113      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e07f      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d106      	bne.n	8001cda <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ccc:	4b41      	ldr	r3, [pc, #260]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d108      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e074      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cda:	4b3e      	ldr	r3, [pc, #248]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cde:	2202      	movs	r2, #2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e06d      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ce8:	4b3a      	ldr	r3, [pc, #232]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2207      	movs	r2, #7
 8001cee:	4393      	bics	r3, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	4b37      	ldr	r3, [pc, #220]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cfc:	f7ff f8bc 	bl	8000e78 <HAL_GetTick>
 8001d00:	0003      	movs	r3, r0
 8001d02:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d04:	e009      	b.n	8001d1a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d06:	f7ff f8b7 	bl	8000e78 <HAL_GetTick>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	4a2f      	ldr	r2, [pc, #188]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e054      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2238      	movs	r2, #56	; 0x38
 8001d20:	401a      	ands	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1ec      	bne.n	8001d06 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2207      	movs	r2, #7
 8001d32:	4013      	ands	r3, r2
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d21e      	bcs.n	8001d78 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2207      	movs	r2, #7
 8001d40:	4393      	bics	r3, r2
 8001d42:	0019      	movs	r1, r3
 8001d44:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d4c:	f7ff f894 	bl	8000e78 <HAL_GetTick>
 8001d50:	0003      	movs	r3, r0
 8001d52:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d54:	e009      	b.n	8001d6a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d56:	f7ff f88f 	bl	8000e78 <HAL_GetTick>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	4a1b      	ldr	r2, [pc, #108]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e02c      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d6a:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2207      	movs	r2, #7
 8001d70:	4013      	ands	r3, r2
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d1ee      	bne.n	8001d56 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d009      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d82:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	4a15      	ldr	r2, [pc, #84]	; (8001ddc <HAL_RCC_ClockConfig+0x200>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	0019      	movs	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d92:	430a      	orrs	r2, r1
 8001d94:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d96:	f000 f829 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001d9a:	0001      	movs	r1, r0
 8001d9c:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	220f      	movs	r2, #15
 8001da4:	401a      	ands	r2, r3
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HAL_RCC_ClockConfig+0x204>)
 8001da8:	0092      	lsls	r2, r2, #2
 8001daa:	58d3      	ldr	r3, [r2, r3]
 8001dac:	221f      	movs	r2, #31
 8001dae:	4013      	ands	r3, r2
 8001db0:	000a      	movs	r2, r1
 8001db2:	40da      	lsrs	r2, r3
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_RCC_ClockConfig+0x208>)
 8001db6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_RCC_ClockConfig+0x20c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f7fe ffff 	bl	8000dc0 <HAL_InitTick>
 8001dc2:	0003      	movs	r3, r0
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b004      	add	sp, #16
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40022000 	.word	0x40022000
 8001dd0:	00001388 	.word	0x00001388
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	fffff0ff 	.word	0xfffff0ff
 8001ddc:	ffff8fff 	.word	0xffff8fff
 8001de0:	08005998 	.word	0x08005998
 8001de4:	20000000 	.word	0x20000000
 8001de8:	20000004 	.word	0x20000004

08001dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001df2:	4b3c      	ldr	r3, [pc, #240]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2238      	movs	r2, #56	; 0x38
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d10f      	bne.n	8001e1c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001dfc:	4b39      	ldr	r3, [pc, #228]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	0adb      	lsrs	r3, r3, #11
 8001e02:	2207      	movs	r2, #7
 8001e04:	4013      	ands	r3, r2
 8001e06:	2201      	movs	r2, #1
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	0013      	movs	r3, r2
 8001e0c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e0e:	6839      	ldr	r1, [r7, #0]
 8001e10:	4835      	ldr	r0, [pc, #212]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e12:	f7fe f981 	bl	8000118 <__udivsi3>
 8001e16:	0003      	movs	r3, r0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	e05d      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e1c:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2238      	movs	r2, #56	; 0x38
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d102      	bne.n	8001e2e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e28:	4b30      	ldr	r3, [pc, #192]	; (8001eec <HAL_RCC_GetSysClockFreq+0x100>)
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	e054      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2238      	movs	r2, #56	; 0x38
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b10      	cmp	r3, #16
 8001e38:	d138      	bne.n	8001eac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2203      	movs	r2, #3
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e44:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	3301      	adds	r3, #1
 8001e50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d10d      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	4824      	ldr	r0, [pc, #144]	; (8001eec <HAL_RCC_GetSysClockFreq+0x100>)
 8001e5c:	f7fe f95c 	bl	8000118 <__udivsi3>
 8001e60:	0003      	movs	r3, r0
 8001e62:	0019      	movs	r1, r3
 8001e64:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	227f      	movs	r2, #127	; 0x7f
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	434b      	muls	r3, r1
 8001e70:	617b      	str	r3, [r7, #20]
        break;
 8001e72:	e00d      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	481c      	ldr	r0, [pc, #112]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e78:	f7fe f94e 	bl	8000118 <__udivsi3>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	0019      	movs	r1, r3
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	227f      	movs	r2, #127	; 0x7f
 8001e88:	4013      	ands	r3, r2
 8001e8a:	434b      	muls	r3, r1
 8001e8c:	617b      	str	r3, [r7, #20]
        break;
 8001e8e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	0f5b      	lsrs	r3, r3, #29
 8001e96:	2207      	movs	r2, #7
 8001e98:	4013      	ands	r3, r2
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	6978      	ldr	r0, [r7, #20]
 8001ea2:	f7fe f939 	bl	8000118 <__udivsi3>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	e015      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2238      	movs	r2, #56	; 0x38
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d103      	bne.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	e00b      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2238      	movs	r2, #56	; 0x38
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b18      	cmp	r3, #24
 8001eca:	d103      	bne.n	8001ed4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001ecc:	23fa      	movs	r3, #250	; 0xfa
 8001ece:	01db      	lsls	r3, r3, #7
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	e001      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ed8:	693b      	ldr	r3, [r7, #16]
}
 8001eda:	0018      	movs	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b006      	add	sp, #24
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	00f42400 	.word	0x00f42400
 8001eec:	007a1200 	.word	0x007a1200

08001ef0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef4:	4b02      	ldr	r3, [pc, #8]	; (8001f00 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	0018      	movs	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	20000000 	.word	0x20000000

08001f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f04:	b5b0      	push	{r4, r5, r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001f08:	f7ff fff2 	bl	8001ef0 <HAL_RCC_GetHCLKFreq>
 8001f0c:	0004      	movs	r4, r0
 8001f0e:	f7ff fb3f 	bl	8001590 <LL_RCC_GetAPB1Prescaler>
 8001f12:	0003      	movs	r3, r0
 8001f14:	0b1a      	lsrs	r2, r3, #12
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f18:	0092      	lsls	r2, r2, #2
 8001f1a:	58d3      	ldr	r3, [r2, r3]
 8001f1c:	221f      	movs	r2, #31
 8001f1e:	4013      	ands	r3, r2
 8001f20:	40dc      	lsrs	r4, r3
 8001f22:	0023      	movs	r3, r4
}
 8001f24:	0018      	movs	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bdb0      	pop	{r4, r5, r7, pc}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	080059d8 	.word	0x080059d8

08001f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001f38:	2313      	movs	r3, #19
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f40:	2312      	movs	r3, #18
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	029b      	lsls	r3, r3, #10
 8001f50:	4013      	ands	r3, r2
 8001f52:	d100      	bne.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001f54:	e0a3      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f56:	2011      	movs	r0, #17
 8001f58:	183b      	adds	r3, r7, r0
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5e:	4bc3      	ldr	r3, [pc, #780]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	055b      	lsls	r3, r3, #21
 8001f66:	4013      	ands	r3, r2
 8001f68:	d110      	bne.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	4bc0      	ldr	r3, [pc, #768]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f6e:	4bbf      	ldr	r3, [pc, #764]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f70:	2180      	movs	r1, #128	; 0x80
 8001f72:	0549      	lsls	r1, r1, #21
 8001f74:	430a      	orrs	r2, r1
 8001f76:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f78:	4bbc      	ldr	r3, [pc, #752]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	055b      	lsls	r3, r3, #21
 8001f80:	4013      	ands	r3, r2
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f86:	183b      	adds	r3, r7, r0
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f8c:	4bb8      	ldr	r3, [pc, #736]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4bb7      	ldr	r3, [pc, #732]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	0049      	lsls	r1, r1, #1
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f9a:	f7fe ff6d 	bl	8000e78 <HAL_GetTick>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa4:	f7fe ff68 	bl	8000e78 <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d904      	bls.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001fb2:	2313      	movs	r3, #19
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	701a      	strb	r2, [r3, #0]
        break;
 8001fba:	e005      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fbc:	4bac      	ldr	r3, [pc, #688]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d0ed      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001fc8:	2313      	movs	r3, #19
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d154      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fd2:	4ba6      	ldr	r3, [pc, #664]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fd6:	23c0      	movs	r3, #192	; 0xc0
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4013      	ands	r3, r2
 8001fdc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d019      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d014      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fee:	4b9f      	ldr	r3, [pc, #636]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	4aa0      	ldr	r2, [pc, #640]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ff8:	4b9c      	ldr	r3, [pc, #624]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ffa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ffc:	4b9b      	ldr	r3, [pc, #620]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ffe:	2180      	movs	r1, #128	; 0x80
 8002000:	0249      	lsls	r1, r1, #9
 8002002:	430a      	orrs	r2, r1
 8002004:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002006:	4b99      	ldr	r3, [pc, #612]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002008:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800200a:	4b98      	ldr	r3, [pc, #608]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800200c:	499a      	ldr	r1, [pc, #616]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800200e:	400a      	ands	r2, r1
 8002010:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002012:	4b96      	ldr	r3, [pc, #600]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2201      	movs	r2, #1
 800201c:	4013      	ands	r3, r2
 800201e:	d016      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7fe ff2a 	bl	8000e78 <HAL_GetTick>
 8002024:	0003      	movs	r3, r0
 8002026:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002028:	e00c      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7fe ff25 	bl	8000e78 <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	4a91      	ldr	r2, [pc, #580]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d904      	bls.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800203a:	2313      	movs	r3, #19
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	2203      	movs	r2, #3
 8002040:	701a      	strb	r2, [r3, #0]
            break;
 8002042:	e004      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002044:	4b89      	ldr	r3, [pc, #548]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002048:	2202      	movs	r2, #2
 800204a:	4013      	ands	r3, r2
 800204c:	d0ed      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800204e:	2313      	movs	r3, #19
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10a      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002058:	4b84      	ldr	r3, [pc, #528]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800205a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205c:	4a85      	ldr	r2, [pc, #532]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800205e:	4013      	ands	r3, r2
 8002060:	0019      	movs	r1, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002066:	4b81      	ldr	r3, [pc, #516]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002068:	430a      	orrs	r2, r1
 800206a:	65da      	str	r2, [r3, #92]	; 0x5c
 800206c:	e00c      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800206e:	2312      	movs	r3, #18
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	2213      	movs	r2, #19
 8002074:	18ba      	adds	r2, r7, r2
 8002076:	7812      	ldrb	r2, [r2, #0]
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	e005      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800207c:	2312      	movs	r3, #18
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	2213      	movs	r2, #19
 8002082:	18ba      	adds	r2, r7, r2
 8002084:	7812      	ldrb	r2, [r2, #0]
 8002086:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002088:	2311      	movs	r3, #17
 800208a:	18fb      	adds	r3, r7, r3
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d105      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002092:	4b76      	ldr	r3, [pc, #472]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002096:	4b75      	ldr	r3, [pc, #468]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002098:	4979      	ldr	r1, [pc, #484]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800209a:	400a      	ands	r2, r1
 800209c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2201      	movs	r2, #1
 80020a4:	4013      	ands	r3, r2
 80020a6:	d009      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020a8:	4b70      	ldr	r3, [pc, #448]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ac:	2203      	movs	r2, #3
 80020ae:	4393      	bics	r3, r2
 80020b0:	0019      	movs	r1, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	4b6d      	ldr	r3, [pc, #436]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020b8:	430a      	orrs	r2, r1
 80020ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2202      	movs	r2, #2
 80020c2:	4013      	ands	r3, r2
 80020c4:	d009      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020c6:	4b69      	ldr	r3, [pc, #420]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ca:	220c      	movs	r2, #12
 80020cc:	4393      	bics	r3, r2
 80020ce:	0019      	movs	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	4b65      	ldr	r3, [pc, #404]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020d6:	430a      	orrs	r2, r1
 80020d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2210      	movs	r2, #16
 80020e0:	4013      	ands	r3, r2
 80020e2:	d009      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020e4:	4b61      	ldr	r3, [pc, #388]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	4a66      	ldr	r2, [pc, #408]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	0019      	movs	r1, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	4b5e      	ldr	r3, [pc, #376]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020f4:	430a      	orrs	r2, r1
 80020f6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4013      	ands	r3, r2
 8002102:	d009      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002104:	4b59      	ldr	r3, [pc, #356]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002108:	4a5f      	ldr	r2, [pc, #380]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800210a:	4013      	ands	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	4b56      	ldr	r3, [pc, #344]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002114:	430a      	orrs	r2, r1
 8002116:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4013      	ands	r3, r2
 8002122:	d009      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002124:	4b51      	ldr	r3, [pc, #324]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002128:	4a58      	ldr	r2, [pc, #352]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800212a:	4013      	ands	r3, r2
 800212c:	0019      	movs	r1, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69da      	ldr	r2, [r3, #28]
 8002132:	4b4e      	ldr	r3, [pc, #312]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002134:	430a      	orrs	r2, r1
 8002136:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2220      	movs	r2, #32
 800213e:	4013      	ands	r3, r2
 8002140:	d009      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002142:	4b4a      	ldr	r3, [pc, #296]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002146:	4a52      	ldr	r2, [pc, #328]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002148:	4013      	ands	r3, r2
 800214a:	0019      	movs	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	4b46      	ldr	r3, [pc, #280]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002152:	430a      	orrs	r2, r1
 8002154:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	01db      	lsls	r3, r3, #7
 800215e:	4013      	ands	r3, r2
 8002160:	d015      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002162:	4b42      	ldr	r3, [pc, #264]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	0899      	lsrs	r1, r3, #2
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1a      	ldr	r2, [r3, #32]
 800216e:	4b3f      	ldr	r3, [pc, #252]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002170:	430a      	orrs	r2, r1
 8002172:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1a      	ldr	r2, [r3, #32]
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	05db      	lsls	r3, r3, #23
 800217c:	429a      	cmp	r2, r3
 800217e:	d106      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002180:	4b3a      	ldr	r3, [pc, #232]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	4b39      	ldr	r3, [pc, #228]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002186:	2180      	movs	r1, #128	; 0x80
 8002188:	0249      	lsls	r1, r1, #9
 800218a:	430a      	orrs	r2, r1
 800218c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	031b      	lsls	r3, r3, #12
 8002196:	4013      	ands	r3, r2
 8002198:	d009      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800219a:	4b34      	ldr	r3, [pc, #208]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800219c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219e:	2240      	movs	r2, #64	; 0x40
 80021a0:	4393      	bics	r3, r2
 80021a2:	0019      	movs	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021a8:	4b30      	ldr	r3, [pc, #192]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021aa:	430a      	orrs	r2, r1
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	039b      	lsls	r3, r3, #14
 80021b6:	4013      	ands	r3, r2
 80021b8:	d016      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80021ba:	4b2c      	ldr	r3, [pc, #176]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021be:	4a35      	ldr	r2, [pc, #212]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	0019      	movs	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021c8:	4b28      	ldr	r3, [pc, #160]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ca:	430a      	orrs	r2, r1
 80021cc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	03db      	lsls	r3, r3, #15
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d106      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80021da:	4b24      	ldr	r3, [pc, #144]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	4b23      	ldr	r3, [pc, #140]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021e0:	2180      	movs	r1, #128	; 0x80
 80021e2:	0449      	lsls	r1, r1, #17
 80021e4:	430a      	orrs	r2, r1
 80021e6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	03db      	lsls	r3, r3, #15
 80021f0:	4013      	ands	r3, r2
 80021f2:	d016      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80021f4:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f8:	4a27      	ldr	r2, [pc, #156]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002204:	430a      	orrs	r2, r1
 8002206:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	045b      	lsls	r3, r3, #17
 8002210:	429a      	cmp	r2, r3
 8002212:	d106      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002214:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800221a:	2180      	movs	r1, #128	; 0x80
 800221c:	0449      	lsls	r1, r1, #17
 800221e:	430a      	orrs	r2, r1
 8002220:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	4013      	ands	r3, r2
 800222c:	d016      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002232:	4a1a      	ldr	r2, [pc, #104]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002234:	4013      	ands	r3, r2
 8002236:	0019      	movs	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695a      	ldr	r2, [r3, #20]
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800223e:	430a      	orrs	r2, r1
 8002240:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695a      	ldr	r2, [r3, #20]
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	01db      	lsls	r3, r3, #7
 800224a:	429a      	cmp	r2, r3
 800224c:	d106      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	0249      	lsls	r1, r1, #9
 8002258:	430a      	orrs	r2, r1
 800225a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800225c:	2312      	movs	r3, #18
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	781b      	ldrb	r3, [r3, #0]
}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	b006      	add	sp, #24
 8002268:	bd80      	pop	{r7, pc}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	40021000 	.word	0x40021000
 8002270:	40007000 	.word	0x40007000
 8002274:	fffffcff 	.word	0xfffffcff
 8002278:	fffeffff 	.word	0xfffeffff
 800227c:	00001388 	.word	0x00001388
 8002280:	efffffff 	.word	0xefffffff
 8002284:	fffff3ff 	.word	0xfffff3ff
 8002288:	fff3ffff 	.word	0xfff3ffff
 800228c:	ffcfffff 	.word	0xffcfffff
 8002290:	ffffcfff 	.word	0xffffcfff
 8002294:	ffbfffff 	.word	0xffbfffff
 8002298:	feffffff 	.word	0xfeffffff
 800229c:	ffff3fff 	.word	0xffff3fff

080022a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e04a      	b.n	8002348 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	223d      	movs	r2, #61	; 0x3d
 80022b6:	5c9b      	ldrb	r3, [r3, r2]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d107      	bne.n	80022ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	223c      	movs	r2, #60	; 0x3c
 80022c2:	2100      	movs	r1, #0
 80022c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	0018      	movs	r0, r3
 80022ca:	f7fe fb97 	bl	80009fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	223d      	movs	r2, #61	; 0x3d
 80022d2:	2102      	movs	r1, #2
 80022d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3304      	adds	r3, #4
 80022de:	0019      	movs	r1, r3
 80022e0:	0010      	movs	r0, r2
 80022e2:	f000 fab9 	bl	8002858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2248      	movs	r2, #72	; 0x48
 80022ea:	2101      	movs	r1, #1
 80022ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	223e      	movs	r2, #62	; 0x3e
 80022f2:	2101      	movs	r1, #1
 80022f4:	5499      	strb	r1, [r3, r2]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	223f      	movs	r2, #63	; 0x3f
 80022fa:	2101      	movs	r1, #1
 80022fc:	5499      	strb	r1, [r3, r2]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2240      	movs	r2, #64	; 0x40
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2241      	movs	r2, #65	; 0x41
 800230a:	2101      	movs	r1, #1
 800230c:	5499      	strb	r1, [r3, r2]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2242      	movs	r2, #66	; 0x42
 8002312:	2101      	movs	r1, #1
 8002314:	5499      	strb	r1, [r3, r2]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2243      	movs	r2, #67	; 0x43
 800231a:	2101      	movs	r1, #1
 800231c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2244      	movs	r2, #68	; 0x44
 8002322:	2101      	movs	r1, #1
 8002324:	5499      	strb	r1, [r3, r2]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2245      	movs	r2, #69	; 0x45
 800232a:	2101      	movs	r1, #1
 800232c:	5499      	strb	r1, [r3, r2]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2246      	movs	r2, #70	; 0x46
 8002332:	2101      	movs	r1, #1
 8002334:	5499      	strb	r1, [r3, r2]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2247      	movs	r2, #71	; 0x47
 800233a:	2101      	movs	r1, #1
 800233c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	223d      	movs	r2, #61	; 0x3d
 8002342:	2101      	movs	r1, #1
 8002344:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	b002      	add	sp, #8
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	223d      	movs	r2, #61	; 0x3d
 800235c:	5c9b      	ldrb	r3, [r3, r2]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d001      	beq.n	8002368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e042      	b.n	80023ee <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	223d      	movs	r2, #61	; 0x3d
 800236c:	2102      	movs	r1, #2
 800236e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2101      	movs	r1, #1
 800237c:	430a      	orrs	r2, r1
 800237e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <HAL_TIM_Base_Start_IT+0xa8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00f      	beq.n	80023aa <HAL_TIM_Base_Start_IT+0x5a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	05db      	lsls	r3, r3, #23
 8002392:	429a      	cmp	r2, r3
 8002394:	d009      	beq.n	80023aa <HAL_TIM_Base_Start_IT+0x5a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a18      	ldr	r2, [pc, #96]	; (80023fc <HAL_TIM_Base_Start_IT+0xac>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d004      	beq.n	80023aa <HAL_TIM_Base_Start_IT+0x5a>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a16      	ldr	r2, [pc, #88]	; (8002400 <HAL_TIM_Base_Start_IT+0xb0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d116      	bne.n	80023d8 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a14      	ldr	r2, [pc, #80]	; (8002404 <HAL_TIM_Base_Start_IT+0xb4>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b06      	cmp	r3, #6
 80023ba:	d016      	beq.n	80023ea <HAL_TIM_Base_Start_IT+0x9a>
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	025b      	lsls	r3, r3, #9
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d011      	beq.n	80023ea <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2101      	movs	r1, #1
 80023d2:	430a      	orrs	r2, r1
 80023d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d6:	e008      	b.n	80023ea <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2101      	movs	r1, #1
 80023e4:	430a      	orrs	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e000      	b.n	80023ec <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ea:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	0018      	movs	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b004      	add	sp, #16
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	40012c00 	.word	0x40012c00
 80023fc:	40000400 	.word	0x40000400
 8002400:	40014000 	.word	0x40014000
 8002404:	00010007 	.word	0x00010007

08002408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2202      	movs	r2, #2
 8002418:	4013      	ands	r3, r2
 800241a:	2b02      	cmp	r3, #2
 800241c:	d124      	bne.n	8002468 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2202      	movs	r2, #2
 8002426:	4013      	ands	r3, r2
 8002428:	2b02      	cmp	r3, #2
 800242a:	d11d      	bne.n	8002468 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2203      	movs	r2, #3
 8002432:	4252      	negs	r2, r2
 8002434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	2203      	movs	r2, #3
 8002444:	4013      	ands	r3, r2
 8002446:	d004      	beq.n	8002452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	0018      	movs	r0, r3
 800244c:	f000 f9ec 	bl	8002828 <HAL_TIM_IC_CaptureCallback>
 8002450:	e007      	b.n	8002462 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	0018      	movs	r0, r3
 8002456:	f000 f9df 	bl	8002818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	0018      	movs	r0, r3
 800245e:	f000 f9eb 	bl	8002838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2204      	movs	r2, #4
 8002470:	4013      	ands	r3, r2
 8002472:	2b04      	cmp	r3, #4
 8002474:	d125      	bne.n	80024c2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2204      	movs	r2, #4
 800247e:	4013      	ands	r3, r2
 8002480:	2b04      	cmp	r3, #4
 8002482:	d11e      	bne.n	80024c2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2205      	movs	r2, #5
 800248a:	4252      	negs	r2, r2
 800248c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2202      	movs	r2, #2
 8002492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	699a      	ldr	r2, [r3, #24]
 800249a:	23c0      	movs	r3, #192	; 0xc0
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4013      	ands	r3, r2
 80024a0:	d004      	beq.n	80024ac <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f000 f9bf 	bl	8002828 <HAL_TIM_IC_CaptureCallback>
 80024aa:	e007      	b.n	80024bc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	0018      	movs	r0, r3
 80024b0:	f000 f9b2 	bl	8002818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	0018      	movs	r0, r3
 80024b8:	f000 f9be 	bl	8002838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2208      	movs	r2, #8
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d124      	bne.n	800251a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2208      	movs	r2, #8
 80024d8:	4013      	ands	r3, r2
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d11d      	bne.n	800251a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2209      	movs	r2, #9
 80024e4:	4252      	negs	r2, r2
 80024e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2204      	movs	r2, #4
 80024ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	2203      	movs	r2, #3
 80024f6:	4013      	ands	r3, r2
 80024f8:	d004      	beq.n	8002504 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	0018      	movs	r0, r3
 80024fe:	f000 f993 	bl	8002828 <HAL_TIM_IC_CaptureCallback>
 8002502:	e007      	b.n	8002514 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	0018      	movs	r0, r3
 8002508:	f000 f986 	bl	8002818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	0018      	movs	r0, r3
 8002510:	f000 f992 	bl	8002838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2210      	movs	r2, #16
 8002522:	4013      	ands	r3, r2
 8002524:	2b10      	cmp	r3, #16
 8002526:	d125      	bne.n	8002574 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2210      	movs	r2, #16
 8002530:	4013      	ands	r3, r2
 8002532:	2b10      	cmp	r3, #16
 8002534:	d11e      	bne.n	8002574 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2211      	movs	r2, #17
 800253c:	4252      	negs	r2, r2
 800253e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2208      	movs	r2, #8
 8002544:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	69da      	ldr	r2, [r3, #28]
 800254c:	23c0      	movs	r3, #192	; 0xc0
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4013      	ands	r3, r2
 8002552:	d004      	beq.n	800255e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	0018      	movs	r0, r3
 8002558:	f000 f966 	bl	8002828 <HAL_TIM_IC_CaptureCallback>
 800255c:	e007      	b.n	800256e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	0018      	movs	r0, r3
 8002562:	f000 f959 	bl	8002818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	0018      	movs	r0, r3
 800256a:	f000 f965 	bl	8002838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	2201      	movs	r2, #1
 800257c:	4013      	ands	r3, r2
 800257e:	2b01      	cmp	r3, #1
 8002580:	d10f      	bne.n	80025a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	4013      	ands	r3, r2
 800258c:	2b01      	cmp	r3, #1
 800258e:	d108      	bne.n	80025a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2202      	movs	r2, #2
 8002596:	4252      	negs	r2, r2
 8002598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	0018      	movs	r0, r3
 800259e:	f7fe f86f 	bl	8000680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	2280      	movs	r2, #128	; 0x80
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b80      	cmp	r3, #128	; 0x80
 80025ae:	d10f      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	2280      	movs	r2, #128	; 0x80
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b80      	cmp	r3, #128	; 0x80
 80025bc:	d108      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2281      	movs	r2, #129	; 0x81
 80025c4:	4252      	negs	r2, r2
 80025c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	0018      	movs	r0, r3
 80025cc:	f000 fad6 	bl	8002b7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	401a      	ands	r2, r3
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d10e      	bne.n	8002602 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2280      	movs	r2, #128	; 0x80
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b80      	cmp	r3, #128	; 0x80
 80025f0:	d107      	bne.n	8002602 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <HAL_TIM_IRQHandler+0x260>)
 80025f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 fac5 	bl	8002b8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	2240      	movs	r2, #64	; 0x40
 800260a:	4013      	ands	r3, r2
 800260c:	2b40      	cmp	r3, #64	; 0x40
 800260e:	d10f      	bne.n	8002630 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2240      	movs	r2, #64	; 0x40
 8002618:	4013      	ands	r3, r2
 800261a:	2b40      	cmp	r3, #64	; 0x40
 800261c:	d108      	bne.n	8002630 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2241      	movs	r2, #65	; 0x41
 8002624:	4252      	negs	r2, r2
 8002626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	0018      	movs	r0, r3
 800262c:	f000 f90c 	bl	8002848 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	2220      	movs	r2, #32
 8002638:	4013      	ands	r3, r2
 800263a:	2b20      	cmp	r3, #32
 800263c:	d10f      	bne.n	800265e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	2220      	movs	r2, #32
 8002646:	4013      	ands	r3, r2
 8002648:	2b20      	cmp	r3, #32
 800264a:	d108      	bne.n	800265e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2221      	movs	r2, #33	; 0x21
 8002652:	4252      	negs	r2, r2
 8002654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	0018      	movs	r0, r3
 800265a:	f000 fa87 	bl	8002b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	46bd      	mov	sp, r7
 8002662:	b002      	add	sp, #8
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	fffffeff 	.word	0xfffffeff

0800266c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002676:	230f      	movs	r3, #15
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	223c      	movs	r2, #60	; 0x3c
 8002682:	5c9b      	ldrb	r3, [r3, r2]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_TIM_ConfigClockSource+0x20>
 8002688:	2302      	movs	r3, #2
 800268a:	e0bc      	b.n	8002806 <HAL_TIM_ConfigClockSource+0x19a>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	223c      	movs	r2, #60	; 0x3c
 8002690:	2101      	movs	r1, #1
 8002692:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	223d      	movs	r2, #61	; 0x3d
 8002698:	2102      	movs	r1, #2
 800269a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4a5a      	ldr	r2, [pc, #360]	; (8002810 <HAL_TIM_ConfigClockSource+0x1a4>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4a59      	ldr	r2, [pc, #356]	; (8002814 <HAL_TIM_ConfigClockSource+0x1a8>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2280      	movs	r2, #128	; 0x80
 80026c2:	0192      	lsls	r2, r2, #6
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d040      	beq.n	800274a <HAL_TIM_ConfigClockSource+0xde>
 80026c8:	2280      	movs	r2, #128	; 0x80
 80026ca:	0192      	lsls	r2, r2, #6
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d900      	bls.n	80026d2 <HAL_TIM_ConfigClockSource+0x66>
 80026d0:	e088      	b.n	80027e4 <HAL_TIM_ConfigClockSource+0x178>
 80026d2:	2280      	movs	r2, #128	; 0x80
 80026d4:	0152      	lsls	r2, r2, #5
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d100      	bne.n	80026dc <HAL_TIM_ConfigClockSource+0x70>
 80026da:	e088      	b.n	80027ee <HAL_TIM_ConfigClockSource+0x182>
 80026dc:	2280      	movs	r2, #128	; 0x80
 80026de:	0152      	lsls	r2, r2, #5
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d900      	bls.n	80026e6 <HAL_TIM_ConfigClockSource+0x7a>
 80026e4:	e07e      	b.n	80027e4 <HAL_TIM_ConfigClockSource+0x178>
 80026e6:	2b70      	cmp	r3, #112	; 0x70
 80026e8:	d018      	beq.n	800271c <HAL_TIM_ConfigClockSource+0xb0>
 80026ea:	d900      	bls.n	80026ee <HAL_TIM_ConfigClockSource+0x82>
 80026ec:	e07a      	b.n	80027e4 <HAL_TIM_ConfigClockSource+0x178>
 80026ee:	2b60      	cmp	r3, #96	; 0x60
 80026f0:	d04f      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0x126>
 80026f2:	d900      	bls.n	80026f6 <HAL_TIM_ConfigClockSource+0x8a>
 80026f4:	e076      	b.n	80027e4 <HAL_TIM_ConfigClockSource+0x178>
 80026f6:	2b50      	cmp	r3, #80	; 0x50
 80026f8:	d03b      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0x106>
 80026fa:	d900      	bls.n	80026fe <HAL_TIM_ConfigClockSource+0x92>
 80026fc:	e072      	b.n	80027e4 <HAL_TIM_ConfigClockSource+0x178>
 80026fe:	2b40      	cmp	r3, #64	; 0x40
 8002700:	d057      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x146>
 8002702:	d900      	bls.n	8002706 <HAL_TIM_ConfigClockSource+0x9a>
 8002704:	e06e      	b.n	80027e4 <HAL_TIM_ConfigClockSource+0x178>
 8002706:	2b30      	cmp	r3, #48	; 0x30
 8002708:	d063      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x166>
 800270a:	d86b      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x178>
 800270c:	2b20      	cmp	r3, #32
 800270e:	d060      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x166>
 8002710:	d868      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x178>
 8002712:	2b00      	cmp	r3, #0
 8002714:	d05d      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x166>
 8002716:	2b10      	cmp	r3, #16
 8002718:	d05b      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x166>
 800271a:	e063      	b.n	80027e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6899      	ldr	r1, [r3, #8]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f000 f990 	bl	8002a50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2277      	movs	r2, #119	; 0x77
 800273c:	4313      	orrs	r3, r2
 800273e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	609a      	str	r2, [r3, #8]
      break;
 8002748:	e052      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	6899      	ldr	r1, [r3, #8]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f000 f979 	bl	8002a50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2180      	movs	r1, #128	; 0x80
 800276a:	01c9      	lsls	r1, r1, #7
 800276c:	430a      	orrs	r2, r1
 800276e:	609a      	str	r2, [r3, #8]
      break;
 8002770:	e03e      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	001a      	movs	r2, r3
 8002780:	f000 f8ea 	bl	8002958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2150      	movs	r1, #80	; 0x50
 800278a:	0018      	movs	r0, r3
 800278c:	f000 f944 	bl	8002a18 <TIM_ITRx_SetConfig>
      break;
 8002790:	e02e      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6859      	ldr	r1, [r3, #4]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	001a      	movs	r2, r3
 80027a0:	f000 f908 	bl	80029b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2160      	movs	r1, #96	; 0x60
 80027aa:	0018      	movs	r0, r3
 80027ac:	f000 f934 	bl	8002a18 <TIM_ITRx_SetConfig>
      break;
 80027b0:	e01e      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6859      	ldr	r1, [r3, #4]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	001a      	movs	r2, r3
 80027c0:	f000 f8ca 	bl	8002958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2140      	movs	r1, #64	; 0x40
 80027ca:	0018      	movs	r0, r3
 80027cc:	f000 f924 	bl	8002a18 <TIM_ITRx_SetConfig>
      break;
 80027d0:	e00e      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	0019      	movs	r1, r3
 80027dc:	0010      	movs	r0, r2
 80027de:	f000 f91b 	bl	8002a18 <TIM_ITRx_SetConfig>
      break;
 80027e2:	e005      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80027e4:	230f      	movs	r3, #15
 80027e6:	18fb      	adds	r3, r7, r3
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
      break;
 80027ec:	e000      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80027ee:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	223d      	movs	r2, #61	; 0x3d
 80027f4:	2101      	movs	r1, #1
 80027f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	223c      	movs	r2, #60	; 0x3c
 80027fc:	2100      	movs	r1, #0
 80027fe:	5499      	strb	r1, [r3, r2]

  return status;
 8002800:	230f      	movs	r3, #15
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	781b      	ldrb	r3, [r3, #0]
}
 8002806:	0018      	movs	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	b004      	add	sp, #16
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	ffceff88 	.word	0xffceff88
 8002814:	ffff00ff 	.word	0xffff00ff

08002818 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b002      	add	sp, #8
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	b002      	add	sp, #8
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002840:	46c0      	nop			; (mov r8, r8)
 8002842:	46bd      	mov	sp, r7
 8002844:	b002      	add	sp, #8
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002850:	46c0      	nop			; (mov r8, r8)
 8002852:	46bd      	mov	sp, r7
 8002854:	b002      	add	sp, #8
 8002856:	bd80      	pop	{r7, pc}

08002858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a34      	ldr	r2, [pc, #208]	; (800293c <TIM_Base_SetConfig+0xe4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d008      	beq.n	8002882 <TIM_Base_SetConfig+0x2a>
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	05db      	lsls	r3, r3, #23
 8002876:	429a      	cmp	r2, r3
 8002878:	d003      	beq.n	8002882 <TIM_Base_SetConfig+0x2a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a30      	ldr	r2, [pc, #192]	; (8002940 <TIM_Base_SetConfig+0xe8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d108      	bne.n	8002894 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2270      	movs	r2, #112	; 0x70
 8002886:	4393      	bics	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4313      	orrs	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a29      	ldr	r2, [pc, #164]	; (800293c <TIM_Base_SetConfig+0xe4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d018      	beq.n	80028ce <TIM_Base_SetConfig+0x76>
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	05db      	lsls	r3, r3, #23
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d013      	beq.n	80028ce <TIM_Base_SetConfig+0x76>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a25      	ldr	r2, [pc, #148]	; (8002940 <TIM_Base_SetConfig+0xe8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00f      	beq.n	80028ce <TIM_Base_SetConfig+0x76>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a24      	ldr	r2, [pc, #144]	; (8002944 <TIM_Base_SetConfig+0xec>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00b      	beq.n	80028ce <TIM_Base_SetConfig+0x76>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a23      	ldr	r2, [pc, #140]	; (8002948 <TIM_Base_SetConfig+0xf0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d007      	beq.n	80028ce <TIM_Base_SetConfig+0x76>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a22      	ldr	r2, [pc, #136]	; (800294c <TIM_Base_SetConfig+0xf4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d003      	beq.n	80028ce <TIM_Base_SetConfig+0x76>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a21      	ldr	r2, [pc, #132]	; (8002950 <TIM_Base_SetConfig+0xf8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d108      	bne.n	80028e0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4a20      	ldr	r2, [pc, #128]	; (8002954 <TIM_Base_SetConfig+0xfc>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4313      	orrs	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2280      	movs	r2, #128	; 0x80
 80028e4:	4393      	bics	r3, r2
 80028e6:	001a      	movs	r2, r3
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a0c      	ldr	r2, [pc, #48]	; (800293c <TIM_Base_SetConfig+0xe4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00b      	beq.n	8002926 <TIM_Base_SetConfig+0xce>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a0d      	ldr	r2, [pc, #52]	; (8002948 <TIM_Base_SetConfig+0xf0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d007      	beq.n	8002926 <TIM_Base_SetConfig+0xce>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a0c      	ldr	r2, [pc, #48]	; (800294c <TIM_Base_SetConfig+0xf4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d003      	beq.n	8002926 <TIM_Base_SetConfig+0xce>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a0b      	ldr	r2, [pc, #44]	; (8002950 <TIM_Base_SetConfig+0xf8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d103      	bne.n	800292e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	615a      	str	r2, [r3, #20]
}
 8002934:	46c0      	nop			; (mov r8, r8)
 8002936:	46bd      	mov	sp, r7
 8002938:	b004      	add	sp, #16
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40000400 	.word	0x40000400
 8002944:	40002000 	.word	0x40002000
 8002948:	40014000 	.word	0x40014000
 800294c:	40014400 	.word	0x40014400
 8002950:	40014800 	.word	0x40014800
 8002954:	fffffcff 	.word	0xfffffcff

08002958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	2201      	movs	r2, #1
 8002970:	4393      	bics	r3, r2
 8002972:	001a      	movs	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	22f0      	movs	r2, #240	; 0xf0
 8002982:	4393      	bics	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	220a      	movs	r2, #10
 8002994:	4393      	bics	r3, r2
 8002996:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	4313      	orrs	r3, r2
 800299e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	621a      	str	r2, [r3, #32]
}
 80029ac:	46c0      	nop			; (mov r8, r8)
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b006      	add	sp, #24
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	2210      	movs	r2, #16
 80029c6:	4393      	bics	r3, r2
 80029c8:	001a      	movs	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	4a0d      	ldr	r2, [pc, #52]	; (8002a14 <TIM_TI2_ConfigInputStage+0x60>)
 80029de:	4013      	ands	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	031b      	lsls	r3, r3, #12
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	22a0      	movs	r2, #160	; 0xa0
 80029f0:	4393      	bics	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	621a      	str	r2, [r3, #32]
}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b006      	add	sp, #24
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	ffff0fff 	.word	0xffff0fff

08002a18 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4a08      	ldr	r2, [pc, #32]	; (8002a4c <TIM_ITRx_SetConfig+0x34>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	2207      	movs	r2, #7
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	609a      	str	r2, [r3, #8]
}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	46bd      	mov	sp, r7
 8002a46:	b004      	add	sp, #16
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	ffcfff8f 	.word	0xffcfff8f

08002a50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <TIM_ETR_SetConfig+0x3c>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	021a      	lsls	r2, r3, #8
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	609a      	str	r2, [r3, #8]
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b006      	add	sp, #24
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	ffff00ff 	.word	0xffff00ff

08002a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	223c      	movs	r2, #60	; 0x3c
 8002a9e:	5c9b      	ldrb	r3, [r3, r2]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e055      	b.n	8002b54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	223c      	movs	r2, #60	; 0x3c
 8002aac:	2101      	movs	r1, #1
 8002aae:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	223d      	movs	r2, #61	; 0x3d
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a23      	ldr	r2, [pc, #140]	; (8002b5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d108      	bne.n	8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4a22      	ldr	r2, [pc, #136]	; (8002b60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2270      	movs	r2, #112	; 0x70
 8002ae8:	4393      	bics	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a16      	ldr	r2, [pc, #88]	; (8002b5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00f      	beq.n	8002b28 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	05db      	lsls	r3, r3, #23
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d009      	beq.n	8002b28 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a12      	ldr	r2, [pc, #72]	; (8002b64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d004      	beq.n	8002b28 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a11      	ldr	r2, [pc, #68]	; (8002b68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d10c      	bne.n	8002b42 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2280      	movs	r2, #128	; 0x80
 8002b2c:	4393      	bics	r3, r2
 8002b2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	223d      	movs	r2, #61	; 0x3d
 8002b46:	2101      	movs	r1, #1
 8002b48:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	223c      	movs	r2, #60	; 0x3c
 8002b4e:	2100      	movs	r1, #0
 8002b50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b004      	add	sp, #16
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40012c00 	.word	0x40012c00
 8002b60:	ff0fffff 	.word	0xff0fffff
 8002b64:	40000400 	.word	0x40000400
 8002b68:	40014000 	.word	0x40014000

08002b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b002      	add	sp, #8
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b94:	46c0      	nop			; (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b002      	add	sp, #8
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e046      	b.n	8002c3c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2284      	movs	r2, #132	; 0x84
 8002bb2:	589b      	ldr	r3, [r3, r2]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d107      	bne.n	8002bc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2280      	movs	r2, #128	; 0x80
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f7fd ff3e 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2284      	movs	r2, #132	; 0x84
 8002bcc:	2124      	movs	r1, #36	; 0x24
 8002bce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2101      	movs	r1, #1
 8002bdc:	438a      	bics	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 fc8c 	bl	8003500 <UART_SetConfig>
 8002be8:	0003      	movs	r3, r0
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e024      	b.n	8002c3c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f000 ff3d 	bl	8003a7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	490d      	ldr	r1, [pc, #52]	; (8002c44 <HAL_UART_Init+0xa8>)
 8002c0e:	400a      	ands	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	212a      	movs	r1, #42	; 0x2a
 8002c1e:	438a      	bics	r2, r1
 8002c20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	0018      	movs	r0, r3
 8002c36:	f000 ffd5 	bl	8003be4 <UART_CheckIdleState>
 8002c3a:	0003      	movs	r3, r0
}
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b002      	add	sp, #8
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	ffffb7ff 	.word	0xffffb7ff

08002c48 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08c      	sub	sp, #48	; 0x30
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	1dbb      	adds	r3, r7, #6
 8002c54:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2284      	movs	r2, #132	; 0x84
 8002c5a:	589b      	ldr	r3, [r3, r2]
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d000      	beq.n	8002c62 <HAL_UART_Transmit_IT+0x1a>
 8002c60:	e0a0      	b.n	8002da4 <HAL_UART_Transmit_IT+0x15c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_UART_Transmit_IT+0x28>
 8002c68:	1dbb      	adds	r3, r7, #6
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e098      	b.n	8002da6 <HAL_UART_Transmit_IT+0x15e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	2380      	movs	r3, #128	; 0x80
 8002c7a:	015b      	lsls	r3, r3, #5
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d109      	bne.n	8002c94 <HAL_UART_Transmit_IT+0x4c>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d105      	bne.n	8002c94 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d001      	beq.n	8002c94 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e088      	b.n	8002da6 <HAL_UART_Transmit_IT+0x15e>
      }
    }

    __HAL_LOCK(huart);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2280      	movs	r2, #128	; 0x80
 8002c98:	5c9b      	ldrb	r3, [r3, r2]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_UART_Transmit_IT+0x5a>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e081      	b.n	8002da6 <HAL_UART_Transmit_IT+0x15e>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2280      	movs	r2, #128	; 0x80
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1dba      	adds	r2, r7, #6
 8002cb4:	2154      	movs	r1, #84	; 0x54
 8002cb6:	8812      	ldrh	r2, [r2, #0]
 8002cb8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1dba      	adds	r2, r7, #6
 8002cbe:	2156      	movs	r1, #86	; 0x56
 8002cc0:	8812      	ldrh	r2, [r2, #0]
 8002cc2:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	228c      	movs	r2, #140	; 0x8c
 8002cce:	2100      	movs	r1, #0
 8002cd0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2284      	movs	r2, #132	; 0x84
 8002cd6:	2121      	movs	r1, #33	; 0x21
 8002cd8:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002cde:	2380      	movs	r3, #128	; 0x80
 8002ce0:	059b      	lsls	r3, r3, #22
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d12e      	bne.n	8002d44 <HAL_UART_Transmit_IT+0xfc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	015b      	lsls	r3, r3, #5
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d107      	bne.n	8002d02 <HAL_UART_Transmit_IT+0xba>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d103      	bne.n	8002d02 <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4a2c      	ldr	r2, [pc, #176]	; (8002db0 <HAL_UART_Transmit_IT+0x168>)
 8002cfe:	675a      	str	r2, [r3, #116]	; 0x74
 8002d00:	e002      	b.n	8002d08 <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4a2b      	ldr	r2, [pc, #172]	; (8002db4 <HAL_UART_Transmit_IT+0x16c>)
 8002d06:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2280      	movs	r2, #128	; 0x80
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d10:	f3ef 8310 	mrs	r3, PRIMASK
 8002d14:	61fb      	str	r3, [r7, #28]
  return(result);
 8002d16:	69fb      	ldr	r3, [r7, #28]

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	f383 8810 	msr	PRIMASK, r3
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2180      	movs	r1, #128	; 0x80
 8002d32:	0409      	lsls	r1, r1, #16
 8002d34:	430a      	orrs	r2, r1
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	f383 8810 	msr	PRIMASK, r3
}
 8002d42:	e02d      	b.n	8002da0 <HAL_UART_Transmit_IT+0x158>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	015b      	lsls	r3, r3, #5
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d107      	bne.n	8002d60 <HAL_UART_Transmit_IT+0x118>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d103      	bne.n	8002d60 <HAL_UART_Transmit_IT+0x118>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4a17      	ldr	r2, [pc, #92]	; (8002db8 <HAL_UART_Transmit_IT+0x170>)
 8002d5c:	675a      	str	r2, [r3, #116]	; 0x74
 8002d5e:	e002      	b.n	8002d66 <HAL_UART_Transmit_IT+0x11e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a16      	ldr	r2, [pc, #88]	; (8002dbc <HAL_UART_Transmit_IT+0x174>)
 8002d64:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d72:	613b      	str	r3, [r7, #16]
  return(result);
 8002d74:	693b      	ldr	r3, [r7, #16]

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d78:	2301      	movs	r3, #1
 8002d7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f383 8810 	msr	PRIMASK, r3
}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2180      	movs	r1, #128	; 0x80
 8002d90:	430a      	orrs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	f383 8810 	msr	PRIMASK, r3
}
 8002d9e:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	e000      	b.n	8002da6 <HAL_UART_Transmit_IT+0x15e>
  }
  else
  {
    return HAL_BUSY;
 8002da4:	2302      	movs	r3, #2
  }
}
 8002da6:	0018      	movs	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b00c      	add	sp, #48	; 0x30
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	080043b9 	.word	0x080043b9
 8002db4:	080042cd 	.word	0x080042cd
 8002db8:	0800420f 	.word	0x0800420f
 8002dbc:	0800415b 	.word	0x0800415b

08002dc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	1dbb      	adds	r3, r7, #6
 8002dcc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2288      	movs	r2, #136	; 0x88
 8002dd2:	589b      	ldr	r3, [r3, r2]
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d155      	bne.n	8002e84 <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_UART_Receive_IT+0x26>
 8002dde:	1dbb      	adds	r3, r7, #6
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e04d      	b.n	8002e86 <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	015b      	lsls	r3, r3, #5
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d109      	bne.n	8002e0a <HAL_UART_Receive_IT+0x4a>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d105      	bne.n	8002e0a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2201      	movs	r2, #1
 8002e02:	4013      	ands	r3, r2
 8002e04:	d001      	beq.n	8002e0a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e03d      	b.n	8002e86 <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2280      	movs	r2, #128	; 0x80
 8002e0e:	5c9b      	ldrb	r3, [r3, r2]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_UART_Receive_IT+0x58>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e036      	b.n	8002e86 <HAL_UART_Receive_IT+0xc6>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2280      	movs	r2, #128	; 0x80
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a19      	ldr	r2, [pc, #100]	; (8002e90 <HAL_UART_Receive_IT+0xd0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d020      	beq.n	8002e72 <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	2380      	movs	r3, #128	; 0x80
 8002e38:	041b      	lsls	r3, r3, #16
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d019      	beq.n	8002e72 <HAL_UART_Receive_IT+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e42:	613b      	str	r3, [r7, #16]
  return(result);
 8002e44:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e46:	61fb      	str	r3, [r7, #28]
 8002e48:	2301      	movs	r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f383 8810 	msr	PRIMASK, r3
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2180      	movs	r1, #128	; 0x80
 8002e60:	04c9      	lsls	r1, r1, #19
 8002e62:	430a      	orrs	r2, r1
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	f383 8810 	msr	PRIMASK, r3
}
 8002e70:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e72:	1dbb      	adds	r3, r7, #6
 8002e74:	881a      	ldrh	r2, [r3, #0]
 8002e76:	68b9      	ldr	r1, [r7, #8]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 ffc4 	bl	8003e08 <UART_Start_Receive_IT>
 8002e80:	0003      	movs	r3, r0
 8002e82:	e000      	b.n	8002e86 <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
  }
}
 8002e86:	0018      	movs	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b008      	add	sp, #32
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	40008000 	.word	0x40008000

08002e94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e94:	b5b0      	push	{r4, r5, r7, lr}
 8002e96:	b0aa      	sub	sp, #168	; 0xa8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	22a4      	movs	r2, #164	; 0xa4
 8002ea4:	18b9      	adds	r1, r7, r2
 8002ea6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	20a0      	movs	r0, #160	; 0xa0
 8002eb0:	1839      	adds	r1, r7, r0
 8002eb2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	249c      	movs	r4, #156	; 0x9c
 8002ebc:	1939      	adds	r1, r7, r4
 8002ebe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ec0:	0011      	movs	r1, r2
 8002ec2:	18bb      	adds	r3, r7, r2
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4aa0      	ldr	r2, [pc, #640]	; (8003148 <HAL_UART_IRQHandler+0x2b4>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2298      	movs	r2, #152	; 0x98
 8002ecc:	18bd      	adds	r5, r7, r2
 8002ece:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002ed0:	18bb      	adds	r3, r7, r2
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d11a      	bne.n	8002f0e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002ed8:	187b      	adds	r3, r7, r1
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2220      	movs	r2, #32
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d015      	beq.n	8002f0e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002ee2:	183b      	adds	r3, r7, r0
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d105      	bne.n	8002ef8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002eec:	193b      	adds	r3, r7, r4
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	055b      	lsls	r3, r3, #21
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d00a      	beq.n	8002f0e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d100      	bne.n	8002f02 <HAL_UART_IRQHandler+0x6e>
 8002f00:	e2cf      	b.n	80034a2 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	0010      	movs	r0, r2
 8002f0a:	4798      	blx	r3
      }
      return;
 8002f0c:	e2c9      	b.n	80034a2 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f0e:	2398      	movs	r3, #152	; 0x98
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d100      	bne.n	8002f1a <HAL_UART_IRQHandler+0x86>
 8002f18:	e11e      	b.n	8003158 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002f1a:	239c      	movs	r3, #156	; 0x9c
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a8a      	ldr	r2, [pc, #552]	; (800314c <HAL_UART_IRQHandler+0x2b8>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	d106      	bne.n	8002f34 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002f26:	23a0      	movs	r3, #160	; 0xa0
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a88      	ldr	r2, [pc, #544]	; (8003150 <HAL_UART_IRQHandler+0x2bc>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d100      	bne.n	8002f34 <HAL_UART_IRQHandler+0xa0>
 8002f32:	e111      	b.n	8003158 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f34:	23a4      	movs	r3, #164	; 0xa4
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d012      	beq.n	8002f66 <HAL_UART_IRQHandler+0xd2>
 8002f40:	23a0      	movs	r3, #160	; 0xa0
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d00b      	beq.n	8002f66 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2201      	movs	r2, #1
 8002f54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	228c      	movs	r2, #140	; 0x8c
 8002f5a:	589b      	ldr	r3, [r3, r2]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	218c      	movs	r1, #140	; 0x8c
 8002f64:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f66:	23a4      	movs	r3, #164	; 0xa4
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d011      	beq.n	8002f96 <HAL_UART_IRQHandler+0x102>
 8002f72:	239c      	movs	r3, #156	; 0x9c
 8002f74:	18fb      	adds	r3, r7, r3
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d00b      	beq.n	8002f96 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2202      	movs	r2, #2
 8002f84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	228c      	movs	r2, #140	; 0x8c
 8002f8a:	589b      	ldr	r3, [r3, r2]
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	218c      	movs	r1, #140	; 0x8c
 8002f94:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f96:	23a4      	movs	r3, #164	; 0xa4
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2204      	movs	r2, #4
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d011      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x132>
 8002fa2:	239c      	movs	r3, #156	; 0x9c
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4013      	ands	r3, r2
 8002fac:	d00b      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	228c      	movs	r2, #140	; 0x8c
 8002fba:	589b      	ldr	r3, [r3, r2]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	218c      	movs	r1, #140	; 0x8c
 8002fc4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fc6:	23a4      	movs	r3, #164	; 0xa4
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2208      	movs	r2, #8
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d017      	beq.n	8003002 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002fd2:	23a0      	movs	r3, #160	; 0xa0
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d105      	bne.n	8002fea <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002fde:	239c      	movs	r3, #156	; 0x9c
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a59      	ldr	r2, [pc, #356]	; (800314c <HAL_UART_IRQHandler+0x2b8>)
 8002fe6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002fe8:	d00b      	beq.n	8003002 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2208      	movs	r2, #8
 8002ff0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	228c      	movs	r2, #140	; 0x8c
 8002ff6:	589b      	ldr	r3, [r3, r2]
 8002ff8:	2208      	movs	r2, #8
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	218c      	movs	r1, #140	; 0x8c
 8003000:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003002:	23a4      	movs	r3, #164	; 0xa4
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	4013      	ands	r3, r2
 800300e:	d013      	beq.n	8003038 <HAL_UART_IRQHandler+0x1a4>
 8003010:	23a0      	movs	r3, #160	; 0xa0
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	2380      	movs	r3, #128	; 0x80
 8003018:	04db      	lsls	r3, r3, #19
 800301a:	4013      	ands	r3, r2
 800301c:	d00c      	beq.n	8003038 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2280      	movs	r2, #128	; 0x80
 8003024:	0112      	lsls	r2, r2, #4
 8003026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	228c      	movs	r2, #140	; 0x8c
 800302c:	589b      	ldr	r3, [r3, r2]
 800302e:	2220      	movs	r2, #32
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	218c      	movs	r1, #140	; 0x8c
 8003036:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	228c      	movs	r2, #140	; 0x8c
 800303c:	589b      	ldr	r3, [r3, r2]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d100      	bne.n	8003044 <HAL_UART_IRQHandler+0x1b0>
 8003042:	e230      	b.n	80034a6 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003044:	23a4      	movs	r3, #164	; 0xa4
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2220      	movs	r2, #32
 800304c:	4013      	ands	r3, r2
 800304e:	d015      	beq.n	800307c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003050:	23a0      	movs	r3, #160	; 0xa0
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2220      	movs	r2, #32
 8003058:	4013      	ands	r3, r2
 800305a:	d106      	bne.n	800306a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800305c:	239c      	movs	r3, #156	; 0x9c
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	055b      	lsls	r3, r3, #21
 8003066:	4013      	ands	r3, r2
 8003068:	d008      	beq.n	800307c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	2b00      	cmp	r3, #0
 8003070:	d004      	beq.n	800307c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	0010      	movs	r0, r2
 800307a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	228c      	movs	r2, #140	; 0x8c
 8003080:	589b      	ldr	r3, [r3, r2]
 8003082:	2194      	movs	r1, #148	; 0x94
 8003084:	187a      	adds	r2, r7, r1
 8003086:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2240      	movs	r2, #64	; 0x40
 8003090:	4013      	ands	r3, r2
 8003092:	2b40      	cmp	r3, #64	; 0x40
 8003094:	d004      	beq.n	80030a0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003096:	187b      	adds	r3, r7, r1
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2228      	movs	r2, #40	; 0x28
 800309c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800309e:	d047      	beq.n	8003130 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	0018      	movs	r0, r3
 80030a4:	f000 ffdc 	bl	8004060 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2240      	movs	r2, #64	; 0x40
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b40      	cmp	r3, #64	; 0x40
 80030b4:	d137      	bne.n	8003126 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b6:	f3ef 8310 	mrs	r3, PRIMASK
 80030ba:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80030bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030be:	2090      	movs	r0, #144	; 0x90
 80030c0:	183a      	adds	r2, r7, r0
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	2301      	movs	r3, #1
 80030c6:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ca:	f383 8810 	msr	PRIMASK, r3
}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2140      	movs	r1, #64	; 0x40
 80030dc:	438a      	bics	r2, r1
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	183b      	adds	r3, r7, r0
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030e8:	f383 8810 	msr	PRIMASK, r3
}
 80030ec:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d012      	beq.n	800311c <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030fa:	4a16      	ldr	r2, [pc, #88]	; (8003154 <HAL_UART_IRQHandler+0x2c0>)
 80030fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003102:	0018      	movs	r0, r3
 8003104:	f7fe f818 	bl	8001138 <HAL_DMA_Abort_IT>
 8003108:	1e03      	subs	r3, r0, #0
 800310a:	d01a      	beq.n	8003142 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003116:	0018      	movs	r0, r3
 8003118:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800311a:	e012      	b.n	8003142 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	0018      	movs	r0, r3
 8003120:	f000 f9da 	bl	80034d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003124:	e00d      	b.n	8003142 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	0018      	movs	r0, r3
 800312a:	f000 f9d5 	bl	80034d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800312e:	e008      	b.n	8003142 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	0018      	movs	r0, r3
 8003134:	f000 f9d0 	bl	80034d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	228c      	movs	r2, #140	; 0x8c
 800313c:	2100      	movs	r1, #0
 800313e:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003140:	e1b1      	b.n	80034a6 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003142:	46c0      	nop			; (mov r8, r8)
    return;
 8003144:	e1af      	b.n	80034a6 <HAL_UART_IRQHandler+0x612>
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	0000080f 	.word	0x0000080f
 800314c:	10000001 	.word	0x10000001
 8003150:	04000120 	.word	0x04000120
 8003154:	0800412d 	.word	0x0800412d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800315c:	2b01      	cmp	r3, #1
 800315e:	d000      	beq.n	8003162 <HAL_UART_IRQHandler+0x2ce>
 8003160:	e135      	b.n	80033ce <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003162:	23a4      	movs	r3, #164	; 0xa4
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2210      	movs	r2, #16
 800316a:	4013      	ands	r3, r2
 800316c:	d100      	bne.n	8003170 <HAL_UART_IRQHandler+0x2dc>
 800316e:	e12e      	b.n	80033ce <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003170:	23a0      	movs	r3, #160	; 0xa0
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2210      	movs	r2, #16
 8003178:	4013      	ands	r3, r2
 800317a:	d100      	bne.n	800317e <HAL_UART_IRQHandler+0x2ea>
 800317c:	e127      	b.n	80033ce <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2210      	movs	r2, #16
 8003184:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2240      	movs	r2, #64	; 0x40
 800318e:	4013      	ands	r3, r2
 8003190:	2b40      	cmp	r3, #64	; 0x40
 8003192:	d000      	beq.n	8003196 <HAL_UART_IRQHandler+0x302>
 8003194:	e09e      	b.n	80032d4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	217e      	movs	r1, #126	; 0x7e
 80031a0:	187b      	adds	r3, r7, r1
 80031a2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80031a4:	187b      	adds	r3, r7, r1
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d100      	bne.n	80031ae <HAL_UART_IRQHandler+0x31a>
 80031ac:	e17d      	b.n	80034aa <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	225c      	movs	r2, #92	; 0x5c
 80031b2:	5a9b      	ldrh	r3, [r3, r2]
 80031b4:	187a      	adds	r2, r7, r1
 80031b6:	8812      	ldrh	r2, [r2, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d300      	bcc.n	80031be <HAL_UART_IRQHandler+0x32a>
 80031bc:	e175      	b.n	80034aa <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	187a      	adds	r2, r7, r1
 80031c2:	215e      	movs	r1, #94	; 0x5e
 80031c4:	8812      	ldrh	r2, [r2, #0]
 80031c6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2220      	movs	r2, #32
 80031d2:	4013      	ands	r3, r2
 80031d4:	d16f      	bne.n	80032b6 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031d6:	f3ef 8310 	mrs	r3, PRIMASK
 80031da:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031de:	67bb      	str	r3, [r7, #120]	; 0x78
 80031e0:	2301      	movs	r3, #1
 80031e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e6:	f383 8810 	msr	PRIMASK, r3
}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	49b1      	ldr	r1, [pc, #708]	; (80034bc <HAL_UART_IRQHandler+0x628>)
 80031f8:	400a      	ands	r2, r1
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003202:	f383 8810 	msr	PRIMASK, r3
}
 8003206:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003208:	f3ef 8310 	mrs	r3, PRIMASK
 800320c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800320e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003210:	677b      	str	r3, [r7, #116]	; 0x74
 8003212:	2301      	movs	r3, #1
 8003214:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003218:	f383 8810 	msr	PRIMASK, r3
}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2101      	movs	r1, #1
 800322a:	438a      	bics	r2, r1
 800322c:	609a      	str	r2, [r3, #8]
 800322e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003230:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003234:	f383 8810 	msr	PRIMASK, r3
}
 8003238:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800323a:	f3ef 8310 	mrs	r3, PRIMASK
 800323e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003240:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003242:	673b      	str	r3, [r7, #112]	; 0x70
 8003244:	2301      	movs	r3, #1
 8003246:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800324a:	f383 8810 	msr	PRIMASK, r3
}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2140      	movs	r1, #64	; 0x40
 800325c:	438a      	bics	r2, r1
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003262:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003266:	f383 8810 	msr	PRIMASK, r3
}
 800326a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2288      	movs	r2, #136	; 0x88
 8003270:	2120      	movs	r1, #32
 8003272:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800327a:	f3ef 8310 	mrs	r3, PRIMASK
 800327e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003280:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003282:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003284:	2301      	movs	r3, #1
 8003286:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003288:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800328a:	f383 8810 	msr	PRIMASK, r3
}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2110      	movs	r1, #16
 800329c:	438a      	bics	r2, r1
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a6:	f383 8810 	msr	PRIMASK, r3
}
 80032aa:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7fd fedf 	bl	8001074 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	225c      	movs	r2, #92	; 0x5c
 80032ba:	5a9a      	ldrh	r2, [r3, r2]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	215e      	movs	r1, #94	; 0x5e
 80032c0:	5a5b      	ldrh	r3, [r3, r1]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	0011      	movs	r1, r2
 80032cc:	0018      	movs	r0, r3
 80032ce:	f000 f90b 	bl	80034e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032d2:	e0ea      	b.n	80034aa <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	225c      	movs	r2, #92	; 0x5c
 80032d8:	5a99      	ldrh	r1, [r3, r2]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	225e      	movs	r2, #94	; 0x5e
 80032de:	5a9b      	ldrh	r3, [r3, r2]
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	208e      	movs	r0, #142	; 0x8e
 80032e4:	183b      	adds	r3, r7, r0
 80032e6:	1a8a      	subs	r2, r1, r2
 80032e8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	225e      	movs	r2, #94	; 0x5e
 80032ee:	5a9b      	ldrh	r3, [r3, r2]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d100      	bne.n	80032f8 <HAL_UART_IRQHandler+0x464>
 80032f6:	e0da      	b.n	80034ae <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 80032f8:	183b      	adds	r3, r7, r0
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d100      	bne.n	8003302 <HAL_UART_IRQHandler+0x46e>
 8003300:	e0d5      	b.n	80034ae <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003302:	f3ef 8310 	mrs	r3, PRIMASK
 8003306:	60fb      	str	r3, [r7, #12]
  return(result);
 8003308:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800330a:	2488      	movs	r4, #136	; 0x88
 800330c:	193a      	adds	r2, r7, r4
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	2301      	movs	r3, #1
 8003312:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f383 8810 	msr	PRIMASK, r3
}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4966      	ldr	r1, [pc, #408]	; (80034c0 <HAL_UART_IRQHandler+0x62c>)
 8003328:	400a      	ands	r2, r1
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	193b      	adds	r3, r7, r4
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f383 8810 	msr	PRIMASK, r3
}
 8003338:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800333a:	f3ef 8310 	mrs	r3, PRIMASK
 800333e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003340:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003342:	2484      	movs	r4, #132	; 0x84
 8003344:	193a      	adds	r2, r7, r4
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	2301      	movs	r3, #1
 800334a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f383 8810 	msr	PRIMASK, r3
}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4959      	ldr	r1, [pc, #356]	; (80034c4 <HAL_UART_IRQHandler+0x630>)
 8003360:	400a      	ands	r2, r1
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	193b      	adds	r3, r7, r4
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	f383 8810 	msr	PRIMASK, r3
}
 8003370:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2288      	movs	r2, #136	; 0x88
 8003376:	2120      	movs	r1, #32
 8003378:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003386:	f3ef 8310 	mrs	r3, PRIMASK
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800338e:	2480      	movs	r4, #128	; 0x80
 8003390:	193a      	adds	r2, r7, r4
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	2301      	movs	r3, #1
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339a:	f383 8810 	msr	PRIMASK, r3
}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2110      	movs	r1, #16
 80033ac:	438a      	bics	r2, r1
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	193b      	adds	r3, r7, r4
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	f383 8810 	msr	PRIMASK, r3
}
 80033bc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033be:	183b      	adds	r3, r7, r0
 80033c0:	881a      	ldrh	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	0011      	movs	r1, r2
 80033c6:	0018      	movs	r0, r3
 80033c8:	f000 f88e 	bl	80034e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033cc:	e06f      	b.n	80034ae <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033ce:	23a4      	movs	r3, #164	; 0xa4
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	2380      	movs	r3, #128	; 0x80
 80033d6:	035b      	lsls	r3, r3, #13
 80033d8:	4013      	ands	r3, r2
 80033da:	d010      	beq.n	80033fe <HAL_UART_IRQHandler+0x56a>
 80033dc:	239c      	movs	r3, #156	; 0x9c
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	03db      	lsls	r3, r3, #15
 80033e6:	4013      	ands	r3, r2
 80033e8:	d009      	beq.n	80033fe <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2280      	movs	r2, #128	; 0x80
 80033f0:	0352      	lsls	r2, r2, #13
 80033f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	0018      	movs	r0, r3
 80033f8:	f001 fcd4 	bl	8004da4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033fc:	e05a      	b.n	80034b4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80033fe:	23a4      	movs	r3, #164	; 0xa4
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2280      	movs	r2, #128	; 0x80
 8003406:	4013      	ands	r3, r2
 8003408:	d016      	beq.n	8003438 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800340a:	23a0      	movs	r3, #160	; 0xa0
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2280      	movs	r2, #128	; 0x80
 8003412:	4013      	ands	r3, r2
 8003414:	d106      	bne.n	8003424 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003416:	239c      	movs	r3, #156	; 0x9c
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	041b      	lsls	r3, r3, #16
 8003420:	4013      	ands	r3, r2
 8003422:	d009      	beq.n	8003438 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003428:	2b00      	cmp	r3, #0
 800342a:	d042      	beq.n	80034b2 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	0010      	movs	r0, r2
 8003434:	4798      	blx	r3
    }
    return;
 8003436:	e03c      	b.n	80034b2 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003438:	23a4      	movs	r3, #164	; 0xa4
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2240      	movs	r2, #64	; 0x40
 8003440:	4013      	ands	r3, r2
 8003442:	d00a      	beq.n	800345a <HAL_UART_IRQHandler+0x5c6>
 8003444:	23a0      	movs	r3, #160	; 0xa0
 8003446:	18fb      	adds	r3, r7, r3
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2240      	movs	r2, #64	; 0x40
 800344c:	4013      	ands	r3, r2
 800344e:	d004      	beq.n	800345a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	0018      	movs	r0, r3
 8003454:	f001 f82a 	bl	80044ac <UART_EndTransmit_IT>
    return;
 8003458:	e02c      	b.n	80034b4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800345a:	23a4      	movs	r3, #164	; 0xa4
 800345c:	18fb      	adds	r3, r7, r3
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	041b      	lsls	r3, r3, #16
 8003464:	4013      	ands	r3, r2
 8003466:	d00b      	beq.n	8003480 <HAL_UART_IRQHandler+0x5ec>
 8003468:	23a0      	movs	r3, #160	; 0xa0
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	05db      	lsls	r3, r3, #23
 8003472:	4013      	ands	r3, r2
 8003474:	d004      	beq.n	8003480 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	0018      	movs	r0, r3
 800347a:	f001 fca3 	bl	8004dc4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800347e:	e019      	b.n	80034b4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003480:	23a4      	movs	r3, #164	; 0xa4
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	045b      	lsls	r3, r3, #17
 800348a:	4013      	ands	r3, r2
 800348c:	d012      	beq.n	80034b4 <HAL_UART_IRQHandler+0x620>
 800348e:	23a0      	movs	r3, #160	; 0xa0
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	da0d      	bge.n	80034b4 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	0018      	movs	r0, r3
 800349c:	f001 fc8a 	bl	8004db4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034a0:	e008      	b.n	80034b4 <HAL_UART_IRQHandler+0x620>
      return;
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	e006      	b.n	80034b4 <HAL_UART_IRQHandler+0x620>
    return;
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	e004      	b.n	80034b4 <HAL_UART_IRQHandler+0x620>
      return;
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	e002      	b.n	80034b4 <HAL_UART_IRQHandler+0x620>
      return;
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	e000      	b.n	80034b4 <HAL_UART_IRQHandler+0x620>
    return;
 80034b2:	46c0      	nop			; (mov r8, r8)
  }
}
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b02a      	add	sp, #168	; 0xa8
 80034b8:	bdb0      	pop	{r4, r5, r7, pc}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	fffffeff 	.word	0xfffffeff
 80034c0:	fffffedf 	.word	0xfffffedf
 80034c4:	effffffe 	.word	0xeffffffe

080034c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b002      	add	sp, #8
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034e0:	46c0      	nop			; (mov r8, r8)
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b002      	add	sp, #8
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	000a      	movs	r2, r1
 80034f2:	1cbb      	adds	r3, r7, #2
 80034f4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b002      	add	sp, #8
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003500:	b5b0      	push	{r4, r5, r7, lr}
 8003502:	b090      	sub	sp, #64	; 0x40
 8003504:	af00      	add	r7, sp, #0
 8003506:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003508:	231a      	movs	r3, #26
 800350a:	2220      	movs	r2, #32
 800350c:	189b      	adds	r3, r3, r2
 800350e:	19db      	adds	r3, r3, r7
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	431a      	orrs	r2, r3
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	431a      	orrs	r2, r3
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	4313      	orrs	r3, r2
 800352a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4aaf      	ldr	r2, [pc, #700]	; (80037f0 <UART_SetConfig+0x2f0>)
 8003534:	4013      	ands	r3, r2
 8003536:	0019      	movs	r1, r3
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353e:	430b      	orrs	r3, r1
 8003540:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	4aaa      	ldr	r2, [pc, #680]	; (80037f4 <UART_SetConfig+0x2f4>)
 800354a:	4013      	ands	r3, r2
 800354c:	0018      	movs	r0, r3
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	68d9      	ldr	r1, [r3, #12]
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	0003      	movs	r3, r0
 8003558:	430b      	orrs	r3, r1
 800355a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4aa4      	ldr	r2, [pc, #656]	; (80037f8 <UART_SetConfig+0x2f8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d004      	beq.n	8003576 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003572:	4313      	orrs	r3, r2
 8003574:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4a9f      	ldr	r2, [pc, #636]	; (80037fc <UART_SetConfig+0x2fc>)
 800357e:	4013      	ands	r3, r2
 8003580:	0019      	movs	r1, r3
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003588:	430b      	orrs	r3, r1
 800358a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	220f      	movs	r2, #15
 8003594:	4393      	bics	r3, r2
 8003596:	0018      	movs	r0, r3
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	0003      	movs	r3, r0
 80035a2:	430b      	orrs	r3, r1
 80035a4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a95      	ldr	r2, [pc, #596]	; (8003800 <UART_SetConfig+0x300>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d131      	bne.n	8003614 <UART_SetConfig+0x114>
 80035b0:	4b94      	ldr	r3, [pc, #592]	; (8003804 <UART_SetConfig+0x304>)
 80035b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b4:	2203      	movs	r2, #3
 80035b6:	4013      	ands	r3, r2
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d01d      	beq.n	80035f8 <UART_SetConfig+0xf8>
 80035bc:	d823      	bhi.n	8003606 <UART_SetConfig+0x106>
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d00c      	beq.n	80035dc <UART_SetConfig+0xdc>
 80035c2:	d820      	bhi.n	8003606 <UART_SetConfig+0x106>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <UART_SetConfig+0xce>
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d00e      	beq.n	80035ea <UART_SetConfig+0xea>
 80035cc:	e01b      	b.n	8003606 <UART_SetConfig+0x106>
 80035ce:	231b      	movs	r3, #27
 80035d0:	2220      	movs	r2, #32
 80035d2:	189b      	adds	r3, r3, r2
 80035d4:	19db      	adds	r3, r3, r7
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	e0b4      	b.n	8003746 <UART_SetConfig+0x246>
 80035dc:	231b      	movs	r3, #27
 80035de:	2220      	movs	r2, #32
 80035e0:	189b      	adds	r3, r3, r2
 80035e2:	19db      	adds	r3, r3, r7
 80035e4:	2202      	movs	r2, #2
 80035e6:	701a      	strb	r2, [r3, #0]
 80035e8:	e0ad      	b.n	8003746 <UART_SetConfig+0x246>
 80035ea:	231b      	movs	r3, #27
 80035ec:	2220      	movs	r2, #32
 80035ee:	189b      	adds	r3, r3, r2
 80035f0:	19db      	adds	r3, r3, r7
 80035f2:	2204      	movs	r2, #4
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	e0a6      	b.n	8003746 <UART_SetConfig+0x246>
 80035f8:	231b      	movs	r3, #27
 80035fa:	2220      	movs	r2, #32
 80035fc:	189b      	adds	r3, r3, r2
 80035fe:	19db      	adds	r3, r3, r7
 8003600:	2208      	movs	r2, #8
 8003602:	701a      	strb	r2, [r3, #0]
 8003604:	e09f      	b.n	8003746 <UART_SetConfig+0x246>
 8003606:	231b      	movs	r3, #27
 8003608:	2220      	movs	r2, #32
 800360a:	189b      	adds	r3, r3, r2
 800360c:	19db      	adds	r3, r3, r7
 800360e:	2210      	movs	r2, #16
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	e098      	b.n	8003746 <UART_SetConfig+0x246>
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a7b      	ldr	r2, [pc, #492]	; (8003808 <UART_SetConfig+0x308>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d131      	bne.n	8003682 <UART_SetConfig+0x182>
 800361e:	4b79      	ldr	r3, [pc, #484]	; (8003804 <UART_SetConfig+0x304>)
 8003620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003622:	220c      	movs	r2, #12
 8003624:	4013      	ands	r3, r2
 8003626:	2b0c      	cmp	r3, #12
 8003628:	d01d      	beq.n	8003666 <UART_SetConfig+0x166>
 800362a:	d823      	bhi.n	8003674 <UART_SetConfig+0x174>
 800362c:	2b08      	cmp	r3, #8
 800362e:	d00c      	beq.n	800364a <UART_SetConfig+0x14a>
 8003630:	d820      	bhi.n	8003674 <UART_SetConfig+0x174>
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <UART_SetConfig+0x13c>
 8003636:	2b04      	cmp	r3, #4
 8003638:	d00e      	beq.n	8003658 <UART_SetConfig+0x158>
 800363a:	e01b      	b.n	8003674 <UART_SetConfig+0x174>
 800363c:	231b      	movs	r3, #27
 800363e:	2220      	movs	r2, #32
 8003640:	189b      	adds	r3, r3, r2
 8003642:	19db      	adds	r3, r3, r7
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	e07d      	b.n	8003746 <UART_SetConfig+0x246>
 800364a:	231b      	movs	r3, #27
 800364c:	2220      	movs	r2, #32
 800364e:	189b      	adds	r3, r3, r2
 8003650:	19db      	adds	r3, r3, r7
 8003652:	2202      	movs	r2, #2
 8003654:	701a      	strb	r2, [r3, #0]
 8003656:	e076      	b.n	8003746 <UART_SetConfig+0x246>
 8003658:	231b      	movs	r3, #27
 800365a:	2220      	movs	r2, #32
 800365c:	189b      	adds	r3, r3, r2
 800365e:	19db      	adds	r3, r3, r7
 8003660:	2204      	movs	r2, #4
 8003662:	701a      	strb	r2, [r3, #0]
 8003664:	e06f      	b.n	8003746 <UART_SetConfig+0x246>
 8003666:	231b      	movs	r3, #27
 8003668:	2220      	movs	r2, #32
 800366a:	189b      	adds	r3, r3, r2
 800366c:	19db      	adds	r3, r3, r7
 800366e:	2208      	movs	r2, #8
 8003670:	701a      	strb	r2, [r3, #0]
 8003672:	e068      	b.n	8003746 <UART_SetConfig+0x246>
 8003674:	231b      	movs	r3, #27
 8003676:	2220      	movs	r2, #32
 8003678:	189b      	adds	r3, r3, r2
 800367a:	19db      	adds	r3, r3, r7
 800367c:	2210      	movs	r2, #16
 800367e:	701a      	strb	r2, [r3, #0]
 8003680:	e061      	b.n	8003746 <UART_SetConfig+0x246>
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a61      	ldr	r2, [pc, #388]	; (800380c <UART_SetConfig+0x30c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d106      	bne.n	800369a <UART_SetConfig+0x19a>
 800368c:	231b      	movs	r3, #27
 800368e:	2220      	movs	r2, #32
 8003690:	189b      	adds	r3, r3, r2
 8003692:	19db      	adds	r3, r3, r7
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
 8003698:	e055      	b.n	8003746 <UART_SetConfig+0x246>
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a5c      	ldr	r2, [pc, #368]	; (8003810 <UART_SetConfig+0x310>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d106      	bne.n	80036b2 <UART_SetConfig+0x1b2>
 80036a4:	231b      	movs	r3, #27
 80036a6:	2220      	movs	r2, #32
 80036a8:	189b      	adds	r3, r3, r2
 80036aa:	19db      	adds	r3, r3, r7
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
 80036b0:	e049      	b.n	8003746 <UART_SetConfig+0x246>
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a50      	ldr	r2, [pc, #320]	; (80037f8 <UART_SetConfig+0x2f8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d13e      	bne.n	800373a <UART_SetConfig+0x23a>
 80036bc:	4b51      	ldr	r3, [pc, #324]	; (8003804 <UART_SetConfig+0x304>)
 80036be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036c0:	23c0      	movs	r3, #192	; 0xc0
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	4013      	ands	r3, r2
 80036c6:	22c0      	movs	r2, #192	; 0xc0
 80036c8:	0112      	lsls	r2, r2, #4
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d027      	beq.n	800371e <UART_SetConfig+0x21e>
 80036ce:	22c0      	movs	r2, #192	; 0xc0
 80036d0:	0112      	lsls	r2, r2, #4
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d82a      	bhi.n	800372c <UART_SetConfig+0x22c>
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	0112      	lsls	r2, r2, #4
 80036da:	4293      	cmp	r3, r2
 80036dc:	d011      	beq.n	8003702 <UART_SetConfig+0x202>
 80036de:	2280      	movs	r2, #128	; 0x80
 80036e0:	0112      	lsls	r2, r2, #4
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d822      	bhi.n	800372c <UART_SetConfig+0x22c>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d004      	beq.n	80036f4 <UART_SetConfig+0x1f4>
 80036ea:	2280      	movs	r2, #128	; 0x80
 80036ec:	00d2      	lsls	r2, r2, #3
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00e      	beq.n	8003710 <UART_SetConfig+0x210>
 80036f2:	e01b      	b.n	800372c <UART_SetConfig+0x22c>
 80036f4:	231b      	movs	r3, #27
 80036f6:	2220      	movs	r2, #32
 80036f8:	189b      	adds	r3, r3, r2
 80036fa:	19db      	adds	r3, r3, r7
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]
 8003700:	e021      	b.n	8003746 <UART_SetConfig+0x246>
 8003702:	231b      	movs	r3, #27
 8003704:	2220      	movs	r2, #32
 8003706:	189b      	adds	r3, r3, r2
 8003708:	19db      	adds	r3, r3, r7
 800370a:	2202      	movs	r2, #2
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	e01a      	b.n	8003746 <UART_SetConfig+0x246>
 8003710:	231b      	movs	r3, #27
 8003712:	2220      	movs	r2, #32
 8003714:	189b      	adds	r3, r3, r2
 8003716:	19db      	adds	r3, r3, r7
 8003718:	2204      	movs	r2, #4
 800371a:	701a      	strb	r2, [r3, #0]
 800371c:	e013      	b.n	8003746 <UART_SetConfig+0x246>
 800371e:	231b      	movs	r3, #27
 8003720:	2220      	movs	r2, #32
 8003722:	189b      	adds	r3, r3, r2
 8003724:	19db      	adds	r3, r3, r7
 8003726:	2208      	movs	r2, #8
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	e00c      	b.n	8003746 <UART_SetConfig+0x246>
 800372c:	231b      	movs	r3, #27
 800372e:	2220      	movs	r2, #32
 8003730:	189b      	adds	r3, r3, r2
 8003732:	19db      	adds	r3, r3, r7
 8003734:	2210      	movs	r2, #16
 8003736:	701a      	strb	r2, [r3, #0]
 8003738:	e005      	b.n	8003746 <UART_SetConfig+0x246>
 800373a:	231b      	movs	r3, #27
 800373c:	2220      	movs	r2, #32
 800373e:	189b      	adds	r3, r3, r2
 8003740:	19db      	adds	r3, r3, r7
 8003742:	2210      	movs	r2, #16
 8003744:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a2b      	ldr	r2, [pc, #172]	; (80037f8 <UART_SetConfig+0x2f8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d000      	beq.n	8003752 <UART_SetConfig+0x252>
 8003750:	e0a9      	b.n	80038a6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003752:	231b      	movs	r3, #27
 8003754:	2220      	movs	r2, #32
 8003756:	189b      	adds	r3, r3, r2
 8003758:	19db      	adds	r3, r3, r7
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b08      	cmp	r3, #8
 800375e:	d015      	beq.n	800378c <UART_SetConfig+0x28c>
 8003760:	dc18      	bgt.n	8003794 <UART_SetConfig+0x294>
 8003762:	2b04      	cmp	r3, #4
 8003764:	d00d      	beq.n	8003782 <UART_SetConfig+0x282>
 8003766:	dc15      	bgt.n	8003794 <UART_SetConfig+0x294>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <UART_SetConfig+0x272>
 800376c:	2b02      	cmp	r3, #2
 800376e:	d005      	beq.n	800377c <UART_SetConfig+0x27c>
 8003770:	e010      	b.n	8003794 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003772:	f7fe fbc7 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 8003776:	0003      	movs	r3, r0
 8003778:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800377a:	e014      	b.n	80037a6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800377c:	4b25      	ldr	r3, [pc, #148]	; (8003814 <UART_SetConfig+0x314>)
 800377e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003780:	e011      	b.n	80037a6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003782:	f7fe fb33 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8003786:	0003      	movs	r3, r0
 8003788:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800378a:	e00c      	b.n	80037a6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800378c:	2380      	movs	r3, #128	; 0x80
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003792:	e008      	b.n	80037a6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003798:	231a      	movs	r3, #26
 800379a:	2220      	movs	r2, #32
 800379c:	189b      	adds	r3, r3, r2
 800379e:	19db      	adds	r3, r3, r7
 80037a0:	2201      	movs	r2, #1
 80037a2:	701a      	strb	r2, [r3, #0]
        break;
 80037a4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d100      	bne.n	80037ae <UART_SetConfig+0x2ae>
 80037ac:	e14b      	b.n	8003a46 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037b2:	4b19      	ldr	r3, [pc, #100]	; (8003818 <UART_SetConfig+0x318>)
 80037b4:	0052      	lsls	r2, r2, #1
 80037b6:	5ad3      	ldrh	r3, [r2, r3]
 80037b8:	0019      	movs	r1, r3
 80037ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80037bc:	f7fc fcac 	bl	8000118 <__udivsi3>
 80037c0:	0003      	movs	r3, r0
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	0013      	movs	r3, r2
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	189b      	adds	r3, r3, r2
 80037ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d305      	bcc.n	80037e0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037dc:	429a      	cmp	r2, r3
 80037de:	d91d      	bls.n	800381c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80037e0:	231a      	movs	r3, #26
 80037e2:	2220      	movs	r2, #32
 80037e4:	189b      	adds	r3, r3, r2
 80037e6:	19db      	adds	r3, r3, r7
 80037e8:	2201      	movs	r2, #1
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e12b      	b.n	8003a46 <UART_SetConfig+0x546>
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	cfff69f3 	.word	0xcfff69f3
 80037f4:	ffffcfff 	.word	0xffffcfff
 80037f8:	40008000 	.word	0x40008000
 80037fc:	11fff4ff 	.word	0x11fff4ff
 8003800:	40013800 	.word	0x40013800
 8003804:	40021000 	.word	0x40021000
 8003808:	40004400 	.word	0x40004400
 800380c:	40004800 	.word	0x40004800
 8003810:	40004c00 	.word	0x40004c00
 8003814:	00f42400 	.word	0x00f42400
 8003818:	08005a10 	.word	0x08005a10
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800381c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381e:	61bb      	str	r3, [r7, #24]
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003828:	4b92      	ldr	r3, [pc, #584]	; (8003a74 <UART_SetConfig+0x574>)
 800382a:	0052      	lsls	r2, r2, #1
 800382c:	5ad3      	ldrh	r3, [r2, r3]
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	69b8      	ldr	r0, [r7, #24]
 800383a:	69f9      	ldr	r1, [r7, #28]
 800383c:	f7fc fde2 	bl	8000404 <__aeabi_uldivmod>
 8003840:	0002      	movs	r2, r0
 8003842:	000b      	movs	r3, r1
 8003844:	0e11      	lsrs	r1, r2, #24
 8003846:	021d      	lsls	r5, r3, #8
 8003848:	430d      	orrs	r5, r1
 800384a:	0214      	lsls	r4, r2, #8
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	085b      	lsrs	r3, r3, #1
 8003852:	60bb      	str	r3, [r7, #8]
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68b8      	ldr	r0, [r7, #8]
 800385a:	68f9      	ldr	r1, [r7, #12]
 800385c:	1900      	adds	r0, r0, r4
 800385e:	4169      	adcs	r1, r5
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	2300      	movs	r3, #0
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f7fc fdc9 	bl	8000404 <__aeabi_uldivmod>
 8003872:	0002      	movs	r2, r0
 8003874:	000b      	movs	r3, r1
 8003876:	0013      	movs	r3, r2
 8003878:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800387a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800387c:	23c0      	movs	r3, #192	; 0xc0
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	429a      	cmp	r2, r3
 8003882:	d309      	bcc.n	8003898 <UART_SetConfig+0x398>
 8003884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	035b      	lsls	r3, r3, #13
 800388a:	429a      	cmp	r2, r3
 800388c:	d204      	bcs.n	8003898 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003894:	60da      	str	r2, [r3, #12]
 8003896:	e0d6      	b.n	8003a46 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003898:	231a      	movs	r3, #26
 800389a:	2220      	movs	r2, #32
 800389c:	189b      	adds	r3, r3, r2
 800389e:	19db      	adds	r3, r3, r7
 80038a0:	2201      	movs	r2, #1
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	e0cf      	b.n	8003a46 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	69da      	ldr	r2, [r3, #28]
 80038aa:	2380      	movs	r3, #128	; 0x80
 80038ac:	021b      	lsls	r3, r3, #8
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d000      	beq.n	80038b4 <UART_SetConfig+0x3b4>
 80038b2:	e070      	b.n	8003996 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80038b4:	231b      	movs	r3, #27
 80038b6:	2220      	movs	r2, #32
 80038b8:	189b      	adds	r3, r3, r2
 80038ba:	19db      	adds	r3, r3, r7
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d015      	beq.n	80038ee <UART_SetConfig+0x3ee>
 80038c2:	dc18      	bgt.n	80038f6 <UART_SetConfig+0x3f6>
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d00d      	beq.n	80038e4 <UART_SetConfig+0x3e4>
 80038c8:	dc15      	bgt.n	80038f6 <UART_SetConfig+0x3f6>
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <UART_SetConfig+0x3d4>
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d005      	beq.n	80038de <UART_SetConfig+0x3de>
 80038d2:	e010      	b.n	80038f6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038d4:	f7fe fb16 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 80038d8:	0003      	movs	r3, r0
 80038da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038dc:	e014      	b.n	8003908 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038de:	4b66      	ldr	r3, [pc, #408]	; (8003a78 <UART_SetConfig+0x578>)
 80038e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038e2:	e011      	b.n	8003908 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038e4:	f7fe fa82 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 80038e8:	0003      	movs	r3, r0
 80038ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038ec:	e00c      	b.n	8003908 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038f4:	e008      	b.n	8003908 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80038fa:	231a      	movs	r3, #26
 80038fc:	2220      	movs	r2, #32
 80038fe:	189b      	adds	r3, r3, r2
 8003900:	19db      	adds	r3, r3, r7
 8003902:	2201      	movs	r2, #1
 8003904:	701a      	strb	r2, [r3, #0]
        break;
 8003906:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390a:	2b00      	cmp	r3, #0
 800390c:	d100      	bne.n	8003910 <UART_SetConfig+0x410>
 800390e:	e09a      	b.n	8003a46 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003914:	4b57      	ldr	r3, [pc, #348]	; (8003a74 <UART_SetConfig+0x574>)
 8003916:	0052      	lsls	r2, r2, #1
 8003918:	5ad3      	ldrh	r3, [r2, r3]
 800391a:	0019      	movs	r1, r3
 800391c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800391e:	f7fc fbfb 	bl	8000118 <__udivsi3>
 8003922:	0003      	movs	r3, r0
 8003924:	005a      	lsls	r2, r3, #1
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	085b      	lsrs	r3, r3, #1
 800392c:	18d2      	adds	r2, r2, r3
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	0019      	movs	r1, r3
 8003934:	0010      	movs	r0, r2
 8003936:	f7fc fbef 	bl	8000118 <__udivsi3>
 800393a:	0003      	movs	r3, r0
 800393c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	2b0f      	cmp	r3, #15
 8003942:	d921      	bls.n	8003988 <UART_SetConfig+0x488>
 8003944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	025b      	lsls	r3, r3, #9
 800394a:	429a      	cmp	r2, r3
 800394c:	d21c      	bcs.n	8003988 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003950:	b29a      	uxth	r2, r3
 8003952:	200e      	movs	r0, #14
 8003954:	2420      	movs	r4, #32
 8003956:	1903      	adds	r3, r0, r4
 8003958:	19db      	adds	r3, r3, r7
 800395a:	210f      	movs	r1, #15
 800395c:	438a      	bics	r2, r1
 800395e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	085b      	lsrs	r3, r3, #1
 8003964:	b29b      	uxth	r3, r3
 8003966:	2207      	movs	r2, #7
 8003968:	4013      	ands	r3, r2
 800396a:	b299      	uxth	r1, r3
 800396c:	1903      	adds	r3, r0, r4
 800396e:	19db      	adds	r3, r3, r7
 8003970:	1902      	adds	r2, r0, r4
 8003972:	19d2      	adds	r2, r2, r7
 8003974:	8812      	ldrh	r2, [r2, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	1902      	adds	r2, r0, r4
 8003980:	19d2      	adds	r2, r2, r7
 8003982:	8812      	ldrh	r2, [r2, #0]
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	e05e      	b.n	8003a46 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003988:	231a      	movs	r3, #26
 800398a:	2220      	movs	r2, #32
 800398c:	189b      	adds	r3, r3, r2
 800398e:	19db      	adds	r3, r3, r7
 8003990:	2201      	movs	r2, #1
 8003992:	701a      	strb	r2, [r3, #0]
 8003994:	e057      	b.n	8003a46 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003996:	231b      	movs	r3, #27
 8003998:	2220      	movs	r2, #32
 800399a:	189b      	adds	r3, r3, r2
 800399c:	19db      	adds	r3, r3, r7
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d015      	beq.n	80039d0 <UART_SetConfig+0x4d0>
 80039a4:	dc18      	bgt.n	80039d8 <UART_SetConfig+0x4d8>
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d00d      	beq.n	80039c6 <UART_SetConfig+0x4c6>
 80039aa:	dc15      	bgt.n	80039d8 <UART_SetConfig+0x4d8>
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <UART_SetConfig+0x4b6>
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d005      	beq.n	80039c0 <UART_SetConfig+0x4c0>
 80039b4:	e010      	b.n	80039d8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b6:	f7fe faa5 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 80039ba:	0003      	movs	r3, r0
 80039bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039be:	e014      	b.n	80039ea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039c0:	4b2d      	ldr	r3, [pc, #180]	; (8003a78 <UART_SetConfig+0x578>)
 80039c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039c4:	e011      	b.n	80039ea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039c6:	f7fe fa11 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 80039ca:	0003      	movs	r3, r0
 80039cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039ce:	e00c      	b.n	80039ea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	021b      	lsls	r3, r3, #8
 80039d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039d6:	e008      	b.n	80039ea <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80039dc:	231a      	movs	r3, #26
 80039de:	2220      	movs	r2, #32
 80039e0:	189b      	adds	r3, r3, r2
 80039e2:	19db      	adds	r3, r3, r7
 80039e4:	2201      	movs	r2, #1
 80039e6:	701a      	strb	r2, [r3, #0]
        break;
 80039e8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80039ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d02a      	beq.n	8003a46 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039f4:	4b1f      	ldr	r3, [pc, #124]	; (8003a74 <UART_SetConfig+0x574>)
 80039f6:	0052      	lsls	r2, r2, #1
 80039f8:	5ad3      	ldrh	r3, [r2, r3]
 80039fa:	0019      	movs	r1, r3
 80039fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039fe:	f7fc fb8b 	bl	8000118 <__udivsi3>
 8003a02:	0003      	movs	r3, r0
 8003a04:	001a      	movs	r2, r3
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	18d2      	adds	r2, r2, r3
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	0019      	movs	r1, r3
 8003a14:	0010      	movs	r0, r2
 8003a16:	f7fc fb7f 	bl	8000118 <__udivsi3>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	2b0f      	cmp	r3, #15
 8003a22:	d90a      	bls.n	8003a3a <UART_SetConfig+0x53a>
 8003a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a26:	2380      	movs	r3, #128	; 0x80
 8003a28:	025b      	lsls	r3, r3, #9
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d205      	bcs.n	8003a3a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60da      	str	r2, [r3, #12]
 8003a38:	e005      	b.n	8003a46 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003a3a:	231a      	movs	r3, #26
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	189b      	adds	r3, r3, r2
 8003a40:	19db      	adds	r3, r3, r7
 8003a42:	2201      	movs	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	226a      	movs	r2, #106	; 0x6a
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	2268      	movs	r2, #104	; 0x68
 8003a52:	2101      	movs	r1, #1
 8003a54:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	2200      	movs	r2, #0
 8003a5a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	2200      	movs	r2, #0
 8003a60:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003a62:	231a      	movs	r3, #26
 8003a64:	2220      	movs	r2, #32
 8003a66:	189b      	adds	r3, r3, r2
 8003a68:	19db      	adds	r3, r3, r7
 8003a6a:	781b      	ldrb	r3, [r3, #0]
}
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b010      	add	sp, #64	; 0x40
 8003a72:	bdb0      	pop	{r4, r5, r7, pc}
 8003a74:	08005a10 	.word	0x08005a10
 8003a78:	00f42400 	.word	0x00f42400

08003a7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	2201      	movs	r2, #1
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d00b      	beq.n	8003aa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	4a4a      	ldr	r2, [pc, #296]	; (8003bc0 <UART_AdvFeatureConfig+0x144>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	0019      	movs	r1, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	2202      	movs	r2, #2
 8003aac:	4013      	ands	r3, r2
 8003aae:	d00b      	beq.n	8003ac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4a43      	ldr	r2, [pc, #268]	; (8003bc4 <UART_AdvFeatureConfig+0x148>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	0019      	movs	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	2204      	movs	r2, #4
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d00b      	beq.n	8003aea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	4a3b      	ldr	r2, [pc, #236]	; (8003bc8 <UART_AdvFeatureConfig+0x14c>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	0019      	movs	r1, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	2208      	movs	r2, #8
 8003af0:	4013      	ands	r3, r2
 8003af2:	d00b      	beq.n	8003b0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	4a34      	ldr	r2, [pc, #208]	; (8003bcc <UART_AdvFeatureConfig+0x150>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	0019      	movs	r1, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	2210      	movs	r2, #16
 8003b12:	4013      	ands	r3, r2
 8003b14:	d00b      	beq.n	8003b2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4a2c      	ldr	r2, [pc, #176]	; (8003bd0 <UART_AdvFeatureConfig+0x154>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	0019      	movs	r1, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	2220      	movs	r2, #32
 8003b34:	4013      	ands	r3, r2
 8003b36:	d00b      	beq.n	8003b50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	4a25      	ldr	r2, [pc, #148]	; (8003bd4 <UART_AdvFeatureConfig+0x158>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	0019      	movs	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	2240      	movs	r2, #64	; 0x40
 8003b56:	4013      	ands	r3, r2
 8003b58:	d01d      	beq.n	8003b96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	4a1d      	ldr	r2, [pc, #116]	; (8003bd8 <UART_AdvFeatureConfig+0x15c>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	0019      	movs	r1, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	035b      	lsls	r3, r3, #13
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d10b      	bne.n	8003b96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <UART_AdvFeatureConfig+0x160>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	0019      	movs	r1, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	2280      	movs	r2, #128	; 0x80
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d00b      	beq.n	8003bb8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4a0e      	ldr	r2, [pc, #56]	; (8003be0 <UART_AdvFeatureConfig+0x164>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	0019      	movs	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	605a      	str	r2, [r3, #4]
  }
}
 8003bb8:	46c0      	nop			; (mov r8, r8)
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b002      	add	sp, #8
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	fffdffff 	.word	0xfffdffff
 8003bc4:	fffeffff 	.word	0xfffeffff
 8003bc8:	fffbffff 	.word	0xfffbffff
 8003bcc:	ffff7fff 	.word	0xffff7fff
 8003bd0:	ffffefff 	.word	0xffffefff
 8003bd4:	ffffdfff 	.word	0xffffdfff
 8003bd8:	ffefffff 	.word	0xffefffff
 8003bdc:	ff9fffff 	.word	0xff9fffff
 8003be0:	fff7ffff 	.word	0xfff7ffff

08003be4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	228c      	movs	r2, #140	; 0x8c
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bf4:	f7fd f940 	bl	8000e78 <HAL_GetTick>
 8003bf8:	0003      	movs	r3, r0
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2208      	movs	r2, #8
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d10c      	bne.n	8003c24 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2280      	movs	r2, #128	; 0x80
 8003c0e:	0391      	lsls	r1, r2, #14
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	4a18      	ldr	r2, [pc, #96]	; (8003c74 <UART_CheckIdleState+0x90>)
 8003c14:	9200      	str	r2, [sp, #0]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f000 f82e 	bl	8003c78 <UART_WaitOnFlagUntilTimeout>
 8003c1c:	1e03      	subs	r3, r0, #0
 8003c1e:	d001      	beq.n	8003c24 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e023      	b.n	8003c6c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d10c      	bne.n	8003c4c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2280      	movs	r2, #128	; 0x80
 8003c36:	03d1      	lsls	r1, r2, #15
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	4a0e      	ldr	r2, [pc, #56]	; (8003c74 <UART_CheckIdleState+0x90>)
 8003c3c:	9200      	str	r2, [sp, #0]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f000 f81a 	bl	8003c78 <UART_WaitOnFlagUntilTimeout>
 8003c44:	1e03      	subs	r3, r0, #0
 8003c46:	d001      	beq.n	8003c4c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e00f      	b.n	8003c6c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2284      	movs	r2, #132	; 0x84
 8003c50:	2120      	movs	r1, #32
 8003c52:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2288      	movs	r2, #136	; 0x88
 8003c58:	2120      	movs	r1, #32
 8003c5a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2280      	movs	r2, #128	; 0x80
 8003c66:	2100      	movs	r1, #0
 8003c68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b004      	add	sp, #16
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	01ffffff 	.word	0x01ffffff

08003c78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b094      	sub	sp, #80	; 0x50
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	1dfb      	adds	r3, r7, #7
 8003c86:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c88:	e0a7      	b.n	8003dda <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	d100      	bne.n	8003c92 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003c90:	e0a3      	b.n	8003dda <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c92:	f7fd f8f1 	bl	8000e78 <HAL_GetTick>
 8003c96:	0002      	movs	r2, r0
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d302      	bcc.n	8003ca8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d13f      	bne.n	8003d28 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb8:	f383 8810 	msr	PRIMASK, r3
}
 8003cbc:	46c0      	nop			; (mov r8, r8)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	494e      	ldr	r1, [pc, #312]	; (8003e04 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003cca:	400a      	ands	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd4:	f383 8810 	msr	PRIMASK, r3
}
 8003cd8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cda:	f3ef 8310 	mrs	r3, PRIMASK
 8003cde:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce2:	643b      	str	r3, [r7, #64]	; 0x40
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cea:	f383 8810 	msr	PRIMASK, r3
}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	438a      	bics	r2, r1
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d06:	f383 8810 	msr	PRIMASK, r3
}
 8003d0a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2284      	movs	r2, #132	; 0x84
 8003d10:	2120      	movs	r1, #32
 8003d12:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2288      	movs	r2, #136	; 0x88
 8003d18:	2120      	movs	r1, #32
 8003d1a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2280      	movs	r2, #128	; 0x80
 8003d20:	2100      	movs	r1, #0
 8003d22:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e069      	b.n	8003dfc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2204      	movs	r2, #4
 8003d30:	4013      	ands	r3, r2
 8003d32:	d052      	beq.n	8003dda <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	69da      	ldr	r2, [r3, #28]
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	401a      	ands	r2, r3
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d148      	bne.n	8003dda <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2280      	movs	r2, #128	; 0x80
 8003d4e:	0112      	lsls	r2, r2, #4
 8003d50:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d52:	f3ef 8310 	mrs	r3, PRIMASK
 8003d56:	613b      	str	r3, [r7, #16]
  return(result);
 8003d58:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f383 8810 	msr	PRIMASK, r3
}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4924      	ldr	r1, [pc, #144]	; (8003e04 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003d74:	400a      	ands	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f383 8810 	msr	PRIMASK, r3
}
 8003d82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d84:	f3ef 8310 	mrs	r3, PRIMASK
 8003d88:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d8a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d8e:	2301      	movs	r3, #1
 8003d90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	f383 8810 	msr	PRIMASK, r3
}
 8003d98:	46c0      	nop			; (mov r8, r8)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2101      	movs	r1, #1
 8003da6:	438a      	bics	r2, r1
 8003da8:	609a      	str	r2, [r3, #8]
 8003daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	f383 8810 	msr	PRIMASK, r3
}
 8003db4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2284      	movs	r2, #132	; 0x84
 8003dba:	2120      	movs	r1, #32
 8003dbc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2288      	movs	r2, #136	; 0x88
 8003dc2:	2120      	movs	r1, #32
 8003dc4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	228c      	movs	r2, #140	; 0x8c
 8003dca:	2120      	movs	r1, #32
 8003dcc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2280      	movs	r2, #128	; 0x80
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e010      	b.n	8003dfc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	4013      	ands	r3, r2
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	425a      	negs	r2, r3
 8003dea:	4153      	adcs	r3, r2
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	001a      	movs	r2, r3
 8003df0:	1dfb      	adds	r3, r7, #7
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d100      	bne.n	8003dfa <UART_WaitOnFlagUntilTimeout+0x182>
 8003df8:	e747      	b.n	8003c8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b014      	add	sp, #80	; 0x50
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	fffffe5f 	.word	0xfffffe5f

08003e08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b098      	sub	sp, #96	; 0x60
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	1dbb      	adds	r3, r7, #6
 8003e14:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	1dba      	adds	r2, r7, #6
 8003e20:	215c      	movs	r1, #92	; 0x5c
 8003e22:	8812      	ldrh	r2, [r2, #0]
 8003e24:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1dba      	adds	r2, r7, #6
 8003e2a:	215e      	movs	r1, #94	; 0x5e
 8003e2c:	8812      	ldrh	r2, [r2, #0]
 8003e2e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	015b      	lsls	r3, r3, #5
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d10d      	bne.n	8003e5e <UART_Start_Receive_IT+0x56>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d104      	bne.n	8003e54 <UART_Start_Receive_IT+0x4c>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2260      	movs	r2, #96	; 0x60
 8003e4e:	497f      	ldr	r1, [pc, #508]	; (800404c <UART_Start_Receive_IT+0x244>)
 8003e50:	5299      	strh	r1, [r3, r2]
 8003e52:	e02e      	b.n	8003eb2 <UART_Start_Receive_IT+0xaa>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2260      	movs	r2, #96	; 0x60
 8003e58:	21ff      	movs	r1, #255	; 0xff
 8003e5a:	5299      	strh	r1, [r3, r2]
 8003e5c:	e029      	b.n	8003eb2 <UART_Start_Receive_IT+0xaa>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10d      	bne.n	8003e82 <UART_Start_Receive_IT+0x7a>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d104      	bne.n	8003e78 <UART_Start_Receive_IT+0x70>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2260      	movs	r2, #96	; 0x60
 8003e72:	21ff      	movs	r1, #255	; 0xff
 8003e74:	5299      	strh	r1, [r3, r2]
 8003e76:	e01c      	b.n	8003eb2 <UART_Start_Receive_IT+0xaa>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2260      	movs	r2, #96	; 0x60
 8003e7c:	217f      	movs	r1, #127	; 0x7f
 8003e7e:	5299      	strh	r1, [r3, r2]
 8003e80:	e017      	b.n	8003eb2 <UART_Start_Receive_IT+0xaa>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	2380      	movs	r3, #128	; 0x80
 8003e88:	055b      	lsls	r3, r3, #21
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d10d      	bne.n	8003eaa <UART_Start_Receive_IT+0xa2>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d104      	bne.n	8003ea0 <UART_Start_Receive_IT+0x98>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2260      	movs	r2, #96	; 0x60
 8003e9a:	217f      	movs	r1, #127	; 0x7f
 8003e9c:	5299      	strh	r1, [r3, r2]
 8003e9e:	e008      	b.n	8003eb2 <UART_Start_Receive_IT+0xaa>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2260      	movs	r2, #96	; 0x60
 8003ea4:	213f      	movs	r1, #63	; 0x3f
 8003ea6:	5299      	strh	r1, [r3, r2]
 8003ea8:	e003      	b.n	8003eb2 <UART_Start_Receive_IT+0xaa>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2260      	movs	r2, #96	; 0x60
 8003eae:	2100      	movs	r1, #0
 8003eb0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	228c      	movs	r2, #140	; 0x8c
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2288      	movs	r2, #136	; 0x88
 8003ebe:	2122      	movs	r1, #34	; 0x22
 8003ec0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ec6:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ecc:	2301      	movs	r3, #1
 8003ece:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ed2:	f383 8810 	msr	PRIMASK, r3
}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eea:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eee:	f383 8810 	msr	PRIMASK, r3
}
 8003ef2:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	059b      	lsls	r3, r3, #22
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d154      	bne.n	8003faa <UART_Start_Receive_IT+0x1a2>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2268      	movs	r2, #104	; 0x68
 8003f04:	5a9b      	ldrh	r3, [r3, r2]
 8003f06:	1dba      	adds	r2, r7, #6
 8003f08:	8812      	ldrh	r2, [r2, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d34d      	bcc.n	8003faa <UART_Start_Receive_IT+0x1a2>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	2380      	movs	r3, #128	; 0x80
 8003f14:	015b      	lsls	r3, r3, #5
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d107      	bne.n	8003f2a <UART_Start_Receive_IT+0x122>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d103      	bne.n	8003f2a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4a4a      	ldr	r2, [pc, #296]	; (8004050 <UART_Start_Receive_IT+0x248>)
 8003f26:	671a      	str	r2, [r3, #112]	; 0x70
 8003f28:	e002      	b.n	8003f30 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4a49      	ldr	r2, [pc, #292]	; (8004054 <UART_Start_Receive_IT+0x24c>)
 8003f2e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2280      	movs	r2, #128	; 0x80
 8003f34:	2100      	movs	r1, #0
 8003f36:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d019      	beq.n	8003f74 <UART_Start_Receive_IT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f40:	f3ef 8310 	mrs	r3, PRIMASK
 8003f44:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f48:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	f383 8810 	msr	PRIMASK, r3
}
 8003f54:	46c0      	nop			; (mov r8, r8)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2180      	movs	r1, #128	; 0x80
 8003f62:	0049      	lsls	r1, r1, #1
 8003f64:	430a      	orrs	r2, r1
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f6e:	f383 8810 	msr	PRIMASK, r3
}
 8003f72:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f74:	f3ef 8310 	mrs	r3, PRIMASK
 8003f78:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003f7c:	657b      	str	r3, [r7, #84]	; 0x54
 8003f7e:	2301      	movs	r3, #1
 8003f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	f383 8810 	msr	PRIMASK, r3
}
 8003f88:	46c0      	nop			; (mov r8, r8)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2180      	movs	r1, #128	; 0x80
 8003f96:	0549      	lsls	r1, r1, #21
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f9e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	f383 8810 	msr	PRIMASK, r3
}
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	e04b      	b.n	8004042 <UART_Start_Receive_IT+0x23a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	2380      	movs	r3, #128	; 0x80
 8003fb0:	015b      	lsls	r3, r3, #5
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d107      	bne.n	8003fc6 <UART_Start_Receive_IT+0x1be>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <UART_Start_Receive_IT+0x1be>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4a25      	ldr	r2, [pc, #148]	; (8004058 <UART_Start_Receive_IT+0x250>)
 8003fc2:	671a      	str	r2, [r3, #112]	; 0x70
 8003fc4:	e002      	b.n	8003fcc <UART_Start_Receive_IT+0x1c4>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4a24      	ldr	r2, [pc, #144]	; (800405c <UART_Start_Receive_IT+0x254>)
 8003fca:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2280      	movs	r2, #128	; 0x80
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d019      	beq.n	8004010 <UART_Start_Receive_IT+0x208>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8003fe0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fe2:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	f383 8810 	msr	PRIMASK, r3
}
 8003ff0:	46c0      	nop			; (mov r8, r8)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2190      	movs	r1, #144	; 0x90
 8003ffe:	0049      	lsls	r1, r1, #1
 8004000:	430a      	orrs	r2, r1
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	f383 8810 	msr	PRIMASK, r3
}
 800400e:	e018      	b.n	8004042 <UART_Start_Receive_IT+0x23a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004010:	f3ef 8310 	mrs	r3, PRIMASK
 8004014:	613b      	str	r3, [r7, #16]
  return(result);
 8004016:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004018:	653b      	str	r3, [r7, #80]	; 0x50
 800401a:	2301      	movs	r3, #1
 800401c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f383 8810 	msr	PRIMASK, r3
}
 8004024:	46c0      	nop			; (mov r8, r8)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2120      	movs	r1, #32
 8004032:	430a      	orrs	r2, r1
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004038:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	f383 8810 	msr	PRIMASK, r3
}
 8004040:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	0018      	movs	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	b018      	add	sp, #96	; 0x60
 800404a:	bd80      	pop	{r7, pc}
 800404c:	000001ff 	.word	0x000001ff
 8004050:	08004ac1 	.word	0x08004ac1
 8004054:	080047dd 	.word	0x080047dd
 8004058:	08004671 	.word	0x08004671
 800405c:	08004505 	.word	0x08004505

08004060 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08e      	sub	sp, #56	; 0x38
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004068:	f3ef 8310 	mrs	r3, PRIMASK
 800406c:	617b      	str	r3, [r7, #20]
  return(result);
 800406e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004070:	637b      	str	r3, [r7, #52]	; 0x34
 8004072:	2301      	movs	r3, #1
 8004074:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	f383 8810 	msr	PRIMASK, r3
}
 800407c:	46c0      	nop			; (mov r8, r8)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4926      	ldr	r1, [pc, #152]	; (8004124 <UART_EndRxTransfer+0xc4>)
 800408a:	400a      	ands	r2, r1
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004090:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f383 8810 	msr	PRIMASK, r3
}
 8004098:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800409a:	f3ef 8310 	mrs	r3, PRIMASK
 800409e:	623b      	str	r3, [r7, #32]
  return(result);
 80040a0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040a2:	633b      	str	r3, [r7, #48]	; 0x30
 80040a4:	2301      	movs	r3, #1
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	f383 8810 	msr	PRIMASK, r3
}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	491b      	ldr	r1, [pc, #108]	; (8004128 <UART_EndRxTransfer+0xc8>)
 80040bc:	400a      	ands	r2, r1
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	f383 8810 	msr	PRIMASK, r3
}
 80040ca:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d118      	bne.n	8004106 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d4:	f3ef 8310 	mrs	r3, PRIMASK
 80040d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80040da:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040de:	2301      	movs	r3, #1
 80040e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f383 8810 	msr	PRIMASK, r3
}
 80040e8:	46c0      	nop			; (mov r8, r8)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2110      	movs	r1, #16
 80040f6:	438a      	bics	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f383 8810 	msr	PRIMASK, r3
}
 8004104:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2288      	movs	r2, #136	; 0x88
 800410a:	2120      	movs	r1, #32
 800410c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	671a      	str	r2, [r3, #112]	; 0x70
}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	46bd      	mov	sp, r7
 800411e:	b00e      	add	sp, #56	; 0x38
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	fffffedf 	.word	0xfffffedf
 8004128:	effffffe 	.word	0xeffffffe

0800412c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	225e      	movs	r2, #94	; 0x5e
 800413e:	2100      	movs	r1, #0
 8004140:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2256      	movs	r2, #86	; 0x56
 8004146:	2100      	movs	r1, #0
 8004148:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	0018      	movs	r0, r3
 800414e:	f7ff f9c3 	bl	80034d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	46bd      	mov	sp, r7
 8004156:	b004      	add	sp, #16
 8004158:	bd80      	pop	{r7, pc}

0800415a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b08a      	sub	sp, #40	; 0x28
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2284      	movs	r2, #132	; 0x84
 8004166:	589b      	ldr	r3, [r3, r2]
 8004168:	2b21      	cmp	r3, #33	; 0x21
 800416a:	d14c      	bne.n	8004206 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2256      	movs	r2, #86	; 0x56
 8004170:	5a9b      	ldrh	r3, [r3, r2]
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d132      	bne.n	80041de <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004178:	f3ef 8310 	mrs	r3, PRIMASK
 800417c:	60bb      	str	r3, [r7, #8]
  return(result);
 800417e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
 8004182:	2301      	movs	r3, #1
 8004184:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f383 8810 	msr	PRIMASK, r3
}
 800418c:	46c0      	nop			; (mov r8, r8)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2180      	movs	r1, #128	; 0x80
 800419a:	438a      	bics	r2, r1
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f383 8810 	msr	PRIMASK, r3
}
 80041a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041aa:	f3ef 8310 	mrs	r3, PRIMASK
 80041ae:	617b      	str	r3, [r7, #20]
  return(result);
 80041b0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041b2:	623b      	str	r3, [r7, #32]
 80041b4:	2301      	movs	r3, #1
 80041b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f383 8810 	msr	PRIMASK, r3
}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2140      	movs	r1, #64	; 0x40
 80041cc:	430a      	orrs	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	f383 8810 	msr	PRIMASK, r3
}
 80041da:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80041dc:	e013      	b.n	8004206 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e2:	781a      	ldrb	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2256      	movs	r2, #86	; 0x56
 80041f8:	5a9b      	ldrh	r3, [r3, r2]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b299      	uxth	r1, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2256      	movs	r2, #86	; 0x56
 8004204:	5299      	strh	r1, [r3, r2]
}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	46bd      	mov	sp, r7
 800420a:	b00a      	add	sp, #40	; 0x28
 800420c:	bd80      	pop	{r7, pc}

0800420e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b08c      	sub	sp, #48	; 0x30
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2284      	movs	r2, #132	; 0x84
 800421a:	589b      	ldr	r3, [r3, r2]
 800421c:	2b21      	cmp	r3, #33	; 0x21
 800421e:	d151      	bne.n	80042c4 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2256      	movs	r2, #86	; 0x56
 8004224:	5a9b      	ldrh	r3, [r3, r2]
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d132      	bne.n	8004292 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800422c:	f3ef 8310 	mrs	r3, PRIMASK
 8004230:	60fb      	str	r3, [r7, #12]
  return(result);
 8004232:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004234:	62bb      	str	r3, [r7, #40]	; 0x28
 8004236:	2301      	movs	r3, #1
 8004238:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f383 8810 	msr	PRIMASK, r3
}
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2180      	movs	r1, #128	; 0x80
 800424e:	438a      	bics	r2, r1
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004254:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f383 8810 	msr	PRIMASK, r3
}
 800425c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800425e:	f3ef 8310 	mrs	r3, PRIMASK
 8004262:	61bb      	str	r3, [r7, #24]
  return(result);
 8004264:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
 8004268:	2301      	movs	r3, #1
 800426a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f383 8810 	msr	PRIMASK, r3
}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2140      	movs	r1, #64	; 0x40
 8004280:	430a      	orrs	r2, r1
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	f383 8810 	msr	PRIMASK, r3
}
 800428e:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004290:	e018      	b.n	80042c4 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004296:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	001a      	movs	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	05d2      	lsls	r2, r2, #23
 80042a4:	0dd2      	lsrs	r2, r2, #23
 80042a6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ac:	1c9a      	adds	r2, r3, #2
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2256      	movs	r2, #86	; 0x56
 80042b6:	5a9b      	ldrh	r3, [r3, r2]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b299      	uxth	r1, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2256      	movs	r2, #86	; 0x56
 80042c2:	5299      	strh	r1, [r3, r2]
}
 80042c4:	46c0      	nop			; (mov r8, r8)
 80042c6:	46bd      	mov	sp, r7
 80042c8:	b00c      	add	sp, #48	; 0x30
 80042ca:	bd80      	pop	{r7, pc}

080042cc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08c      	sub	sp, #48	; 0x30
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2284      	movs	r2, #132	; 0x84
 80042d8:	589b      	ldr	r3, [r3, r2]
 80042da:	2b21      	cmp	r3, #33	; 0x21
 80042dc:	d165      	bne.n	80043aa <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80042de:	232e      	movs	r3, #46	; 0x2e
 80042e0:	18fb      	adds	r3, r7, r3
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	216a      	movs	r1, #106	; 0x6a
 80042e6:	5a52      	ldrh	r2, [r2, r1]
 80042e8:	801a      	strh	r2, [r3, #0]
 80042ea:	e059      	b.n	80043a0 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2256      	movs	r2, #86	; 0x56
 80042f0:	5a9b      	ldrh	r3, [r3, r2]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d133      	bne.n	8004360 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f8:	f3ef 8310 	mrs	r3, PRIMASK
 80042fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80042fe:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004300:	62bb      	str	r3, [r7, #40]	; 0x28
 8004302:	2301      	movs	r3, #1
 8004304:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f383 8810 	msr	PRIMASK, r3
}
 800430c:	46c0      	nop			; (mov r8, r8)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4926      	ldr	r1, [pc, #152]	; (80043b4 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800431a:	400a      	ands	r2, r1
 800431c:	609a      	str	r2, [r3, #8]
 800431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004320:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f383 8810 	msr	PRIMASK, r3
}
 8004328:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800432a:	f3ef 8310 	mrs	r3, PRIMASK
 800432e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004330:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
 8004334:	2301      	movs	r3, #1
 8004336:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f383 8810 	msr	PRIMASK, r3
}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2140      	movs	r1, #64	; 0x40
 800434c:	430a      	orrs	r2, r1
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	f383 8810 	msr	PRIMASK, r3
}
 800435a:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800435c:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800435e:	e024      	b.n	80043aa <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	2280      	movs	r2, #128	; 0x80
 8004368:	4013      	ands	r3, r2
 800436a:	d013      	beq.n	8004394 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004370:	781a      	ldrb	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2256      	movs	r2, #86	; 0x56
 8004386:	5a9b      	ldrh	r3, [r3, r2]
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b299      	uxth	r1, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2256      	movs	r2, #86	; 0x56
 8004392:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004394:	212e      	movs	r1, #46	; 0x2e
 8004396:	187b      	adds	r3, r7, r1
 8004398:	881a      	ldrh	r2, [r3, #0]
 800439a:	187b      	adds	r3, r7, r1
 800439c:	3a01      	subs	r2, #1
 800439e:	801a      	strh	r2, [r3, #0]
 80043a0:	232e      	movs	r3, #46	; 0x2e
 80043a2:	18fb      	adds	r3, r7, r3
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1a0      	bne.n	80042ec <UART_TxISR_8BIT_FIFOEN+0x20>
}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b00c      	add	sp, #48	; 0x30
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	ff7fffff 	.word	0xff7fffff

080043b8 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08c      	sub	sp, #48	; 0x30
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2284      	movs	r2, #132	; 0x84
 80043c4:	589b      	ldr	r3, [r3, r2]
 80043c6:	2b21      	cmp	r3, #33	; 0x21
 80043c8:	d16a      	bne.n	80044a0 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80043ca:	232e      	movs	r3, #46	; 0x2e
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	216a      	movs	r1, #106	; 0x6a
 80043d2:	5a52      	ldrh	r2, [r2, r1]
 80043d4:	801a      	strh	r2, [r3, #0]
 80043d6:	e05e      	b.n	8004496 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2256      	movs	r2, #86	; 0x56
 80043dc:	5a9b      	ldrh	r3, [r3, r2]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d133      	bne.n	800444c <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043e4:	f3ef 8310 	mrs	r3, PRIMASK
 80043e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80043ea:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
 80043ee:	2301      	movs	r3, #1
 80043f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f383 8810 	msr	PRIMASK, r3
}
 80043f8:	46c0      	nop			; (mov r8, r8)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4928      	ldr	r1, [pc, #160]	; (80044a8 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8004406:	400a      	ands	r2, r1
 8004408:	609a      	str	r2, [r3, #8]
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f383 8810 	msr	PRIMASK, r3
}
 8004414:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004416:	f3ef 8310 	mrs	r3, PRIMASK
 800441a:	617b      	str	r3, [r7, #20]
  return(result);
 800441c:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800441e:	623b      	str	r3, [r7, #32]
 8004420:	2301      	movs	r3, #1
 8004422:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f383 8810 	msr	PRIMASK, r3
}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2140      	movs	r1, #64	; 0x40
 8004438:	430a      	orrs	r2, r1
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f383 8810 	msr	PRIMASK, r3
}
 8004446:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8004448:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800444a:	e029      	b.n	80044a0 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	2280      	movs	r2, #128	; 0x80
 8004454:	4013      	ands	r3, r2
 8004456:	d018      	beq.n	800448a <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800445c:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	001a      	movs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	05d2      	lsls	r2, r2, #23
 800446a:	0dd2      	lsrs	r2, r2, #23
 800446c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004472:	1c9a      	adds	r2, r3, #2
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2256      	movs	r2, #86	; 0x56
 800447c:	5a9b      	ldrh	r3, [r3, r2]
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b299      	uxth	r1, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2256      	movs	r2, #86	; 0x56
 8004488:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800448a:	212e      	movs	r1, #46	; 0x2e
 800448c:	187b      	adds	r3, r7, r1
 800448e:	881a      	ldrh	r2, [r3, #0]
 8004490:	187b      	adds	r3, r7, r1
 8004492:	3a01      	subs	r2, #1
 8004494:	801a      	strh	r2, [r3, #0]
 8004496:	232e      	movs	r3, #46	; 0x2e
 8004498:	18fb      	adds	r3, r7, r3
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d19b      	bne.n	80043d8 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b00c      	add	sp, #48	; 0x30
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	ff7fffff 	.word	0xff7fffff

080044ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044b4:	f3ef 8310 	mrs	r3, PRIMASK
 80044b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80044ba:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	2301      	movs	r3, #1
 80044c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f383 8810 	msr	PRIMASK, r3
}
 80044c8:	46c0      	nop			; (mov r8, r8)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2140      	movs	r1, #64	; 0x40
 80044d6:	438a      	bics	r2, r1
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f383 8810 	msr	PRIMASK, r3
}
 80044e4:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2284      	movs	r2, #132	; 0x84
 80044ea:	2120      	movs	r1, #32
 80044ec:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	0018      	movs	r0, r3
 80044f8:	f7fe ffe6 	bl	80034c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044fc:	46c0      	nop			; (mov r8, r8)
 80044fe:	46bd      	mov	sp, r7
 8004500:	b006      	add	sp, #24
 8004502:	bd80      	pop	{r7, pc}

08004504 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b090      	sub	sp, #64	; 0x40
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800450c:	203e      	movs	r0, #62	; 0x3e
 800450e:	183b      	adds	r3, r7, r0
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	2160      	movs	r1, #96	; 0x60
 8004514:	5a52      	ldrh	r2, [r2, r1]
 8004516:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2288      	movs	r2, #136	; 0x88
 800451c:	589b      	ldr	r3, [r3, r2]
 800451e:	2b22      	cmp	r3, #34	; 0x22
 8004520:	d000      	beq.n	8004524 <UART_RxISR_8BIT+0x20>
 8004522:	e097      	b.n	8004654 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800452a:	213c      	movs	r1, #60	; 0x3c
 800452c:	187b      	adds	r3, r7, r1
 800452e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004530:	187b      	adds	r3, r7, r1
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	b2da      	uxtb	r2, r3
 8004536:	183b      	adds	r3, r7, r0
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	b2d9      	uxtb	r1, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004540:	400a      	ands	r2, r1
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	225e      	movs	r2, #94	; 0x5e
 8004554:	5a9b      	ldrh	r3, [r3, r2]
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b299      	uxth	r1, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	225e      	movs	r2, #94	; 0x5e
 8004560:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	225e      	movs	r2, #94	; 0x5e
 8004566:	5a9b      	ldrh	r3, [r3, r2]
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d000      	beq.n	8004570 <UART_RxISR_8BIT+0x6c>
 800456e:	e079      	b.n	8004664 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004570:	f3ef 8310 	mrs	r3, PRIMASK
 8004574:	61bb      	str	r3, [r7, #24]
  return(result);
 8004576:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004578:	63bb      	str	r3, [r7, #56]	; 0x38
 800457a:	2301      	movs	r3, #1
 800457c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	f383 8810 	msr	PRIMASK, r3
}
 8004584:	46c0      	nop			; (mov r8, r8)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4936      	ldr	r1, [pc, #216]	; (800466c <UART_RxISR_8BIT+0x168>)
 8004592:	400a      	ands	r2, r1
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004598:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	f383 8810 	msr	PRIMASK, r3
}
 80045a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045a2:	f3ef 8310 	mrs	r3, PRIMASK
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045aa:	637b      	str	r3, [r7, #52]	; 0x34
 80045ac:	2301      	movs	r3, #1
 80045ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b2:	f383 8810 	msr	PRIMASK, r3
}
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2101      	movs	r1, #1
 80045c4:	438a      	bics	r2, r1
 80045c6:	609a      	str	r2, [r3, #8]
 80045c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ce:	f383 8810 	msr	PRIMASK, r3
}
 80045d2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2288      	movs	r2, #136	; 0x88
 80045d8:	2120      	movs	r1, #32
 80045da:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d12f      	bne.n	800464a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f0:	f3ef 8310 	mrs	r3, PRIMASK
 80045f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80045f6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f8:	633b      	str	r3, [r7, #48]	; 0x30
 80045fa:	2301      	movs	r3, #1
 80045fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f383 8810 	msr	PRIMASK, r3
}
 8004604:	46c0      	nop			; (mov r8, r8)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2110      	movs	r1, #16
 8004612:	438a      	bics	r2, r1
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f383 8810 	msr	PRIMASK, r3
}
 8004620:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	2210      	movs	r2, #16
 800462a:	4013      	ands	r3, r2
 800462c:	2b10      	cmp	r3, #16
 800462e:	d103      	bne.n	8004638 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2210      	movs	r2, #16
 8004636:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	225c      	movs	r2, #92	; 0x5c
 800463c:	5a9a      	ldrh	r2, [r3, r2]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	0011      	movs	r1, r2
 8004642:	0018      	movs	r0, r3
 8004644:	f7fe ff50 	bl	80034e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004648:	e00c      	b.n	8004664 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	0018      	movs	r0, r3
 800464e:	f7fc f821 	bl	8000694 <HAL_UART_RxCpltCallback>
}
 8004652:	e007      	b.n	8004664 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2108      	movs	r1, #8
 8004660:	430a      	orrs	r2, r1
 8004662:	619a      	str	r2, [r3, #24]
}
 8004664:	46c0      	nop			; (mov r8, r8)
 8004666:	46bd      	mov	sp, r7
 8004668:	b010      	add	sp, #64	; 0x40
 800466a:	bd80      	pop	{r7, pc}
 800466c:	fffffedf 	.word	0xfffffedf

08004670 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b090      	sub	sp, #64	; 0x40
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004678:	203e      	movs	r0, #62	; 0x3e
 800467a:	183b      	adds	r3, r7, r0
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	2160      	movs	r1, #96	; 0x60
 8004680:	5a52      	ldrh	r2, [r2, r1]
 8004682:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2288      	movs	r2, #136	; 0x88
 8004688:	589b      	ldr	r3, [r3, r2]
 800468a:	2b22      	cmp	r3, #34	; 0x22
 800468c:	d000      	beq.n	8004690 <UART_RxISR_16BIT+0x20>
 800468e:	e097      	b.n	80047c0 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004696:	213c      	movs	r1, #60	; 0x3c
 8004698:	187b      	adds	r3, r7, r1
 800469a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a0:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80046a2:	187b      	adds	r3, r7, r1
 80046a4:	183a      	adds	r2, r7, r0
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	8812      	ldrh	r2, [r2, #0]
 80046aa:	4013      	ands	r3, r2
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b6:	1c9a      	adds	r2, r3, #2
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	225e      	movs	r2, #94	; 0x5e
 80046c0:	5a9b      	ldrh	r3, [r3, r2]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b299      	uxth	r1, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	225e      	movs	r2, #94	; 0x5e
 80046cc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	225e      	movs	r2, #94	; 0x5e
 80046d2:	5a9b      	ldrh	r3, [r3, r2]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d000      	beq.n	80046dc <UART_RxISR_16BIT+0x6c>
 80046da:	e079      	b.n	80047d0 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046dc:	f3ef 8310 	mrs	r3, PRIMASK
 80046e0:	617b      	str	r3, [r7, #20]
  return(result);
 80046e2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
 80046e6:	2301      	movs	r3, #1
 80046e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	f383 8810 	msr	PRIMASK, r3
}
 80046f0:	46c0      	nop			; (mov r8, r8)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4936      	ldr	r1, [pc, #216]	; (80047d8 <UART_RxISR_16BIT+0x168>)
 80046fe:	400a      	ands	r2, r1
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004704:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	f383 8810 	msr	PRIMASK, r3
}
 800470c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800470e:	f3ef 8310 	mrs	r3, PRIMASK
 8004712:	623b      	str	r3, [r7, #32]
  return(result);
 8004714:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004716:	633b      	str	r3, [r7, #48]	; 0x30
 8004718:	2301      	movs	r3, #1
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	f383 8810 	msr	PRIMASK, r3
}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2101      	movs	r1, #1
 8004730:	438a      	bics	r2, r1
 8004732:	609a      	str	r2, [r3, #8]
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	f383 8810 	msr	PRIMASK, r3
}
 800473e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2288      	movs	r2, #136	; 0x88
 8004744:	2120      	movs	r1, #32
 8004746:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004752:	2b01      	cmp	r3, #1
 8004754:	d12f      	bne.n	80047b6 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800475c:	f3ef 8310 	mrs	r3, PRIMASK
 8004760:	60bb      	str	r3, [r7, #8]
  return(result);
 8004762:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004766:	2301      	movs	r3, #1
 8004768:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f383 8810 	msr	PRIMASK, r3
}
 8004770:	46c0      	nop			; (mov r8, r8)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2110      	movs	r1, #16
 800477e:	438a      	bics	r2, r1
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004784:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f383 8810 	msr	PRIMASK, r3
}
 800478c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	2210      	movs	r2, #16
 8004796:	4013      	ands	r3, r2
 8004798:	2b10      	cmp	r3, #16
 800479a:	d103      	bne.n	80047a4 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2210      	movs	r2, #16
 80047a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	225c      	movs	r2, #92	; 0x5c
 80047a8:	5a9a      	ldrh	r2, [r3, r2]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	0011      	movs	r1, r2
 80047ae:	0018      	movs	r0, r3
 80047b0:	f7fe fe9a 	bl	80034e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047b4:	e00c      	b.n	80047d0 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	0018      	movs	r0, r3
 80047ba:	f7fb ff6b 	bl	8000694 <HAL_UART_RxCpltCallback>
}
 80047be:	e007      	b.n	80047d0 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2108      	movs	r1, #8
 80047cc:	430a      	orrs	r2, r1
 80047ce:	619a      	str	r2, [r3, #24]
}
 80047d0:	46c0      	nop			; (mov r8, r8)
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b010      	add	sp, #64	; 0x40
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	fffffedf 	.word	0xfffffedf

080047dc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b09c      	sub	sp, #112	; 0x70
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80047e4:	236a      	movs	r3, #106	; 0x6a
 80047e6:	18fb      	adds	r3, r7, r3
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	2160      	movs	r1, #96	; 0x60
 80047ec:	5a52      	ldrh	r2, [r2, r1]
 80047ee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2288      	movs	r2, #136	; 0x88
 800480c:	589b      	ldr	r3, [r3, r2]
 800480e:	2b22      	cmp	r3, #34	; 0x22
 8004810:	d000      	beq.n	8004814 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004812:	e141      	b.n	8004a98 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004814:	235e      	movs	r3, #94	; 0x5e
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	2168      	movs	r1, #104	; 0x68
 800481c:	5a52      	ldrh	r2, [r2, r1]
 800481e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004820:	e0e8      	b.n	80049f4 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004828:	215c      	movs	r1, #92	; 0x5c
 800482a:	187b      	adds	r3, r7, r1
 800482c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800482e:	187b      	adds	r3, r7, r1
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b2da      	uxtb	r2, r3
 8004834:	236a      	movs	r3, #106	; 0x6a
 8004836:	18fb      	adds	r3, r7, r3
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b2d9      	uxtb	r1, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004840:	400a      	ands	r2, r1
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	225e      	movs	r2, #94	; 0x5e
 8004854:	5a9b      	ldrh	r3, [r3, r2]
 8004856:	b29b      	uxth	r3, r3
 8004858:	3b01      	subs	r3, #1
 800485a:	b299      	uxth	r1, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	225e      	movs	r2, #94	; 0x5e
 8004860:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800486a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800486c:	2207      	movs	r2, #7
 800486e:	4013      	ands	r3, r2
 8004870:	d049      	beq.n	8004906 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004874:	2201      	movs	r2, #1
 8004876:	4013      	ands	r3, r2
 8004878:	d010      	beq.n	800489c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800487a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800487c:	2380      	movs	r3, #128	; 0x80
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	4013      	ands	r3, r2
 8004882:	d00b      	beq.n	800489c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2201      	movs	r2, #1
 800488a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	228c      	movs	r2, #140	; 0x8c
 8004890:	589b      	ldr	r3, [r3, r2]
 8004892:	2201      	movs	r2, #1
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	218c      	movs	r1, #140	; 0x8c
 800489a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800489c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800489e:	2202      	movs	r2, #2
 80048a0:	4013      	ands	r3, r2
 80048a2:	d00f      	beq.n	80048c4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80048a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048a6:	2201      	movs	r2, #1
 80048a8:	4013      	ands	r3, r2
 80048aa:	d00b      	beq.n	80048c4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2202      	movs	r2, #2
 80048b2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	228c      	movs	r2, #140	; 0x8c
 80048b8:	589b      	ldr	r3, [r3, r2]
 80048ba:	2204      	movs	r2, #4
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	218c      	movs	r1, #140	; 0x8c
 80048c2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c6:	2204      	movs	r2, #4
 80048c8:	4013      	ands	r3, r2
 80048ca:	d00f      	beq.n	80048ec <UART_RxISR_8BIT_FIFOEN+0x110>
 80048cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ce:	2201      	movs	r2, #1
 80048d0:	4013      	ands	r3, r2
 80048d2:	d00b      	beq.n	80048ec <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2204      	movs	r2, #4
 80048da:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	228c      	movs	r2, #140	; 0x8c
 80048e0:	589b      	ldr	r3, [r3, r2]
 80048e2:	2202      	movs	r2, #2
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	218c      	movs	r1, #140	; 0x8c
 80048ea:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	228c      	movs	r2, #140	; 0x8c
 80048f0:	589b      	ldr	r3, [r3, r2]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d007      	beq.n	8004906 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f7fe fded 	bl	80034d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	228c      	movs	r2, #140	; 0x8c
 8004902:	2100      	movs	r1, #0
 8004904:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	225e      	movs	r2, #94	; 0x5e
 800490a:	5a9b      	ldrh	r3, [r3, r2]
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d170      	bne.n	80049f4 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004912:	f3ef 8310 	mrs	r3, PRIMASK
 8004916:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800491a:	65bb      	str	r3, [r7, #88]	; 0x58
 800491c:	2301      	movs	r3, #1
 800491e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004922:	f383 8810 	msr	PRIMASK, r3
}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	495f      	ldr	r1, [pc, #380]	; (8004ab0 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8004934:	400a      	ands	r2, r1
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800493a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493e:	f383 8810 	msr	PRIMASK, r3
}
 8004942:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004944:	f3ef 8310 	mrs	r3, PRIMASK
 8004948:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800494a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800494c:	657b      	str	r3, [r7, #84]	; 0x54
 800494e:	2301      	movs	r3, #1
 8004950:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004954:	f383 8810 	msr	PRIMASK, r3
}
 8004958:	46c0      	nop			; (mov r8, r8)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4953      	ldr	r1, [pc, #332]	; (8004ab4 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8004966:	400a      	ands	r2, r1
 8004968:	609a      	str	r2, [r3, #8]
 800496a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800496c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004970:	f383 8810 	msr	PRIMASK, r3
}
 8004974:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2288      	movs	r2, #136	; 0x88
 800497a:	2120      	movs	r1, #32
 800497c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004988:	2b01      	cmp	r3, #1
 800498a:	d12f      	bne.n	80049ec <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004992:	f3ef 8310 	mrs	r3, PRIMASK
 8004996:	623b      	str	r3, [r7, #32]
  return(result);
 8004998:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800499a:	653b      	str	r3, [r7, #80]	; 0x50
 800499c:	2301      	movs	r3, #1
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	f383 8810 	msr	PRIMASK, r3
}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2110      	movs	r1, #16
 80049b4:	438a      	bics	r2, r1
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	f383 8810 	msr	PRIMASK, r3
}
 80049c2:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	2210      	movs	r2, #16
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d103      	bne.n	80049da <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2210      	movs	r2, #16
 80049d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	225c      	movs	r2, #92	; 0x5c
 80049de:	5a9a      	ldrh	r2, [r3, r2]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	0011      	movs	r1, r2
 80049e4:	0018      	movs	r0, r3
 80049e6:	f7fe fd7f 	bl	80034e8 <HAL_UARTEx_RxEventCallback>
 80049ea:	e003      	b.n	80049f4 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	0018      	movs	r0, r3
 80049f0:	f7fb fe50 	bl	8000694 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80049f4:	235e      	movs	r3, #94	; 0x5e
 80049f6:	18fb      	adds	r3, r7, r3
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d004      	beq.n	8004a08 <UART_RxISR_8BIT_FIFOEN+0x22c>
 80049fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a00:	2220      	movs	r2, #32
 8004a02:	4013      	ands	r3, r2
 8004a04:	d000      	beq.n	8004a08 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8004a06:	e70c      	b.n	8004822 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004a08:	204e      	movs	r0, #78	; 0x4e
 8004a0a:	183b      	adds	r3, r7, r0
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	215e      	movs	r1, #94	; 0x5e
 8004a10:	5a52      	ldrh	r2, [r2, r1]
 8004a12:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004a14:	0001      	movs	r1, r0
 8004a16:	187b      	adds	r3, r7, r1
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d044      	beq.n	8004aa8 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2268      	movs	r2, #104	; 0x68
 8004a22:	5a9b      	ldrh	r3, [r3, r2]
 8004a24:	187a      	adds	r2, r7, r1
 8004a26:	8812      	ldrh	r2, [r2, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d23d      	bcs.n	8004aa8 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a30:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a32:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004a34:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a36:	2301      	movs	r3, #1
 8004a38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f383 8810 	msr	PRIMASK, r3
}
 8004a40:	46c0      	nop			; (mov r8, r8)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	491a      	ldr	r1, [pc, #104]	; (8004ab8 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8004a4e:	400a      	ands	r2, r1
 8004a50:	609a      	str	r2, [r3, #8]
 8004a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f383 8810 	msr	PRIMASK, r3
}
 8004a5c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a16      	ldr	r2, [pc, #88]	; (8004abc <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8004a62:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a64:	f3ef 8310 	mrs	r3, PRIMASK
 8004a68:	617b      	str	r3, [r7, #20]
  return(result);
 8004a6a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004a6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a6e:	2301      	movs	r3, #1
 8004a70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	f383 8810 	msr	PRIMASK, r3
}
 8004a78:	46c0      	nop			; (mov r8, r8)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2120      	movs	r1, #32
 8004a86:	430a      	orrs	r2, r1
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f383 8810 	msr	PRIMASK, r3
}
 8004a94:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a96:	e007      	b.n	8004aa8 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2108      	movs	r1, #8
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	619a      	str	r2, [r3, #24]
}
 8004aa8:	46c0      	nop			; (mov r8, r8)
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	b01c      	add	sp, #112	; 0x70
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	fffffeff 	.word	0xfffffeff
 8004ab4:	effffffe 	.word	0xeffffffe
 8004ab8:	efffffff 	.word	0xefffffff
 8004abc:	08004505 	.word	0x08004505

08004ac0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b09e      	sub	sp, #120	; 0x78
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004ac8:	2372      	movs	r3, #114	; 0x72
 8004aca:	18fb      	adds	r3, r7, r3
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	2160      	movs	r1, #96	; 0x60
 8004ad0:	5a52      	ldrh	r2, [r2, r1]
 8004ad2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2288      	movs	r2, #136	; 0x88
 8004af0:	589b      	ldr	r3, [r3, r2]
 8004af2:	2b22      	cmp	r3, #34	; 0x22
 8004af4:	d000      	beq.n	8004af8 <UART_RxISR_16BIT_FIFOEN+0x38>
 8004af6:	e141      	b.n	8004d7c <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004af8:	2366      	movs	r3, #102	; 0x66
 8004afa:	18fb      	adds	r3, r7, r3
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	2168      	movs	r1, #104	; 0x68
 8004b00:	5a52      	ldrh	r2, [r2, r1]
 8004b02:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004b04:	e0e8      	b.n	8004cd8 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b0c:	2164      	movs	r1, #100	; 0x64
 8004b0e:	187b      	adds	r3, r7, r1
 8004b10:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b16:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8004b18:	187b      	adds	r3, r7, r1
 8004b1a:	2272      	movs	r2, #114	; 0x72
 8004b1c:	18ba      	adds	r2, r7, r2
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	8812      	ldrh	r2, [r2, #0]
 8004b22:	4013      	ands	r3, r2
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2e:	1c9a      	adds	r2, r3, #2
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	225e      	movs	r2, #94	; 0x5e
 8004b38:	5a9b      	ldrh	r3, [r3, r2]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b299      	uxth	r1, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	225e      	movs	r2, #94	; 0x5e
 8004b44:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b50:	2207      	movs	r2, #7
 8004b52:	4013      	ands	r3, r2
 8004b54:	d049      	beq.n	8004bea <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b58:	2201      	movs	r2, #1
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d010      	beq.n	8004b80 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8004b5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b60:	2380      	movs	r3, #128	; 0x80
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	4013      	ands	r3, r2
 8004b66:	d00b      	beq.n	8004b80 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	228c      	movs	r2, #140	; 0x8c
 8004b74:	589b      	ldr	r3, [r3, r2]
 8004b76:	2201      	movs	r2, #1
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	218c      	movs	r1, #140	; 0x8c
 8004b7e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b82:	2202      	movs	r2, #2
 8004b84:	4013      	ands	r3, r2
 8004b86:	d00f      	beq.n	8004ba8 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8004b88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d00b      	beq.n	8004ba8 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2202      	movs	r2, #2
 8004b96:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	228c      	movs	r2, #140	; 0x8c
 8004b9c:	589b      	ldr	r3, [r3, r2]
 8004b9e:	2204      	movs	r2, #4
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	218c      	movs	r1, #140	; 0x8c
 8004ba6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004baa:	2204      	movs	r2, #4
 8004bac:	4013      	ands	r3, r2
 8004bae:	d00f      	beq.n	8004bd0 <UART_RxISR_16BIT_FIFOEN+0x110>
 8004bb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d00b      	beq.n	8004bd0 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	228c      	movs	r2, #140	; 0x8c
 8004bc4:	589b      	ldr	r3, [r3, r2]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	218c      	movs	r1, #140	; 0x8c
 8004bce:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	228c      	movs	r2, #140	; 0x8c
 8004bd4:	589b      	ldr	r3, [r3, r2]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d007      	beq.n	8004bea <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f7fe fc7b 	bl	80034d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	228c      	movs	r2, #140	; 0x8c
 8004be6:	2100      	movs	r1, #0
 8004be8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	225e      	movs	r2, #94	; 0x5e
 8004bee:	5a9b      	ldrh	r3, [r3, r2]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d170      	bne.n	8004cd8 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bfa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c00:	2301      	movs	r3, #1
 8004c02:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c06:	f383 8810 	msr	PRIMASK, r3
}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	495f      	ldr	r1, [pc, #380]	; (8004d94 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8004c18:	400a      	ands	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c22:	f383 8810 	msr	PRIMASK, r3
}
 8004c26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c28:	f3ef 8310 	mrs	r3, PRIMASK
 8004c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c30:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c32:	2301      	movs	r3, #1
 8004c34:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c38:	f383 8810 	msr	PRIMASK, r3
}
 8004c3c:	46c0      	nop			; (mov r8, r8)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4953      	ldr	r1, [pc, #332]	; (8004d98 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8004c4a:	400a      	ands	r2, r1
 8004c4c:	609a      	str	r2, [r3, #8]
 8004c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c50:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c54:	f383 8810 	msr	PRIMASK, r3
}
 8004c58:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2288      	movs	r2, #136	; 0x88
 8004c5e:	2120      	movs	r1, #32
 8004c60:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d12f      	bne.n	8004cd0 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c76:	f3ef 8310 	mrs	r3, PRIMASK
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8004c80:	2301      	movs	r3, #1
 8004c82:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c86:	f383 8810 	msr	PRIMASK, r3
}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2110      	movs	r1, #16
 8004c98:	438a      	bics	r2, r1
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	f383 8810 	msr	PRIMASK, r3
}
 8004ca6:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	2210      	movs	r2, #16
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d103      	bne.n	8004cbe <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2210      	movs	r2, #16
 8004cbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	225c      	movs	r2, #92	; 0x5c
 8004cc2:	5a9a      	ldrh	r2, [r3, r2]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	0011      	movs	r1, r2
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f7fe fc0d 	bl	80034e8 <HAL_UARTEx_RxEventCallback>
 8004cce:	e003      	b.n	8004cd8 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	f7fb fcde 	bl	8000694 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004cd8:	2366      	movs	r3, #102	; 0x66
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d004      	beq.n	8004cec <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	d000      	beq.n	8004cec <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004cea:	e70c      	b.n	8004b06 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004cec:	2052      	movs	r0, #82	; 0x52
 8004cee:	183b      	adds	r3, r7, r0
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	215e      	movs	r1, #94	; 0x5e
 8004cf4:	5a52      	ldrh	r2, [r2, r1]
 8004cf6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004cf8:	0001      	movs	r1, r0
 8004cfa:	187b      	adds	r3, r7, r1
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d044      	beq.n	8004d8c <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2268      	movs	r2, #104	; 0x68
 8004d06:	5a9b      	ldrh	r3, [r3, r2]
 8004d08:	187a      	adds	r2, r7, r1
 8004d0a:	8812      	ldrh	r2, [r2, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d23d      	bcs.n	8004d8c <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d10:	f3ef 8310 	mrs	r3, PRIMASK
 8004d14:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d16:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004d18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f383 8810 	msr	PRIMASK, r3
}
 8004d24:	46c0      	nop			; (mov r8, r8)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	491a      	ldr	r1, [pc, #104]	; (8004d9c <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8004d32:	400a      	ands	r2, r1
 8004d34:	609a      	str	r2, [r3, #8]
 8004d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f383 8810 	msr	PRIMASK, r3
}
 8004d40:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a16      	ldr	r2, [pc, #88]	; (8004da0 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8004d46:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d48:	f3ef 8310 	mrs	r3, PRIMASK
 8004d4c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d4e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004d50:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d52:	2301      	movs	r3, #1
 8004d54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	f383 8810 	msr	PRIMASK, r3
}
 8004d5c:	46c0      	nop			; (mov r8, r8)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2120      	movs	r1, #32
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d70:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	f383 8810 	msr	PRIMASK, r3
}
 8004d78:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d7a:	e007      	b.n	8004d8c <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2108      	movs	r1, #8
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	619a      	str	r2, [r3, #24]
}
 8004d8c:	46c0      	nop			; (mov r8, r8)
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	b01e      	add	sp, #120	; 0x78
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	fffffeff 	.word	0xfffffeff
 8004d98:	effffffe 	.word	0xeffffffe
 8004d9c:	efffffff 	.word	0xefffffff
 8004da0:	08004671 	.word	0x08004671

08004da4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004dac:	46c0      	nop			; (mov r8, r8)
 8004dae:	46bd      	mov	sp, r7
 8004db0:	b002      	add	sp, #8
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004dbc:	46c0      	nop			; (mov r8, r8)
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	b002      	add	sp, #8
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004dcc:	46c0      	nop			; (mov r8, r8)
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	b002      	add	sp, #8
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2280      	movs	r2, #128	; 0x80
 8004de0:	5c9b      	ldrb	r3, [r3, r2]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_UARTEx_DisableFifoMode+0x16>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e027      	b.n	8004e3a <HAL_UARTEx_DisableFifoMode+0x66>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2280      	movs	r2, #128	; 0x80
 8004dee:	2101      	movs	r1, #1
 8004df0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2284      	movs	r2, #132	; 0x84
 8004df6:	2124      	movs	r1, #36	; 0x24
 8004df8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	438a      	bics	r2, r1
 8004e10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4a0b      	ldr	r2, [pc, #44]	; (8004e44 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004e16:	4013      	ands	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2284      	movs	r2, #132	; 0x84
 8004e2c:	2120      	movs	r1, #32
 8004e2e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2280      	movs	r2, #128	; 0x80
 8004e34:	2100      	movs	r1, #0
 8004e36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	b004      	add	sp, #16
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	46c0      	nop			; (mov r8, r8)
 8004e44:	dfffffff 	.word	0xdfffffff

08004e48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2280      	movs	r2, #128	; 0x80
 8004e56:	5c9b      	ldrb	r3, [r3, r2]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e02e      	b.n	8004ebe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2280      	movs	r2, #128	; 0x80
 8004e64:	2101      	movs	r1, #1
 8004e66:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2284      	movs	r2, #132	; 0x84
 8004e6c:	2124      	movs	r1, #36	; 0x24
 8004e6e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2101      	movs	r1, #1
 8004e84:	438a      	bics	r2, r1
 8004e86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	08d9      	lsrs	r1, r3, #3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f000 f854 	bl	8004f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2284      	movs	r2, #132	; 0x84
 8004eb0:	2120      	movs	r1, #32
 8004eb2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2280      	movs	r2, #128	; 0x80
 8004eb8:	2100      	movs	r1, #0
 8004eba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b004      	add	sp, #16
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2280      	movs	r2, #128	; 0x80
 8004ed6:	5c9b      	ldrb	r3, [r3, r2]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e02f      	b.n	8004f40 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2280      	movs	r2, #128	; 0x80
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2284      	movs	r2, #132	; 0x84
 8004eec:	2124      	movs	r1, #36	; 0x24
 8004eee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2101      	movs	r1, #1
 8004f04:	438a      	bics	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	4a0e      	ldr	r2, [pc, #56]	; (8004f48 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	0019      	movs	r1, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	0018      	movs	r0, r3
 8004f22:	f000 f813 	bl	8004f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2284      	movs	r2, #132	; 0x84
 8004f32:	2120      	movs	r1, #32
 8004f34:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2280      	movs	r2, #128	; 0x80
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	0018      	movs	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	b004      	add	sp, #16
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	f1ffffff 	.word	0xf1ffffff

08004f4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d108      	bne.n	8004f6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	226a      	movs	r2, #106	; 0x6a
 8004f60:	2101      	movs	r1, #1
 8004f62:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2268      	movs	r2, #104	; 0x68
 8004f68:	2101      	movs	r1, #1
 8004f6a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f6c:	e043      	b.n	8004ff6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f6e:	260f      	movs	r6, #15
 8004f70:	19bb      	adds	r3, r7, r6
 8004f72:	2208      	movs	r2, #8
 8004f74:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f76:	200e      	movs	r0, #14
 8004f78:	183b      	adds	r3, r7, r0
 8004f7a:	2208      	movs	r2, #8
 8004f7c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	0e5b      	lsrs	r3, r3, #25
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	240d      	movs	r4, #13
 8004f8a:	193b      	adds	r3, r7, r4
 8004f8c:	2107      	movs	r1, #7
 8004f8e:	400a      	ands	r2, r1
 8004f90:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	0f5b      	lsrs	r3, r3, #29
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	250c      	movs	r5, #12
 8004f9e:	197b      	adds	r3, r7, r5
 8004fa0:	2107      	movs	r1, #7
 8004fa2:	400a      	ands	r2, r1
 8004fa4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fa6:	183b      	adds	r3, r7, r0
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	197a      	adds	r2, r7, r5
 8004fac:	7812      	ldrb	r2, [r2, #0]
 8004fae:	4914      	ldr	r1, [pc, #80]	; (8005000 <UARTEx_SetNbDataToProcess+0xb4>)
 8004fb0:	5c8a      	ldrb	r2, [r1, r2]
 8004fb2:	435a      	muls	r2, r3
 8004fb4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004fb6:	197b      	adds	r3, r7, r5
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	4a12      	ldr	r2, [pc, #72]	; (8005004 <UARTEx_SetNbDataToProcess+0xb8>)
 8004fbc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fbe:	0019      	movs	r1, r3
 8004fc0:	f7fb f934 	bl	800022c <__divsi3>
 8004fc4:	0003      	movs	r3, r0
 8004fc6:	b299      	uxth	r1, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	226a      	movs	r2, #106	; 0x6a
 8004fcc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fce:	19bb      	adds	r3, r7, r6
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	193a      	adds	r2, r7, r4
 8004fd4:	7812      	ldrb	r2, [r2, #0]
 8004fd6:	490a      	ldr	r1, [pc, #40]	; (8005000 <UARTEx_SetNbDataToProcess+0xb4>)
 8004fd8:	5c8a      	ldrb	r2, [r1, r2]
 8004fda:	435a      	muls	r2, r3
 8004fdc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004fde:	193b      	adds	r3, r7, r4
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	4a08      	ldr	r2, [pc, #32]	; (8005004 <UARTEx_SetNbDataToProcess+0xb8>)
 8004fe4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fe6:	0019      	movs	r1, r3
 8004fe8:	f7fb f920 	bl	800022c <__divsi3>
 8004fec:	0003      	movs	r3, r0
 8004fee:	b299      	uxth	r1, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2268      	movs	r2, #104	; 0x68
 8004ff4:	5299      	strh	r1, [r3, r2]
}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	b005      	add	sp, #20
 8004ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ffe:	46c0      	nop			; (mov r8, r8)
 8005000:	08005a28 	.word	0x08005a28
 8005004:	08005a30 	.word	0x08005a30

08005008 <__errno>:
 8005008:	4b01      	ldr	r3, [pc, #4]	; (8005010 <__errno+0x8>)
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	4770      	bx	lr
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	2000000c 	.word	0x2000000c

08005014 <__libc_init_array>:
 8005014:	b570      	push	{r4, r5, r6, lr}
 8005016:	2600      	movs	r6, #0
 8005018:	4d0c      	ldr	r5, [pc, #48]	; (800504c <__libc_init_array+0x38>)
 800501a:	4c0d      	ldr	r4, [pc, #52]	; (8005050 <__libc_init_array+0x3c>)
 800501c:	1b64      	subs	r4, r4, r5
 800501e:	10a4      	asrs	r4, r4, #2
 8005020:	42a6      	cmp	r6, r4
 8005022:	d109      	bne.n	8005038 <__libc_init_array+0x24>
 8005024:	2600      	movs	r6, #0
 8005026:	f000 fc8b 	bl	8005940 <_init>
 800502a:	4d0a      	ldr	r5, [pc, #40]	; (8005054 <__libc_init_array+0x40>)
 800502c:	4c0a      	ldr	r4, [pc, #40]	; (8005058 <__libc_init_array+0x44>)
 800502e:	1b64      	subs	r4, r4, r5
 8005030:	10a4      	asrs	r4, r4, #2
 8005032:	42a6      	cmp	r6, r4
 8005034:	d105      	bne.n	8005042 <__libc_init_array+0x2e>
 8005036:	bd70      	pop	{r4, r5, r6, pc}
 8005038:	00b3      	lsls	r3, r6, #2
 800503a:	58eb      	ldr	r3, [r5, r3]
 800503c:	4798      	blx	r3
 800503e:	3601      	adds	r6, #1
 8005040:	e7ee      	b.n	8005020 <__libc_init_array+0xc>
 8005042:	00b3      	lsls	r3, r6, #2
 8005044:	58eb      	ldr	r3, [r5, r3]
 8005046:	4798      	blx	r3
 8005048:	3601      	adds	r6, #1
 800504a:	e7f2      	b.n	8005032 <__libc_init_array+0x1e>
 800504c:	08005a74 	.word	0x08005a74
 8005050:	08005a74 	.word	0x08005a74
 8005054:	08005a74 	.word	0x08005a74
 8005058:	08005a78 	.word	0x08005a78

0800505c <memset>:
 800505c:	0003      	movs	r3, r0
 800505e:	1882      	adds	r2, r0, r2
 8005060:	4293      	cmp	r3, r2
 8005062:	d100      	bne.n	8005066 <memset+0xa>
 8005064:	4770      	bx	lr
 8005066:	7019      	strb	r1, [r3, #0]
 8005068:	3301      	adds	r3, #1
 800506a:	e7f9      	b.n	8005060 <memset+0x4>

0800506c <siprintf>:
 800506c:	b40e      	push	{r1, r2, r3}
 800506e:	b500      	push	{lr}
 8005070:	490b      	ldr	r1, [pc, #44]	; (80050a0 <siprintf+0x34>)
 8005072:	b09c      	sub	sp, #112	; 0x70
 8005074:	ab1d      	add	r3, sp, #116	; 0x74
 8005076:	9002      	str	r0, [sp, #8]
 8005078:	9006      	str	r0, [sp, #24]
 800507a:	9107      	str	r1, [sp, #28]
 800507c:	9104      	str	r1, [sp, #16]
 800507e:	4809      	ldr	r0, [pc, #36]	; (80050a4 <siprintf+0x38>)
 8005080:	4909      	ldr	r1, [pc, #36]	; (80050a8 <siprintf+0x3c>)
 8005082:	cb04      	ldmia	r3!, {r2}
 8005084:	9105      	str	r1, [sp, #20]
 8005086:	6800      	ldr	r0, [r0, #0]
 8005088:	a902      	add	r1, sp, #8
 800508a:	9301      	str	r3, [sp, #4]
 800508c:	f000 f870 	bl	8005170 <_svfiprintf_r>
 8005090:	2300      	movs	r3, #0
 8005092:	9a02      	ldr	r2, [sp, #8]
 8005094:	7013      	strb	r3, [r2, #0]
 8005096:	b01c      	add	sp, #112	; 0x70
 8005098:	bc08      	pop	{r3}
 800509a:	b003      	add	sp, #12
 800509c:	4718      	bx	r3
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	7fffffff 	.word	0x7fffffff
 80050a4:	2000000c 	.word	0x2000000c
 80050a8:	ffff0208 	.word	0xffff0208

080050ac <__ssputs_r>:
 80050ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ae:	688e      	ldr	r6, [r1, #8]
 80050b0:	b085      	sub	sp, #20
 80050b2:	0007      	movs	r7, r0
 80050b4:	000c      	movs	r4, r1
 80050b6:	9203      	str	r2, [sp, #12]
 80050b8:	9301      	str	r3, [sp, #4]
 80050ba:	429e      	cmp	r6, r3
 80050bc:	d83c      	bhi.n	8005138 <__ssputs_r+0x8c>
 80050be:	2390      	movs	r3, #144	; 0x90
 80050c0:	898a      	ldrh	r2, [r1, #12]
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	421a      	tst	r2, r3
 80050c6:	d034      	beq.n	8005132 <__ssputs_r+0x86>
 80050c8:	6909      	ldr	r1, [r1, #16]
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	6960      	ldr	r0, [r4, #20]
 80050ce:	1a5b      	subs	r3, r3, r1
 80050d0:	9302      	str	r3, [sp, #8]
 80050d2:	2303      	movs	r3, #3
 80050d4:	4343      	muls	r3, r0
 80050d6:	0fdd      	lsrs	r5, r3, #31
 80050d8:	18ed      	adds	r5, r5, r3
 80050da:	9b01      	ldr	r3, [sp, #4]
 80050dc:	9802      	ldr	r0, [sp, #8]
 80050de:	3301      	adds	r3, #1
 80050e0:	181b      	adds	r3, r3, r0
 80050e2:	106d      	asrs	r5, r5, #1
 80050e4:	42ab      	cmp	r3, r5
 80050e6:	d900      	bls.n	80050ea <__ssputs_r+0x3e>
 80050e8:	001d      	movs	r5, r3
 80050ea:	0553      	lsls	r3, r2, #21
 80050ec:	d532      	bpl.n	8005154 <__ssputs_r+0xa8>
 80050ee:	0029      	movs	r1, r5
 80050f0:	0038      	movs	r0, r7
 80050f2:	f000 fb53 	bl	800579c <_malloc_r>
 80050f6:	1e06      	subs	r6, r0, #0
 80050f8:	d109      	bne.n	800510e <__ssputs_r+0x62>
 80050fa:	230c      	movs	r3, #12
 80050fc:	603b      	str	r3, [r7, #0]
 80050fe:	2340      	movs	r3, #64	; 0x40
 8005100:	2001      	movs	r0, #1
 8005102:	89a2      	ldrh	r2, [r4, #12]
 8005104:	4240      	negs	r0, r0
 8005106:	4313      	orrs	r3, r2
 8005108:	81a3      	strh	r3, [r4, #12]
 800510a:	b005      	add	sp, #20
 800510c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800510e:	9a02      	ldr	r2, [sp, #8]
 8005110:	6921      	ldr	r1, [r4, #16]
 8005112:	f000 faba 	bl	800568a <memcpy>
 8005116:	89a3      	ldrh	r3, [r4, #12]
 8005118:	4a14      	ldr	r2, [pc, #80]	; (800516c <__ssputs_r+0xc0>)
 800511a:	401a      	ands	r2, r3
 800511c:	2380      	movs	r3, #128	; 0x80
 800511e:	4313      	orrs	r3, r2
 8005120:	81a3      	strh	r3, [r4, #12]
 8005122:	9b02      	ldr	r3, [sp, #8]
 8005124:	6126      	str	r6, [r4, #16]
 8005126:	18f6      	adds	r6, r6, r3
 8005128:	6026      	str	r6, [r4, #0]
 800512a:	6165      	str	r5, [r4, #20]
 800512c:	9e01      	ldr	r6, [sp, #4]
 800512e:	1aed      	subs	r5, r5, r3
 8005130:	60a5      	str	r5, [r4, #8]
 8005132:	9b01      	ldr	r3, [sp, #4]
 8005134:	429e      	cmp	r6, r3
 8005136:	d900      	bls.n	800513a <__ssputs_r+0x8e>
 8005138:	9e01      	ldr	r6, [sp, #4]
 800513a:	0032      	movs	r2, r6
 800513c:	9903      	ldr	r1, [sp, #12]
 800513e:	6820      	ldr	r0, [r4, #0]
 8005140:	f000 faac 	bl	800569c <memmove>
 8005144:	68a3      	ldr	r3, [r4, #8]
 8005146:	2000      	movs	r0, #0
 8005148:	1b9b      	subs	r3, r3, r6
 800514a:	60a3      	str	r3, [r4, #8]
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	199e      	adds	r6, r3, r6
 8005150:	6026      	str	r6, [r4, #0]
 8005152:	e7da      	b.n	800510a <__ssputs_r+0x5e>
 8005154:	002a      	movs	r2, r5
 8005156:	0038      	movs	r0, r7
 8005158:	f000 fb96 	bl	8005888 <_realloc_r>
 800515c:	1e06      	subs	r6, r0, #0
 800515e:	d1e0      	bne.n	8005122 <__ssputs_r+0x76>
 8005160:	0038      	movs	r0, r7
 8005162:	6921      	ldr	r1, [r4, #16]
 8005164:	f000 faae 	bl	80056c4 <_free_r>
 8005168:	e7c7      	b.n	80050fa <__ssputs_r+0x4e>
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	fffffb7f 	.word	0xfffffb7f

08005170 <_svfiprintf_r>:
 8005170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005172:	b0a1      	sub	sp, #132	; 0x84
 8005174:	9003      	str	r0, [sp, #12]
 8005176:	001d      	movs	r5, r3
 8005178:	898b      	ldrh	r3, [r1, #12]
 800517a:	000f      	movs	r7, r1
 800517c:	0016      	movs	r6, r2
 800517e:	061b      	lsls	r3, r3, #24
 8005180:	d511      	bpl.n	80051a6 <_svfiprintf_r+0x36>
 8005182:	690b      	ldr	r3, [r1, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10e      	bne.n	80051a6 <_svfiprintf_r+0x36>
 8005188:	2140      	movs	r1, #64	; 0x40
 800518a:	f000 fb07 	bl	800579c <_malloc_r>
 800518e:	6038      	str	r0, [r7, #0]
 8005190:	6138      	str	r0, [r7, #16]
 8005192:	2800      	cmp	r0, #0
 8005194:	d105      	bne.n	80051a2 <_svfiprintf_r+0x32>
 8005196:	230c      	movs	r3, #12
 8005198:	9a03      	ldr	r2, [sp, #12]
 800519a:	3801      	subs	r0, #1
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	b021      	add	sp, #132	; 0x84
 80051a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051a2:	2340      	movs	r3, #64	; 0x40
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	2300      	movs	r3, #0
 80051a8:	ac08      	add	r4, sp, #32
 80051aa:	6163      	str	r3, [r4, #20]
 80051ac:	3320      	adds	r3, #32
 80051ae:	7663      	strb	r3, [r4, #25]
 80051b0:	3310      	adds	r3, #16
 80051b2:	76a3      	strb	r3, [r4, #26]
 80051b4:	9507      	str	r5, [sp, #28]
 80051b6:	0035      	movs	r5, r6
 80051b8:	782b      	ldrb	r3, [r5, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <_svfiprintf_r+0x52>
 80051be:	2b25      	cmp	r3, #37	; 0x25
 80051c0:	d147      	bne.n	8005252 <_svfiprintf_r+0xe2>
 80051c2:	1bab      	subs	r3, r5, r6
 80051c4:	9305      	str	r3, [sp, #20]
 80051c6:	42b5      	cmp	r5, r6
 80051c8:	d00c      	beq.n	80051e4 <_svfiprintf_r+0x74>
 80051ca:	0032      	movs	r2, r6
 80051cc:	0039      	movs	r1, r7
 80051ce:	9803      	ldr	r0, [sp, #12]
 80051d0:	f7ff ff6c 	bl	80050ac <__ssputs_r>
 80051d4:	1c43      	adds	r3, r0, #1
 80051d6:	d100      	bne.n	80051da <_svfiprintf_r+0x6a>
 80051d8:	e0ae      	b.n	8005338 <_svfiprintf_r+0x1c8>
 80051da:	6962      	ldr	r2, [r4, #20]
 80051dc:	9b05      	ldr	r3, [sp, #20]
 80051de:	4694      	mov	ip, r2
 80051e0:	4463      	add	r3, ip
 80051e2:	6163      	str	r3, [r4, #20]
 80051e4:	782b      	ldrb	r3, [r5, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d100      	bne.n	80051ec <_svfiprintf_r+0x7c>
 80051ea:	e0a5      	b.n	8005338 <_svfiprintf_r+0x1c8>
 80051ec:	2201      	movs	r2, #1
 80051ee:	2300      	movs	r3, #0
 80051f0:	4252      	negs	r2, r2
 80051f2:	6062      	str	r2, [r4, #4]
 80051f4:	a904      	add	r1, sp, #16
 80051f6:	3254      	adds	r2, #84	; 0x54
 80051f8:	1852      	adds	r2, r2, r1
 80051fa:	1c6e      	adds	r6, r5, #1
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	60e3      	str	r3, [r4, #12]
 8005200:	60a3      	str	r3, [r4, #8]
 8005202:	7013      	strb	r3, [r2, #0]
 8005204:	65a3      	str	r3, [r4, #88]	; 0x58
 8005206:	2205      	movs	r2, #5
 8005208:	7831      	ldrb	r1, [r6, #0]
 800520a:	4854      	ldr	r0, [pc, #336]	; (800535c <_svfiprintf_r+0x1ec>)
 800520c:	f000 fa32 	bl	8005674 <memchr>
 8005210:	1c75      	adds	r5, r6, #1
 8005212:	2800      	cmp	r0, #0
 8005214:	d11f      	bne.n	8005256 <_svfiprintf_r+0xe6>
 8005216:	6822      	ldr	r2, [r4, #0]
 8005218:	06d3      	lsls	r3, r2, #27
 800521a:	d504      	bpl.n	8005226 <_svfiprintf_r+0xb6>
 800521c:	2353      	movs	r3, #83	; 0x53
 800521e:	a904      	add	r1, sp, #16
 8005220:	185b      	adds	r3, r3, r1
 8005222:	2120      	movs	r1, #32
 8005224:	7019      	strb	r1, [r3, #0]
 8005226:	0713      	lsls	r3, r2, #28
 8005228:	d504      	bpl.n	8005234 <_svfiprintf_r+0xc4>
 800522a:	2353      	movs	r3, #83	; 0x53
 800522c:	a904      	add	r1, sp, #16
 800522e:	185b      	adds	r3, r3, r1
 8005230:	212b      	movs	r1, #43	; 0x2b
 8005232:	7019      	strb	r1, [r3, #0]
 8005234:	7833      	ldrb	r3, [r6, #0]
 8005236:	2b2a      	cmp	r3, #42	; 0x2a
 8005238:	d016      	beq.n	8005268 <_svfiprintf_r+0xf8>
 800523a:	0035      	movs	r5, r6
 800523c:	2100      	movs	r1, #0
 800523e:	200a      	movs	r0, #10
 8005240:	68e3      	ldr	r3, [r4, #12]
 8005242:	782a      	ldrb	r2, [r5, #0]
 8005244:	1c6e      	adds	r6, r5, #1
 8005246:	3a30      	subs	r2, #48	; 0x30
 8005248:	2a09      	cmp	r2, #9
 800524a:	d94e      	bls.n	80052ea <_svfiprintf_r+0x17a>
 800524c:	2900      	cmp	r1, #0
 800524e:	d111      	bne.n	8005274 <_svfiprintf_r+0x104>
 8005250:	e017      	b.n	8005282 <_svfiprintf_r+0x112>
 8005252:	3501      	adds	r5, #1
 8005254:	e7b0      	b.n	80051b8 <_svfiprintf_r+0x48>
 8005256:	4b41      	ldr	r3, [pc, #260]	; (800535c <_svfiprintf_r+0x1ec>)
 8005258:	6822      	ldr	r2, [r4, #0]
 800525a:	1ac0      	subs	r0, r0, r3
 800525c:	2301      	movs	r3, #1
 800525e:	4083      	lsls	r3, r0
 8005260:	4313      	orrs	r3, r2
 8005262:	002e      	movs	r6, r5
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	e7ce      	b.n	8005206 <_svfiprintf_r+0x96>
 8005268:	9b07      	ldr	r3, [sp, #28]
 800526a:	1d19      	adds	r1, r3, #4
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	9107      	str	r1, [sp, #28]
 8005270:	2b00      	cmp	r3, #0
 8005272:	db01      	blt.n	8005278 <_svfiprintf_r+0x108>
 8005274:	930b      	str	r3, [sp, #44]	; 0x2c
 8005276:	e004      	b.n	8005282 <_svfiprintf_r+0x112>
 8005278:	425b      	negs	r3, r3
 800527a:	60e3      	str	r3, [r4, #12]
 800527c:	2302      	movs	r3, #2
 800527e:	4313      	orrs	r3, r2
 8005280:	6023      	str	r3, [r4, #0]
 8005282:	782b      	ldrb	r3, [r5, #0]
 8005284:	2b2e      	cmp	r3, #46	; 0x2e
 8005286:	d10a      	bne.n	800529e <_svfiprintf_r+0x12e>
 8005288:	786b      	ldrb	r3, [r5, #1]
 800528a:	2b2a      	cmp	r3, #42	; 0x2a
 800528c:	d135      	bne.n	80052fa <_svfiprintf_r+0x18a>
 800528e:	9b07      	ldr	r3, [sp, #28]
 8005290:	3502      	adds	r5, #2
 8005292:	1d1a      	adds	r2, r3, #4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	9207      	str	r2, [sp, #28]
 8005298:	2b00      	cmp	r3, #0
 800529a:	db2b      	blt.n	80052f4 <_svfiprintf_r+0x184>
 800529c:	9309      	str	r3, [sp, #36]	; 0x24
 800529e:	4e30      	ldr	r6, [pc, #192]	; (8005360 <_svfiprintf_r+0x1f0>)
 80052a0:	2203      	movs	r2, #3
 80052a2:	0030      	movs	r0, r6
 80052a4:	7829      	ldrb	r1, [r5, #0]
 80052a6:	f000 f9e5 	bl	8005674 <memchr>
 80052aa:	2800      	cmp	r0, #0
 80052ac:	d006      	beq.n	80052bc <_svfiprintf_r+0x14c>
 80052ae:	2340      	movs	r3, #64	; 0x40
 80052b0:	1b80      	subs	r0, r0, r6
 80052b2:	4083      	lsls	r3, r0
 80052b4:	6822      	ldr	r2, [r4, #0]
 80052b6:	3501      	adds	r5, #1
 80052b8:	4313      	orrs	r3, r2
 80052ba:	6023      	str	r3, [r4, #0]
 80052bc:	7829      	ldrb	r1, [r5, #0]
 80052be:	2206      	movs	r2, #6
 80052c0:	4828      	ldr	r0, [pc, #160]	; (8005364 <_svfiprintf_r+0x1f4>)
 80052c2:	1c6e      	adds	r6, r5, #1
 80052c4:	7621      	strb	r1, [r4, #24]
 80052c6:	f000 f9d5 	bl	8005674 <memchr>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d03c      	beq.n	8005348 <_svfiprintf_r+0x1d8>
 80052ce:	4b26      	ldr	r3, [pc, #152]	; (8005368 <_svfiprintf_r+0x1f8>)
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d125      	bne.n	8005320 <_svfiprintf_r+0x1b0>
 80052d4:	2207      	movs	r2, #7
 80052d6:	9b07      	ldr	r3, [sp, #28]
 80052d8:	3307      	adds	r3, #7
 80052da:	4393      	bics	r3, r2
 80052dc:	3308      	adds	r3, #8
 80052de:	9307      	str	r3, [sp, #28]
 80052e0:	6963      	ldr	r3, [r4, #20]
 80052e2:	9a04      	ldr	r2, [sp, #16]
 80052e4:	189b      	adds	r3, r3, r2
 80052e6:	6163      	str	r3, [r4, #20]
 80052e8:	e765      	b.n	80051b6 <_svfiprintf_r+0x46>
 80052ea:	4343      	muls	r3, r0
 80052ec:	0035      	movs	r5, r6
 80052ee:	2101      	movs	r1, #1
 80052f0:	189b      	adds	r3, r3, r2
 80052f2:	e7a6      	b.n	8005242 <_svfiprintf_r+0xd2>
 80052f4:	2301      	movs	r3, #1
 80052f6:	425b      	negs	r3, r3
 80052f8:	e7d0      	b.n	800529c <_svfiprintf_r+0x12c>
 80052fa:	2300      	movs	r3, #0
 80052fc:	200a      	movs	r0, #10
 80052fe:	001a      	movs	r2, r3
 8005300:	3501      	adds	r5, #1
 8005302:	6063      	str	r3, [r4, #4]
 8005304:	7829      	ldrb	r1, [r5, #0]
 8005306:	1c6e      	adds	r6, r5, #1
 8005308:	3930      	subs	r1, #48	; 0x30
 800530a:	2909      	cmp	r1, #9
 800530c:	d903      	bls.n	8005316 <_svfiprintf_r+0x1a6>
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0c5      	beq.n	800529e <_svfiprintf_r+0x12e>
 8005312:	9209      	str	r2, [sp, #36]	; 0x24
 8005314:	e7c3      	b.n	800529e <_svfiprintf_r+0x12e>
 8005316:	4342      	muls	r2, r0
 8005318:	0035      	movs	r5, r6
 800531a:	2301      	movs	r3, #1
 800531c:	1852      	adds	r2, r2, r1
 800531e:	e7f1      	b.n	8005304 <_svfiprintf_r+0x194>
 8005320:	ab07      	add	r3, sp, #28
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	003a      	movs	r2, r7
 8005326:	0021      	movs	r1, r4
 8005328:	4b10      	ldr	r3, [pc, #64]	; (800536c <_svfiprintf_r+0x1fc>)
 800532a:	9803      	ldr	r0, [sp, #12]
 800532c:	e000      	b.n	8005330 <_svfiprintf_r+0x1c0>
 800532e:	bf00      	nop
 8005330:	9004      	str	r0, [sp, #16]
 8005332:	9b04      	ldr	r3, [sp, #16]
 8005334:	3301      	adds	r3, #1
 8005336:	d1d3      	bne.n	80052e0 <_svfiprintf_r+0x170>
 8005338:	89bb      	ldrh	r3, [r7, #12]
 800533a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800533c:	065b      	lsls	r3, r3, #25
 800533e:	d400      	bmi.n	8005342 <_svfiprintf_r+0x1d2>
 8005340:	e72d      	b.n	800519e <_svfiprintf_r+0x2e>
 8005342:	2001      	movs	r0, #1
 8005344:	4240      	negs	r0, r0
 8005346:	e72a      	b.n	800519e <_svfiprintf_r+0x2e>
 8005348:	ab07      	add	r3, sp, #28
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	003a      	movs	r2, r7
 800534e:	0021      	movs	r1, r4
 8005350:	4b06      	ldr	r3, [pc, #24]	; (800536c <_svfiprintf_r+0x1fc>)
 8005352:	9803      	ldr	r0, [sp, #12]
 8005354:	f000 f87c 	bl	8005450 <_printf_i>
 8005358:	e7ea      	b.n	8005330 <_svfiprintf_r+0x1c0>
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	08005a38 	.word	0x08005a38
 8005360:	08005a3e 	.word	0x08005a3e
 8005364:	08005a42 	.word	0x08005a42
 8005368:	00000000 	.word	0x00000000
 800536c:	080050ad 	.word	0x080050ad

08005370 <_printf_common>:
 8005370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005372:	0015      	movs	r5, r2
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	688a      	ldr	r2, [r1, #8]
 8005378:	690b      	ldr	r3, [r1, #16]
 800537a:	000c      	movs	r4, r1
 800537c:	9000      	str	r0, [sp, #0]
 800537e:	4293      	cmp	r3, r2
 8005380:	da00      	bge.n	8005384 <_printf_common+0x14>
 8005382:	0013      	movs	r3, r2
 8005384:	0022      	movs	r2, r4
 8005386:	602b      	str	r3, [r5, #0]
 8005388:	3243      	adds	r2, #67	; 0x43
 800538a:	7812      	ldrb	r2, [r2, #0]
 800538c:	2a00      	cmp	r2, #0
 800538e:	d001      	beq.n	8005394 <_printf_common+0x24>
 8005390:	3301      	adds	r3, #1
 8005392:	602b      	str	r3, [r5, #0]
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	069b      	lsls	r3, r3, #26
 8005398:	d502      	bpl.n	80053a0 <_printf_common+0x30>
 800539a:	682b      	ldr	r3, [r5, #0]
 800539c:	3302      	adds	r3, #2
 800539e:	602b      	str	r3, [r5, #0]
 80053a0:	6822      	ldr	r2, [r4, #0]
 80053a2:	2306      	movs	r3, #6
 80053a4:	0017      	movs	r7, r2
 80053a6:	401f      	ands	r7, r3
 80053a8:	421a      	tst	r2, r3
 80053aa:	d027      	beq.n	80053fc <_printf_common+0x8c>
 80053ac:	0023      	movs	r3, r4
 80053ae:	3343      	adds	r3, #67	; 0x43
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	1e5a      	subs	r2, r3, #1
 80053b4:	4193      	sbcs	r3, r2
 80053b6:	6822      	ldr	r2, [r4, #0]
 80053b8:	0692      	lsls	r2, r2, #26
 80053ba:	d430      	bmi.n	800541e <_printf_common+0xae>
 80053bc:	0022      	movs	r2, r4
 80053be:	9901      	ldr	r1, [sp, #4]
 80053c0:	9800      	ldr	r0, [sp, #0]
 80053c2:	9e08      	ldr	r6, [sp, #32]
 80053c4:	3243      	adds	r2, #67	; 0x43
 80053c6:	47b0      	blx	r6
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	d025      	beq.n	8005418 <_printf_common+0xa8>
 80053cc:	2306      	movs	r3, #6
 80053ce:	6820      	ldr	r0, [r4, #0]
 80053d0:	682a      	ldr	r2, [r5, #0]
 80053d2:	68e1      	ldr	r1, [r4, #12]
 80053d4:	2500      	movs	r5, #0
 80053d6:	4003      	ands	r3, r0
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d103      	bne.n	80053e4 <_printf_common+0x74>
 80053dc:	1a8d      	subs	r5, r1, r2
 80053de:	43eb      	mvns	r3, r5
 80053e0:	17db      	asrs	r3, r3, #31
 80053e2:	401d      	ands	r5, r3
 80053e4:	68a3      	ldr	r3, [r4, #8]
 80053e6:	6922      	ldr	r2, [r4, #16]
 80053e8:	4293      	cmp	r3, r2
 80053ea:	dd01      	ble.n	80053f0 <_printf_common+0x80>
 80053ec:	1a9b      	subs	r3, r3, r2
 80053ee:	18ed      	adds	r5, r5, r3
 80053f0:	2700      	movs	r7, #0
 80053f2:	42bd      	cmp	r5, r7
 80053f4:	d120      	bne.n	8005438 <_printf_common+0xc8>
 80053f6:	2000      	movs	r0, #0
 80053f8:	e010      	b.n	800541c <_printf_common+0xac>
 80053fa:	3701      	adds	r7, #1
 80053fc:	68e3      	ldr	r3, [r4, #12]
 80053fe:	682a      	ldr	r2, [r5, #0]
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	42bb      	cmp	r3, r7
 8005404:	ddd2      	ble.n	80053ac <_printf_common+0x3c>
 8005406:	0022      	movs	r2, r4
 8005408:	2301      	movs	r3, #1
 800540a:	9901      	ldr	r1, [sp, #4]
 800540c:	9800      	ldr	r0, [sp, #0]
 800540e:	9e08      	ldr	r6, [sp, #32]
 8005410:	3219      	adds	r2, #25
 8005412:	47b0      	blx	r6
 8005414:	1c43      	adds	r3, r0, #1
 8005416:	d1f0      	bne.n	80053fa <_printf_common+0x8a>
 8005418:	2001      	movs	r0, #1
 800541a:	4240      	negs	r0, r0
 800541c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800541e:	2030      	movs	r0, #48	; 0x30
 8005420:	18e1      	adds	r1, r4, r3
 8005422:	3143      	adds	r1, #67	; 0x43
 8005424:	7008      	strb	r0, [r1, #0]
 8005426:	0021      	movs	r1, r4
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	3145      	adds	r1, #69	; 0x45
 800542c:	7809      	ldrb	r1, [r1, #0]
 800542e:	18a2      	adds	r2, r4, r2
 8005430:	3243      	adds	r2, #67	; 0x43
 8005432:	3302      	adds	r3, #2
 8005434:	7011      	strb	r1, [r2, #0]
 8005436:	e7c1      	b.n	80053bc <_printf_common+0x4c>
 8005438:	0022      	movs	r2, r4
 800543a:	2301      	movs	r3, #1
 800543c:	9901      	ldr	r1, [sp, #4]
 800543e:	9800      	ldr	r0, [sp, #0]
 8005440:	9e08      	ldr	r6, [sp, #32]
 8005442:	321a      	adds	r2, #26
 8005444:	47b0      	blx	r6
 8005446:	1c43      	adds	r3, r0, #1
 8005448:	d0e6      	beq.n	8005418 <_printf_common+0xa8>
 800544a:	3701      	adds	r7, #1
 800544c:	e7d1      	b.n	80053f2 <_printf_common+0x82>
	...

08005450 <_printf_i>:
 8005450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005452:	b08b      	sub	sp, #44	; 0x2c
 8005454:	9206      	str	r2, [sp, #24]
 8005456:	000a      	movs	r2, r1
 8005458:	3243      	adds	r2, #67	; 0x43
 800545a:	9307      	str	r3, [sp, #28]
 800545c:	9005      	str	r0, [sp, #20]
 800545e:	9204      	str	r2, [sp, #16]
 8005460:	7e0a      	ldrb	r2, [r1, #24]
 8005462:	000c      	movs	r4, r1
 8005464:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005466:	2a78      	cmp	r2, #120	; 0x78
 8005468:	d807      	bhi.n	800547a <_printf_i+0x2a>
 800546a:	2a62      	cmp	r2, #98	; 0x62
 800546c:	d809      	bhi.n	8005482 <_printf_i+0x32>
 800546e:	2a00      	cmp	r2, #0
 8005470:	d100      	bne.n	8005474 <_printf_i+0x24>
 8005472:	e0c1      	b.n	80055f8 <_printf_i+0x1a8>
 8005474:	2a58      	cmp	r2, #88	; 0x58
 8005476:	d100      	bne.n	800547a <_printf_i+0x2a>
 8005478:	e08c      	b.n	8005594 <_printf_i+0x144>
 800547a:	0026      	movs	r6, r4
 800547c:	3642      	adds	r6, #66	; 0x42
 800547e:	7032      	strb	r2, [r6, #0]
 8005480:	e022      	b.n	80054c8 <_printf_i+0x78>
 8005482:	0010      	movs	r0, r2
 8005484:	3863      	subs	r0, #99	; 0x63
 8005486:	2815      	cmp	r0, #21
 8005488:	d8f7      	bhi.n	800547a <_printf_i+0x2a>
 800548a:	f7fa fe3b 	bl	8000104 <__gnu_thumb1_case_shi>
 800548e:	0016      	.short	0x0016
 8005490:	fff6001f 	.word	0xfff6001f
 8005494:	fff6fff6 	.word	0xfff6fff6
 8005498:	001ffff6 	.word	0x001ffff6
 800549c:	fff6fff6 	.word	0xfff6fff6
 80054a0:	fff6fff6 	.word	0xfff6fff6
 80054a4:	003600a8 	.word	0x003600a8
 80054a8:	fff6009a 	.word	0xfff6009a
 80054ac:	00b9fff6 	.word	0x00b9fff6
 80054b0:	0036fff6 	.word	0x0036fff6
 80054b4:	fff6fff6 	.word	0xfff6fff6
 80054b8:	009e      	.short	0x009e
 80054ba:	0026      	movs	r6, r4
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	3642      	adds	r6, #66	; 0x42
 80054c0:	1d11      	adds	r1, r2, #4
 80054c2:	6019      	str	r1, [r3, #0]
 80054c4:	6813      	ldr	r3, [r2, #0]
 80054c6:	7033      	strb	r3, [r6, #0]
 80054c8:	2301      	movs	r3, #1
 80054ca:	e0a7      	b.n	800561c <_printf_i+0x1cc>
 80054cc:	6808      	ldr	r0, [r1, #0]
 80054ce:	6819      	ldr	r1, [r3, #0]
 80054d0:	1d0a      	adds	r2, r1, #4
 80054d2:	0605      	lsls	r5, r0, #24
 80054d4:	d50b      	bpl.n	80054ee <_printf_i+0x9e>
 80054d6:	680d      	ldr	r5, [r1, #0]
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	2d00      	cmp	r5, #0
 80054dc:	da03      	bge.n	80054e6 <_printf_i+0x96>
 80054de:	232d      	movs	r3, #45	; 0x2d
 80054e0:	9a04      	ldr	r2, [sp, #16]
 80054e2:	426d      	negs	r5, r5
 80054e4:	7013      	strb	r3, [r2, #0]
 80054e6:	4b61      	ldr	r3, [pc, #388]	; (800566c <_printf_i+0x21c>)
 80054e8:	270a      	movs	r7, #10
 80054ea:	9303      	str	r3, [sp, #12]
 80054ec:	e01b      	b.n	8005526 <_printf_i+0xd6>
 80054ee:	680d      	ldr	r5, [r1, #0]
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	0641      	lsls	r1, r0, #25
 80054f4:	d5f1      	bpl.n	80054da <_printf_i+0x8a>
 80054f6:	b22d      	sxth	r5, r5
 80054f8:	e7ef      	b.n	80054da <_printf_i+0x8a>
 80054fa:	680d      	ldr	r5, [r1, #0]
 80054fc:	6819      	ldr	r1, [r3, #0]
 80054fe:	1d08      	adds	r0, r1, #4
 8005500:	6018      	str	r0, [r3, #0]
 8005502:	062e      	lsls	r6, r5, #24
 8005504:	d501      	bpl.n	800550a <_printf_i+0xba>
 8005506:	680d      	ldr	r5, [r1, #0]
 8005508:	e003      	b.n	8005512 <_printf_i+0xc2>
 800550a:	066d      	lsls	r5, r5, #25
 800550c:	d5fb      	bpl.n	8005506 <_printf_i+0xb6>
 800550e:	680d      	ldr	r5, [r1, #0]
 8005510:	b2ad      	uxth	r5, r5
 8005512:	4b56      	ldr	r3, [pc, #344]	; (800566c <_printf_i+0x21c>)
 8005514:	2708      	movs	r7, #8
 8005516:	9303      	str	r3, [sp, #12]
 8005518:	2a6f      	cmp	r2, #111	; 0x6f
 800551a:	d000      	beq.n	800551e <_printf_i+0xce>
 800551c:	3702      	adds	r7, #2
 800551e:	0023      	movs	r3, r4
 8005520:	2200      	movs	r2, #0
 8005522:	3343      	adds	r3, #67	; 0x43
 8005524:	701a      	strb	r2, [r3, #0]
 8005526:	6863      	ldr	r3, [r4, #4]
 8005528:	60a3      	str	r3, [r4, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	db03      	blt.n	8005536 <_printf_i+0xe6>
 800552e:	2204      	movs	r2, #4
 8005530:	6821      	ldr	r1, [r4, #0]
 8005532:	4391      	bics	r1, r2
 8005534:	6021      	str	r1, [r4, #0]
 8005536:	2d00      	cmp	r5, #0
 8005538:	d102      	bne.n	8005540 <_printf_i+0xf0>
 800553a:	9e04      	ldr	r6, [sp, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00c      	beq.n	800555a <_printf_i+0x10a>
 8005540:	9e04      	ldr	r6, [sp, #16]
 8005542:	0028      	movs	r0, r5
 8005544:	0039      	movs	r1, r7
 8005546:	f7fa fe6d 	bl	8000224 <__aeabi_uidivmod>
 800554a:	9b03      	ldr	r3, [sp, #12]
 800554c:	3e01      	subs	r6, #1
 800554e:	5c5b      	ldrb	r3, [r3, r1]
 8005550:	7033      	strb	r3, [r6, #0]
 8005552:	002b      	movs	r3, r5
 8005554:	0005      	movs	r5, r0
 8005556:	429f      	cmp	r7, r3
 8005558:	d9f3      	bls.n	8005542 <_printf_i+0xf2>
 800555a:	2f08      	cmp	r7, #8
 800555c:	d109      	bne.n	8005572 <_printf_i+0x122>
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	07db      	lsls	r3, r3, #31
 8005562:	d506      	bpl.n	8005572 <_printf_i+0x122>
 8005564:	6863      	ldr	r3, [r4, #4]
 8005566:	6922      	ldr	r2, [r4, #16]
 8005568:	4293      	cmp	r3, r2
 800556a:	dc02      	bgt.n	8005572 <_printf_i+0x122>
 800556c:	2330      	movs	r3, #48	; 0x30
 800556e:	3e01      	subs	r6, #1
 8005570:	7033      	strb	r3, [r6, #0]
 8005572:	9b04      	ldr	r3, [sp, #16]
 8005574:	1b9b      	subs	r3, r3, r6
 8005576:	6123      	str	r3, [r4, #16]
 8005578:	9b07      	ldr	r3, [sp, #28]
 800557a:	0021      	movs	r1, r4
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	9805      	ldr	r0, [sp, #20]
 8005580:	9b06      	ldr	r3, [sp, #24]
 8005582:	aa09      	add	r2, sp, #36	; 0x24
 8005584:	f7ff fef4 	bl	8005370 <_printf_common>
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	d14c      	bne.n	8005626 <_printf_i+0x1d6>
 800558c:	2001      	movs	r0, #1
 800558e:	4240      	negs	r0, r0
 8005590:	b00b      	add	sp, #44	; 0x2c
 8005592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005594:	3145      	adds	r1, #69	; 0x45
 8005596:	700a      	strb	r2, [r1, #0]
 8005598:	4a34      	ldr	r2, [pc, #208]	; (800566c <_printf_i+0x21c>)
 800559a:	9203      	str	r2, [sp, #12]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	6821      	ldr	r1, [r4, #0]
 80055a0:	ca20      	ldmia	r2!, {r5}
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	0608      	lsls	r0, r1, #24
 80055a6:	d516      	bpl.n	80055d6 <_printf_i+0x186>
 80055a8:	07cb      	lsls	r3, r1, #31
 80055aa:	d502      	bpl.n	80055b2 <_printf_i+0x162>
 80055ac:	2320      	movs	r3, #32
 80055ae:	4319      	orrs	r1, r3
 80055b0:	6021      	str	r1, [r4, #0]
 80055b2:	2710      	movs	r7, #16
 80055b4:	2d00      	cmp	r5, #0
 80055b6:	d1b2      	bne.n	800551e <_printf_i+0xce>
 80055b8:	2320      	movs	r3, #32
 80055ba:	6822      	ldr	r2, [r4, #0]
 80055bc:	439a      	bics	r2, r3
 80055be:	6022      	str	r2, [r4, #0]
 80055c0:	e7ad      	b.n	800551e <_printf_i+0xce>
 80055c2:	2220      	movs	r2, #32
 80055c4:	6809      	ldr	r1, [r1, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	6022      	str	r2, [r4, #0]
 80055ca:	0022      	movs	r2, r4
 80055cc:	2178      	movs	r1, #120	; 0x78
 80055ce:	3245      	adds	r2, #69	; 0x45
 80055d0:	7011      	strb	r1, [r2, #0]
 80055d2:	4a27      	ldr	r2, [pc, #156]	; (8005670 <_printf_i+0x220>)
 80055d4:	e7e1      	b.n	800559a <_printf_i+0x14a>
 80055d6:	0648      	lsls	r0, r1, #25
 80055d8:	d5e6      	bpl.n	80055a8 <_printf_i+0x158>
 80055da:	b2ad      	uxth	r5, r5
 80055dc:	e7e4      	b.n	80055a8 <_printf_i+0x158>
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	680d      	ldr	r5, [r1, #0]
 80055e2:	1d10      	adds	r0, r2, #4
 80055e4:	6949      	ldr	r1, [r1, #20]
 80055e6:	6018      	str	r0, [r3, #0]
 80055e8:	6813      	ldr	r3, [r2, #0]
 80055ea:	062e      	lsls	r6, r5, #24
 80055ec:	d501      	bpl.n	80055f2 <_printf_i+0x1a2>
 80055ee:	6019      	str	r1, [r3, #0]
 80055f0:	e002      	b.n	80055f8 <_printf_i+0x1a8>
 80055f2:	066d      	lsls	r5, r5, #25
 80055f4:	d5fb      	bpl.n	80055ee <_printf_i+0x19e>
 80055f6:	8019      	strh	r1, [r3, #0]
 80055f8:	2300      	movs	r3, #0
 80055fa:	9e04      	ldr	r6, [sp, #16]
 80055fc:	6123      	str	r3, [r4, #16]
 80055fe:	e7bb      	b.n	8005578 <_printf_i+0x128>
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	1d11      	adds	r1, r2, #4
 8005604:	6019      	str	r1, [r3, #0]
 8005606:	6816      	ldr	r6, [r2, #0]
 8005608:	2100      	movs	r1, #0
 800560a:	0030      	movs	r0, r6
 800560c:	6862      	ldr	r2, [r4, #4]
 800560e:	f000 f831 	bl	8005674 <memchr>
 8005612:	2800      	cmp	r0, #0
 8005614:	d001      	beq.n	800561a <_printf_i+0x1ca>
 8005616:	1b80      	subs	r0, r0, r6
 8005618:	6060      	str	r0, [r4, #4]
 800561a:	6863      	ldr	r3, [r4, #4]
 800561c:	6123      	str	r3, [r4, #16]
 800561e:	2300      	movs	r3, #0
 8005620:	9a04      	ldr	r2, [sp, #16]
 8005622:	7013      	strb	r3, [r2, #0]
 8005624:	e7a8      	b.n	8005578 <_printf_i+0x128>
 8005626:	6923      	ldr	r3, [r4, #16]
 8005628:	0032      	movs	r2, r6
 800562a:	9906      	ldr	r1, [sp, #24]
 800562c:	9805      	ldr	r0, [sp, #20]
 800562e:	9d07      	ldr	r5, [sp, #28]
 8005630:	47a8      	blx	r5
 8005632:	1c43      	adds	r3, r0, #1
 8005634:	d0aa      	beq.n	800558c <_printf_i+0x13c>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	079b      	lsls	r3, r3, #30
 800563a:	d415      	bmi.n	8005668 <_printf_i+0x218>
 800563c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800563e:	68e0      	ldr	r0, [r4, #12]
 8005640:	4298      	cmp	r0, r3
 8005642:	daa5      	bge.n	8005590 <_printf_i+0x140>
 8005644:	0018      	movs	r0, r3
 8005646:	e7a3      	b.n	8005590 <_printf_i+0x140>
 8005648:	0022      	movs	r2, r4
 800564a:	2301      	movs	r3, #1
 800564c:	9906      	ldr	r1, [sp, #24]
 800564e:	9805      	ldr	r0, [sp, #20]
 8005650:	9e07      	ldr	r6, [sp, #28]
 8005652:	3219      	adds	r2, #25
 8005654:	47b0      	blx	r6
 8005656:	1c43      	adds	r3, r0, #1
 8005658:	d098      	beq.n	800558c <_printf_i+0x13c>
 800565a:	3501      	adds	r5, #1
 800565c:	68e3      	ldr	r3, [r4, #12]
 800565e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	42ab      	cmp	r3, r5
 8005664:	dcf0      	bgt.n	8005648 <_printf_i+0x1f8>
 8005666:	e7e9      	b.n	800563c <_printf_i+0x1ec>
 8005668:	2500      	movs	r5, #0
 800566a:	e7f7      	b.n	800565c <_printf_i+0x20c>
 800566c:	08005a49 	.word	0x08005a49
 8005670:	08005a5a 	.word	0x08005a5a

08005674 <memchr>:
 8005674:	b2c9      	uxtb	r1, r1
 8005676:	1882      	adds	r2, r0, r2
 8005678:	4290      	cmp	r0, r2
 800567a:	d101      	bne.n	8005680 <memchr+0xc>
 800567c:	2000      	movs	r0, #0
 800567e:	4770      	bx	lr
 8005680:	7803      	ldrb	r3, [r0, #0]
 8005682:	428b      	cmp	r3, r1
 8005684:	d0fb      	beq.n	800567e <memchr+0xa>
 8005686:	3001      	adds	r0, #1
 8005688:	e7f6      	b.n	8005678 <memchr+0x4>

0800568a <memcpy>:
 800568a:	2300      	movs	r3, #0
 800568c:	b510      	push	{r4, lr}
 800568e:	429a      	cmp	r2, r3
 8005690:	d100      	bne.n	8005694 <memcpy+0xa>
 8005692:	bd10      	pop	{r4, pc}
 8005694:	5ccc      	ldrb	r4, [r1, r3]
 8005696:	54c4      	strb	r4, [r0, r3]
 8005698:	3301      	adds	r3, #1
 800569a:	e7f8      	b.n	800568e <memcpy+0x4>

0800569c <memmove>:
 800569c:	b510      	push	{r4, lr}
 800569e:	4288      	cmp	r0, r1
 80056a0:	d902      	bls.n	80056a8 <memmove+0xc>
 80056a2:	188b      	adds	r3, r1, r2
 80056a4:	4298      	cmp	r0, r3
 80056a6:	d303      	bcc.n	80056b0 <memmove+0x14>
 80056a8:	2300      	movs	r3, #0
 80056aa:	e007      	b.n	80056bc <memmove+0x20>
 80056ac:	5c8b      	ldrb	r3, [r1, r2]
 80056ae:	5483      	strb	r3, [r0, r2]
 80056b0:	3a01      	subs	r2, #1
 80056b2:	d2fb      	bcs.n	80056ac <memmove+0x10>
 80056b4:	bd10      	pop	{r4, pc}
 80056b6:	5ccc      	ldrb	r4, [r1, r3]
 80056b8:	54c4      	strb	r4, [r0, r3]
 80056ba:	3301      	adds	r3, #1
 80056bc:	429a      	cmp	r2, r3
 80056be:	d1fa      	bne.n	80056b6 <memmove+0x1a>
 80056c0:	e7f8      	b.n	80056b4 <memmove+0x18>
	...

080056c4 <_free_r>:
 80056c4:	b570      	push	{r4, r5, r6, lr}
 80056c6:	0005      	movs	r5, r0
 80056c8:	2900      	cmp	r1, #0
 80056ca:	d010      	beq.n	80056ee <_free_r+0x2a>
 80056cc:	1f0c      	subs	r4, r1, #4
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	da00      	bge.n	80056d6 <_free_r+0x12>
 80056d4:	18e4      	adds	r4, r4, r3
 80056d6:	0028      	movs	r0, r5
 80056d8:	f000 f918 	bl	800590c <__malloc_lock>
 80056dc:	4a1d      	ldr	r2, [pc, #116]	; (8005754 <_free_r+0x90>)
 80056de:	6813      	ldr	r3, [r2, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d105      	bne.n	80056f0 <_free_r+0x2c>
 80056e4:	6063      	str	r3, [r4, #4]
 80056e6:	6014      	str	r4, [r2, #0]
 80056e8:	0028      	movs	r0, r5
 80056ea:	f000 f917 	bl	800591c <__malloc_unlock>
 80056ee:	bd70      	pop	{r4, r5, r6, pc}
 80056f0:	42a3      	cmp	r3, r4
 80056f2:	d908      	bls.n	8005706 <_free_r+0x42>
 80056f4:	6821      	ldr	r1, [r4, #0]
 80056f6:	1860      	adds	r0, r4, r1
 80056f8:	4283      	cmp	r3, r0
 80056fa:	d1f3      	bne.n	80056e4 <_free_r+0x20>
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	1841      	adds	r1, r0, r1
 8005702:	6021      	str	r1, [r4, #0]
 8005704:	e7ee      	b.n	80056e4 <_free_r+0x20>
 8005706:	001a      	movs	r2, r3
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <_free_r+0x4e>
 800570e:	42a3      	cmp	r3, r4
 8005710:	d9f9      	bls.n	8005706 <_free_r+0x42>
 8005712:	6811      	ldr	r1, [r2, #0]
 8005714:	1850      	adds	r0, r2, r1
 8005716:	42a0      	cmp	r0, r4
 8005718:	d10b      	bne.n	8005732 <_free_r+0x6e>
 800571a:	6820      	ldr	r0, [r4, #0]
 800571c:	1809      	adds	r1, r1, r0
 800571e:	1850      	adds	r0, r2, r1
 8005720:	6011      	str	r1, [r2, #0]
 8005722:	4283      	cmp	r3, r0
 8005724:	d1e0      	bne.n	80056e8 <_free_r+0x24>
 8005726:	6818      	ldr	r0, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	1841      	adds	r1, r0, r1
 800572c:	6011      	str	r1, [r2, #0]
 800572e:	6053      	str	r3, [r2, #4]
 8005730:	e7da      	b.n	80056e8 <_free_r+0x24>
 8005732:	42a0      	cmp	r0, r4
 8005734:	d902      	bls.n	800573c <_free_r+0x78>
 8005736:	230c      	movs	r3, #12
 8005738:	602b      	str	r3, [r5, #0]
 800573a:	e7d5      	b.n	80056e8 <_free_r+0x24>
 800573c:	6821      	ldr	r1, [r4, #0]
 800573e:	1860      	adds	r0, r4, r1
 8005740:	4283      	cmp	r3, r0
 8005742:	d103      	bne.n	800574c <_free_r+0x88>
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	1841      	adds	r1, r0, r1
 800574a:	6021      	str	r1, [r4, #0]
 800574c:	6063      	str	r3, [r4, #4]
 800574e:	6054      	str	r4, [r2, #4]
 8005750:	e7ca      	b.n	80056e8 <_free_r+0x24>
 8005752:	46c0      	nop			; (mov r8, r8)
 8005754:	200001b4 	.word	0x200001b4

08005758 <sbrk_aligned>:
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	4e0f      	ldr	r6, [pc, #60]	; (8005798 <sbrk_aligned+0x40>)
 800575c:	000d      	movs	r5, r1
 800575e:	6831      	ldr	r1, [r6, #0]
 8005760:	0004      	movs	r4, r0
 8005762:	2900      	cmp	r1, #0
 8005764:	d102      	bne.n	800576c <sbrk_aligned+0x14>
 8005766:	f000 f8bf 	bl	80058e8 <_sbrk_r>
 800576a:	6030      	str	r0, [r6, #0]
 800576c:	0029      	movs	r1, r5
 800576e:	0020      	movs	r0, r4
 8005770:	f000 f8ba 	bl	80058e8 <_sbrk_r>
 8005774:	1c43      	adds	r3, r0, #1
 8005776:	d00a      	beq.n	800578e <sbrk_aligned+0x36>
 8005778:	2303      	movs	r3, #3
 800577a:	1cc5      	adds	r5, r0, #3
 800577c:	439d      	bics	r5, r3
 800577e:	42a8      	cmp	r0, r5
 8005780:	d007      	beq.n	8005792 <sbrk_aligned+0x3a>
 8005782:	1a29      	subs	r1, r5, r0
 8005784:	0020      	movs	r0, r4
 8005786:	f000 f8af 	bl	80058e8 <_sbrk_r>
 800578a:	1c43      	adds	r3, r0, #1
 800578c:	d101      	bne.n	8005792 <sbrk_aligned+0x3a>
 800578e:	2501      	movs	r5, #1
 8005790:	426d      	negs	r5, r5
 8005792:	0028      	movs	r0, r5
 8005794:	bd70      	pop	{r4, r5, r6, pc}
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	200001b8 	.word	0x200001b8

0800579c <_malloc_r>:
 800579c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800579e:	2203      	movs	r2, #3
 80057a0:	1ccb      	adds	r3, r1, #3
 80057a2:	4393      	bics	r3, r2
 80057a4:	3308      	adds	r3, #8
 80057a6:	0006      	movs	r6, r0
 80057a8:	001f      	movs	r7, r3
 80057aa:	2b0c      	cmp	r3, #12
 80057ac:	d232      	bcs.n	8005814 <_malloc_r+0x78>
 80057ae:	270c      	movs	r7, #12
 80057b0:	42b9      	cmp	r1, r7
 80057b2:	d831      	bhi.n	8005818 <_malloc_r+0x7c>
 80057b4:	0030      	movs	r0, r6
 80057b6:	f000 f8a9 	bl	800590c <__malloc_lock>
 80057ba:	4d32      	ldr	r5, [pc, #200]	; (8005884 <_malloc_r+0xe8>)
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	001c      	movs	r4, r3
 80057c0:	2c00      	cmp	r4, #0
 80057c2:	d12e      	bne.n	8005822 <_malloc_r+0x86>
 80057c4:	0039      	movs	r1, r7
 80057c6:	0030      	movs	r0, r6
 80057c8:	f7ff ffc6 	bl	8005758 <sbrk_aligned>
 80057cc:	0004      	movs	r4, r0
 80057ce:	1c43      	adds	r3, r0, #1
 80057d0:	d11e      	bne.n	8005810 <_malloc_r+0x74>
 80057d2:	682c      	ldr	r4, [r5, #0]
 80057d4:	0025      	movs	r5, r4
 80057d6:	2d00      	cmp	r5, #0
 80057d8:	d14a      	bne.n	8005870 <_malloc_r+0xd4>
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	0029      	movs	r1, r5
 80057de:	18e3      	adds	r3, r4, r3
 80057e0:	0030      	movs	r0, r6
 80057e2:	9301      	str	r3, [sp, #4]
 80057e4:	f000 f880 	bl	80058e8 <_sbrk_r>
 80057e8:	9b01      	ldr	r3, [sp, #4]
 80057ea:	4283      	cmp	r3, r0
 80057ec:	d143      	bne.n	8005876 <_malloc_r+0xda>
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	3703      	adds	r7, #3
 80057f2:	1aff      	subs	r7, r7, r3
 80057f4:	2303      	movs	r3, #3
 80057f6:	439f      	bics	r7, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	2f0c      	cmp	r7, #12
 80057fc:	d200      	bcs.n	8005800 <_malloc_r+0x64>
 80057fe:	270c      	movs	r7, #12
 8005800:	0039      	movs	r1, r7
 8005802:	0030      	movs	r0, r6
 8005804:	f7ff ffa8 	bl	8005758 <sbrk_aligned>
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	d034      	beq.n	8005876 <_malloc_r+0xda>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	19df      	adds	r7, r3, r7
 8005810:	6027      	str	r7, [r4, #0]
 8005812:	e013      	b.n	800583c <_malloc_r+0xa0>
 8005814:	2b00      	cmp	r3, #0
 8005816:	dacb      	bge.n	80057b0 <_malloc_r+0x14>
 8005818:	230c      	movs	r3, #12
 800581a:	2500      	movs	r5, #0
 800581c:	6033      	str	r3, [r6, #0]
 800581e:	0028      	movs	r0, r5
 8005820:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005822:	6822      	ldr	r2, [r4, #0]
 8005824:	1bd1      	subs	r1, r2, r7
 8005826:	d420      	bmi.n	800586a <_malloc_r+0xce>
 8005828:	290b      	cmp	r1, #11
 800582a:	d917      	bls.n	800585c <_malloc_r+0xc0>
 800582c:	19e2      	adds	r2, r4, r7
 800582e:	6027      	str	r7, [r4, #0]
 8005830:	42a3      	cmp	r3, r4
 8005832:	d111      	bne.n	8005858 <_malloc_r+0xbc>
 8005834:	602a      	str	r2, [r5, #0]
 8005836:	6863      	ldr	r3, [r4, #4]
 8005838:	6011      	str	r1, [r2, #0]
 800583a:	6053      	str	r3, [r2, #4]
 800583c:	0030      	movs	r0, r6
 800583e:	0025      	movs	r5, r4
 8005840:	f000 f86c 	bl	800591c <__malloc_unlock>
 8005844:	2207      	movs	r2, #7
 8005846:	350b      	adds	r5, #11
 8005848:	1d23      	adds	r3, r4, #4
 800584a:	4395      	bics	r5, r2
 800584c:	1aea      	subs	r2, r5, r3
 800584e:	429d      	cmp	r5, r3
 8005850:	d0e5      	beq.n	800581e <_malloc_r+0x82>
 8005852:	1b5b      	subs	r3, r3, r5
 8005854:	50a3      	str	r3, [r4, r2]
 8005856:	e7e2      	b.n	800581e <_malloc_r+0x82>
 8005858:	605a      	str	r2, [r3, #4]
 800585a:	e7ec      	b.n	8005836 <_malloc_r+0x9a>
 800585c:	6862      	ldr	r2, [r4, #4]
 800585e:	42a3      	cmp	r3, r4
 8005860:	d101      	bne.n	8005866 <_malloc_r+0xca>
 8005862:	602a      	str	r2, [r5, #0]
 8005864:	e7ea      	b.n	800583c <_malloc_r+0xa0>
 8005866:	605a      	str	r2, [r3, #4]
 8005868:	e7e8      	b.n	800583c <_malloc_r+0xa0>
 800586a:	0023      	movs	r3, r4
 800586c:	6864      	ldr	r4, [r4, #4]
 800586e:	e7a7      	b.n	80057c0 <_malloc_r+0x24>
 8005870:	002c      	movs	r4, r5
 8005872:	686d      	ldr	r5, [r5, #4]
 8005874:	e7af      	b.n	80057d6 <_malloc_r+0x3a>
 8005876:	230c      	movs	r3, #12
 8005878:	0030      	movs	r0, r6
 800587a:	6033      	str	r3, [r6, #0]
 800587c:	f000 f84e 	bl	800591c <__malloc_unlock>
 8005880:	e7cd      	b.n	800581e <_malloc_r+0x82>
 8005882:	46c0      	nop			; (mov r8, r8)
 8005884:	200001b4 	.word	0x200001b4

08005888 <_realloc_r>:
 8005888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800588a:	0007      	movs	r7, r0
 800588c:	000e      	movs	r6, r1
 800588e:	0014      	movs	r4, r2
 8005890:	2900      	cmp	r1, #0
 8005892:	d105      	bne.n	80058a0 <_realloc_r+0x18>
 8005894:	0011      	movs	r1, r2
 8005896:	f7ff ff81 	bl	800579c <_malloc_r>
 800589a:	0005      	movs	r5, r0
 800589c:	0028      	movs	r0, r5
 800589e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058a0:	2a00      	cmp	r2, #0
 80058a2:	d103      	bne.n	80058ac <_realloc_r+0x24>
 80058a4:	f7ff ff0e 	bl	80056c4 <_free_r>
 80058a8:	0025      	movs	r5, r4
 80058aa:	e7f7      	b.n	800589c <_realloc_r+0x14>
 80058ac:	f000 f83e 	bl	800592c <_malloc_usable_size_r>
 80058b0:	9001      	str	r0, [sp, #4]
 80058b2:	4284      	cmp	r4, r0
 80058b4:	d803      	bhi.n	80058be <_realloc_r+0x36>
 80058b6:	0035      	movs	r5, r6
 80058b8:	0843      	lsrs	r3, r0, #1
 80058ba:	42a3      	cmp	r3, r4
 80058bc:	d3ee      	bcc.n	800589c <_realloc_r+0x14>
 80058be:	0021      	movs	r1, r4
 80058c0:	0038      	movs	r0, r7
 80058c2:	f7ff ff6b 	bl	800579c <_malloc_r>
 80058c6:	1e05      	subs	r5, r0, #0
 80058c8:	d0e8      	beq.n	800589c <_realloc_r+0x14>
 80058ca:	9b01      	ldr	r3, [sp, #4]
 80058cc:	0022      	movs	r2, r4
 80058ce:	429c      	cmp	r4, r3
 80058d0:	d900      	bls.n	80058d4 <_realloc_r+0x4c>
 80058d2:	001a      	movs	r2, r3
 80058d4:	0031      	movs	r1, r6
 80058d6:	0028      	movs	r0, r5
 80058d8:	f7ff fed7 	bl	800568a <memcpy>
 80058dc:	0031      	movs	r1, r6
 80058de:	0038      	movs	r0, r7
 80058e0:	f7ff fef0 	bl	80056c4 <_free_r>
 80058e4:	e7da      	b.n	800589c <_realloc_r+0x14>
	...

080058e8 <_sbrk_r>:
 80058e8:	2300      	movs	r3, #0
 80058ea:	b570      	push	{r4, r5, r6, lr}
 80058ec:	4d06      	ldr	r5, [pc, #24]	; (8005908 <_sbrk_r+0x20>)
 80058ee:	0004      	movs	r4, r0
 80058f0:	0008      	movs	r0, r1
 80058f2:	602b      	str	r3, [r5, #0]
 80058f4:	f7fb f93e 	bl	8000b74 <_sbrk>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	d103      	bne.n	8005904 <_sbrk_r+0x1c>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d000      	beq.n	8005904 <_sbrk_r+0x1c>
 8005902:	6023      	str	r3, [r4, #0]
 8005904:	bd70      	pop	{r4, r5, r6, pc}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	200001bc 	.word	0x200001bc

0800590c <__malloc_lock>:
 800590c:	b510      	push	{r4, lr}
 800590e:	4802      	ldr	r0, [pc, #8]	; (8005918 <__malloc_lock+0xc>)
 8005910:	f000 f814 	bl	800593c <__retarget_lock_acquire_recursive>
 8005914:	bd10      	pop	{r4, pc}
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	200001c0 	.word	0x200001c0

0800591c <__malloc_unlock>:
 800591c:	b510      	push	{r4, lr}
 800591e:	4802      	ldr	r0, [pc, #8]	; (8005928 <__malloc_unlock+0xc>)
 8005920:	f000 f80d 	bl	800593e <__retarget_lock_release_recursive>
 8005924:	bd10      	pop	{r4, pc}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	200001c0 	.word	0x200001c0

0800592c <_malloc_usable_size_r>:
 800592c:	1f0b      	subs	r3, r1, #4
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	1f18      	subs	r0, r3, #4
 8005932:	2b00      	cmp	r3, #0
 8005934:	da01      	bge.n	800593a <_malloc_usable_size_r+0xe>
 8005936:	580b      	ldr	r3, [r1, r0]
 8005938:	18c0      	adds	r0, r0, r3
 800593a:	4770      	bx	lr

0800593c <__retarget_lock_acquire_recursive>:
 800593c:	4770      	bx	lr

0800593e <__retarget_lock_release_recursive>:
 800593e:	4770      	bx	lr

08005940 <_init>:
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005942:	46c0      	nop			; (mov r8, r8)
 8005944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005946:	bc08      	pop	{r3}
 8005948:	469e      	mov	lr, r3
 800594a:	4770      	bx	lr

0800594c <_fini>:
 800594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005952:	bc08      	pop	{r3}
 8005954:	469e      	mov	lr, r3
 8005956:	4770      	bx	lr
